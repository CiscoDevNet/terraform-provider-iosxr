//go:build ignore
// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	{{- if hasId .Attributes }}
	"fmt"
	{{- end}}
	{{ $strconv := false }}{{ range .Attributes}}{{ if and (eq .Type "Int64") (ne .Id true) (ne .Reference true)}}{{ $strconv = true }}{{ end}}{{- end}}
	{{- if $strconv }}
	"strconv"
	{{- end}}

	"github.com/hashicorp/terraform-plugin-framework/types"
	{{ $sjson := false }}{{ range .Attributes}}{{ if and (ne .Id true) (ne .Reference true)}}{{ $sjson = true }}{{ end}}{{- end}}
	{{- if $sjson }}
	"github.com/tidwall/sjson"
	{{- end}}
	{{ $gjson := false }}{{ range .Attributes}}{{ if and (ne .Id true) (ne .Reference true) (ne .WriteOnly true)}}{{ $gjson = true }}{{ end}}{{- end}}
	{{- if $gjson }}
	"github.com/tidwall/gjson"
	{{- end}}
)

type {{camelCase .Name}} struct {
	Device types.String `tfsdk:"device"`
	Id     types.String `tfsdk:"id"`
{{- range .Attributes}}
	{{toGoName .YangName}} types.{{.Type}} `tfsdk:"{{.TfName}}"`
{{- end}}
}

func (data {{camelCase .Name}}) getPath() string {
{{- if hasId .Attributes}}
	return fmt.Sprintf("{{.Path}}"{{range .Attributes}}{{if or (eq .Id true) (eq .Reference true)}}, data.{{toGoName .YangName}}.Value{{end}}{{end}})
{{- else}}
	return "{{.Path}}"
{{- end}}
}

func (data {{camelCase .Name}}) toBody() string {
	body := "{}"
	{{ range $index, $item := .Attributes -}}
	{{ if and (ne .Reference true) (ne .Id true)}}
	if !data.{{toGoName .YangName}}.Null && !data.{{toGoName .YangName}}.Unknown {
		{{- if eq .Type "Int64"}}
		body, _ = sjson.Set(body, "{{toJsonPath .YangName}}", strconv.FormatInt(data.{{toGoName .YangName}}.Value, 10))
		{{- else if eq .Type "Bool"}}
		if data.{{toGoName .YangName}}.Value {
			body, _ = sjson.Set(body, "{{toJsonPath .YangName}}", map[string]string{})
		}
		{{- else if eq .Type "String"}}
		body, _ = sjson.Set(body, "{{toJsonPath .YangName}}", data.{{toGoName .YangName}}.Value)
		{{- end}}
	}
	{{- end}}
	{{- end}}

	return body
}

func (data *{{camelCase .Name}}) fromBody(res []byte) {
	{{- range .Attributes}}
	{{- if and (ne .Reference true) (ne .Id true) (ne .WriteOnly true)}}
	if value := gjson.GetBytes(res, "{{toJsonPath .YangName}}"); value.Exists() {
		{{- if eq .Type "Int64"}}
		data.{{toGoName .YangName}}.Value = value.Int()
		{{- else if eq .Type "Bool"}}
		data.{{toGoName .YangName}}.Value = true
		{{- else if eq .Type "String"}}
		data.{{toGoName .YangName}}.Value = value.String()
		{{- end}}
	}
	{{- end}}
	{{- end}}
}

func (data *{{camelCase .Name}}) fromPlan(plan {{camelCase .Name}}) {
	data.Device = plan.Device
	{{- range .Attributes}}
	{{- if or (eq .Reference true) (eq .Id true) (eq .WriteOnly true)}}
	data.{{toGoName .YangName}}.Value = plan.{{toGoName .YangName}}.Value
	{{- end}}
	{{- end}}
}