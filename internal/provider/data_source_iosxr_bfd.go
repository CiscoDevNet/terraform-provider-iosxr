// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &BFDDataSource{}
	_ datasource.DataSourceWithConfigure = &BFDDataSource{}
)

func NewBFDDataSource() datasource.DataSource {
	return &BFDDataSource{}
}

type BFDDataSource struct {
	client *client.Client
}

func (d *BFDDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_bfd"
}

func (d *BFDDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the BFD configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"echo_disable": schema.BoolAttribute{
				MarkdownDescription: "Disable BFD echo mode",
				Computed:            true,
			},
			"echo_latency_detect_percentage": schema.Int64Attribute{
				MarkdownDescription: "Percentage of detection time to consider as bad latency",
				Computed:            true,
			},
			"echo_latency_detect_count": schema.Int64Attribute{
				MarkdownDescription: "Count of consecutive bad latency packets to take session down",
				Computed:            true,
			},
			"echo_startup_validate_force": schema.BoolAttribute{
				MarkdownDescription: "Ignore remote 'Required Min Echo RX Interval' setting",
				Computed:            true,
			},
			"echo_ipv4_source": schema.StringAttribute{
				MarkdownDescription: "BFD echo source IP address",
				Computed:            true,
			},
			"echo_ipv4_bundle_per_member_preferred_minimum_interval": schema.Int64Attribute{
				MarkdownDescription: "The preferred minimum interval (in ms) for the BFD session",
				Computed:            true,
			},
			"trap_singlehop_pre_mapped": schema.BoolAttribute{
				MarkdownDescription: "Configure BFD trap pre-mapped",
				Computed:            true,
			},
			"multipath_locations": schema.ListNestedAttribute{
				MarkdownDescription: "Specify a location",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"location_name": schema.StringAttribute{
							MarkdownDescription: "Specify a location",
							Computed:            true,
						},
					},
				},
			},
			"multihop_ttl_drop_threshold": schema.Int64Attribute{
				MarkdownDescription: "TTL Drop Threshold",
				Computed:            true,
			},
			"dampening_initial_wait": schema.Int64Attribute{
				MarkdownDescription: "Initial delay before bringing up session",
				Computed:            true,
			},
			"dampening_secondary_wait": schema.Int64Attribute{
				MarkdownDescription: "Secondary delay before bringing up session",
				Computed:            true,
			},
			"dampening_maximum_wait": schema.Int64Attribute{
				MarkdownDescription: "Maximum delay before bringing up session",
				Computed:            true,
			},
			"dampening_threshold": schema.Int64Attribute{
				MarkdownDescription: "Stability threshold to enable dampening",
				Computed:            true,
			},
			"dampening_extensions_down_monitoring": schema.BoolAttribute{
				MarkdownDescription: "Enable DOWN state session monitoring extensions",
				Computed:            true,
			},
			"dampening_disable": schema.BoolAttribute{
				MarkdownDescription: "Disable BFD dampening",
				Computed:            true,
			},
			"dampening_bundle_member_l3_only_mode": schema.BoolAttribute{
				MarkdownDescription: "Apply immediate dampening and only when failure is L3 specific",
				Computed:            true,
			},
			"dampening_bundle_member_initial_wait": schema.Int64Attribute{
				MarkdownDescription: "Initial delay before bringing up session",
				Computed:            true,
			},
			"dampening_bundle_member_secondary_wait": schema.Int64Attribute{
				MarkdownDescription: "Secondary delay before bringing up session",
				Computed:            true,
			},
			"dampening_bundle_member_maximum_wait": schema.Int64Attribute{
				MarkdownDescription: "Maximum delay before bringing up session",
				Computed:            true,
			},
			"bundle_coexistence_bob_blb_inherit": schema.BoolAttribute{
				MarkdownDescription: "Use inheritence mechanism",
				Computed:            true,
			},
			"bundle_coexistence_bob_blb_logical": schema.BoolAttribute{
				MarkdownDescription: "Use BFD logical Bundle natively",
				Computed:            true,
			},
			"interfaces": schema.ListNestedAttribute{
				MarkdownDescription: "Configure BFD on an interface",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"interface_name": schema.StringAttribute{
							MarkdownDescription: "Configure BFD on an interface",
							Computed:            true,
						},
						"echo_disable": schema.BoolAttribute{
							MarkdownDescription: "Disable BFD echo mode for this interface",
							Computed:            true,
						},
						"echo_ipv4_source": schema.StringAttribute{
							MarkdownDescription: "BFD echo source IP address",
							Computed:            true,
						},
						"ipv6_checksum_disable": schema.BoolAttribute{
							MarkdownDescription: "Disable BFD ipv6 checksum mode for this interface",
							Computed:            true,
						},
						"disable": schema.BoolAttribute{
							MarkdownDescription: "Disable BFD for this interface",
							Computed:            true,
						},
						"local_address": schema.StringAttribute{
							MarkdownDescription: "Local address to be used by BFD for this interface",
							Computed:            true,
						},
						"tx_interval": schema.Int64Attribute{
							MarkdownDescription: "BFD TX Interval for this interface in microseconds",
							Computed:            true,
						},
						"rx_interval": schema.Int64Attribute{
							MarkdownDescription: "BFD RX Interval for this interface in microseconds",
							Computed:            true,
						},
						"multiplier": schema.Int64Attribute{
							MarkdownDescription: "BFD multiplier for this interface",
							Computed:            true,
						},
					},
				},
			},
			"ipv6_checksum_disable": schema.BoolAttribute{
				MarkdownDescription: "Disable BFD checksum",
				Computed:            true,
			},
		},
	}
}

func (d *BFDDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *BFDDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config BFDData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
