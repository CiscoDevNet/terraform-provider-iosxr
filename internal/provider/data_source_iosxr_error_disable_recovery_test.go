// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxrErrorDisableRecovery(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_session_down_interval", "30"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_discovery_timeout_interval", "40"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_capabilities_conflict_interval", "50"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_miswired_interval", "60"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_link_fault_interval", "70"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_dying_gasp_interval", "80"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_critical_event_interval", "90"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_threshold_breached_interval", "92"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "stp_bpdu_guard_interval", "94"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "stp_legacy_bpdu_interval", "96"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "cluster_udld_interval", "98"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "cluster_minlinks_interval", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "udld_unidirectional_interval", "110"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "udld_neighbor_mismatch_interval", "120"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "udld_timeout_interval", "140"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "udld_loopback_interval", "150"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "pvrst_pvid_mismatch_interval", "160"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "l2vpn_bport_mac_move_interval", "170"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "ot_track_state_change_interval", "180"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_error_disable_recovery.test", "link_oam_dampening_interval", "190"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrErrorDisableRecoveryConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

func testAccDataSourceIosxrErrorDisableRecoveryConfig() string {
	config := `resource "iosxr_error_disable_recovery" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	link_oam_session_down_interval = 30` + "\n"
	config += `	link_oam_discovery_timeout_interval = 40` + "\n"
	config += `	link_oam_capabilities_conflict_interval = 50` + "\n"
	config += `	link_oam_miswired_interval = 60` + "\n"
	config += `	link_oam_link_fault_interval = 70` + "\n"
	config += `	link_oam_dying_gasp_interval = 80` + "\n"
	config += `	link_oam_critical_event_interval = 90` + "\n"
	config += `	link_oam_threshold_breached_interval = 92` + "\n"
	config += `	stp_bpdu_guard_interval = 94` + "\n"
	config += `	stp_legacy_bpdu_interval = 96` + "\n"
	config += `	cluster_udld_interval = 98` + "\n"
	config += `	cluster_minlinks_interval = 100` + "\n"
	config += `	udld_unidirectional_interval = 110` + "\n"
	config += `	udld_neighbor_mismatch_interval = 120` + "\n"
	config += `	udld_timeout_interval = 140` + "\n"
	config += `	udld_loopback_interval = 150` + "\n"
	config += `	pvrst_pvid_mismatch_interval = 160` + "\n"
	config += `	l2vpn_bport_mac_move_interval = 170` + "\n"
	config += `	ot_track_state_change_interval = 180` + "\n"
	config += `	link_oam_dampening_interval = 190` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxr_error_disable_recovery" "test" {
			depends_on = [iosxr_error_disable_recovery.test]
		}
	`
	return config
}
