// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxrEVPNEVI(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "description", "My Description"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "load_balancing", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "load_balancing_flow_label_static", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "bgp_rd_two_byte_as_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "bgp_rd_two_byte_as_assigned_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "bgp_route_target_import_two_byte_as_format.0.as_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "bgp_route_target_import_two_byte_as_format.0.assigned_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "bgp_route_target_export_ipv4_address_format.0.ipv4_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "bgp_route_target_export_ipv4_address_format.0.assigned_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "bgp_route_policy_import", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "bgp_route_policy_export", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "advertise_mac", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "unknown_unicast_suppression", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "control_word_disable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "etree", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "etree_leaf", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_evi.test", "etree_rt_leaf", "true"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrEVPNEVIPrerequisitesConfig + testAccDataSourceIosxrEVPNEVIConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

const testAccDataSourceIosxrEVPNEVIPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies/route-policy[route-policy-name=ROUTE_POLICY_1]"
	attributes = {
		"route-policy-name" = "ROUTE_POLICY_1"
		"rpl-route-policy" = "route-policy ROUTE_POLICY_1\n  pass\nend-policy\n"
	}
}

`

func testAccDataSourceIosxrEVPNEVIConfig() string {
	config := `resource "iosxr_evpn_evi" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	vpn_id = 1234` + "\n"
	config += `	description = "My Description"` + "\n"
	config += `	load_balancing = true` + "\n"
	config += `	load_balancing_flow_label_static = true` + "\n"
	config += `	bgp_rd_two_byte_as_number = 1` + "\n"
	config += `	bgp_rd_two_byte_as_assigned_number = 1` + "\n"
	config += `	bgp_route_target_import_two_byte_as_format = [{` + "\n"
	config += `		as_number = 1` + "\n"
	config += `		assigned_number = 1` + "\n"
	config += `	}]` + "\n"
	config += `	bgp_route_target_export_ipv4_address_format = [{` + "\n"
	config += `		ipv4_address = "1.1.1.1"` + "\n"
	config += `		assigned_number = 1` + "\n"
	config += `	}]` + "\n"
	config += `	bgp_route_policy_import = "ROUTE_POLICY_1"` + "\n"
	config += `	bgp_route_policy_export = "ROUTE_POLICY_1"` + "\n"
	config += `	advertise_mac = true` + "\n"
	config += `	unknown_unicast_suppression = true` + "\n"
	config += `	control_word_disable = true` + "\n"
	config += `	etree = true` + "\n"
	config += `	etree_leaf = false` + "\n"
	config += `	etree_rt_leaf = true` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxr_evpn_evi" "test" {
			vpn_id = 1234
			depends_on = [iosxr_evpn_evi.test]
		}
	`
	return config
}
