// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSource

func TestAccDataSourceIosxrEVPNSegmentRoutingSRv6EVI(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_segment_routing_srv6_evi.test", "description", "My Description"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_segment_routing_srv6_evi.test", "bgp_route_target_import_two_byte_as_format.0.as_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_segment_routing_srv6_evi.test", "bgp_route_target_import_two_byte_as_format.0.assigned_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_segment_routing_srv6_evi.test", "bgp_route_target_export_two_byte_as_format.0.as_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_segment_routing_srv6_evi.test", "bgp_route_target_export_two_byte_as_format.0.assigned_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_segment_routing_srv6_evi.test", "advertise_mac", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_evpn_segment_routing_srv6_evi.test", "locators.0.locator_name", "LOC12"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrEVPNSegmentRoutingSRv6EVIPrerequisitesConfig + testAccDataSourceIosxrEVPNSegmentRoutingSRv6EVIConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

// End of section. //template:end testAccDataSource

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccDataSourceIosxrEVPNSegmentRoutingSRv6EVIPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-l2vpn-cfg:/evpn"
	attributes = {
	}
}

resource "iosxr_gnmi" "PreReq1" {
	path = "Cisco-IOS-XR-um-l2vpn-cfg:/evpn/segment-routing/srv6"
	attributes = {
	}
	depends_on = [iosxr_gnmi.PreReq0, ]
}

resource "iosxr_gnmi" "PreReq2" {
	path = "Cisco-IOS-XR-um-l2vpn-cfg:/evpn/segment-routing/srv6/locators/locator[locator-name=LOC1]"
	attributes = {
		"locator-name" = "LOC1"
	}
	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, ]
}

resource "iosxr_gnmi" "PreReq3" {
	path = "Cisco-IOS-XR-um-l2vpn-cfg:/evpn/interface/interface[interface-name=GigabitEthernet0/0/0/1]"
	attributes = {
		"ethernet-segment/identifier/type/zero/esi" = "01.02.03.04.05.06.07.08.09"
	}
	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, iosxr_gnmi.PreReq2, ]
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSourceConfig

func testAccDataSourceIosxrEVPNSegmentRoutingSRv6EVIConfig() string {
	config := `resource "iosxr_evpn_segment_routing_srv6_evi" "test" {` + "\n"
	config += `	vpn_id = 1235` + "\n"
	config += `	description = "My Description"` + "\n"
	config += `	bgp_route_target_import_two_byte_as_format = [{` + "\n"
	config += `		as_number = 1` + "\n"
	config += `		assigned_number = 1` + "\n"
	config += `	}]` + "\n"
	config += `	bgp_route_target_export_two_byte_as_format = [{` + "\n"
	config += `		as_number = 1` + "\n"
	config += `		assigned_number = 1` + "\n"
	config += `	}]` + "\n"
	config += `	advertise_mac = true` + "\n"
	config += `	locators = [{` + "\n"
	config += `		locator_name = "LOC12"` + "\n"
	config += `	}]` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, iosxr_gnmi.PreReq2, iosxr_gnmi.PreReq3, ]` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxr_evpn_segment_routing_srv6_evi" "test" {
			vpn_id = 1235
			depends_on = [iosxr_evpn_segment_routing_srv6_evi.test]
		}
	`
	return config
}

// End of section. //template:end testAccDataSourceConfig
