// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin model

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &FlowMonitorMapDataSource{}
	_ datasource.DataSourceWithConfigure = &FlowMonitorMapDataSource{}
)

func NewFlowMonitorMapDataSource() datasource.DataSource {
	return &FlowMonitorMapDataSource{}
}

type FlowMonitorMapDataSource struct {
	data *IosxrProviderData
}

func (d *FlowMonitorMapDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_flow_monitor_map"
}

func (d *FlowMonitorMapDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Flow Monitor Map configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "Monitor map name",
				Required:            true,
			},
			"exporters": schema.ListNestedAttribute{
				MarkdownDescription: "Specify flow exporter map name",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "Specify flow exporter map name",
							Computed:            true,
						},
					},
				},
			},
			"option_outphysint": schema.BoolAttribute{
				MarkdownDescription: "export output interfaces as physical interfaces",
				Computed:            true,
			},
			"option_filtered": schema.BoolAttribute{
				MarkdownDescription: "Enable filtering of records",
				Computed:            true,
			},
			"option_bgpattr": schema.BoolAttribute{
				MarkdownDescription: "export bgp attributes AS_PATH and STD_COMMUNITY",
				Computed:            true,
			},
			"option_outbundlemember": schema.BoolAttribute{
				MarkdownDescription: "export output physical interfaces of bundle interface",
				Computed:            true,
			},
			"record_ipv4": schema.BoolAttribute{
				MarkdownDescription: "IPv4 raw record format",
				Computed:            true,
			},
			"record_ipv4_destination": schema.BoolAttribute{
				MarkdownDescription: "IPv4 Destination Based NetFlow Accounting",
				Computed:            true,
			},
			"record_ipv4_destination_tos": schema.BoolAttribute{
				MarkdownDescription: "IPv4 Destination Based NetFlow Accounting TOS",
				Computed:            true,
			},
			"record_ipv4_as": schema.BoolAttribute{
				MarkdownDescription: "Autonomous System based aggregation",
				Computed:            true,
			},
			"record_ipv4_protocol_port": schema.BoolAttribute{
				MarkdownDescription: "Protocol-Port based aggregation",
				Computed:            true,
			},
			"record_ipv4_prefix": schema.BoolAttribute{
				MarkdownDescription: "Prefix based aggregation",
				Computed:            true,
			},
			"record_ipv4_source_prefix": schema.BoolAttribute{
				MarkdownDescription: "source prefix based aggregation",
				Computed:            true,
			},
			"record_ipv4_destination_prefix": schema.BoolAttribute{
				MarkdownDescription: "Destination prefix based aggregation",
				Computed:            true,
			},
			"record_ipv4_as_tos": schema.BoolAttribute{
				MarkdownDescription: "AS-TOS based aggregation",
				Computed:            true,
			},
			"record_ipv4_protocol_port_tos": schema.BoolAttribute{
				MarkdownDescription: "Protocol, port and tos based aggregation",
				Computed:            true,
			},
			"record_ipv4_prefix_tos": schema.BoolAttribute{
				MarkdownDescription: "Prefix TOS based aggregation",
				Computed:            true,
			},
			"record_ipv4_source_prefix_tos": schema.BoolAttribute{
				MarkdownDescription: "Source, Prefix and TOS based aggregation",
				Computed:            true,
			},
			"record_ipv4_destination_prefix_tos": schema.BoolAttribute{
				MarkdownDescription: "Destination, prefix and tos based aggregation",
				Computed:            true,
			},
			"record_ipv4_prefix_port": schema.BoolAttribute{
				MarkdownDescription: "Prefix port based aggregation",
				Computed:            true,
			},
			"record_ipv4_bgp_nexthop_tos": schema.BoolAttribute{
				MarkdownDescription: "BGP, nexthop and tos based aggregation",
				Computed:            true,
			},
			"record_ipv4_peer_as": schema.BoolAttribute{
				MarkdownDescription: "Record peer AS",
				Computed:            true,
			},
			"record_ipv4_gtp": schema.BoolAttribute{
				MarkdownDescription: "IPV4 gtp record format",
				Computed:            true,
			},
			"record_ipv6": schema.BoolAttribute{
				MarkdownDescription: "IPv6 raw record format",
				Computed:            true,
			},
			"record_ipv6_destination": schema.BoolAttribute{
				MarkdownDescription: "IPv6 Destination Based NetFlow Accounting",
				Computed:            true,
			},
			"record_ipv6_peer_as": schema.BoolAttribute{
				MarkdownDescription: "Record peer AS",
				Computed:            true,
			},
			"record_ipv6_gtp": schema.BoolAttribute{
				MarkdownDescription: "IPV6 gtp record format",
				Computed:            true,
			},
			"record_mpls": schema.BoolAttribute{
				MarkdownDescription: "MPLS record format",
				Computed:            true,
			},
			"record_mpls_ipv4_fields": schema.BoolAttribute{
				MarkdownDescription: "MPLS with IPv4 fields format",
				Computed:            true,
			},
			"record_mpls_ipv6_fields": schema.BoolAttribute{
				MarkdownDescription: "MPLS with IPv6 fields format",
				Computed:            true,
			},
			"record_mpls_ipv4_ipv6_fields": schema.BoolAttribute{
				MarkdownDescription: "MPLS with IPv4 and IPv6 fields format",
				Computed:            true,
			},
			"record_mpls_labels": schema.Int64Attribute{
				MarkdownDescription: "Labels to be used for Hashing",
				Computed:            true,
			},
			"record_map_t": schema.BoolAttribute{
				MarkdownDescription: "map-t translation based Netflow",
				Computed:            true,
			},
			"record_sflow": schema.BoolAttribute{
				MarkdownDescription: "sFlow based flow",
				Computed:            true,
			},
			"record_datalink_record": schema.BoolAttribute{
				MarkdownDescription: "Layer2 traffic based flow",
				Computed:            true,
			},
			"record_default_rtp": schema.BoolAttribute{
				MarkdownDescription: "Default RTP record format",
				Computed:            true,
			},
			"record_default_mdi": schema.BoolAttribute{
				MarkdownDescription: "Default MDI record format",
				Computed:            true,
			},
			"cache_entries": schema.Int64Attribute{
				MarkdownDescription: "Specify the number of entries in the flow cache",
				Computed:            true,
			},
			"cache_timeout_active": schema.Int64Attribute{
				MarkdownDescription: "Specify the active flow timeout",
				Computed:            true,
			},
			"cache_timeout_inactive": schema.Int64Attribute{
				MarkdownDescription: "Specify the inactive flow timeout",
				Computed:            true,
			},
			"cache_timeout_update": schema.Int64Attribute{
				MarkdownDescription: "Specify the update timeout",
				Computed:            true,
			},
			"cache_timeout_rate_limit": schema.Int64Attribute{
				MarkdownDescription: "Maximum number of entries to age each second",
				Computed:            true,
			},
			"cache_permanent": schema.BoolAttribute{
				MarkdownDescription: "Disable removal of entries from flow cache",
				Computed:            true,
			},
			"cache_immediate": schema.BoolAttribute{
				MarkdownDescription: "Immediate removal of entries from flow cache",
				Computed:            true,
			},
			"hw_cache_timeout_inactive": schema.Int64Attribute{
				MarkdownDescription: "Specify the inactive timeout",
				Computed:            true,
			},
			"sflow_options": schema.BoolAttribute{
				MarkdownDescription: "submode to configure sFlow related options",
				Computed:            true,
			},
			"sflow_options_extended_router": schema.BoolAttribute{
				MarkdownDescription: "Enable extended-router flow data type",
				Computed:            true,
			},
			"sflow_options_extended_gateway": schema.BoolAttribute{
				MarkdownDescription: "Enable extended-gateway flow data type",
				Computed:            true,
			},
			"sflow_options_extended_ipv4_tunnel_egress": schema.BoolAttribute{
				MarkdownDescription: "Enable extended-ipv4-tunnel-egress flow data type",
				Computed:            true,
			},
			"sflow_options_extended_ipv6_tunnel_egress": schema.BoolAttribute{
				MarkdownDescription: "Enable extended-ipv6-tunnel-egress flow data type",
				Computed:            true,
			},
			"sflow_options_if_counters_polling_interval": schema.Int64Attribute{
				MarkdownDescription: "Enable if-counters counter sampling rate",
				Computed:            true,
			},
			"sflow_options_sample_header_size": schema.Int64Attribute{
				MarkdownDescription: "Specify maximum sample-header size to be exported",
				Computed:            true,
			},
			"sflow_options_input_ifindex": schema.StringAttribute{
				MarkdownDescription: "Specify ifindex related options",
				Computed:            true,
			},
			"sflow_options_output_ifindex": schema.StringAttribute{
				MarkdownDescription: "Specify ifindex related options",
				Computed:            true,
			},
		},
	}
}

func (d *FlowMonitorMapDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.data = req.ProviderData.(*IosxrProviderData)
}

// End of section. //template:end model

// Section below is generated&owned by "gen/generator.go". //template:begin read

func (d *FlowMonitorMapDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config FlowMonitorMapData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := d.data.Devices[config.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", config.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	if device.Managed {
		getResp, err := d.data.Client.Get(ctx, config.Device.ValueString(), config.getPath())
		if err != nil {
			resp.Diagnostics.AddError("Unable to apply gNMI Get operation", err.Error())
			return
		}

		config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	}

	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}

// End of section. //template:end read
