// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSource

func TestAccDataSourceIosxrFlowMonitorMap(t *testing.T) {
	if os.Getenv("NCS") == "" {
		t.Skip("skipping test, set environment variable NCS")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "exporters.0.name", "exporter_map1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "option_outphysint", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "option_filtered", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "option_bgpattr", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "option_outbundlemember", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "record_mpls_labels", "2"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "cache_entries", "5000"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "cache_timeout_active", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "cache_timeout_inactive", "0"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "cache_timeout_update", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "cache_timeout_rate_limit", "5000"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "cache_immediate", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "hw_cache_timeout_inactive", "50"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options_extended_router", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options_extended_gateway", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options_extended_ipv4_tunnel_egress", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options_extended_ipv6_tunnel_egress", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options_if_counters_polling_interval", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options_sample_header_size", "128"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options_input_ifindex", "physical"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_flow_monitor_map.test", "sflow_options_output_ifindex", "physical"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrFlowMonitorMapPrerequisitesConfig + testAccDataSourceIosxrFlowMonitorMapConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

// End of section. //template:end testAccDataSource

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccDataSourceIosxrFlowMonitorMapPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-flow-cfg:/flow/exporter-maps/exporter-map[exporter-map-name=exporter_map1]"
	attributes = {
		"exporter-map-name" = "exporter_map1"
	}
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSourceConfig

func testAccDataSourceIosxrFlowMonitorMapConfig() string {
	config := `resource "iosxr_flow_monitor_map" "test" {` + "\n"
	config += `	name = "monitor_map1"` + "\n"
	config += `	exporters = [{` + "\n"
	config += `		name = "exporter_map1"` + "\n"
	config += `	}]` + "\n"
	config += `	option_outphysint = true` + "\n"
	config += `	option_filtered = true` + "\n"
	config += `	option_bgpattr = true` + "\n"
	config += `	option_outbundlemember = true` + "\n"
	config += `	record_mpls_labels = 2` + "\n"
	config += `	cache_entries = 5000` + "\n"
	config += `	cache_timeout_active = 1` + "\n"
	config += `	cache_timeout_inactive = 0` + "\n"
	config += `	cache_timeout_update = 1` + "\n"
	config += `	cache_timeout_rate_limit = 5000` + "\n"
	config += `	cache_immediate = true` + "\n"
	config += `	hw_cache_timeout_inactive = 50` + "\n"
	config += `	sflow_options = true` + "\n"
	config += `	sflow_options_extended_router = true` + "\n"
	config += `	sflow_options_extended_gateway = true` + "\n"
	config += `	sflow_options_extended_ipv4_tunnel_egress = true` + "\n"
	config += `	sflow_options_extended_ipv6_tunnel_egress = true` + "\n"
	config += `	sflow_options_if_counters_polling_interval = 5` + "\n"
	config += `	sflow_options_sample_header_size = 128` + "\n"
	config += `	sflow_options_input_ifindex = "physical"` + "\n"
	config += `	sflow_options_output_ifindex = "physical"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxr_flow_monitor_map" "test" {
			name = "monitor_map1"
			depends_on = [iosxr_flow_monitor_map.test]
		}
	`
	return config
}

// End of section. //template:end testAccDataSourceConfig
