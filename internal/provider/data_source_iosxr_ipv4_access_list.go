// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &IPv4AccessListDataSource{}
	_ datasource.DataSourceWithConfigure = &IPv4AccessListDataSource{}
)

func NewIPv4AccessListDataSource() datasource.DataSource {
	return &IPv4AccessListDataSource{}
}

type IPv4AccessListDataSource struct {
	client *client.Client
}

func (d *IPv4AccessListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipv4_access_list"
}

func (d *IPv4AccessListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the IPv4 Access List configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"access_list_name": schema.StringAttribute{
				MarkdownDescription: "Access list name - maximum 64 characters",
				Required:            true,
			},
			"sequences": schema.ListNestedAttribute{
				MarkdownDescription: "access list entry",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"sequence_number": schema.Int64Attribute{
							MarkdownDescription: "Sequence number for this entry",
							Computed:            true,
						},
						"remark": schema.StringAttribute{
							MarkdownDescription: "Comment for access list",
							Computed:            true,
						},
						"permit_protocol": schema.StringAttribute{
							MarkdownDescription: "An IPv4 Protocol",
							Computed:            true,
						},
						"permit_eq": schema.StringAttribute{
							MarkdownDescription: "Match only packets with exact protocol numbers",
							Computed:            true,
						},
						"permit_igmp_type": schema.StringAttribute{
							MarkdownDescription: "Match on IGMP message",
							Computed:            true,
						},
						"permit_precedence": schema.StringAttribute{
							MarkdownDescription: "Match packets with given precedence",
							Computed:            true,
						},
						"permit_fragment_type": schema.StringAttribute{
							MarkdownDescription: "Fragment type for a packet",
							Computed:            true,
						},
						"permit_fragments": schema.BoolAttribute{
							MarkdownDescription: "Check non-initial fragments",
							Computed:            true,
						},
						"permit_counter": schema.StringAttribute{
							MarkdownDescription: "counter for this ACE",
							Computed:            true,
						},
						"permit_default": schema.BoolAttribute{
							MarkdownDescription: "Use specified default nexthop on match against this entry",
							Computed:            true,
						},
						"permit_capture": schema.BoolAttribute{
							MarkdownDescription: "Capture matched packet",
							Computed:            true,
						},
						"permit_range_start_protocol": schema.StringAttribute{
							MarkdownDescription: "An IPv4 Protocol",
							Computed:            true,
						},
						"permit_range_end_protocol": schema.StringAttribute{
							MarkdownDescription: "An IPv4 Protocol",
							Computed:            true,
						},
						"permit_source_address": schema.StringAttribute{
							MarkdownDescription: "Source IP address",
							Computed:            true,
						},
						"permit_source_wildcard_mask": schema.StringAttribute{
							MarkdownDescription: "Source IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.",
							Computed:            true,
						},
						"permit_source_prefix_length": schema.Int64Attribute{
							MarkdownDescription: "Source IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.",
							Computed:            true,
						},
						"permit_source_any": schema.BoolAttribute{
							MarkdownDescription: "Any source host",
							Computed:            true,
						},
						"permit_source_host": schema.StringAttribute{
							MarkdownDescription: "A single source host",
							Computed:            true,
						},
						"permit_source_net_group": schema.StringAttribute{
							MarkdownDescription: "IPv4 source network object group",
							Computed:            true,
						},
						"permit_source_port_group": schema.StringAttribute{
							MarkdownDescription: "source port object group",
							Computed:            true,
						},
						"permit_source_port_eq": schema.StringAttribute{
							MarkdownDescription: "Match only packets on a given port number",
							Computed:            true,
						},
						"permit_source_port_gt": schema.StringAttribute{
							MarkdownDescription: "Match only packet with a greater port number",
							Computed:            true,
						},
						"permit_source_port_lt": schema.StringAttribute{
							MarkdownDescription: "Match only packets with a lower port number",
							Computed:            true,
						},
						"permit_source_port_neq": schema.StringAttribute{
							MarkdownDescription: "Match only packets not on a given port",
							Computed:            true,
						},
						"permit_source_port_range_start": schema.StringAttribute{
							MarkdownDescription: "Port number",
							Computed:            true,
						},
						"permit_source_port_range_end": schema.StringAttribute{
							MarkdownDescription: "Port number",
							Computed:            true,
						},
						"permit_destination_address": schema.StringAttribute{
							MarkdownDescription: "Destination IP address",
							Computed:            true,
						},
						"permit_destination_wildcard_mask": schema.StringAttribute{
							MarkdownDescription: "Destination IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.",
							Computed:            true,
						},
						"permit_destination_prefix_length": schema.Int64Attribute{
							MarkdownDescription: "Destination IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.",
							Computed:            true,
						},
						"permit_destination_any": schema.BoolAttribute{
							MarkdownDescription: "Any destination host",
							Computed:            true,
						},
						"permit_destination_host": schema.StringAttribute{
							MarkdownDescription: "A single destination host",
							Computed:            true,
						},
						"permit_destination_net_group": schema.StringAttribute{
							MarkdownDescription: "IPv4 destination network object group",
							Computed:            true,
						},
						"permit_destination_port_group": schema.StringAttribute{
							MarkdownDescription: "destination port object group",
							Computed:            true,
						},
						"permit_destination_port_eq": schema.StringAttribute{
							MarkdownDescription: "Match only packets on a given port number",
							Computed:            true,
						},
						"permit_destination_port_gt": schema.StringAttribute{
							MarkdownDescription: "Match only packet with a greater port number",
							Computed:            true,
						},
						"permit_destination_port_lt": schema.StringAttribute{
							MarkdownDescription: "Match only packets with a lower port number",
							Computed:            true,
						},
						"permit_destination_port_neq": schema.StringAttribute{
							MarkdownDescription: "Match only packets not on a given port",
							Computed:            true,
						},
						"permit_destination_port_range_start": schema.StringAttribute{
							MarkdownDescription: "Port number",
							Computed:            true,
						},
						"permit_destination_port_range_end": schema.StringAttribute{
							MarkdownDescription: "Port number",
							Computed:            true,
						},
						"permit_icmp_message_type_name": schema.StringAttribute{
							MarkdownDescription: "ICMP message type",
							Computed:            true,
						},
						"permit_icmp_message_type": schema.Int64Attribute{
							MarkdownDescription: "ICMP message type",
							Computed:            true,
						},
						"permit_icmp_message_code": schema.Int64Attribute{
							MarkdownDescription: "ICMP message code",
							Computed:            true,
						},
						"permit_dscp": schema.StringAttribute{
							MarkdownDescription: "",
							Computed:            true,
						},
						"permit_dscp_eq": schema.StringAttribute{
							MarkdownDescription: "Match only packets on a given DSCP value",
							Computed:            true,
						},
						"permit_dscp_gt": schema.StringAttribute{
							MarkdownDescription: "Match only packet with a greater DSCP value",
							Computed:            true,
						},
						"permit_dscp_lt": schema.StringAttribute{
							MarkdownDescription: "Match only packets with a lower DSCP value",
							Computed:            true,
						},
						"permit_dscp_neq": schema.StringAttribute{
							MarkdownDescription: "Match only packets not on a given DSCP value",
							Computed:            true,
						},
						"permit_dscp_range_start": schema.StringAttribute{
							MarkdownDescription: "DSCP value",
							Computed:            true,
						},
						"permit_dscp_range_end": schema.StringAttribute{
							MarkdownDescription: "DSCP value",
							Computed:            true,
						},
						"permit_packet_length_eq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a given value",
							Computed:            true,
						},
						"permit_packet_length_gt": schema.Int64Attribute{
							MarkdownDescription: "Match only packet with a greater value",
							Computed:            true,
						},
						"permit_packet_length_lt": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a lower value",
							Computed:            true,
						},
						"permit_packet_length_neq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets not on a given value",
							Computed:            true,
						},
						"permit_packet_length_range_start": schema.Int64Attribute{
							MarkdownDescription: "Packet length start",
							Computed:            true,
						},
						"permit_packet_length_range_end": schema.Int64Attribute{
							MarkdownDescription: "Packet length end",
							Computed:            true,
						},
						"permit_ttl_eq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a given value",
							Computed:            true,
						},
						"permit_ttl_gt": schema.Int64Attribute{
							MarkdownDescription: "Match only packet with a greater value",
							Computed:            true,
						},
						"permit_ttl_lt": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a lower value",
							Computed:            true,
						},
						"permit_ttl_neq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets not on a given value",
							Computed:            true,
						},
						"permit_ttl_range_start": schema.Int64Attribute{
							MarkdownDescription: "ttl range lower value",
							Computed:            true,
						},
						"permit_ttl_range_end": schema.Int64Attribute{
							MarkdownDescription: "ttl range higher value",
							Computed:            true,
						},
						"permit_fragment_offset_eq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a given value",
							Computed:            true,
						},
						"permit_fragment_offset_gt": schema.Int64Attribute{
							MarkdownDescription: "Match only packet with a greater value",
							Computed:            true,
						},
						"permit_fragment_offset_lt": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a lower value",
							Computed:            true,
						},
						"permit_fragment_offset_neq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets not on a given value",
							Computed:            true,
						},
						"permit_fragment_offset_range_start": schema.Int64Attribute{
							MarkdownDescription: "fragment-offset value",
							Computed:            true,
						},
						"permit_fragment_offset_range_end": schema.Int64Attribute{
							MarkdownDescription: "fragment-offset value",
							Computed:            true,
						},
						"permit_police_value": schema.Int64Attribute{
							MarkdownDescription: "Police value",
							Computed:            true,
						},
						"permit_police_unit": schema.StringAttribute{
							MarkdownDescription: "Unit for police value. Currently only pps (packets per second) is supported",
							Computed:            true,
						},
						"permit_police_peak_rate": schema.Int64Attribute{
							MarkdownDescription: "Police peak-rate value on this entry",
							Computed:            true,
						},
						"permit_police_peak_unit": schema.StringAttribute{
							MarkdownDescription: "Unit for peak-rate value. Currently only pps (packets per second) is supported",
							Computed:            true,
						},
						"permit_police_priority": schema.StringAttribute{
							MarkdownDescription: "Set Priority option on this entry",
							Computed:            true,
						},
						"permit_nexthop1_ipv4": schema.StringAttribute{
							MarkdownDescription: "nexthop1 ipv4 address",
							Computed:            true,
						},
						"permit_nexthop1_track": schema.StringAttribute{
							MarkdownDescription: "specific TRACK Name for this nexthop",
							Computed:            true,
						},
						"permit_nexthop1_vrf": schema.StringAttribute{
							MarkdownDescription: "Specific VRF Name for this nexthop",
							Computed:            true,
						},
						"permit_nexthop2_ipv4": schema.StringAttribute{
							MarkdownDescription: "nexthop2 ipv4 address",
							Computed:            true,
						},
						"permit_nexthop2_track": schema.StringAttribute{
							MarkdownDescription: "specific TRACK Name for this nexthop",
							Computed:            true,
						},
						"permit_nexthop2_vrf": schema.StringAttribute{
							MarkdownDescription: "Specific VRF Name for this nexthop",
							Computed:            true,
						},
						"permit_nexthop3_ipv4": schema.StringAttribute{
							MarkdownDescription: "nexthop3 ipv4 address",
							Computed:            true,
						},
						"permit_nexthop3_track": schema.StringAttribute{
							MarkdownDescription: "specific TRACK Name for this nexthop",
							Computed:            true,
						},
						"permit_nexthop3_vrf": schema.StringAttribute{
							MarkdownDescription: "Specific VRF Name for this nexthop",
							Computed:            true,
						},
						"permit_log": schema.BoolAttribute{
							MarkdownDescription: "Log matches against this entry",
							Computed:            true,
						},
						"permit_log_input": schema.BoolAttribute{
							MarkdownDescription: "Log matches against this entry, including input interface",
							Computed:            true,
						},
						"permit_set_qos_group": schema.Int64Attribute{
							MarkdownDescription: "qos-group number",
							Computed:            true,
						},
						"permit_set_ttl": schema.Int64Attribute{
							MarkdownDescription: "Set ttl value",
							Computed:            true,
						},
						"deny_eq": schema.StringAttribute{
							MarkdownDescription: "Match only packets with exact protocol numbers",
							Computed:            true,
						},
						"deny_protocol": schema.StringAttribute{
							MarkdownDescription: "An IPv4 Protocol",
							Computed:            true,
						},
						"deny_source_address": schema.StringAttribute{
							MarkdownDescription: "Source IP address",
							Computed:            true,
						},
						"deny_source_wildcard_mask": schema.StringAttribute{
							MarkdownDescription: "Source IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.",
							Computed:            true,
						},
						"deny_source_prefix_length": schema.Int64Attribute{
							MarkdownDescription: "Source IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.",
							Computed:            true,
						},
						"deny_source_any": schema.BoolAttribute{
							MarkdownDescription: "Any source host",
							Computed:            true,
						},
						"deny_source_host": schema.StringAttribute{
							MarkdownDescription: "A single source host",
							Computed:            true,
						},
						"deny_source_net_group": schema.StringAttribute{
							MarkdownDescription: "IPv4 source network object group",
							Computed:            true,
						},
						"deny_source_port_group": schema.StringAttribute{
							MarkdownDescription: "source port object group",
							Computed:            true,
						},
						"deny_source_port_eq": schema.StringAttribute{
							MarkdownDescription: "Match only packets on a given port number",
							Computed:            true,
						},
						"deny_source_port_gt": schema.StringAttribute{
							MarkdownDescription: "Match only packet with a greater port number",
							Computed:            true,
						},
						"deny_source_port_lt": schema.StringAttribute{
							MarkdownDescription: "Match only packets with a lower port number",
							Computed:            true,
						},
						"deny_source_port_neq": schema.StringAttribute{
							MarkdownDescription: "Match only packets not on a given port",
							Computed:            true,
						},
						"deny_source_port_range_start": schema.StringAttribute{
							MarkdownDescription: "Port number",
							Computed:            true,
						},
						"deny_source_port_range_end": schema.StringAttribute{
							MarkdownDescription: "Port number",
							Computed:            true,
						},
						"deny_destination_address": schema.StringAttribute{
							MarkdownDescription: "Destination IP address",
							Computed:            true,
						},
						"deny_destination_wildcard_mask": schema.StringAttribute{
							MarkdownDescription: "Destination IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.",
							Computed:            true,
						},
						"deny_destination_prefix_length": schema.Int64Attribute{
							MarkdownDescription: "Destination IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.",
							Computed:            true,
						},
						"deny_destination_any": schema.BoolAttribute{
							MarkdownDescription: "Any destination host",
							Computed:            true,
						},
						"deny_destination_host": schema.StringAttribute{
							MarkdownDescription: "A single destination host",
							Computed:            true,
						},
						"deny_destination_net_group": schema.StringAttribute{
							MarkdownDescription: "IPv4 destination network object group",
							Computed:            true,
						},
						"deny_destination_port_group": schema.StringAttribute{
							MarkdownDescription: "destination port object group",
							Computed:            true,
						},
						"deny_destination_port_eq": schema.StringAttribute{
							MarkdownDescription: "Match only packets on a given port number",
							Computed:            true,
						},
						"deny_destination_port_gt": schema.StringAttribute{
							MarkdownDescription: "Match only packet with a greater port number",
							Computed:            true,
						},
						"deny_destination_port_lt": schema.StringAttribute{
							MarkdownDescription: "Match only packets with a lower port number",
							Computed:            true,
						},
						"deny_destination_port_neq": schema.StringAttribute{
							MarkdownDescription: "Match only packets not on a given port",
							Computed:            true,
						},
						"deny_destination_port_range_start": schema.StringAttribute{
							MarkdownDescription: "Port number",
							Computed:            true,
						},
						"deny_destination_port_range_end": schema.StringAttribute{
							MarkdownDescription: "Port number",
							Computed:            true,
						},
						"deny_igmp_type": schema.StringAttribute{
							MarkdownDescription: "Match on IGMP message",
							Computed:            true,
						},
						"deny_precedence": schema.StringAttribute{
							MarkdownDescription: "Match packets with given precedence",
							Computed:            true,
						},
						"deny_fragment_type": schema.StringAttribute{
							MarkdownDescription: "Fragment type for a packet",
							Computed:            true,
						},
						"deny_fragments": schema.BoolAttribute{
							MarkdownDescription: "Check non-initial fragments",
							Computed:            true,
						},
						"deny_counter": schema.StringAttribute{
							MarkdownDescription: "counter for this ACE",
							Computed:            true,
						},
						"deny_default": schema.BoolAttribute{
							MarkdownDescription: "Use specified default nexthop on match against this entry",
							Computed:            true,
						},
						"deny_capture": schema.BoolAttribute{
							MarkdownDescription: "Capture matched packet",
							Computed:            true,
						},
						"deny_icmp_off": schema.BoolAttribute{
							MarkdownDescription: "Do not generate the ICMP message",
							Computed:            true,
						},
						"deny_icmp_on": schema.BoolAttribute{
							MarkdownDescription: "Generate the ICMP message",
							Computed:            true,
						},
						"deny_range_start_protocol": schema.StringAttribute{
							MarkdownDescription: "An IPv4 Protocol",
							Computed:            true,
						},
						"deny_range_end_protocol": schema.StringAttribute{
							MarkdownDescription: "An IPv4 Protocol",
							Computed:            true,
						},
						"deny_icmp_message_type_name": schema.StringAttribute{
							MarkdownDescription: "ICMP message type",
							Computed:            true,
						},
						"deny_icmp_message_type": schema.Int64Attribute{
							MarkdownDescription: "ICMP message type",
							Computed:            true,
						},
						"deny_icmp_message_code": schema.Int64Attribute{
							MarkdownDescription: "ICMP message code",
							Computed:            true,
						},
						"deny_dscp": schema.StringAttribute{
							MarkdownDescription: "",
							Computed:            true,
						},
						"deny_dscp_eq": schema.StringAttribute{
							MarkdownDescription: "Match only packets on a given DSCP value",
							Computed:            true,
						},
						"deny_dscp_gt": schema.StringAttribute{
							MarkdownDescription: "Match only packet with a greater DSCP value",
							Computed:            true,
						},
						"deny_dscp_lt": schema.StringAttribute{
							MarkdownDescription: "Match only packets with a lower DSCP value",
							Computed:            true,
						},
						"deny_dscp_neq": schema.StringAttribute{
							MarkdownDescription: "Match only packets not on a given DSCP value",
							Computed:            true,
						},
						"deny_dscp_range_start": schema.StringAttribute{
							MarkdownDescription: "DSCP value",
							Computed:            true,
						},
						"deny_dscp_range_end": schema.StringAttribute{
							MarkdownDescription: "DSCP value",
							Computed:            true,
						},
						"deny_packet_length_eq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a given value",
							Computed:            true,
						},
						"deny_packet_length_gt": schema.Int64Attribute{
							MarkdownDescription: "Match only packet with a greater value",
							Computed:            true,
						},
						"deny_packet_length_lt": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a lower value",
							Computed:            true,
						},
						"deny_packet_length_neq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets not on a given value",
							Computed:            true,
						},
						"deny_packet_length_range_start": schema.Int64Attribute{
							MarkdownDescription: "Packet length start",
							Computed:            true,
						},
						"deny_packet_length_range_end": schema.Int64Attribute{
							MarkdownDescription: "Packet length end",
							Computed:            true,
						},
						"deny_ttl_eq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a given value",
							Computed:            true,
						},
						"deny_ttl_gt": schema.Int64Attribute{
							MarkdownDescription: "Match only packet with a greater value",
							Computed:            true,
						},
						"deny_ttl_lt": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a lower value",
							Computed:            true,
						},
						"deny_ttl_neq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets not on a given value",
							Computed:            true,
						},
						"deny_ttl_range_start": schema.Int64Attribute{
							MarkdownDescription: "ttl range lower value",
							Computed:            true,
						},
						"deny_ttl_range_end": schema.Int64Attribute{
							MarkdownDescription: "ttl range higher value",
							Computed:            true,
						},
						"deny_fragment_offset_eq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a given value",
							Computed:            true,
						},
						"deny_fragment_offset_gt": schema.Int64Attribute{
							MarkdownDescription: "Match only packet with a greater value",
							Computed:            true,
						},
						"deny_fragment_offset_lt": schema.Int64Attribute{
							MarkdownDescription: "Match only packets with a lower value",
							Computed:            true,
						},
						"deny_fragment_offset_neq": schema.Int64Attribute{
							MarkdownDescription: "Match only packets not on a given value",
							Computed:            true,
						},
						"deny_fragment_offset_range_start": schema.Int64Attribute{
							MarkdownDescription: "fragment-offset value",
							Computed:            true,
						},
						"deny_fragment_offset_range_end": schema.Int64Attribute{
							MarkdownDescription: "fragment-offset value",
							Computed:            true,
						},
						"deny_police_value": schema.Int64Attribute{
							MarkdownDescription: "Police value",
							Computed:            true,
						},
						"deny_police_unit": schema.StringAttribute{
							MarkdownDescription: "Unit for police value. Currently only pps (packets per second) is supported",
							Computed:            true,
						},
						"deny_police_peak_rate": schema.Int64Attribute{
							MarkdownDescription: "Police peak-rate value on this entry",
							Computed:            true,
						},
						"deny_police_peak_unit": schema.StringAttribute{
							MarkdownDescription: "Unit for peak-rate value. Currently only pps (packets per second) is supported",
							Computed:            true,
						},
						"deny_police_priority": schema.StringAttribute{
							MarkdownDescription: "Set Priority option on this entry",
							Computed:            true,
						},
						"deny_nexthop1_ipv4": schema.StringAttribute{
							MarkdownDescription: "nexthop1 ipv4 address",
							Computed:            true,
						},
						"deny_nexthop1_track": schema.StringAttribute{
							MarkdownDescription: "specific TRACK Name for this nexthop",
							Computed:            true,
						},
						"deny_nexthop1_vrf": schema.StringAttribute{
							MarkdownDescription: "Specific VRF Name for this nexthop",
							Computed:            true,
						},
						"deny_nexthop2_ipv4": schema.StringAttribute{
							MarkdownDescription: "nexthop2 ipv4 address",
							Computed:            true,
						},
						"deny_nexthop2_track": schema.StringAttribute{
							MarkdownDescription: "specific TRACK Name for this nexthop",
							Computed:            true,
						},
						"deny_nexthop2_vrf": schema.StringAttribute{
							MarkdownDescription: "Specific VRF Name for this nexthop",
							Computed:            true,
						},
						"deny_nexthop3_ipv4": schema.StringAttribute{
							MarkdownDescription: "nexthop3 ipv4 address",
							Computed:            true,
						},
						"deny_nexthop3_track": schema.StringAttribute{
							MarkdownDescription: "specific TRACK Name for this nexthop",
							Computed:            true,
						},
						"deny_nexthop3_vrf": schema.StringAttribute{
							MarkdownDescription: "Specific VRF Name for this nexthop",
							Computed:            true,
						},
						"deny_log": schema.BoolAttribute{
							MarkdownDescription: "Log matches against this entry",
							Computed:            true,
						},
						"deny_log_input": schema.BoolAttribute{
							MarkdownDescription: "Log matches against this entry, including input interface",
							Computed:            true,
						},
						"deny_set_qos_group": schema.Int64Attribute{
							MarkdownDescription: "qos-group number",
							Computed:            true,
						},
						"deny_set_ttl": schema.Int64Attribute{
							MarkdownDescription: "Set ttl value",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *IPv4AccessListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *IPv4AccessListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config IPv4AccessListData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
