// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &L2VPNXconnectGroupP2PDataSource{}
	_ datasource.DataSourceWithConfigure = &L2VPNXconnectGroupP2PDataSource{}
)

func NewL2VPNXconnectGroupP2PDataSource() datasource.DataSource {
	return &L2VPNXconnectGroupP2PDataSource{}
}

type L2VPNXconnectGroupP2PDataSource struct {
	client *client.Client
}

func (d *L2VPNXconnectGroupP2PDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_l2vpn_xconnect_group_p2p"
}

func (d *L2VPNXconnectGroupP2PDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the L2VPN Xconnect Group P2P configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"group_name": schema.StringAttribute{
				MarkdownDescription: "Specify the group the cross connects belong to",
				Required:            true,
			},
			"p2p_xconnect_name": schema.StringAttribute{
				MarkdownDescription: "Configure point to point cross connect commands",
				Required:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: "Description for cross connect",
				Computed:            true,
			},
			"interfaces": schema.ListNestedAttribute{
				MarkdownDescription: "Specify (sub-)interface name to cross connect",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"interface_name": schema.StringAttribute{
							MarkdownDescription: "Specify (sub-)interface name to cross connect",
							Computed:            true,
						},
					},
				},
			},
			"ipv4_neighbors": schema.ListNestedAttribute{
				MarkdownDescription: "IPv4",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							MarkdownDescription: "IPv4",
							Computed:            true,
						},
						"pw_id": schema.Int64Attribute{
							MarkdownDescription: "Specify the pseudowire id",
							Computed:            true,
						},
						"pw_class": schema.StringAttribute{
							MarkdownDescription: "PW class template name to use for this XC",
							Computed:            true,
						},
					},
				},
			},
			"ipv6_neighbors": schema.ListNestedAttribute{
				MarkdownDescription: "IPv6",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							MarkdownDescription: "IPv6",
							Computed:            true,
						},
						"pw_id": schema.Int64Attribute{
							MarkdownDescription: "Specify the pseudowire id",
							Computed:            true,
						},
						"pw_class": schema.StringAttribute{
							MarkdownDescription: "PW class template name to use for this XC",
							Computed:            true,
						},
					},
				},
			},
			"evpn_target_neighbors": schema.ListNestedAttribute{
				MarkdownDescription: "Specify remote attachment circuit identifier",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"vpn_id": schema.Int64Attribute{
							MarkdownDescription: "Ethernet VPN Identifier",
							Computed:            true,
						},
						"remote_ac_id": schema.Int64Attribute{
							MarkdownDescription: "Specify remote attachment circuit identifier",
							Computed:            true,
						},
						"source": schema.Int64Attribute{
							MarkdownDescription: "Specify source attachment circuit identifier",
							Computed:            true,
						},
						"pw_class": schema.StringAttribute{
							MarkdownDescription: "PW class template name to use",
							Computed:            true,
						},
					},
				},
			},
			"evpn_service_neighbors": schema.ListNestedAttribute{
				MarkdownDescription: "Specify service ID (used as local and remote ac-id)",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"vpn_id": schema.Int64Attribute{
							MarkdownDescription: "Ethernet VPN Identifier",
							Computed:            true,
						},
						"service_id": schema.Int64Attribute{
							MarkdownDescription: "Specify service ID (used as local and remote ac-id)",
							Computed:            true,
						},
						"pw_class": schema.StringAttribute{
							MarkdownDescription: "PW class template name to use",
							Computed:            true,
						},
					},
				},
			},
			"neighbor_evpn_evi_segment_routing_services": schema.ListNestedAttribute{
				MarkdownDescription: "Specify service ID (used as local and remote ac-id)",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"vpn_id": schema.Int64Attribute{
							MarkdownDescription: "Ethernet VPN Identifier",
							Computed:            true,
						},
						"service_id": schema.Int64Attribute{
							MarkdownDescription: "Specify service ID (used as local and remote ac-id)",
							Computed:            true,
						},
						"segment_routing_srv6_locator": schema.StringAttribute{
							MarkdownDescription: "PW locator to use for EVPN SID allocation",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *L2VPNXconnectGroupP2PDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *L2VPNXconnectGroupP2PDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config L2VPNXconnectGroupP2PData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
