// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourceL2VPNXconnectGroupP2PType struct{}

func (t dataSourceL2VPNXconnectGroupP2PType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the L2VPN Xconnect Group P2P configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"group_name": {
				MarkdownDescription: "Specify the group the cross connects belong to",
				Type:                types.StringType,
				Required:            true,
			},
			"p2p_xconnect_name": {
				MarkdownDescription: "Configure point to point cross connect commands",
				Type:                types.StringType,
				Required:            true,
			},
			"description": {
				MarkdownDescription: "Description for cross connect",
				Type:                types.StringType,
				Computed:            true,
			},
			"interfaces": {
				MarkdownDescription: "Specify (sub-)interface name to cross connect",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"interface_name": {
						MarkdownDescription: "Specify (sub-)interface name to cross connect",
						Type:                types.StringType,
						Computed:            true,
					},
				}, tfsdk.ListNestedAttributesOptions{}),
			},
			"ipv4_neighbors": {
				MarkdownDescription: "IPv4",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"address": {
						MarkdownDescription: "IPv4",
						Type:                types.StringType,
						Computed:            true,
					},
					"pw_id": {
						MarkdownDescription: "Specify the pseudowire id",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"pw_class": {
						MarkdownDescription: "PW class template name to use for this XC",
						Type:                types.StringType,
						Computed:            true,
					},
				}, tfsdk.ListNestedAttributesOptions{}),
			},
			"ipv6_neighbors": {
				MarkdownDescription: "IPv6",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"address": {
						MarkdownDescription: "IPv6",
						Type:                types.StringType,
						Computed:            true,
					},
					"pw_id": {
						MarkdownDescription: "Specify the pseudowire id",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"pw_class": {
						MarkdownDescription: "PW class template name to use for this XC",
						Type:                types.StringType,
						Computed:            true,
					},
				}, tfsdk.ListNestedAttributesOptions{}),
			},
		},
	}, nil
}

func (t dataSourceL2VPNXconnectGroupP2PType) NewDataSource(ctx context.Context, in tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceL2VPNXconnectGroupP2P{
		provider: provider,
	}, diags
}

type dataSourceL2VPNXconnectGroupP2P struct {
	provider provider
}

func (d dataSourceL2VPNXconnectGroupP2P) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	var config L2VPNXconnectGroupP2P

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.provider.client.Get(ctx, config.Device.Value, config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
