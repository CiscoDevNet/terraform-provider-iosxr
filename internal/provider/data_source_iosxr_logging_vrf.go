// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &LoggingVRFDataSource{}
	_ datasource.DataSourceWithConfigure = &LoggingVRFDataSource{}
)

func NewLoggingVRFDataSource() datasource.DataSource {
	return &LoggingVRFDataSource{}
}

type LoggingVRFDataSource struct {
	client *client.Client
}

func (d *LoggingVRFDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_logging_vrf"
}

func (d *LoggingVRFDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Logging VRF configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"vrf_name": schema.StringAttribute{
				MarkdownDescription: "Set VRF option",
				Required:            true,
			},
			"host_ipv4_addresses": schema.ListNestedAttribute{
				MarkdownDescription: "IPV4 address of the logging host",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"ipv4_address": schema.StringAttribute{
							MarkdownDescription: "IPV4 address of the logging host",
							Computed:            true,
						},
						"severity": schema.StringAttribute{
							MarkdownDescription: "Set severity of  messages for particular remote host/vrf",
							Computed:            true,
						},
						"port": schema.Int64Attribute{
							MarkdownDescription: "Set UDP port for this remote host/vrf",
							Computed:            true,
						},
						"operator": schema.StringAttribute{
							MarkdownDescription: "Set severity operator of  messages for particular remote host/vrf",
							Computed:            true,
						},
					},
				},
			},
			"host_ipv6_addresses": schema.ListNestedAttribute{
				MarkdownDescription: "IPV6 address of the logging host",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"ipv6_address": schema.StringAttribute{
							MarkdownDescription: "IPV6 address of the logging host",
							Computed:            true,
						},
						"severity": schema.StringAttribute{
							MarkdownDescription: "Set severity of  messages for particular remote host/vrf",
							Computed:            true,
						},
						"port": schema.Int64Attribute{
							MarkdownDescription: "Set UDP port for this remote host/vrf",
							Computed:            true,
						},
						"operator": schema.StringAttribute{
							MarkdownDescription: "Set severity operator of  messages for particular remote host/vrf",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *LoggingVRFDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *LoggingVRFDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config LoggingVRFData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
