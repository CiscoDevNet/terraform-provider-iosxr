// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccDataSourceIosxrMPLSLDP(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrMPLSLDPPrerequisitesConfig + testAccDataSourceIosxrMPLSLDPConfig,
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "router_id", "1.2.3.4"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "address_families.0.af_name", "ipv4"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "interfaces.0.interface_name", "GigabitEthernet0/0/0/1"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "capabilities_sac_ipv4_disable", "true"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "capabilities_sac_ipv6_disable", "true"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "capabilities_sac_fec128_disable", "true"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "capabilities_sac_fec129_disable", "true"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "mldp_logging_notifications", "true"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "mldp_address_families.0.name", "ipv4"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "mldp_address_families.0.make_before_break_delay", "30"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "mldp_address_families.0.forwarding_recursive", "true"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "mldp_address_families.0.forwarding_recursive_route_policy", "ROUTE_POLICY_1"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "mldp_address_families.0.recursive_fec", "true"),
					resource.TestCheckResourceAttr("data.iosxr_mpls_ldp.test", "session_protection", "true"),
				),
			},
		},
	})
}

const testAccDataSourceIosxrMPLSLDPPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies/route-policy[route-policy-name=ROUTE_POLICY_1]"
	attributes = {
		"route-policy-name" = "ROUTE_POLICY_1"
		"rpl-route-policy" = "route-policy ROUTE_POLICY_1\n  pass\nend-policy\n"
	}
}

`

const testAccDataSourceIosxrMPLSLDPConfig = `

resource "iosxr_mpls_ldp" "test" {
	delete_mode = "attributes"
	router_id = "1.2.3.4"
	address_families = [{
		af_name = "ipv4"
	}]
	interfaces = [{
		interface_name = "GigabitEthernet0/0/0/1"
	}]
	capabilities_sac_ipv4_disable = true
	capabilities_sac_ipv6_disable = true
	capabilities_sac_fec128_disable = true
	capabilities_sac_fec129_disable = true
	mldp_logging_notifications = true
	mldp_address_families = [{
		name = "ipv4"
		make_before_break_delay = 30
		forwarding_recursive = true
		forwarding_recursive_route_policy = "ROUTE_POLICY_1"
		recursive_fec = true
	}]
	session_protection = true
	depends_on = [iosxr_gnmi.PreReq0, ]
}

data "iosxr_mpls_ldp" "test" {
	depends_on = [iosxr_mpls_ldp.test]
}
`
