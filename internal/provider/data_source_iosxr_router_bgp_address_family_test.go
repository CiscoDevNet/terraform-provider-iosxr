// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxrRouterBGPAddressFamily(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "additional_paths_send", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "additional_paths_receive", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "additional_paths_selection_route_policy", "ADDITIONAL_PATHS_SELECTION_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "allocate_label_all", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "allocate_label_all_unlabeled_path", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "advertise_best_external", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "maximum_paths_ebgp_ebgp_number", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "maximum_paths_ebgp_selective", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "maximum_paths_ibgp_ibgp_number", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "maximum_paths_ibgp_unequal_cost_deterministic", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "maximum_paths_ibgp_selective", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "maximum_paths_unique_nexthop_check_disable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "nexthop_trigger_delay_critical", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "nexthop_trigger_delay_non_critical", "20"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "label_mode_route_policy", "LABEL_MODE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "aggregate_addresses.0.address", "10.0.0.0"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "aggregate_addresses.0.address_prefix", "8"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "aggregate_addresses.0.as_set", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "aggregate_addresses.0.as_confed_set", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "aggregate_addresses.0.summary_only", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "aggregate_addresses.0.route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "aggregate_addresses.0.description", "Aggregate route description"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "aggregate_addresses.0.set_tag", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "networks.0.address", "10.1.0.0"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "networks.0.address_prefix", "16"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "networks.0.route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_ospf.0.ospf_router_tag", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_ospf.0.redistribute_ospf_match_internal_external_type_1_nssa_external_type_2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_ospf.0.metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_ospf.0.multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_ospf.0.route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_eigrp.0.eigrp_name", "EIGRP1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_eigrp.0.redistribute_eigrp_internal", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_eigrp.0.redistribute_eigrp_internal_external", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_eigrp.0.metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_eigrp.0.multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_eigrp.0.route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_isis.0.isis_name", "ISIS1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_isis.0.redistribute_isis_level_1_level_2_level_1_inter_area", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_isis.0.metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_isis.0.multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_isis.0.route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_connected", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_connected_metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_connected_multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_connected_route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_static", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_static_metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_static_multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_static_route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_rip", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_rip_metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_rip_multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp_address_family.test", "redistribute_rip_route_policy", "REDISTRIBUTE_POLICY"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrRouterBGPAddressFamilyPrerequisitesConfig + testAccDataSourceIosxrRouterBGPAddressFamilyConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

const testAccDataSourceIosxrRouterBGPAddressFamilyPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies"
	attributes = {
	}
	lists = [
		{
			name = "route-policy"
			key = "route-policy-name"
			items = [
				{
					"route-policy-name" = "ROUTE_POLICY_1"
					"rpl-route-policy" = "route-policy ROUTE_POLICY_1\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "ADDITIONAL_PATHS_SELECTION_POLICY"
					"rpl-route-policy" = "route-policy ADDITIONAL_PATHS_SELECTION_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "ALLOCATE_LABEL_POLICY"
					"rpl-route-policy" = "route-policy ALLOCATE_LABEL_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "MULTIPATH_POLICY"
					"rpl-route-policy" = "route-policy MULTIPATH_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "REDISTRIBUTE_POLICY"
					"rpl-route-policy" = "route-policy REDISTRIBUTE_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "LABEL_MODE_POLICY"
					"rpl-route-policy" = "route-policy LABEL_MODE_POLICY\n  pass\nend-policy\n"
				},
			]
		},
	]
}

resource "iosxr_gnmi" "PreReq1" {
	path = "Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=65001]"
	attributes = {
		"as-number" = "65001"
	}
}

`

func testAccDataSourceIosxrRouterBGPAddressFamilyConfig() string {
	config := `resource "iosxr_router_bgp_address_family" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	as_number = "65001"` + "\n"
	config += `	af_name = "ipv4-unicast"` + "\n"
	config += `	additional_paths_send = true` + "\n"
	config += `	additional_paths_receive = true` + "\n"
	config += `	additional_paths_selection_route_policy = "ADDITIONAL_PATHS_SELECTION_POLICY"` + "\n"
	config += `	allocate_label_all = true` + "\n"
	config += `	allocate_label_all_unlabeled_path = true` + "\n"
	config += `	advertise_best_external = true` + "\n"
	config += `	maximum_paths_ebgp_ebgp_number = 10` + "\n"
	config += `	maximum_paths_ebgp_selective = true` + "\n"
	config += `	maximum_paths_ibgp_ibgp_number = 10` + "\n"
	config += `	maximum_paths_ibgp_unequal_cost_deterministic = true` + "\n"
	config += `	maximum_paths_ibgp_selective = true` + "\n"
	config += `	maximum_paths_unique_nexthop_check_disable = true` + "\n"
	config += `	nexthop_trigger_delay_critical = 10` + "\n"
	config += `	nexthop_trigger_delay_non_critical = 20` + "\n"
	config += `	label_mode_route_policy = "LABEL_MODE_POLICY"` + "\n"
	config += `	aggregate_addresses = [{` + "\n"
	config += `		address = "10.0.0.0"` + "\n"
	config += `		address_prefix = 8` + "\n"
	config += `		as_set = false` + "\n"
	config += `		as_confed_set = false` + "\n"
	config += `		summary_only = true` + "\n"
	config += `		route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `		description = "Aggregate route description"` + "\n"
	config += `		set_tag = 100` + "\n"
	config += `	}]` + "\n"
	config += `	networks = [{` + "\n"
	config += `		address = "10.1.0.0"` + "\n"
	config += `		address_prefix = 16` + "\n"
	config += `		route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `	}]` + "\n"
	config += `	redistribute_ospf = [{` + "\n"
	config += `		ospf_router_tag = "1"` + "\n"
	config += `		redistribute_ospf_match_internal_external_type_1_nssa_external_type_2 = true` + "\n"
	config += `		metric = 100` + "\n"
	config += `		multipath = true` + "\n"
	config += `		route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	}]` + "\n"
	config += `	redistribute_eigrp = [{` + "\n"
	config += `		eigrp_name = "EIGRP1"` + "\n"
	config += `		redistribute_eigrp_internal = true` + "\n"
	config += `		redistribute_eigrp_internal_external = true` + "\n"
	config += `		metric = 100` + "\n"
	config += `		multipath = true` + "\n"
	config += `		route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	}]` + "\n"
	config += `	redistribute_isis = [{` + "\n"
	config += `		isis_name = "ISIS1"` + "\n"
	config += `		redistribute_isis_level_1_level_2_level_1_inter_area = true` + "\n"
	config += `		metric = 100` + "\n"
	config += `		multipath = true` + "\n"
	config += `		route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	}]` + "\n"
	config += `	redistribute_connected = true` + "\n"
	config += `	redistribute_connected_metric = 100` + "\n"
	config += `	redistribute_connected_multipath = true` + "\n"
	config += `	redistribute_connected_route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	redistribute_static = true` + "\n"
	config += `	redistribute_static_metric = 100` + "\n"
	config += `	redistribute_static_multipath = true` + "\n"
	config += `	redistribute_static_route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	redistribute_rip = true` + "\n"
	config += `	redistribute_rip_metric = 100` + "\n"
	config += `	redistribute_rip_multipath = true` + "\n"
	config += `	redistribute_rip_route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, ]` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxr_router_bgp_address_family" "test" {
			as_number = "65001"
			af_name = "ipv4-unicast"
			depends_on = [iosxr_router_bgp_address_family.test]
		}
	`
	return config
}
