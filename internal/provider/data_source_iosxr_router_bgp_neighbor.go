// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourceRouterBGPNeighborType struct{}

func (t dataSourceRouterBGPNeighborType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router BGP Neighbor configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"as_number": {
				MarkdownDescription: "bgp as-number",
				Type:                types.StringType,
				Required:            true,
			},
			"neighbor_address": {
				MarkdownDescription: "Neighbor address",
				Type:                types.StringType,
				Required:            true,
			},
			"remote_as": {
				MarkdownDescription: "bgp as-number",
				Type:                types.StringType,
				Computed:            true,
			},
			"description": {
				MarkdownDescription: "Neighbor specific description",
				Type:                types.StringType,
				Computed:            true,
			},
			"ignore_connected_check": {
				MarkdownDescription: "Bypass the directly connected nexthop check for single-hop eBGP peering",
				Type:                types.BoolType,
				Computed:            true,
			},
			"ebgp_multihop_maximum_hop_count": {
				MarkdownDescription: "maximum hop count",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"bfd_minimum_interval": {
				MarkdownDescription: "Hello interval",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"bfd_multiplier": {
				MarkdownDescription: "Detect multiplier",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"local_as": {
				MarkdownDescription: "bgp as-number",
				Type:                types.StringType,
				Computed:            true,
			},
			"local_as_no_prepend": {
				MarkdownDescription: "Do not prepend local AS to announcements from this neighbor",
				Type:                types.BoolType,
				Computed:            true,
			},
			"local_as_replace_as": {
				MarkdownDescription: "Prepend only local AS to announcements to this neighbor",
				Type:                types.BoolType,
				Computed:            true,
			},
			"local_as_dual_as": {
				MarkdownDescription: "Dual-AS mode",
				Type:                types.BoolType,
				Computed:            true,
			},
			"password": {
				MarkdownDescription: "Specifies an ENCRYPTED password will follow",
				Type:                types.StringType,
				Computed:            true,
			},
			"shutdown": {
				MarkdownDescription: "Administratively shut down this neighbor",
				Type:                types.BoolType,
				Computed:            true,
			},
			"timers_keepalive_interval": {
				MarkdownDescription: "BGP timers",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"timers_holdtime": {
				MarkdownDescription: "Holdtime. Set 0 to disable keepalives/hold time.",
				Type:                types.StringType,
				Computed:            true,
			},
			"update_source": {
				MarkdownDescription: "Source of routing updates",
				Type:                types.StringType,
				Computed:            true,
			},
			"ttl_security": {
				MarkdownDescription: "Enable EBGP TTL security",
				Type:                types.BoolType,
				Computed:            true,
			},
		},
	}, nil
}

func (t dataSourceRouterBGPNeighborType) NewDataSource(ctx context.Context, in tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceRouterBGPNeighbor{
		provider: provider,
	}, diags
}

type dataSourceRouterBGPNeighbor struct {
	provider provider
}

func (d dataSourceRouterBGPNeighbor) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	var config RouterBGPNeighbor

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.provider.client.Get(ctx, config.Device.Value, config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
