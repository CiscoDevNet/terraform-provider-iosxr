// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSource

func TestAccDataSourceIosxrRouterBGP(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "default_information_originate", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "default_metric", "125"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "nsr_disable", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_redistribute_internal", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "segment_routing_srv6_locator", "locator11"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "segment_routing_srv6_usid_allocation_wide_local_id_block", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "timers_bgp_keepalive_interval", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "timers_bgp_holdtime", "20"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_router_id", "22.22.22.22"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_graceful_restart_graceful_reset", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "ibgp_policy_out_enforce_modifications", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_log_neighbor_changes_detail", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bfd_minimum_interval", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bfd_multiplier", "4"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "nexthop_validation_color_extcomm_sr_policy", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_as_path_multipath_relax", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_cost_community_ignore", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_compare_routerid", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_aigp_ignore", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_igp_metric_sr_policy", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_med_missing_as_worst", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_origin_as_use_validity", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_origin_as_allow_invalid", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "bgp_bestpath_sr_policy_prefer", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.address", "10.1.1.2"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.remote_as", "65002"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.description", "My Neighbor Description"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.use_neighbor_group", "GROUP1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.advertisement_interval_seconds", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.ignore_connected_check", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.ebgp_multihop_maximum_hop_count", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.bfd_minimum_interval", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.bfd_multiplier", "4"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.bfd_fast_detect", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.bfd_fast_detect_strict_mode", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.password", "12341C2713181F13253920"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.shutdown", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.timers_keepalive_interval", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.timers_holdtime_number", "20"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.update_source", "GigabitEthernet0/0/0/1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_bgp.test", "neighbors.0.ttl_security", "false"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrRouterBGPPrerequisitesConfig + testAccDataSourceIosxrRouterBGPConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

// End of section. //template:end testAccDataSource

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccDataSourceIosxrRouterBGPPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=65001]"
	attributes = {
		"as-number" = "65001"
	}
	lists = [
		{
			name = "neighbor-groups/neighbor-group"
			key = "neighbor-group-name"
			items = [
				{
					"neighbor-group-name" = "GROUP1"
					"remote-as" = "65002"
				},
			]
		},
	]
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSourceConfig

func testAccDataSourceIosxrRouterBGPConfig() string {
	config := `resource "iosxr_router_bgp" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	as_number = "65001"` + "\n"
	config += `	default_information_originate = true` + "\n"
	config += `	default_metric = 125` + "\n"
	config += `	nsr_disable = false` + "\n"
	config += `	bgp_redistribute_internal = true` + "\n"
	config += `	segment_routing_srv6_locator = "locator11"` + "\n"
	config += `	segment_routing_srv6_usid_allocation_wide_local_id_block = true` + "\n"
	config += `	timers_bgp_keepalive_interval = 5` + "\n"
	config += `	timers_bgp_holdtime = 20` + "\n"
	config += `	bgp_router_id = "22.22.22.22"` + "\n"
	config += `	bgp_graceful_restart_graceful_reset = true` + "\n"
	config += `	ibgp_policy_out_enforce_modifications = true` + "\n"
	config += `	bgp_log_neighbor_changes_detail = true` + "\n"
	config += `	bfd_minimum_interval = 10` + "\n"
	config += `	bfd_multiplier = 4` + "\n"
	config += `	nexthop_validation_color_extcomm_sr_policy = true` + "\n"
	config += `	bgp_bestpath_as_path_multipath_relax = true` + "\n"
	config += `	bgp_bestpath_cost_community_ignore = true` + "\n"
	config += `	bgp_bestpath_compare_routerid = true` + "\n"
	config += `	bgp_bestpath_aigp_ignore = true` + "\n"
	config += `	bgp_bestpath_igp_metric_sr_policy = true` + "\n"
	config += `	bgp_bestpath_med_missing_as_worst = true` + "\n"
	config += `	bgp_bestpath_origin_as_use_validity = true` + "\n"
	config += `	bgp_bestpath_origin_as_allow_invalid = true` + "\n"
	config += `	bgp_bestpath_sr_policy_prefer = true` + "\n"
	config += `	neighbors = [{` + "\n"
	config += `		address = "10.1.1.2"` + "\n"
	config += `		remote_as = "65002"` + "\n"
	config += `		description = "My Neighbor Description"` + "\n"
	config += `		use_neighbor_group = "GROUP1"` + "\n"
	config += `		advertisement_interval_seconds = 10` + "\n"
	config += `		ignore_connected_check = true` + "\n"
	config += `		ebgp_multihop_maximum_hop_count = 10` + "\n"
	config += `		bfd_minimum_interval = 10` + "\n"
	config += `		bfd_multiplier = 4` + "\n"
	config += `		bfd_fast_detect = true` + "\n"
	config += `		bfd_fast_detect_strict_mode = false` + "\n"
	config += `		password = "12341C2713181F13253920"` + "\n"
	config += `		shutdown = false` + "\n"
	config += `		timers_keepalive_interval = 10` + "\n"
	config += `		timers_holdtime_number = 20` + "\n"
	config += `		update_source = "GigabitEthernet0/0/0/1"` + "\n"
	config += `		ttl_security = false` + "\n"
	config += `	}]` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxr_router_bgp" "test" {
			as_number = "65001"
			depends_on = [iosxr_router_bgp.test]
		}
	`
	return config
}

// End of section. //template:end testAccDataSourceConfig
