// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/terraform-provider-iosxr/internal/provider/client"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &RouterBGPVRFDataSource{}
	_ datasource.DataSourceWithConfigure = &RouterBGPVRFDataSource{}
)

func NewRouterBGPVRFDataSource() datasource.DataSource {
	return &RouterBGPVRFDataSource{}
}

type RouterBGPVRFDataSource struct {
	client *client.Client
}

func (d *RouterBGPVRFDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_router_bgp_vrf"
}

func (d *RouterBGPVRFDataSource) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router BGP VRF configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"as_number": {
				MarkdownDescription: "bgp as-number",
				Type:                types.StringType,
				Required:            true,
			},
			"vrf_name": {
				MarkdownDescription: "Specify a vrf name",
				Type:                types.StringType,
				Required:            true,
			},
			"default_information_originate": {
				MarkdownDescription: "Distribute a default route",
				Type:                types.BoolType,
				Computed:            true,
			},
			"default_metric": {
				MarkdownDescription: "default redistributed metric",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"timers_bgp_keepalive_interval": {
				MarkdownDescription: "BGP timers",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"timers_bgp_holdtime": {
				MarkdownDescription: "Holdtime. Set 0 to disable keepalives/hold time.",
				Type:                types.StringType,
				Computed:            true,
			},
			"bfd_minimum_interval": {
				MarkdownDescription: "Hello interval",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"bfd_multiplier": {
				MarkdownDescription: "Detect multiplier",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"neighbors": {
				MarkdownDescription: "Neighbor address",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"neighbor_address": {
						MarkdownDescription: "Neighbor address",
						Type:                types.StringType,
						Computed:            true,
					},
					"remote_as": {
						MarkdownDescription: "bgp as-number",
						Type:                types.StringType,
						Computed:            true,
					},
					"description": {
						MarkdownDescription: "Neighbor specific description",
						Type:                types.StringType,
						Computed:            true,
					},
					"ignore_connected_check": {
						MarkdownDescription: "Bypass the directly connected nexthop check for single-hop eBGP peering",
						Type:                types.BoolType,
						Computed:            true,
					},
					"ebgp_multihop_maximum_hop_count": {
						MarkdownDescription: "maximum hop count",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"bfd_minimum_interval": {
						MarkdownDescription: "Hello interval",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"bfd_multiplier": {
						MarkdownDescription: "Detect multiplier",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"local_as": {
						MarkdownDescription: "bgp as-number",
						Type:                types.StringType,
						Computed:            true,
					},
					"local_as_no_prepend": {
						MarkdownDescription: "Do not prepend local AS to announcements from this neighbor",
						Type:                types.BoolType,
						Computed:            true,
					},
					"local_as_replace_as": {
						MarkdownDescription: "Prepend only local AS to announcements to this neighbor",
						Type:                types.BoolType,
						Computed:            true,
					},
					"local_as_dual_as": {
						MarkdownDescription: "Dual-AS mode",
						Type:                types.BoolType,
						Computed:            true,
					},
					"password": {
						MarkdownDescription: "Specifies an ENCRYPTED password will follow",
						Type:                types.StringType,
						Computed:            true,
					},
					"shutdown": {
						MarkdownDescription: "Administratively shut down this neighbor",
						Type:                types.BoolType,
						Computed:            true,
					},
					"timers_keepalive_interval": {
						MarkdownDescription: "BGP timers",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"timers_holdtime": {
						MarkdownDescription: "Holdtime. Set 0 to disable keepalives/hold time.",
						Type:                types.StringType,
						Computed:            true,
					},
					"update_source": {
						MarkdownDescription: "Source of routing updates",
						Type:                types.StringType,
						Computed:            true,
					},
					"ttl_security": {
						MarkdownDescription: "Enable EBGP TTL security",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
		},
	}, nil
}

func (d *RouterBGPVRFDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *RouterBGPVRFDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config RouterBGPVRF

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
