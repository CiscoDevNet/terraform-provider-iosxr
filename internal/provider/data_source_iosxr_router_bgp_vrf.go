// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &RouterBGPVRFDataSource{}
	_ datasource.DataSourceWithConfigure = &RouterBGPVRFDataSource{}
)

func NewRouterBGPVRFDataSource() datasource.DataSource {
	return &RouterBGPVRFDataSource{}
}

type RouterBGPVRFDataSource struct {
	client *client.Client
}

func (d *RouterBGPVRFDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_router_bgp_vrf"
}

func (d *RouterBGPVRFDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router BGP VRF configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"as_number": schema.StringAttribute{
				MarkdownDescription: "bgp as-number",
				Required:            true,
			},
			"vrf_name": schema.StringAttribute{
				MarkdownDescription: "Specify a vrf name",
				Required:            true,
			},
			"rd_auto": schema.BoolAttribute{
				MarkdownDescription: "Automatic route distinguisher",
				Computed:            true,
			},
			"rd_two_byte_as_as_number": schema.StringAttribute{
				MarkdownDescription: "bgp as-number",
				Computed:            true,
			},
			"rd_two_byte_as_index": schema.Int64Attribute{
				MarkdownDescription: "ASN2:index (hex or decimal format)",
				Computed:            true,
			},
			"rd_four_byte_as_as_number": schema.StringAttribute{
				MarkdownDescription: "4-byte AS number",
				Computed:            true,
			},
			"rd_four_byte_as_index": schema.Int64Attribute{
				MarkdownDescription: "ASN2:index (hex or decimal format)",
				Computed:            true,
			},
			"rd_ip_address_ipv4_address": schema.StringAttribute{
				MarkdownDescription: "configure this node",
				Computed:            true,
			},
			"rd_ip_address_index": schema.Int64Attribute{
				MarkdownDescription: "IPv4Address:index (hex or decimal format)",
				Computed:            true,
			},
			"default_information_originate": schema.BoolAttribute{
				MarkdownDescription: "Distribute a default route",
				Computed:            true,
			},
			"default_metric": schema.Int64Attribute{
				MarkdownDescription: "default redistributed metric",
				Computed:            true,
			},
			"timers_bgp_keepalive_interval": schema.Int64Attribute{
				MarkdownDescription: "BGP timers",
				Computed:            true,
			},
			"timers_bgp_holdtime": schema.StringAttribute{
				MarkdownDescription: "Holdtime. Set 0 to disable keepalives/hold time.",
				Computed:            true,
			},
			"bgp_router_id": schema.StringAttribute{
				MarkdownDescription: "Configure Router-id",
				Computed:            true,
			},
			"bfd_minimum_interval": schema.Int64Attribute{
				MarkdownDescription: "Hello interval",
				Computed:            true,
			},
			"bfd_multiplier": schema.Int64Attribute{
				MarkdownDescription: "Detect multiplier",
				Computed:            true,
			},
			"neighbors": schema.ListNestedAttribute{
				MarkdownDescription: "Neighbor address",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"neighbor_address": schema.StringAttribute{
							MarkdownDescription: "Neighbor address",
							Computed:            true,
						},
						"remote_as": schema.StringAttribute{
							MarkdownDescription: "bgp as-number",
							Computed:            true,
						},
						"use_neighbor_group": schema.StringAttribute{
							MarkdownDescription: "Inherit configuration from a neighbor-group",
							Computed:            true,
						},
						"description": schema.StringAttribute{
							MarkdownDescription: "Neighbor specific description",
							Computed:            true,
						},
						"advertisement_interval_seconds": schema.Int64Attribute{
							MarkdownDescription: "Minimum interval between sending BGP routing updates",
							Computed:            true,
						},
						"advertisement_interval_milliseconds": schema.Int64Attribute{
							MarkdownDescription: "time in milliseconds",
							Computed:            true,
						},
						"ignore_connected_check": schema.BoolAttribute{
							MarkdownDescription: "Bypass the directly connected nexthop check for single-hop eBGP peering",
							Computed:            true,
						},
						"ebgp_multihop_maximum_hop_count": schema.Int64Attribute{
							MarkdownDescription: "maximum hop count",
							Computed:            true,
						},
						"bfd_minimum_interval": schema.Int64Attribute{
							MarkdownDescription: "Hello interval",
							Computed:            true,
						},
						"bfd_multiplier": schema.Int64Attribute{
							MarkdownDescription: "Detect multiplier",
							Computed:            true,
						},
						"bfd_fast_detect": schema.BoolAttribute{
							MarkdownDescription: "Enable Fast detection",
							Computed:            true,
						},
						"bfd_fast_detect_strict_mode": schema.BoolAttribute{
							MarkdownDescription: "Hold down neighbor session until BFD session is up",
							Computed:            true,
						},
						"bfd_fast_detect_disable": schema.BoolAttribute{
							MarkdownDescription: "Prevent bfd settings from being inherited from the parent",
							Computed:            true,
						},
						"local_as": schema.StringAttribute{
							MarkdownDescription: "bgp as-number",
							Computed:            true,
						},
						"local_as_no_prepend": schema.BoolAttribute{
							MarkdownDescription: "Do not prepend local AS to announcements from this neighbor",
							Computed:            true,
						},
						"local_as_replace_as": schema.BoolAttribute{
							MarkdownDescription: "Prepend only local AS to announcements to this neighbor",
							Computed:            true,
						},
						"local_as_dual_as": schema.BoolAttribute{
							MarkdownDescription: "Dual-AS mode",
							Computed:            true,
						},
						"password": schema.StringAttribute{
							MarkdownDescription: "Specifies an ENCRYPTED password will follow",
							Computed:            true,
						},
						"shutdown": schema.BoolAttribute{
							MarkdownDescription: "Administratively shut down this neighbor",
							Computed:            true,
						},
						"timers_keepalive_interval": schema.Int64Attribute{
							MarkdownDescription: "BGP timers",
							Computed:            true,
						},
						"timers_holdtime": schema.StringAttribute{
							MarkdownDescription: "Holdtime. Set 0 to disable keepalives/hold time.",
							Computed:            true,
						},
						"update_source": schema.StringAttribute{
							MarkdownDescription: "Source of routing updates",
							Computed:            true,
						},
						"ttl_security": schema.BoolAttribute{
							MarkdownDescription: "Enable EBGP TTL security",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *RouterBGPVRFDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *RouterBGPVRFDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config RouterBGPVRFData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
