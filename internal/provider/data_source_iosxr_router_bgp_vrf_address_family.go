// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin model

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &RouterBGPVRFAddressFamilyDataSource{}
	_ datasource.DataSourceWithConfigure = &RouterBGPVRFAddressFamilyDataSource{}
)

func NewRouterBGPVRFAddressFamilyDataSource() datasource.DataSource {
	return &RouterBGPVRFAddressFamilyDataSource{}
}

type RouterBGPVRFAddressFamilyDataSource struct {
	data *IosxrProviderData
}

func (d *RouterBGPVRFAddressFamilyDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_router_bgp_vrf_address_family"
}

func (d *RouterBGPVRFAddressFamilyDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router BGP VRF Address Family configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"as_number": schema.StringAttribute{
				MarkdownDescription: "bgp as-number",
				Required:            true,
			},
			"vrf_name": schema.StringAttribute{
				MarkdownDescription: "VRF name - maximum length 32 characters",
				Required:            true,
			},
			"af_name": schema.StringAttribute{
				MarkdownDescription: "Enter Address Family command mode",
				Required:            true,
			},
			"additional_paths_send": schema.BoolAttribute{
				MarkdownDescription: "Additional paths Send capability",
				Computed:            true,
			},
			"additional_paths_send_disable": schema.BoolAttribute{
				MarkdownDescription: "Do not advertise additional paths Send capability",
				Computed:            true,
			},
			"additional_paths_receive": schema.BoolAttribute{
				MarkdownDescription: "Additional paths Receive capability",
				Computed:            true,
			},
			"additional_paths_receive_disable": schema.BoolAttribute{
				MarkdownDescription: "Do not advertise additional paths Receive capability",
				Computed:            true,
			},
			"additional_paths_selection_route_policy": schema.StringAttribute{
				MarkdownDescription: "Route-policy for additional paths selection",
				Computed:            true,
			},
			"additional_paths_selection_disable": schema.BoolAttribute{
				MarkdownDescription: "Disable additional paths selection",
				Computed:            true,
			},
			"allocate_label_all": schema.BoolAttribute{
				MarkdownDescription: "Allocate labels for all prefixes",
				Computed:            true,
			},
			"allocate_label_all_unlabeled_path": schema.BoolAttribute{
				MarkdownDescription: "Allocate label for unlabeled paths too",
				Computed:            true,
			},
			"allocate_label_route_policy_name": schema.StringAttribute{
				MarkdownDescription: "Allocate label route policy",
				Computed:            true,
			},
			"allocate_label_route_policy_unlabeled_path": schema.BoolAttribute{
				MarkdownDescription: "Allocate label for unlabeled paths too",
				Computed:            true,
			},
			"advertise_best_external": schema.BoolAttribute{
				MarkdownDescription: "Advertise best-external path",
				Computed:            true,
			},
			"maximum_paths_ebgp_multipath": schema.Int64Attribute{
				MarkdownDescription: "Number of paths (limit includes backup path)",
				Computed:            true,
			},
			"maximum_paths_ebgp_selective": schema.BoolAttribute{
				MarkdownDescription: "Allow multipaths only from marked neighbors",
				Computed:            true,
			},
			"maximum_paths_ebgp_route_policy": schema.StringAttribute{
				MarkdownDescription: "Route policy to specify ORF and inbound filter",
				Computed:            true,
			},
			"maximum_paths_ibgp_multipath": schema.Int64Attribute{
				MarkdownDescription: "Number of paths (limit includes backup path)",
				Computed:            true,
			},
			"maximum_paths_ibgp_unequal_cost_deterministic": schema.BoolAttribute{
				MarkdownDescription: "Deterministic Multipath selection primarily on IGP metric order",
				Computed:            true,
			},
			"maximum_paths_ibgp_selective": schema.BoolAttribute{
				MarkdownDescription: "Allow multipaths only from marked neighbors",
				Computed:            true,
			},
			"maximum_paths_ibgp_route_policy": schema.StringAttribute{
				MarkdownDescription: "Route policy to specify ORF and inbound filter",
				Computed:            true,
			},
			"maximum_paths_eibgp_multipath": schema.Int64Attribute{
				MarkdownDescription: "Number of paths (limit includes backup path)",
				Computed:            true,
			},
			"maximum_paths_eibgp_equal_cost": schema.BoolAttribute{
				MarkdownDescription: "Preserve equal nexthop IGP metric criteria for multipath eligiblity between same path-types (iBGP or eBGP)",
				Computed:            true,
			},
			"maximum_paths_eibgp_selective": schema.BoolAttribute{
				MarkdownDescription: "Allow multipaths only from marked neighbors",
				Computed:            true,
			},
			"maximum_paths_eibgp_route_policy": schema.StringAttribute{
				MarkdownDescription: "Route policy to specify ORF and inbound filter",
				Computed:            true,
			},
			"maximum_paths_unique_nexthop_check_disable": schema.BoolAttribute{
				MarkdownDescription: "Disable multipath unique nexthop check",
				Computed:            true,
			},
			"label_mode_per_prefix": schema.BoolAttribute{
				MarkdownDescription: "Set per perfix label mode",
				Computed:            true,
			},
			"label_mode_per_ce": schema.BoolAttribute{
				MarkdownDescription: "Set per CE label mode",
				Computed:            true,
			},
			"label_mode_per_vrf": schema.BoolAttribute{
				MarkdownDescription: "Set per VRF label mode",
				Computed:            true,
			},
			"label_mode_per_vrf_46": schema.BoolAttribute{
				MarkdownDescription: "Set per VRF 46 label mode",
				Computed:            true,
			},
			"label_mode_route_policy": schema.StringAttribute{
				MarkdownDescription: "Use a route policy to select prefixes for label allocation mode",
				Computed:            true,
			},
			"label_mode_per_nexthop_received_label": schema.BoolAttribute{
				MarkdownDescription: "Set label mode per nexthop and received label",
				Computed:            true,
			},
			"label_mode_per_nexthop_received_label_allocate_secondary_label": schema.BoolAttribute{
				MarkdownDescription: "Allocate secondary label to avoid label oscillation insymmetric PIC deployments",
				Computed:            true,
			},
			"segment_routing_srv6_locator": schema.StringAttribute{
				MarkdownDescription: "Specify locator",
				Computed:            true,
			},
			"segment_routing_srv6_alloc_mode_per_ce": schema.BoolAttribute{
				MarkdownDescription: "Set SRv6 per CE SID mode",
				Computed:            true,
			},
			"segment_routing_srv6_alloc_mode_per_vrf": schema.BoolAttribute{
				MarkdownDescription: "Set SRv6 per VRF SID mode",
				Computed:            true,
			},
			"segment_routing_srv6_alloc_mode_per_vrf_46": schema.BoolAttribute{
				MarkdownDescription: "Set SRv6 per VRF 46 SID mode",
				Computed:            true,
			},
			"segment_routing_srv6_alloc_mode_route_policy": schema.StringAttribute{
				MarkdownDescription: "Use a route policy to determine the SID allocation mode and locator (if provided) for given prefix",
				Computed:            true,
			},
			"aggregate_addresses": schema.ListNestedAttribute{
				MarkdownDescription: "Configure BGP aggregate entries",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							MarkdownDescription: "IPaddress",
							Computed:            true,
						},
						"prefix": schema.Int64Attribute{
							MarkdownDescription: "IP address prefix",
							Computed:            true,
						},
						"as_set": schema.BoolAttribute{
							MarkdownDescription: "Generate AS set path information",
							Computed:            true,
						},
						"as_confed_set": schema.BoolAttribute{
							MarkdownDescription: "Generate AS confed set path information",
							Computed:            true,
						},
						"summary_only": schema.BoolAttribute{
							MarkdownDescription: "Filter more specific routes from updates",
							Computed:            true,
						},
						"route_policy": schema.StringAttribute{
							MarkdownDescription: "Route-policy to modify the attributes",
							Computed:            true,
						},
						"description": schema.StringAttribute{
							MarkdownDescription: "Aggreate address specific description",
							Computed:            true,
						},
						"set_tag": schema.Int64Attribute{
							MarkdownDescription: "Set a IGP tag value on the route",
							Computed:            true,
						},
					},
				},
			},
			"networks": schema.ListNestedAttribute{
				MarkdownDescription: "Specify a network to announce via BGP",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							MarkdownDescription: "IPaddress",
							Computed:            true,
						},
						"prefix": schema.Int64Attribute{
							MarkdownDescription: "IP address prefix",
							Computed:            true,
						},
						"route_policy": schema.StringAttribute{
							MarkdownDescription: "Route-policy to modify the attributes",
							Computed:            true,
						},
						"backdoor": schema.BoolAttribute{
							MarkdownDescription: "Specify a BGP backdoor route",
							Computed:            true,
						},
						"multipath": schema.BoolAttribute{
							MarkdownDescription: "Enable installation of multiple paths from RIB",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_ospf": schema.ListNestedAttribute{
				MarkdownDescription: "Redistribute OSPF routes",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"router_tag": schema.StringAttribute{
							MarkdownDescription: "OSPF router tag",
							Computed:            true,
						},
						"match_internal": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal routes",
							Computed:            true,
						},
						"match_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external routes",
							Computed:            true,
						},
						"match_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF NSSA external routes",
							Computed:            true,
						},
						"match_internal_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal and external routes",
							Computed:            true,
						},
						"match_internal_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal and external type 1 routes",
							Computed:            true,
						},
						"match_internal_external_1_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external type 1 and NSSA external routes",
							Computed:            true,
						},
						"match_internal_external_1_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external type 1 and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_internal_external_1_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external type 1 and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_internal_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal and external type 2 routes",
							Computed:            true,
						},
						"match_internal_external_2_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external type 2 and NSSA external routes",
							Computed:            true,
						},
						"match_internal_external_2_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external type 2 and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_internal_external_2_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external type 2 and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_internal_external_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external and NSSA external routes",
							Computed:            true,
						},
						"match_internal_external_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_internal_external_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal, external and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_internal_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal and NSSA external routes",
							Computed:            true,
						},
						"match_internal_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_internal_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external type 1 routes",
							Computed:            true,
						},
						"match_external_1_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external type 1 and NSSA external routes",
							Computed:            true,
						},
						"match_external_1_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external type 1 and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_external_1_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external type 1 and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external type 2 routes",
							Computed:            true,
						},
						"match_external_2_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external type 2 and NSSA external routes",
							Computed:            true,
						},
						"match_external_2_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external type 2 and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_external_2_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external type 2 and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_external_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external and NSSA external routes",
							Computed:            true,
						},
						"match_external_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_external_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF NSSA external type 1 routes",
							Computed:            true,
						},
						"match_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF NSSA external type 2 routes",
							Computed:            true,
						},
						"metric": schema.Int64Attribute{
							MarkdownDescription: "Metric for redistributed routes",
							Computed:            true,
						},
						"multipath": schema.BoolAttribute{
							MarkdownDescription: "Enable installation of multiple paths from RIB",
							Computed:            true,
						},
						"route_policy": schema.StringAttribute{
							MarkdownDescription: "Route policy reference",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_ospfv3": schema.ListNestedAttribute{
				MarkdownDescription: "Redistribute OSPFv3 routes",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"router_tag": schema.StringAttribute{
							MarkdownDescription: "OSPFv3 router tag",
							Computed:            true,
						},
						"match_internal": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal routes",
							Computed:            true,
						},
						"match_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external routes",
							Computed:            true,
						},
						"match_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 NSSA external routes",
							Computed:            true,
						},
						"match_internal_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal and external routes",
							Computed:            true,
						},
						"match_internal_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal and external type 1 routes",
							Computed:            true,
						},
						"match_internal_external_1_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external type 1 and NSSA external routes",
							Computed:            true,
						},
						"match_internal_external_1_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external type 1 and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_internal_external_1_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external type 1 and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_internal_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal and external type 2 routes",
							Computed:            true,
						},
						"match_internal_external_2_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external type 2 and NSSA external routes",
							Computed:            true,
						},
						"match_internal_external_2_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external type 2 and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_internal_external_2_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external type 2 and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_internal_external_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external and NSSA external routes",
							Computed:            true,
						},
						"match_internal_external_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_internal_external_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal, external and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_internal_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal and NSSA external routes",
							Computed:            true,
						},
						"match_internal_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_internal_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 internal and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external type 1 routes",
							Computed:            true,
						},
						"match_external_1_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external type 1 and NSSA external routes",
							Computed:            true,
						},
						"match_external_1_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external type 1 and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_external_1_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external type 1 and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external type 2 routes",
							Computed:            true,
						},
						"match_external_2_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external type 2 and NSSA external routes",
							Computed:            true,
						},
						"match_external_2_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external type 2 and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_external_2_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external type 2 and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_external_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external and NSSA external routes",
							Computed:            true,
						},
						"match_external_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external and NSSA external type 1 routes",
							Computed:            true,
						},
						"match_external_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 external and NSSA external type 2 routes",
							Computed:            true,
						},
						"match_nssa_external_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 NSSA external type 1 routes",
							Computed:            true,
						},
						"match_nssa_external_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPFv3 NSSA external type 2 routes",
							Computed:            true,
						},
						"metric": schema.Int64Attribute{
							MarkdownDescription: "Metric for redistributed routes",
							Computed:            true,
						},
						"multipath": schema.BoolAttribute{
							MarkdownDescription: "Enable installation of multiple paths from RIB",
							Computed:            true,
						},
						"route_policy": schema.StringAttribute{
							MarkdownDescription: "Route policy reference",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_eigrp": schema.ListNestedAttribute{
				MarkdownDescription: "Redistribute EIGRP routes",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_name": schema.StringAttribute{
							MarkdownDescription: "EIGRP instance name",
							Computed:            true,
						},
						"match_internal": schema.BoolAttribute{
							MarkdownDescription: "Redistribute EIGRP internal routes",
							Computed:            true,
						},
						"match_internal_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute EIGRP internal and external routes",
							Computed:            true,
						},
						"match_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute EIGRP external routes",
							Computed:            true,
						},
						"metric": schema.Int64Attribute{
							MarkdownDescription: "Metric for redistributed routes",
							Computed:            true,
						},
						"multipath": schema.BoolAttribute{
							MarkdownDescription: "Enable installation of multiple paths from RIB",
							Computed:            true,
						},
						"route_policy": schema.StringAttribute{
							MarkdownDescription: "Route policy reference",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_isis": schema.ListNestedAttribute{
				MarkdownDescription: "Redistribute ISIS routes",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_name": schema.StringAttribute{
							MarkdownDescription: "ISIS instance name",
							Computed:            true,
						},
						"level_1": schema.BoolAttribute{
							MarkdownDescription: "Redistribute ISIS level 1 routes",
							Computed:            true,
						},
						"level_1_level_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute ISIS level 1 and level 2 routes",
							Computed:            true,
						},
						"level_1_level_2_level_1_inter_area": schema.BoolAttribute{
							MarkdownDescription: "Redistribute ISIS level 1, level 2 and level 1 inter-area routes",
							Computed:            true,
						},
						"level_1_level_1_inter_area": schema.BoolAttribute{
							MarkdownDescription: "Redistribute ISIS level 1 and level 1 inter-area routes",
							Computed:            true,
						},
						"level_2": schema.BoolAttribute{
							MarkdownDescription: "Redistribute ISIS level 2 routes",
							Computed:            true,
						},
						"level_2_level_1_inter_area": schema.BoolAttribute{
							MarkdownDescription: "Redistribute ISIS level 2 and level 1 inter-area routes",
							Computed:            true,
						},
						"level_1_inter_area": schema.BoolAttribute{
							MarkdownDescription: "Redistribute ISIS level 1 inter-area routes",
							Computed:            true,
						},
						"metric": schema.Int64Attribute{
							MarkdownDescription: "Metric for redistributed routes",
							Computed:            true,
						},
						"multipath": schema.BoolAttribute{
							MarkdownDescription: "Enable installation of multiple paths from RIB",
							Computed:            true,
						},
						"route_policy": schema.StringAttribute{
							MarkdownDescription: "Route policy reference",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_connected": schema.BoolAttribute{
				MarkdownDescription: "Redistribute connected routes",
				Computed:            true,
			},
			"redistribute_connected_metric": schema.Int64Attribute{
				MarkdownDescription: "Metric for redistributed routes",
				Computed:            true,
			},
			"redistribute_connected_multipath": schema.BoolAttribute{
				MarkdownDescription: "Enable installation of multiple paths from RIB",
				Computed:            true,
			},
			"redistribute_connected_route_policy": schema.StringAttribute{
				MarkdownDescription: "Route policy reference",
				Computed:            true,
			},
			"redistribute_static": schema.BoolAttribute{
				MarkdownDescription: "Redistribute static routes",
				Computed:            true,
			},
			"redistribute_static_metric": schema.Int64Attribute{
				MarkdownDescription: "Metric for redistributed routes",
				Computed:            true,
			},
			"redistribute_static_multipath": schema.BoolAttribute{
				MarkdownDescription: "Enable installation of multiple paths from RIB",
				Computed:            true,
			},
			"redistribute_static_route_policy": schema.StringAttribute{
				MarkdownDescription: "Route policy reference",
				Computed:            true,
			},
			"redistribute_rip": schema.BoolAttribute{
				MarkdownDescription: "Redistribute RIP routes",
				Computed:            true,
			},
			"redistribute_rip_metric": schema.Int64Attribute{
				MarkdownDescription: "Metric for redistributed routes",
				Computed:            true,
			},
			"redistribute_rip_multipath": schema.BoolAttribute{
				MarkdownDescription: "Enable installation of multiple paths from RIB",
				Computed:            true,
			},
			"redistribute_rip_route_policy": schema.StringAttribute{
				MarkdownDescription: "Route policy reference",
				Computed:            true,
			},
		},
	}
}

func (d *RouterBGPVRFAddressFamilyDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.data = req.ProviderData.(*IosxrProviderData)
}

// End of section. //template:end model

// Section below is generated&owned by "gen/generator.go". //template:begin read

func (d *RouterBGPVRFAddressFamilyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config RouterBGPVRFAddressFamilyData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := d.data.Devices[config.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", config.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	if device.Managed {
		getResp, err := d.data.Client.Get(ctx, config.Device.ValueString(), config.getPath())
		if err != nil {
			resp.Diagnostics.AddError("Unable to apply gNMI Get operation", err.Error())
			return
		}

		config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	}

	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}

// End of section. //template:end read
