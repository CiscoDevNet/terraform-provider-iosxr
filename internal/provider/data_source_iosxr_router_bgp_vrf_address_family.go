// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourceRouterBGPVRFAddressFamilyType struct{}

func (t dataSourceRouterBGPVRFAddressFamilyType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router BGP VRF Address Family configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"as_number": {
				MarkdownDescription: "bgp as-number",
				Type:                types.StringType,
				Required:            true,
			},
			"vrf_name": {
				MarkdownDescription: "Specify a vrf name",
				Type:                types.StringType,
				Required:            true,
			},
			"af_name": {
				MarkdownDescription: "Enter Address Family command mode",
				Type:                types.StringType,
				Required:            true,
			},
			"maximum_paths_ebgp_multipath": {
				MarkdownDescription: "eBGP-multipath",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"maximum_paths_eibgp_multipath": {
				MarkdownDescription: "eiBGP-multipath",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"maximum_paths_ibgp_multipath": {
				MarkdownDescription: "iBGP-multipath",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"label_mode_per_ce": {
				MarkdownDescription: "Set per CE label mode",
				Type:                types.BoolType,
				Computed:            true,
			},
			"label_mode_per_vrf": {
				MarkdownDescription: "Set per VRF label mode",
				Type:                types.BoolType,
				Computed:            true,
			},
			"redistribute_connected": {
				MarkdownDescription: "Connected routes",
				Type:                types.BoolType,
				Computed:            true,
			},
			"redistribute_connected_metric": {
				MarkdownDescription: "Metric for redistributed routes",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"redistribute_static": {
				MarkdownDescription: "Static routes",
				Type:                types.BoolType,
				Computed:            true,
			},
			"redistribute_static_metric": {
				MarkdownDescription: "Metric for redistributed routes",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"aggregate_addresses": {
				MarkdownDescription: "IPv6 Aggregate address and mask or masklength",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"address": {
						MarkdownDescription: "IPv6 Aggregate address and mask or masklength",
						Type:                types.StringType,
						Computed:            true,
					},
					"masklength": {
						MarkdownDescription: "Network in prefix/length format (prefix part)",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"as_set": {
						MarkdownDescription: "Generate AS set path information",
						Type:                types.BoolType,
						Computed:            true,
					},
					"as_confed_set": {
						MarkdownDescription: "Generate AS confed set path information",
						Type:                types.BoolType,
						Computed:            true,
					},
					"summary_only": {
						MarkdownDescription: "Filter more specific routes from updates",
						Type:                types.BoolType,
						Computed:            true,
					},
				}, tfsdk.ListNestedAttributesOptions{}),
			},
			"networks": {
				MarkdownDescription: "IPv6 network and mask or masklength",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"address": {
						MarkdownDescription: "IPv6 network and mask or masklength",
						Type:                types.StringType,
						Computed:            true,
					},
					"masklength": {
						MarkdownDescription: "Network in prefix/length format (prefix part)",
						Type:                types.Int64Type,
						Computed:            true,
					},
				}, tfsdk.ListNestedAttributesOptions{}),
			},
			"redistribute_ospf": {
				MarkdownDescription: "Open Shortest Path First (OSPF/OSPFv3)",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"router_tag": {
						MarkdownDescription: "Open Shortest Path First (OSPF)",
						Type:                types.StringType,
						Computed:            true,
					},
					"match_internal": {
						MarkdownDescription: "Redistribute OSPF internal routes",
						Type:                types.BoolType,
						Computed:            true,
					},
					"match_internal_external": {
						MarkdownDescription: "Redistribute OSPF external routes",
						Type:                types.BoolType,
						Computed:            true,
					},
					"match_internal_nssa_external": {
						MarkdownDescription: "Redistribute OSPF NSSA external routes",
						Type:                types.BoolType,
						Computed:            true,
					},
					"match_external": {
						MarkdownDescription: "Redistribute OSPF external routes",
						Type:                types.BoolType,
						Computed:            true,
					},
					"match_external_nssa_external": {
						MarkdownDescription: "Redistribute OSPF NSSA external routes",
						Type:                types.BoolType,
						Computed:            true,
					},
					"match_nssa_external": {
						MarkdownDescription: "Redistribute OSPF NSSA external routes",
						Type:                types.BoolType,
						Computed:            true,
					},
					"metric": {
						MarkdownDescription: "Metric for redistributed routes",
						Type:                types.Int64Type,
						Computed:            true,
					},
				}, tfsdk.ListNestedAttributesOptions{}),
			},
		},
	}, nil
}

func (t dataSourceRouterBGPVRFAddressFamilyType) NewDataSource(ctx context.Context, in tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceRouterBGPVRFAddressFamily{
		provider: provider,
	}, diags
}

type dataSourceRouterBGPVRFAddressFamily struct {
	provider provider
}

func (d dataSourceRouterBGPVRFAddressFamily) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	var config RouterBGPVRFAddressFamily

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.provider.client.Get(ctx, config.Device.Value, config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
