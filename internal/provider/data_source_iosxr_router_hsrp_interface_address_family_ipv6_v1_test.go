// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxrRouterHSRPInterfaceAddressFamilyIPv6V1(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "name", "gp1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "mac_address", "00:02:00:01:00:01"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "timers_hold_time", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "timers_hold_time2", "20"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "timers_msec", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "timers_msec2", "130"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "preempt_delay", "256"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "priority", "244"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "bfd_fast_detect_peer_ipv6", "fe80::240:d0ff:fe48:4672"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "bfd_fast_detect_peer_interface", "GigabitEthernet0/0/0/2"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "track_objects.0.object_name", "TOBJ1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "track_objects.0.priority_decrement", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "track_interfaces.0.track_name", "GigabitEthernet0/0/0/4"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "track_interfaces.0.priority_decrement", "244"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_router_hsrp_interface_address_family_ipv6_v1.test", "address_link_local_autoconfig_legacy_compatible", "true"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrRouterHSRPInterfaceAddressFamilyIPv6V1Config(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

func testAccDataSourceIosxrRouterHSRPInterfaceAddressFamilyIPv6V1Config() string {
	config := `resource "iosxr_router_hsrp_interface_address_family_ipv6_v1" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	interface_name = "GigabitEthernet0/0/0/1"` + "\n"
	config += `	group_number_version_1_id = 135` + "\n"
	config += `	name = "gp1"` + "\n"
	config += `	mac_address = "00:02:00:01:00:01"` + "\n"
	config += `	timers_hold_time = 10` + "\n"
	config += `	timers_hold_time2 = 20` + "\n"
	config += `	timers_msec = 100` + "\n"
	config += `	timers_msec2 = 130` + "\n"
	config += `	preempt_delay = 256` + "\n"
	config += `	priority = 244` + "\n"
	config += `	bfd_fast_detect_peer_ipv6 = "fe80::240:d0ff:fe48:4672"` + "\n"
	config += `	bfd_fast_detect_peer_interface = "GigabitEthernet0/0/0/2"` + "\n"
	config += `	track_objects = [{` + "\n"
	config += `		object_name = "TOBJ1"` + "\n"
	config += `		priority_decrement = 10` + "\n"
	config += `	}]` + "\n"
	config += `	track_interfaces = [{` + "\n"
	config += `		track_name = "GigabitEthernet0/0/0/4"` + "\n"
	config += `		priority_decrement = 244` + "\n"
	config += `	}]` + "\n"
	config += `	address_link_local_autoconfig_legacy_compatible = true` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxr_router_hsrp_interface_address_family_ipv6_v1" "test" {
			interface_name = "GigabitEthernet0/0/0/1"
			group_number_version_1_id = 135
			depends_on = [iosxr_router_hsrp_interface_address_family_ipv6_v1.test]
		}
	`
	return config
}
