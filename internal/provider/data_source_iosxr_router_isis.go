// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/terraform-provider-iosxr/internal/provider/client"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &RouterISISDataSource{}
	_ datasource.DataSourceWithConfigure = &RouterISISDataSource{}
)

func NewRouterISISDataSource() datasource.DataSource {
	return &RouterISISDataSource{}
}

type RouterISISDataSource struct {
	client *client.Client
}

func (d *RouterISISDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_router_isis"
}

func (d *RouterISISDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router ISIS configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"process_id": schema.StringAttribute{
				MarkdownDescription: "Process ID",
				Required:            true,
			},
			"is_type": schema.StringAttribute{
				MarkdownDescription: "Area type (level)",
				Computed:            true,
			},
			"set_overload_bit_levels": schema.ListNestedAttribute{
				MarkdownDescription: "Set overload-bit for one level only",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"level_id": schema.Int64Attribute{
							MarkdownDescription: "Set overload-bit for one level only",
							Computed:            true,
						},
						"on_startup_advertise_as_overloaded": schema.BoolAttribute{
							MarkdownDescription: "Time in seconds to advertise ourself as overloaded after reboot",
							Computed:            true,
						},
						"on_startup_advertise_as_overloaded_time_to_advertise": schema.Int64Attribute{
							MarkdownDescription: "Time in seconds to advertise ourself as overloaded after reboot",
							Computed:            true,
						},
						"on_startup_wait_for_bgp": schema.BoolAttribute{
							MarkdownDescription: "Set overload bit on startup until BGP signals convergence, or timeout",
							Computed:            true,
						},
						"advertise_external": schema.BoolAttribute{
							MarkdownDescription: "If overload-bit set advertise IP prefixes learned from other protocols",
							Computed:            true,
						},
						"advertise_interlevel": schema.BoolAttribute{
							MarkdownDescription: "If overload-bit set advertise IP prefixes learned from another ISIS level",
							Computed:            true,
						},
					},
				},
			},
			"nsr": schema.BoolAttribute{
				MarkdownDescription: "Enable NSR",
				Computed:            true,
			},
			"nsf_cisco": schema.BoolAttribute{
				MarkdownDescription: "Cisco Proprietary NSF restart",
				Computed:            true,
			},
			"nsf_ietf": schema.BoolAttribute{
				MarkdownDescription: "IETF NSF restar",
				Computed:            true,
			},
			"nsf_lifetime": schema.Int64Attribute{
				MarkdownDescription: "Maximum route lifetime following restart (seconds)",
				Computed:            true,
			},
			"nsf_interface_timer": schema.Int64Attribute{
				MarkdownDescription: "Timer used to wait for a restart ACK (seconds)",
				Computed:            true,
			},
			"nsf_interface_expires": schema.Int64Attribute{
				MarkdownDescription: "# of times T1 can expire waiting for the restart ACK",
				Computed:            true,
			},
			"log_adjacency_changes": schema.BoolAttribute{
				MarkdownDescription: "Enable logging adjacency state changes",
				Computed:            true,
			},
			"lsp_gen_interval_maximum_wait": schema.Int64Attribute{
				MarkdownDescription: "Maximum delay before generating an LSP",
				Computed:            true,
			},
			"lsp_gen_interval_initial_wait": schema.Int64Attribute{
				MarkdownDescription: "Initial delay before generating an LSP",
				Computed:            true,
			},
			"lsp_gen_interval_secondary_wait": schema.Int64Attribute{
				MarkdownDescription: "Secondary delay before generating an LSP",
				Computed:            true,
			},
			"lsp_refresh_interval": schema.Int64Attribute{
				MarkdownDescription: "Set LSP refresh interval",
				Computed:            true,
			},
			"max_lsp_lifetime": schema.Int64Attribute{
				MarkdownDescription: "Set maximum LSP lifetime",
				Computed:            true,
			},
			"lsp_password_keychain": schema.StringAttribute{
				MarkdownDescription: "Specifies a Key Chain name will follow",
				Computed:            true,
			},
			"distribute_link_state_instance_id": schema.Int64Attribute{
				MarkdownDescription: "Set distribution process instance identifier",
				Computed:            true,
			},
			"distribute_link_state_throttle": schema.Int64Attribute{
				MarkdownDescription: "Set throttle update in seconds",
				Computed:            true,
			},
			"distribute_link_state_level": schema.Int64Attribute{
				MarkdownDescription: "Set distribution for one level only",
				Computed:            true,
			},
			"affinity_maps": schema.ListNestedAttribute{
				MarkdownDescription: "Affinity map configuration",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "Affinity map configuration",
							Computed:            true,
						},
						"bit_position": schema.Int64Attribute{
							MarkdownDescription: "Bit position for affinity attribute value",
							Computed:            true,
						},
					},
				},
			},
			"flex_algos": schema.ListNestedAttribute{
				MarkdownDescription: "Flex Algorithm definition",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"algorithm_number": schema.Int64Attribute{
							MarkdownDescription: "Flex Algorithm definition",
							Computed:            true,
						},
						"advertise_definition": schema.BoolAttribute{
							MarkdownDescription: "Advertise the Flex-Algo Definition",
							Computed:            true,
						},
						"metric_type_delay": schema.BoolAttribute{
							MarkdownDescription: "Use delay as metric",
							Computed:            true,
						},
					},
				},
			},
			"nets": schema.ListNestedAttribute{
				MarkdownDescription: "A Network Entity Title (NET) for this process",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"net_id": schema.StringAttribute{
							MarkdownDescription: "A Network Entity Title (NET) for this process",
							Computed:            true,
						},
					},
				},
			},
			"interfaces": schema.ListNestedAttribute{
				MarkdownDescription: "Enter the IS-IS interface configuration submode",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"interface_name": schema.StringAttribute{
							MarkdownDescription: "Enter the IS-IS interface configuration submode",
							Computed:            true,
						},
						"circuit_type": schema.StringAttribute{
							MarkdownDescription: "Configure circuit type for interface",
							Computed:            true,
						},
						"hello_padding_disable": schema.BoolAttribute{
							MarkdownDescription: "Disable hello-padding",
							Computed:            true,
						},
						"hello_padding_sometimes": schema.BoolAttribute{
							MarkdownDescription: "Enable hello-padding during adjacency formation only",
							Computed:            true,
						},
						"priority": schema.Int64Attribute{
							MarkdownDescription: "Set priority for Designated Router election",
							Computed:            true,
						},
						"point_to_point": schema.BoolAttribute{
							MarkdownDescription: "Treat active LAN interface as point-to-point",
							Computed:            true,
						},
						"passive": schema.BoolAttribute{
							MarkdownDescription: "Do not establish adjacencies over this interface",
							Computed:            true,
						},
						"suppressed": schema.BoolAttribute{
							MarkdownDescription: "Do not advertise connected prefixes of this interface",
							Computed:            true,
						},
						"shutdown": schema.BoolAttribute{
							MarkdownDescription: "Shutdown IS-IS on this interface",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *RouterISISDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *RouterISISDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config RouterISIS

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
