// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/terraform-provider-iosxr/internal/provider/client"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &RouterISISDataSource{}
	_ datasource.DataSourceWithConfigure = &RouterISISDataSource{}
)

func NewRouterISISDataSource() datasource.DataSource {
	return &RouterISISDataSource{}
}

type RouterISISDataSource struct {
	client *client.Client
}

func (d *RouterISISDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_router_isis"
}

func (d *RouterISISDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router ISIS configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"process_id": schema.StringAttribute{
				MarkdownDescription: "Process ID",
				Required:            true,
			},
			"is_type": schema.StringAttribute{
				MarkdownDescription: "Area type (level)",
				Computed:            true,
			},
			"nets": schema.ListNestedAttribute{
				MarkdownDescription: "A Network Entity Title (NET) for this process",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"net_id": schema.StringAttribute{
							MarkdownDescription: "A Network Entity Title (NET) for this process",
							Computed:            true,
						},
					},
				},
			},
			"address_families": schema.ListNestedAttribute{
				MarkdownDescription: "IS-IS address family",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"af_name": schema.StringAttribute{
							MarkdownDescription: "Address family name",
							Computed:            true,
						},
						"saf_name": schema.StringAttribute{
							MarkdownDescription: "Sub address family name",
							Computed:            true,
						},
						"mpls_ldp_auto_config": schema.BoolAttribute{
							MarkdownDescription: "Enable LDP IGP interface auto-configuration",
							Computed:            true,
						},
						"metric_style_narrow": schema.BoolAttribute{
							MarkdownDescription: "Use old style of TLVs with narrow metric",
							Computed:            true,
						},
						"metric_style_wide": schema.BoolAttribute{
							MarkdownDescription: "Use new style of TLVs to carry wider metric",
							Computed:            true,
						},
						"metric_style_transition": schema.BoolAttribute{
							MarkdownDescription: "Send and accept both styles of TLVs during transition",
							Computed:            true,
						},
						"router_id_interface_name": schema.StringAttribute{
							MarkdownDescription: "Router ID Interface",
							Computed:            true,
						},
						"router_id_ip_address": schema.StringAttribute{
							MarkdownDescription: "Router ID address",
							Computed:            true,
						},
						"default_information_originate": schema.BoolAttribute{
							MarkdownDescription: "Distribute a default route",
							Computed:            true,
						},
					},
				},
			},
			"interfaces": schema.ListNestedAttribute{
				MarkdownDescription: "Enter the IS-IS interface configuration submode",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"interface_name": schema.StringAttribute{
							MarkdownDescription: "Enter the IS-IS interface configuration submode",
							Computed:            true,
						},
						"circuit_type": schema.StringAttribute{
							MarkdownDescription: "Configure circuit type for interface",
							Computed:            true,
						},
						"hello_padding_disable": schema.BoolAttribute{
							MarkdownDescription: "Disable hello-padding",
							Computed:            true,
						},
						"hello_padding_sometimes": schema.BoolAttribute{
							MarkdownDescription: "Enable hello-padding during adjacency formation only",
							Computed:            true,
						},
						"priority": schema.Int64Attribute{
							MarkdownDescription: "Set priority for Designated Router election",
							Computed:            true,
						},
						"point_to_point": schema.BoolAttribute{
							MarkdownDescription: "Treat active LAN interface as point-to-point",
							Computed:            true,
						},
						"passive": schema.BoolAttribute{
							MarkdownDescription: "Do not establish adjacencies over this interface",
							Computed:            true,
						},
						"suppressed": schema.BoolAttribute{
							MarkdownDescription: "Do not advertise connected prefixes of this interface",
							Computed:            true,
						},
						"shutdown": schema.BoolAttribute{
							MarkdownDescription: "Shutdown IS-IS on this interface",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *RouterISISDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *RouterISISDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config RouterISIS

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
