// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourceRouterISISAddressFamilyType struct{}

func (t dataSourceRouterISISAddressFamilyType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router ISIS Address Family configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"process_id": {
				MarkdownDescription: "Process ID",
				Type:                types.StringType,
				Required:            true,
			},
			"af_name": {
				MarkdownDescription: "Address family name",
				Type:                types.StringType,
				Required:            true,
			},
			"saf_name": {
				MarkdownDescription: "Sub address family name",
				Type:                types.StringType,
				Required:            true,
			},
			"mpls_ldp_auto_config": {
				MarkdownDescription: "Enable LDP IGP interface auto-configuration",
				Type:                types.BoolType,
				Computed:            true,
			},
			"metric_style_narrow": {
				MarkdownDescription: "Use old style of TLVs with narrow metric",
				Type:                types.BoolType,
				Computed:            true,
			},
			"metric_style_wide": {
				MarkdownDescription: "Use new style of TLVs to carry wider metric",
				Type:                types.BoolType,
				Computed:            true,
			},
			"metric_style_transition": {
				MarkdownDescription: "Send and accept both styles of TLVs during transition",
				Type:                types.BoolType,
				Computed:            true,
			},
			"router_id_interface_name": {
				MarkdownDescription: "Router ID Interface",
				Type:                types.StringType,
				Computed:            true,
			},
			"router_id_ip_address": {
				MarkdownDescription: "Router ID address",
				Type:                types.StringType,
				Computed:            true,
			},
			"default_information_originate": {
				MarkdownDescription: "Distribute a default route",
				Type:                types.BoolType,
				Computed:            true,
			},
		},
	}, nil
}

func (t dataSourceRouterISISAddressFamilyType) NewDataSource(ctx context.Context, in tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceRouterISISAddressFamily{
		provider: provider,
	}, diags
}

type dataSourceRouterISISAddressFamily struct {
	provider provider
}

func (d dataSourceRouterISISAddressFamily) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	var config RouterISISAddressFamily

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.provider.client.Get(ctx, config.Device.Value, config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
