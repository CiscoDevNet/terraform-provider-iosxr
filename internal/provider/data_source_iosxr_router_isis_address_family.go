// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/terraform-provider-iosxr/internal/provider/client"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &RouterISISAddressFamilyDataSource{}
	_ datasource.DataSourceWithConfigure = &RouterISISAddressFamilyDataSource{}
)

func NewRouterISISAddressFamilyDataSource() datasource.DataSource {
	return &RouterISISAddressFamilyDataSource{}
}

type RouterISISAddressFamilyDataSource struct {
	client *client.Client
}

func (d *RouterISISAddressFamilyDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_router_isis_address_family"
}

func (d *RouterISISAddressFamilyDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router ISIS Address Family configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"process_id": schema.StringAttribute{
				MarkdownDescription: "Process ID",
				Required:            true,
			},
			"af_name": schema.StringAttribute{
				MarkdownDescription: "Address family name",
				Required:            true,
			},
			"saf_name": schema.StringAttribute{
				MarkdownDescription: "Sub address family name",
				Required:            true,
			},
			"metric_style_narrow": schema.BoolAttribute{
				MarkdownDescription: "Use old style of TLVs with narrow metric",
				Computed:            true,
			},
			"metric_style_wide": schema.BoolAttribute{
				MarkdownDescription: "Use new style of TLVs to carry wider metric",
				Computed:            true,
			},
			"metric_style_transition": schema.BoolAttribute{
				MarkdownDescription: "Send and accept both styles of TLVs during transition",
				Computed:            true,
			},
			"metric_style_levels": schema.ListNestedAttribute{
				MarkdownDescription: "Set metric-style for one level only",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"level_id": schema.Int64Attribute{
							MarkdownDescription: "Set metric-style for one level only",
							Computed:            true,
						},
						"narrow": schema.BoolAttribute{
							MarkdownDescription: "Use old style of TLVs with narrow metric",
							Computed:            true,
						},
						"wide": schema.BoolAttribute{
							MarkdownDescription: "Use new style of TLVs to carry wider metric",
							Computed:            true,
						},
						"transition": schema.BoolAttribute{
							MarkdownDescription: "Send and accept both styles of TLVs during transition",
							Computed:            true,
						},
					},
				},
			},
			"router_id_interface_name": schema.StringAttribute{
				MarkdownDescription: "Router ID Interface",
				Computed:            true,
			},
			"router_id_ip_address": schema.StringAttribute{
				MarkdownDescription: "Router ID address",
				Computed:            true,
			},
			"default_information_originate": schema.BoolAttribute{
				MarkdownDescription: "Distribute a default route",
				Computed:            true,
			},
			"fast_reroute_delay_interval": schema.Int64Attribute{
				MarkdownDescription: "Delay before running FRR computation",
				Computed:            true,
			},
			"fast_reroute_per_link_priority_limit_critical": schema.BoolAttribute{
				MarkdownDescription: "Compute for critical priority prefixes only",
				Computed:            true,
			},
			"fast_reroute_per_link_priority_limit_high": schema.BoolAttribute{
				MarkdownDescription: "Compute for critical & high priority prefixes",
				Computed:            true,
			},
			"fast_reroute_per_link_priority_limit_medium": schema.BoolAttribute{
				MarkdownDescription: "Compute for critical, high & medium priority prefixes",
				Computed:            true,
			},
			"fast_reroute_per_prefix_priority_limit_critical": schema.BoolAttribute{
				MarkdownDescription: "Compute for critical priority prefixes only",
				Computed:            true,
			},
			"fast_reroute_per_prefix_priority_limit_high": schema.BoolAttribute{
				MarkdownDescription: "Compute for critical & high priority prefixes",
				Computed:            true,
			},
			"fast_reroute_per_prefix_priority_limit_medium": schema.BoolAttribute{
				MarkdownDescription: "Compute for critical, high & medium priority prefixes",
				Computed:            true,
			},
			"microloop_avoidance_protected": schema.BoolAttribute{
				MarkdownDescription: "Enable microloop avoidance for only protected prefixes",
				Computed:            true,
			},
			"microloop_avoidance_segment_routing": schema.BoolAttribute{
				MarkdownDescription: "Enable segment routing microloop avoidance ",
				Computed:            true,
			},
			"advertise_passive_only": schema.BoolAttribute{
				MarkdownDescription: "Advertise prefixes of passive interfaces only",
				Computed:            true,
			},
			"advertise_link_attributes": schema.BoolAttribute{
				MarkdownDescription: "Advertise additional link attributes",
				Computed:            true,
			},
			"mpls_ldp_auto_config": schema.BoolAttribute{
				MarkdownDescription: "Enable LDP IGP interface auto-configuration",
				Computed:            true,
			},
			"mpls_traffic_eng_router_id_ip_address": schema.StringAttribute{
				MarkdownDescription: "configure this node",
				Computed:            true,
			},
			"mpls_traffic_eng_router_id_interface": schema.StringAttribute{
				MarkdownDescription: "",
				Computed:            true,
			},
			"mpls_traffic_eng_level_1_2": schema.BoolAttribute{
				MarkdownDescription: "Enable mpls traffic-eng at both level 1 and 2",
				Computed:            true,
			},
			"mpls_traffic_eng_level_1": schema.BoolAttribute{
				MarkdownDescription: "Enable mpls traffic-eng at level 1",
				Computed:            true,
			},
			"mpls_traffic_eng_level_2_only": schema.BoolAttribute{
				MarkdownDescription: "Enable mpls traffic-eng at level 2",
				Computed:            true,
			},
			"spf_interval_maximum_wait": schema.Int64Attribute{
				MarkdownDescription: "Maximum delay before running a route calculation",
				Computed:            true,
			},
			"spf_interval_initial_wait": schema.Int64Attribute{
				MarkdownDescription: "Initial delay before running a route calculation",
				Computed:            true,
			},
			"spf_interval_secondary_wait": schema.Int64Attribute{
				MarkdownDescription: "Secondary delay before running a route calculation",
				Computed:            true,
			},
			"spf_prefix_priorities": schema.ListNestedAttribute{
				MarkdownDescription: "Configure a prefix priority list",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"priority": schema.StringAttribute{
							MarkdownDescription: "prefix priority",
							Computed:            true,
						},
						"tag": schema.Int64Attribute{
							MarkdownDescription: "Specify a tag to indicate priority",
							Computed:            true,
						},
						"access_list_name": schema.StringAttribute{
							MarkdownDescription: "Access-list name",
							Computed:            true,
						},
					},
				},
			},
			"segment_routing_mpls_sr_prefer": schema.BoolAttribute{
				MarkdownDescription: "Prefer segment routing labels over LDP labels",
				Computed:            true,
			},
			"maximum_redistributed_prefixes": schema.Int64Attribute{
				MarkdownDescription: "Maximum number of redistributed prefixes",
				Computed:            true,
			},
			"maximum_redistributed_prefixes_levels": schema.ListNestedAttribute{
				MarkdownDescription: "Set maximum redistributed prefixes for one level only",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"level_id": schema.Int64Attribute{
							MarkdownDescription: "Set maximum redistributed prefixes for one level only",
							Computed:            true,
						},
						"maximum_prefixes": schema.Int64Attribute{
							MarkdownDescription: "Maximum number of redistributed prefixes",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_id": schema.ListNestedAttribute{
				MarkdownDescription: "IS-IS",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_id": schema.StringAttribute{
							MarkdownDescription: "IS-IS",
							Computed:            true,
						},
						"route_policy": schema.StringAttribute{
							MarkdownDescription: "Route policy reference",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *RouterISISAddressFamilyDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *RouterISISAddressFamilyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config RouterISISAddressFamily

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
