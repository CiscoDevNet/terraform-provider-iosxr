// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &RouterOSPFDataSource{}
	_ datasource.DataSourceWithConfigure = &RouterOSPFDataSource{}
)

func NewRouterOSPFDataSource() datasource.DataSource {
	return &RouterOSPFDataSource{}
}

type RouterOSPFDataSource struct {
	client *client.Client
}

func (d *RouterOSPFDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_router_ospf"
}

func (d *RouterOSPFDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Router OSPF configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"process_name": schema.StringAttribute{
				MarkdownDescription: "Name for this OSPF process",
				Required:            true,
			},
			"mpls_ldp_sync": schema.BoolAttribute{
				MarkdownDescription: "Enable LDP IGP synchronization",
				Computed:            true,
			},
			"hello_interval": schema.Int64Attribute{
				MarkdownDescription: "Time between HELLO packets",
				Computed:            true,
			},
			"dead_interval": schema.Int64Attribute{
				MarkdownDescription: "Interval after which a neighbor is declared dead",
				Computed:            true,
			},
			"priority": schema.Int64Attribute{
				MarkdownDescription: "Router priority",
				Computed:            true,
			},
			"mtu_ignore_enable": schema.BoolAttribute{
				MarkdownDescription: "Ignores the MTU in DBD packets",
				Computed:            true,
			},
			"mtu_ignore_disable": schema.BoolAttribute{
				MarkdownDescription: "Disable ignoring the MTU in DBD packets",
				Computed:            true,
			},
			"passive_enable": schema.BoolAttribute{
				MarkdownDescription: "Enable passive",
				Computed:            true,
			},
			"passive_disable": schema.BoolAttribute{
				MarkdownDescription: "Disable passive",
				Computed:            true,
			},
			"router_id": schema.StringAttribute{
				MarkdownDescription: "configure this node",
				Computed:            true,
			},
			"redistribute_connected": schema.BoolAttribute{
				MarkdownDescription: "Connected routes",
				Computed:            true,
			},
			"redistribute_connected_tag": schema.Int64Attribute{
				MarkdownDescription: "Set tag for routes redistributed into OSPF",
				Computed:            true,
			},
			"redistribute_connected_metric_type": schema.StringAttribute{
				MarkdownDescription: "OSPF exterior metric type for redistributed routes",
				Computed:            true,
			},
			"redistribute_static": schema.BoolAttribute{
				MarkdownDescription: "Static routes",
				Computed:            true,
			},
			"redistribute_static_tag": schema.Int64Attribute{
				MarkdownDescription: "Set tag for routes redistributed into OSPF",
				Computed:            true,
			},
			"redistribute_static_metric_type": schema.StringAttribute{
				MarkdownDescription: "OSPF exterior metric type for redistributed routes",
				Computed:            true,
			},
			"bfd_fast_detect": schema.BoolAttribute{
				MarkdownDescription: "Enable Fast detection",
				Computed:            true,
			},
			"bfd_minimum_interval": schema.Int64Attribute{
				MarkdownDescription: "Minimum interval",
				Computed:            true,
			},
			"bfd_multiplier": schema.Int64Attribute{
				MarkdownDescription: "Detect multiplier",
				Computed:            true,
			},
			"default_information_originate": schema.BoolAttribute{
				MarkdownDescription: "Distribute a default route",
				Computed:            true,
			},
			"default_information_originate_always": schema.BoolAttribute{
				MarkdownDescription: "Always advertise default route",
				Computed:            true,
			},
			"default_information_originate_metric_type": schema.Int64Attribute{
				MarkdownDescription: "OSPF metric type for default routes",
				Computed:            true,
			},
			"auto_cost_reference_bandwidth": schema.Int64Attribute{
				MarkdownDescription: "Specify reference bandwidth for OSPF cost computations",
				Computed:            true,
			},
			"auto_cost_disable": schema.BoolAttribute{
				MarkdownDescription: "Assign OSPF cost based on interface type",
				Computed:            true,
			},
			"segment_routing_mpls": schema.BoolAttribute{
				MarkdownDescription: "SR using MPLS dataplane",
				Computed:            true,
			},
			"segment_routing_sr_prefer": schema.BoolAttribute{
				MarkdownDescription: "Prefer segment routing labels over LDP labels",
				Computed:            true,
			},
			"areas": schema.ListNestedAttribute{
				MarkdownDescription: "Enter the OSPF area configuration submode",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"area_id": schema.StringAttribute{
							MarkdownDescription: "Enter the OSPF area configuration submode",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_bgp": schema.ListNestedAttribute{
				MarkdownDescription: "bgp as-number",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"as_number": schema.StringAttribute{
							MarkdownDescription: "bgp as-number",
							Computed:            true,
						},
						"tag": schema.Int64Attribute{
							MarkdownDescription: "Set tag for routes redistributed into OSPF",
							Computed:            true,
						},
						"metric_type": schema.StringAttribute{
							MarkdownDescription: "OSPF exterior metric type for redistributed routes",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_isis": schema.ListNestedAttribute{
				MarkdownDescription: "ISO IS-IS",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_name": schema.StringAttribute{
							MarkdownDescription: "ISO IS-IS",
							Computed:            true,
						},
						"level_1": schema.BoolAttribute{
							MarkdownDescription: "IS-IS level-1 routes only",
							Computed:            true,
						},
						"level_2": schema.BoolAttribute{
							MarkdownDescription: "IS-IS level-2 routes only",
							Computed:            true,
						},
						"level_1_2": schema.BoolAttribute{
							MarkdownDescription: "IS-IS level-1 and level-2 routes",
							Computed:            true,
						},
						"tag": schema.Int64Attribute{
							MarkdownDescription: "Set tag for routes redistributed into OSPF",
							Computed:            true,
						},
						"metric_type": schema.StringAttribute{
							MarkdownDescription: "OSPF exterior metric type for redistributed routes",
							Computed:            true,
						},
					},
				},
			},
			"redistribute_ospf": schema.ListNestedAttribute{
				MarkdownDescription: "Open Shortest Path First (OSPF)",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_name": schema.StringAttribute{
							MarkdownDescription: "Open Shortest Path First (OSPF)",
							Computed:            true,
						},
						"match_internal": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF internal routes",
							Computed:            true,
						},
						"match_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF external routes",
							Computed:            true,
						},
						"match_nssa_external": schema.BoolAttribute{
							MarkdownDescription: "Redistribute OSPF NSSA external routes",
							Computed:            true,
						},
						"tag": schema.Int64Attribute{
							MarkdownDescription: "Set tag for routes redistributed into OSPF",
							Computed:            true,
						},
						"metric_type": schema.StringAttribute{
							MarkdownDescription: "OSPF exterior metric type for redistributed routes",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *RouterOSPFDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *RouterOSPFDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config RouterOSPFData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
