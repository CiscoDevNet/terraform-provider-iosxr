// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &SegmentRoutingTEDataSource{}
	_ datasource.DataSourceWithConfigure = &SegmentRoutingTEDataSource{}
)

func NewSegmentRoutingTEDataSource() datasource.DataSource {
	return &SegmentRoutingTEDataSource{}
}

type SegmentRoutingTEDataSource struct {
	client *client.Client
}

func (d *SegmentRoutingTEDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_segment_routing_te"
}

func (d *SegmentRoutingTEDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Segment Routing TE configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"logging_pcep_peer_status": schema.BoolAttribute{
				MarkdownDescription: "Enable logging for pcep peer status",
				Computed:            true,
			},
			"logging_policy_status": schema.BoolAttribute{
				MarkdownDescription: "Enable logging for policy status",
				Computed:            true,
			},
			"pcc_report_all": schema.BoolAttribute{
				MarkdownDescription: "Report all local SR policies to connected PCEP peers",
				Computed:            true,
			},
			"pcc_source_address": schema.StringAttribute{
				MarkdownDescription: "Local source IP address to use on PCEP sessions",
				Computed:            true,
			},
			"pcc_delegation_timeout": schema.Int64Attribute{
				MarkdownDescription: "Maximum time delegated SR-TE policies can remain up without an active connection to a PCE",
				Computed:            true,
			},
			"pcc_dead_timer": schema.Int64Attribute{
				MarkdownDescription: "Amount of time after which the peer can declare this session down, if no PCEP message has been received",
				Computed:            true,
			},
			"pcc_initiated_state": schema.Int64Attribute{
				MarkdownDescription: "Amount of time that PCE initiated policy can exist as an orphan before it is cleaned up",
				Computed:            true,
			},
			"pcc_initiated_orphan": schema.Int64Attribute{
				MarkdownDescription: "Amount of time that PCE initiated policy remains delegated to a peer that has gone down",
				Computed:            true,
			},
			"pce_peers": schema.ListNestedAttribute{
				MarkdownDescription: "PCE peer",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"pce_address": schema.StringAttribute{
							MarkdownDescription: "Remote PCE address",
							Computed:            true,
						},
						"precedence": schema.Int64Attribute{
							MarkdownDescription: "Precedence value of this PCE",
							Computed:            true,
						},
					},
				},
			},
			"on_demand_colors": schema.ListNestedAttribute{
				MarkdownDescription: "On-demand color configuration",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"dynamic_anycast_sid_inclusion": schema.BoolAttribute{
							MarkdownDescription: "Anycast Prefix SID Inclusion. Applicable for SR-MPLS and SRv6 policies",
							Computed:            true,
						},
						"dynamic_metric_type": schema.StringAttribute{
							MarkdownDescription: "Metric Type",
							Computed:            true,
						},
						"color": schema.Int64Attribute{
							MarkdownDescription: "Color",
							Computed:            true,
						},
						"srv6_enable": schema.BoolAttribute{
							MarkdownDescription: "True only",
							Computed:            true,
						},
						"srv6_locator_name": schema.StringAttribute{
							MarkdownDescription: "SRv6 locator name",
							Computed:            true,
						},
						"srv6_locator_behavior": schema.StringAttribute{
							MarkdownDescription: "SRv6 USID Behavior",
							Computed:            true,
						},
						"srv6_locator_binding_sid_type": schema.StringAttribute{
							MarkdownDescription: "Binding Segment ID type",
							Computed:            true,
						},
						"source_address": schema.StringAttribute{
							MarkdownDescription: "Source address",
							Computed:            true,
						},
						"source_address_type": schema.StringAttribute{
							MarkdownDescription: "IP address type",
							Computed:            true,
						},
						"effective_metric_enable": schema.BoolAttribute{
							MarkdownDescription: "True only",
							Computed:            true,
						},
						"effective_metric_value": schema.Int64Attribute{
							MarkdownDescription: "Integer value of metric",
							Computed:            true,
						},
						"effective_metric_type": schema.StringAttribute{
							MarkdownDescription: "Metric type, advertised to other protocols",
							Computed:            true,
						},
						"constraint_segments_protection_type": schema.StringAttribute{
							MarkdownDescription: "Protection Type",
							Computed:            true,
						},
						"constraint_segments_sid_algorithm": schema.Int64Attribute{
							MarkdownDescription: "'0' for regular SIDs, '1' for strict-spf SIDs, '128' - '255' for algorithm SIDs",
							Computed:            true,
						},
					},
				},
			},
			"policies": schema.ListNestedAttribute{
				MarkdownDescription: "Policy configuration",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"policy_name": schema.StringAttribute{
							MarkdownDescription: "Policy name",
							Computed:            true,
						},
						"srv6_enable": schema.BoolAttribute{
							MarkdownDescription: "True only",
							Computed:            true,
						},
						"srv6_locator_name": schema.StringAttribute{
							MarkdownDescription: "SRv6 locator name",
							Computed:            true,
						},
						"srv6_locator_binding_sid_type": schema.StringAttribute{
							MarkdownDescription: "Binding Segment ID type",
							Computed:            true,
						},
						"srv6_locator_behavior": schema.StringAttribute{
							MarkdownDescription: "SRv6 USID Behavior",
							Computed:            true,
						},
						"source_address": schema.StringAttribute{
							MarkdownDescription: "Source address",
							Computed:            true,
						},
						"source_address_type": schema.StringAttribute{
							MarkdownDescription: "IP address type",
							Computed:            true,
						},
						"policy_color_endpoint_color": schema.Int64Attribute{
							MarkdownDescription: "Color",
							Computed:            true,
						},
						"policy_color_endpoint_type": schema.StringAttribute{
							MarkdownDescription: "End point type",
							Computed:            true,
						},
						"policy_color_endpoint_address": schema.StringAttribute{
							MarkdownDescription: "End point address",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *SegmentRoutingTEDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *SegmentRoutingTEDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config SegmentRoutingTEData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
