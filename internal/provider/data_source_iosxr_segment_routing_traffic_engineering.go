// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/terraform-provider-iosxr/internal/provider/client"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &SegmentRoutingTrafficEngineeringDataSource{}
	_ datasource.DataSourceWithConfigure = &SegmentRoutingTrafficEngineeringDataSource{}
)

func NewSegmentRoutingTrafficEngineeringDataSource() datasource.DataSource {
	return &SegmentRoutingTrafficEngineeringDataSource{}
}

type SegmentRoutingTrafficEngineeringDataSource struct {
	client *client.Client
}

func (d *SegmentRoutingTrafficEngineeringDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_segment_routing_traffic_engineering"
}

func (d *SegmentRoutingTrafficEngineeringDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Segment Routing Traffic Engineering configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"on_demand_colors": schema.ListNestedAttribute{
				MarkdownDescription: "On-demand color configuration",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"color": schema.Int64Attribute{
							MarkdownDescription: "Color",
							Computed:            true,
						},
						"srv6_enable": schema.BoolAttribute{
							MarkdownDescription: "True only",
							Computed:            true,
						},
						"srv6_locator_locator_name": schema.StringAttribute{
							MarkdownDescription: "SRv6 locator name",
							Computed:            true,
						},
						"srv6_locator_behavior": schema.StringAttribute{
							MarkdownDescription: "SRv6 USID Behavior",
							Computed:            true,
						},
						"srv6_locator_binding_sid_type": schema.StringAttribute{
							MarkdownDescription: "Binding Segment ID type",
							Computed:            true,
						},
						"source_address_source_address": schema.StringAttribute{
							MarkdownDescription: "Source address",
							Computed:            true,
						},
						"source_address_ip_address_type": schema.StringAttribute{
							MarkdownDescription: "IP address type",
							Computed:            true,
						},
						"effective_metric_enable": schema.BoolAttribute{
							MarkdownDescription: "True only",
							Computed:            true,
						},
						"effective_metric_metric_value_type_metric_value": schema.Int64Attribute{
							MarkdownDescription: "Integer value of metric",
							Computed:            true,
						},
						"effective_metric_metric_value_type_metric_type": schema.StringAttribute{
							MarkdownDescription: "Metric type, advertised to other protocols",
							Computed:            true,
						},
						"constraint_segments_protection_type": schema.StringAttribute{
							MarkdownDescription: "Protection Type",
							Computed:            true,
						},
						"constraint_segments_sid_algorithm": schema.Int64Attribute{
							MarkdownDescription: "'0' for regular SIDs, '1' for strict-spf SIDs, '128' - '255' for algorithm SIDs",
							Computed:            true,
						},
					},
				},
			},
			"policies": schema.ListNestedAttribute{
				MarkdownDescription: "Policy configuration",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"policy_name": schema.StringAttribute{
							MarkdownDescription: "Policy name",
							Computed:            true,
						},
						"srv6_enable": schema.BoolAttribute{
							MarkdownDescription: "True only",
							Computed:            true,
						},
						"srv6_locator_locator_name": schema.StringAttribute{
							MarkdownDescription: "SRv6 locator name",
							Computed:            true,
						},
						"srv6_locator_binding_sid_type": schema.StringAttribute{
							MarkdownDescription: "Binding Segment ID type",
							Computed:            true,
						},
						"srv6_locator_behavior": schema.StringAttribute{
							MarkdownDescription: "SRv6 USID Behavior",
							Computed:            true,
						},
						"source_address_source_address": schema.StringAttribute{
							MarkdownDescription: "Source address",
							Computed:            true,
						},
						"source_address_ip_address_type": schema.StringAttribute{
							MarkdownDescription: "IP address type",
							Computed:            true,
						},
						"policy_color_endpoint_color": schema.Int64Attribute{
							MarkdownDescription: "Color",
							Computed:            true,
						},
						"policy_color_endpoint_end_point_type": schema.StringAttribute{
							MarkdownDescription: "End point type",
							Computed:            true,
						},
						"policy_color_endpoint_end_point_address": schema.StringAttribute{
							MarkdownDescription: "End point address",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *SegmentRoutingTrafficEngineeringDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *SegmentRoutingTrafficEngineeringDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config SegmentRoutingTrafficEngineering

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
