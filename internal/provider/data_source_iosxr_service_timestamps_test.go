// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxrServiceTimestamps(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "debug_datetime_localtime", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "debug_datetime_msec", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "debug_datetime_show_timezone", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "debug_datetime_year", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "debug_uptime", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "debug_disable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "log_datetime_localtime", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "log_datetime_msec", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "log_datetime_show_timezone", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "log_datetime_year", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "log_uptime", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxr_service_timestamps.test", "log_disable", "true"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxrServiceTimestampsConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

func testAccDataSourceIosxrServiceTimestampsConfig() string {
	config := `resource "iosxr_service_timestamps" "test" {` + "\n"
	config += `	debug_datetime_localtime = true` + "\n"
	config += `	debug_datetime_msec = true` + "\n"
	config += `	debug_datetime_show_timezone = true` + "\n"
	config += `	debug_datetime_year = true` + "\n"
	config += `	debug_uptime = true` + "\n"
	config += `	debug_disable = true` + "\n"
	config += `	log_datetime_localtime = true` + "\n"
	config += `	log_datetime_msec = true` + "\n"
	config += `	log_datetime_show_timezone = true` + "\n"
	config += `	log_datetime_year = true` + "\n"
	config += `	log_uptime = true` + "\n"
	config += `	log_disable = true` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxr_service_timestamps" "test" {
			depends_on = [iosxr_service_timestamps.test]
		}
	`
	return config
}
