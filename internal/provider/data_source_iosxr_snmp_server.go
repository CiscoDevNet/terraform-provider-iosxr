// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/terraform-provider-iosxr/internal/provider/client"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &SNMPServerDataSource{}
	_ datasource.DataSourceWithConfigure = &SNMPServerDataSource{}
)

func NewSNMPServerDataSource() datasource.DataSource {
	return &SNMPServerDataSource{}
}

type SNMPServerDataSource struct {
	client *client.Client
}

func (d *SNMPServerDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_snmp_server"
}

func (d *SNMPServerDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the SNMP Server configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"rf": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP RF-MIB traps",
				Computed:            true,
			},
			"bfd": schema.BoolAttribute{
				MarkdownDescription: "Enable BFD traps",
				Computed:            true,
			},
			"ntp": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP Cisco Ntp traps",
				Computed:            true,
			},
			"ethernet_oam_events": schema.BoolAttribute{
				MarkdownDescription: "Enable all OAM event traps",
				Computed:            true,
			},
			"copy_complete": schema.BoolAttribute{
				MarkdownDescription: "Enable CISCO-CONFIG-COPY-MIB ccCopyCompletion traps",
				Computed:            true,
			},
			"traps_snmp_linkup": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMPv2-MIB linkUp traps",
				Computed:            true,
			},
			"traps_snmp_linkdown": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMPv2-MIB linDownp traps",
				Computed:            true,
			},
			"power": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP entity power traps",
				Computed:            true,
			},
			"config": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP config traps",
				Computed:            true,
			},
			"entity": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP entity traps",
				Computed:            true,
			},
			"system": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP SYSTEMMIB-MIB traps",
				Computed:            true,
			},
			"bridgemib": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP Trap for Bridge MIB",
				Computed:            true,
			},
			"entity_state_operstatus": schema.BoolAttribute{
				MarkdownDescription: "Enable entity oper status enable notification",
				Computed:            true,
			},
			"entity_redundancy_all": schema.BoolAttribute{
				MarkdownDescription: "Enable all CISCO-ENTITY-REDUNDANCY-MIB traps",
				Computed:            true,
			},
			"trap_source_both": schema.StringAttribute{
				MarkdownDescription: "Assign an interface for the source address of all traps",
				Computed:            true,
			},
			"l2vpn_all": schema.BoolAttribute{
				MarkdownDescription: "Enable all L2VPN traps",
				Computed:            true,
			},
			"l2vpn_vc_up": schema.BoolAttribute{
				MarkdownDescription: "Enable VC up traps",
				Computed:            true,
			},
			"l2vpn_vc_down": schema.BoolAttribute{
				MarkdownDescription: "Enable VC down traps",
				Computed:            true,
			},
			"sensor": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP entity sensor traps",
				Computed:            true,
			},
			"fru_ctrl": schema.BoolAttribute{
				MarkdownDescription: "Enable SNMP entity FRU control traps",
				Computed:            true,
			},
			"isis_all": schema.StringAttribute{
				MarkdownDescription: "Enable all IS-IS traps",
				Computed:            true,
			},
			"isis_database_overload": schema.StringAttribute{
				MarkdownDescription: "isisDatabaseOverload",
				Computed:            true,
			},
			"isis_manual_address_drops": schema.StringAttribute{
				MarkdownDescription: "isisManualAddressDrops",
				Computed:            true,
			},
			"isis_corrupted_lsp_detected": schema.StringAttribute{
				MarkdownDescription: "isisCorruptedLSPDetected",
				Computed:            true,
			},
			"isis_attempt_to_exceed_max_sequence": schema.StringAttribute{
				MarkdownDescription: "isisAttemptToExceedMaxSequence",
				Computed:            true,
			},
			"isis_id_len_mismatch": schema.StringAttribute{
				MarkdownDescription: "isisIDLenMismatch",
				Computed:            true,
			},
			"isis_max_area_addresses_mismatch": schema.StringAttribute{
				MarkdownDescription: "isisMaxAreaAddressesMismatch",
				Computed:            true,
			},
			"isis_own_lsp_purge": schema.StringAttribute{
				MarkdownDescription: "isisOwnLSPPurge",
				Computed:            true,
			},
			"isis_sequence_number_skip": schema.StringAttribute{
				MarkdownDescription: "isisSequenceNumberSkip",
				Computed:            true,
			},
			"isis_authentication_type_failure": schema.StringAttribute{
				MarkdownDescription: "isisAuthenticationTypeFailure",
				Computed:            true,
			},
			"isis_authentication_failure": schema.StringAttribute{
				MarkdownDescription: "isisAuthenticationFailure",
				Computed:            true,
			},
			"isis_version_skew": schema.StringAttribute{
				MarkdownDescription: "isisVersionSkew",
				Computed:            true,
			},
			"isis_area_mismatch": schema.StringAttribute{
				MarkdownDescription: "isisAreaMismatch",
				Computed:            true,
			},
			"isis_rejected_adjacency": schema.StringAttribute{
				MarkdownDescription: "isisRejectedAdjacency",
				Computed:            true,
			},
			"isis_lsp_too_large_to_propagate": schema.StringAttribute{
				MarkdownDescription: "isisLSPTooLargeToPropagate",
				Computed:            true,
			},
			"isis_orig_lsp_buff_size_mismatch": schema.StringAttribute{
				MarkdownDescription: "isisOrigLSPBuffSizeMismatch",
				Computed:            true,
			},
			"isis_protocols_supported_mismatch": schema.StringAttribute{
				MarkdownDescription: "isisProtocolsSupportedMismatch",
				Computed:            true,
			},
			"isis_adjacency_change": schema.StringAttribute{
				MarkdownDescription: "isisAdjacencyChange",
				Computed:            true,
			},
			"isis_lsp_error_detected": schema.StringAttribute{
				MarkdownDescription: "isisLSPErrorDetected",
				Computed:            true,
			},
			"bgp_cbgp2_updown": schema.BoolAttribute{
				MarkdownDescription: "Enable CISCO-BGP4-MIB v2 up/down traps",
				Computed:            true,
			},
			"bgp_bgp4_mib_updown": schema.BoolAttribute{
				MarkdownDescription: "Enable CISCO-BGP4-MIB v2 up/down traps",
				Computed:            true,
			},
			"users": schema.ListNestedAttribute{
				MarkdownDescription: "Name of the user",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"user_name": schema.StringAttribute{
							MarkdownDescription: "Name of the user",
							Computed:            true,
						},
						"group_name": schema.StringAttribute{
							MarkdownDescription: "Group to which the user belongs",
							Computed:            true,
						},
						"v3_auth_md5_encryption_aes": schema.StringAttribute{
							MarkdownDescription: "Specifies an aes-128 ENCRYPTED authentication password",
							Computed:            true,
						},
						"v3_auth_md5_encryption_default": schema.StringAttribute{
							MarkdownDescription: "Specifies an default ENCRYPTED authentication password",
							Computed:            true,
						},
					},
				},
			},
			"groups": schema.ListNestedAttribute{
				MarkdownDescription: "Name of the group",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"group_name": schema.StringAttribute{
							MarkdownDescription: "Name of the group",
							Computed:            true,
						},
						"v3_priv": schema.BoolAttribute{
							MarkdownDescription: "group using authPriv Security Level",
							Computed:            true,
						},
						"v3_read": schema.StringAttribute{
							MarkdownDescription: "specify a read view for this group",
							Computed:            true,
						},
						"v3_write": schema.StringAttribute{
							MarkdownDescription: "specify a write view for this group",
							Computed:            true,
						},
						"v3_context": schema.StringAttribute{
							MarkdownDescription: "Attach a SNMP context",
							Computed:            true,
						},
						"v3_notify": schema.StringAttribute{
							MarkdownDescription: "specify a notify view for the group",
							Computed:            true,
						},
						"v3_ipv4": schema.StringAttribute{
							MarkdownDescription: "Type of Access-list",
							Computed:            true,
						},
						"v3_ipv6": schema.StringAttribute{
							MarkdownDescription: "Type of Access-list",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *SNMPServerDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*client.Client)
}

func (d *SNMPServerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config SNMPServer

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	getResp, diags := d.client.Get(ctx, config.Device.ValueString(), config.getPath())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	config.fromBody(ctx, getResp.Notification[0].Update[0].Val.GetJsonIetfVal())
	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
