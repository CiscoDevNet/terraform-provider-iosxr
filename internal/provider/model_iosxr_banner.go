// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type Banner struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	BannerType types.String `tfsdk:"banner_type"`
	Line       types.String `tfsdk:"line"`
}

type BannerData struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	BannerType types.String `tfsdk:"banner_type"`
	Line       types.String `tfsdk:"line"`
}

func (data Banner) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-banner-cfg:/banners/banner[banner-type=%s]", data.BannerType.ValueString())
}

func (data BannerData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-banner-cfg:/banners/banner[banner-type=%s]", data.BannerType.ValueString())
}

func (data Banner) toBody(ctx context.Context) string {
	body := "{}"
	if !data.BannerType.IsNull() && !data.BannerType.IsUnknown() {
		body, _ = sjson.Set(body, "banner-type", data.BannerType.ValueString())
	}
	if !data.Line.IsNull() && !data.Line.IsUnknown() {
		body, _ = sjson.Set(body, "line", data.Line.ValueString())
	}
	return body
}

func (data *Banner) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "line"); value.Exists() && !data.Line.IsNull() {
		data.Line = types.StringValue(value.String())
	} else {
		data.Line = types.StringNull()
	}
}

func (data *BannerData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "line"); value.Exists() {
		data.Line = types.StringValue(value.String())
	}
}

func (data *Banner) getDeletedListItems(ctx context.Context, state Banner) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *Banner) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}

func (data *Banner) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Line.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/line", data.getPath()))
	}
	return deletePaths
}
