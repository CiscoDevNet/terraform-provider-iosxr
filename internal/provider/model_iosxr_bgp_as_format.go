// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type BGPASFormat struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	DeleteMode types.String `tfsdk:"delete_mode"`
	AsFormat   types.String `tfsdk:"as_format"`
}

type BGPASFormatData struct {
	Device   types.String `tfsdk:"device"`
	Id       types.String `tfsdk:"id"`
	AsFormat types.String `tfsdk:"as_format"`
}

func (data BGPASFormat) getPath() string {
	return "Cisco-IOS-XR-um-router-bgp-cfg:/as-format"
}

func (data BGPASFormatData) getPath() string {
	return "Cisco-IOS-XR-um-router-bgp-cfg:/as-format"
}

func (data BGPASFormat) toBody(ctx context.Context) string {
	body := "{}"
	if !data.AsFormat.IsNull() && !data.AsFormat.IsUnknown() {
		body, _ = sjson.Set(body, "", data.AsFormat.ValueString())
	}
	return body
}

func (data *BGPASFormat) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, ""); value.Exists() && !data.AsFormat.IsNull() {
		data.AsFormat = types.StringValue(value.String())
	} else {
		data.AsFormat = types.StringNull()
	}
}

func (data *BGPASFormat) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, ""); value.Exists() {
		data.AsFormat = types.StringValue(value.String())
	}
}

func (data *BGPASFormatData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, ""); value.Exists() {
		data.AsFormat = types.StringValue(value.String())
	}
}

func (data *BGPASFormat) getDeletedItems(ctx context.Context, state BGPASFormat) []string {
	deletedItems := make([]string, 0)
	if !state.AsFormat.IsNull() && data.AsFormat.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/", state.getPath()))
	}
	return deletedItems
}

func (data *BGPASFormat) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}

func (data *BGPASFormat) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.AsFormat.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/", data.getPath()))
	}
	return deletePaths
}
