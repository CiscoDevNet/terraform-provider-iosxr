// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type ClassMapQoS struct {
	Device                       types.String `tfsdk:"device"`
	Id                           types.String `tfsdk:"id"`
	ClassMapName                 types.String `tfsdk:"class_map_name"`
	MatchAny                     types.Bool   `tfsdk:"match_any"`
	Description                  types.String `tfsdk:"description"`
	MatchDscp                    types.List   `tfsdk:"match_dscp"`
	MatchMplsExperimentalTopmost types.List   `tfsdk:"match_mpls_experimental_topmost"`
	MatchQosGroup                types.List   `tfsdk:"match_qos_group"`
	MatchTrafficClass            types.List   `tfsdk:"match_traffic_class"`
}

type ClassMapQoSData struct {
	Device                       types.String `tfsdk:"device"`
	Id                           types.String `tfsdk:"id"`
	ClassMapName                 types.String `tfsdk:"class_map_name"`
	MatchAny                     types.Bool   `tfsdk:"match_any"`
	Description                  types.String `tfsdk:"description"`
	MatchDscp                    types.List   `tfsdk:"match_dscp"`
	MatchMplsExperimentalTopmost types.List   `tfsdk:"match_mpls_experimental_topmost"`
	MatchQosGroup                types.List   `tfsdk:"match_qos_group"`
	MatchTrafficClass            types.List   `tfsdk:"match_traffic_class"`
}

func (data ClassMapQoS) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-policymap-classmap-cfg:/class-map/type/qos[class-map-name=%s]", data.ClassMapName.ValueString())
}

func (data ClassMapQoSData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-policymap-classmap-cfg:/class-map/type/qos[class-map-name=%s]", data.ClassMapName.ValueString())
}

func (data ClassMapQoS) toBody(ctx context.Context) string {
	body := "{}"
	if !data.ClassMapName.IsNull() && !data.ClassMapName.IsUnknown() {
		body, _ = sjson.Set(body, "class-map-name", data.ClassMapName.ValueString())
	}
	if !data.MatchAny.IsNull() && !data.MatchAny.IsUnknown() {
		if data.MatchAny.ValueBool() {
			body, _ = sjson.Set(body, "match-any", map[string]string{})
		}
	}
	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.MatchDscp.IsNull() && !data.MatchDscp.IsUnknown() {
		var values []string
		data.MatchDscp.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "match.dscp.value", values)
	}
	if !data.MatchMplsExperimentalTopmost.IsNull() && !data.MatchMplsExperimentalTopmost.IsUnknown() {
		var values []int
		data.MatchMplsExperimentalTopmost.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "match.mpls.experimental.topmost.label", values)
	}
	if !data.MatchQosGroup.IsNull() && !data.MatchQosGroup.IsUnknown() {
		var values []string
		data.MatchQosGroup.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "match.qos-group.id", values)
	}
	if !data.MatchTrafficClass.IsNull() && !data.MatchTrafficClass.IsUnknown() {
		var values []string
		data.MatchTrafficClass.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "match.traffic-class.id", values)
	}
	return body
}

func (data *ClassMapQoS) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "match-any"); !data.MatchAny.IsNull() {
		if value.Exists() {
			data.MatchAny = types.BoolValue(true)
		} else {
			data.MatchAny = types.BoolValue(false)
		}
	} else {
		data.MatchAny = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := gjson.GetBytes(res, "match.dscp.value"); value.Exists() && !data.MatchDscp.IsNull() {
		data.MatchDscp = helpers.GetStringList(value.Array())
	} else {
		data.MatchDscp = types.ListNull(types.StringType)
	}
	if value := gjson.GetBytes(res, "match.mpls.experimental.topmost.label"); value.Exists() && !data.MatchMplsExperimentalTopmost.IsNull() {
		data.MatchMplsExperimentalTopmost = helpers.GetInt64List(value.Array())
	} else {
		data.MatchMplsExperimentalTopmost = types.ListNull(types.Int64Type)
	}
	if value := gjson.GetBytes(res, "match.qos-group.id"); value.Exists() && !data.MatchQosGroup.IsNull() {
		data.MatchQosGroup = helpers.GetStringList(value.Array())
	} else {
		data.MatchQosGroup = types.ListNull(types.StringType)
	}
	if value := gjson.GetBytes(res, "match.traffic-class.id"); value.Exists() && !data.MatchTrafficClass.IsNull() {
		data.MatchTrafficClass = helpers.GetStringList(value.Array())
	} else {
		data.MatchTrafficClass = types.ListNull(types.StringType)
	}
}

func (data *ClassMapQoSData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "match-any"); value.Exists() {
		data.MatchAny = types.BoolValue(true)
	} else {
		data.MatchAny = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "match.dscp.value"); value.Exists() {
		data.MatchDscp = helpers.GetStringList(value.Array())
	} else {
		data.MatchDscp = types.ListNull(types.StringType)
	}
	if value := gjson.GetBytes(res, "match.mpls.experimental.topmost.label"); value.Exists() {
		data.MatchMplsExperimentalTopmost = helpers.GetInt64List(value.Array())
	} else {
		data.MatchMplsExperimentalTopmost = types.ListNull(types.Int64Type)
	}
	if value := gjson.GetBytes(res, "match.qos-group.id"); value.Exists() {
		data.MatchQosGroup = helpers.GetStringList(value.Array())
	} else {
		data.MatchQosGroup = types.ListNull(types.StringType)
	}
	if value := gjson.GetBytes(res, "match.traffic-class.id"); value.Exists() {
		data.MatchTrafficClass = helpers.GetStringList(value.Array())
	} else {
		data.MatchTrafficClass = types.ListNull(types.StringType)
	}
}

func (data *ClassMapQoS) getDeletedListItems(ctx context.Context, state ClassMapQoS) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *ClassMapQoS) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.MatchAny.IsNull() && !data.MatchAny.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/match-any", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *ClassMapQoS) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.MatchAny.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/match-any", data.getPath()))
	}
	if !data.Description.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/description", data.getPath()))
	}
	if !data.MatchDscp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/match/dscp/value", data.getPath()))
	}
	if !data.MatchMplsExperimentalTopmost.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/match/mpls/experimental/topmost/label", data.getPath()))
	}
	if !data.MatchQosGroup.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/match/qos-group/id", data.getPath()))
	}
	if !data.MatchTrafficClass.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/match/traffic-class/id", data.getPath()))
	}
	return deletePaths
}
