// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxr/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type DomainVRF struct {
	Device                types.String          `tfsdk:"device"`
	Id                    types.String          `tfsdk:"id"`
	VrfName               types.String          `tfsdk:"vrf_name"`
	ListDomain            []DomainVRFListDomain `tfsdk:"list_domain"`
	LookupDisable         types.Bool            `tfsdk:"lookup_disable"`
	LookupSourceInterface types.String          `tfsdk:"lookup_source_interface"`
	Name                  types.String          `tfsdk:"name"`
	Ipv4Host              []DomainVRFIpv4Host   `tfsdk:"ipv4_host"`
	NameServer            []DomainVRFNameServer `tfsdk:"name_server"`
	Ipv6Host              []DomainVRFIpv6Host   `tfsdk:"ipv6_host"`
	Multicast             types.String          `tfsdk:"multicast"`
}
type DomainVRFListDomain struct {
	DomainName types.String `tfsdk:"domain_name"`
	Order      types.Int64  `tfsdk:"order"`
}
type DomainVRFIpv4Host struct {
	HostName  types.String `tfsdk:"host_name"`
	IpAddress types.List   `tfsdk:"ip_address"`
}
type DomainVRFNameServer struct {
	Address types.String `tfsdk:"address"`
	Order   types.Int64  `tfsdk:"order"`
}
type DomainVRFIpv6Host struct {
	HostName    types.String `tfsdk:"host_name"`
	Ipv6Address types.List   `tfsdk:"ipv6_address"`
}

func (data DomainVRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-domain-cfg:/domain/vrfs/vrf[vrf-name=%s]", data.VrfName.ValueString())
}

func (data DomainVRF) toBody(ctx context.Context) string {
	body := "{}"
	if !data.VrfName.IsNull() && !data.VrfName.IsUnknown() {
		body, _ = sjson.Set(body, "vrf-name", data.VrfName.ValueString())
	}
	if !data.LookupDisable.IsNull() && !data.LookupDisable.IsUnknown() {
		if data.LookupDisable.ValueBool() {
			body, _ = sjson.Set(body, "lookup.disable", map[string]string{})
		}
	}
	if !data.LookupSourceInterface.IsNull() && !data.LookupSourceInterface.IsUnknown() {
		body, _ = sjson.Set(body, "lookup.source-interface", data.LookupSourceInterface.ValueString())
	}
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, "name", data.Name.ValueString())
	}
	if !data.Multicast.IsNull() && !data.Multicast.IsUnknown() {
		body, _ = sjson.Set(body, "multicast", data.Multicast.ValueString())
	}
	if len(data.ListDomain) > 0 {
		body, _ = sjson.Set(body, "list.domain", []interface{}{})
		for index, item := range data.ListDomain {
			if !item.DomainName.IsNull() && !item.DomainName.IsUnknown() {
				body, _ = sjson.Set(body, "list.domain"+"."+strconv.Itoa(index)+"."+"domain-name", item.DomainName.ValueString())
			}
			if !item.Order.IsNull() && !item.Order.IsUnknown() {
				body, _ = sjson.Set(body, "list.domain"+"."+strconv.Itoa(index)+"."+"order", strconv.FormatInt(item.Order.ValueInt64(), 10))
			}
		}
	}
	if len(data.Ipv4Host) > 0 {
		body, _ = sjson.Set(body, "ipv4.hosts.host", []interface{}{})
		for index, item := range data.Ipv4Host {
			if !item.HostName.IsNull() && !item.HostName.IsUnknown() {
				body, _ = sjson.Set(body, "ipv4.hosts.host"+"."+strconv.Itoa(index)+"."+"host-name", item.HostName.ValueString())
			}
			if !item.IpAddress.IsNull() && !item.IpAddress.IsUnknown() {
				var values []string
				item.IpAddress.ElementsAs(ctx, &values, false)
				body, _ = sjson.Set(body, "ipv4.hosts.host"+"."+strconv.Itoa(index)+"."+"ip-address", values)
			}
		}
	}
	if len(data.NameServer) > 0 {
		body, _ = sjson.Set(body, "name-servers.name-server", []interface{}{})
		for index, item := range data.NameServer {
			if !item.Address.IsNull() && !item.Address.IsUnknown() {
				body, _ = sjson.Set(body, "name-servers.name-server"+"."+strconv.Itoa(index)+"."+"address", item.Address.ValueString())
			}
			if !item.Order.IsNull() && !item.Order.IsUnknown() {
				body, _ = sjson.Set(body, "name-servers.name-server"+"."+strconv.Itoa(index)+"."+"order", strconv.FormatInt(item.Order.ValueInt64(), 10))
			}
		}
	}
	if len(data.Ipv6Host) > 0 {
		body, _ = sjson.Set(body, "ipv6.host.host", []interface{}{})
		for index, item := range data.Ipv6Host {
			if !item.HostName.IsNull() && !item.HostName.IsUnknown() {
				body, _ = sjson.Set(body, "ipv6.host.host"+"."+strconv.Itoa(index)+"."+"host-name", item.HostName.ValueString())
			}
			if !item.Ipv6Address.IsNull() && !item.Ipv6Address.IsUnknown() {
				var values []string
				item.Ipv6Address.ElementsAs(ctx, &values, false)
				body, _ = sjson.Set(body, "ipv6.host.host"+"."+strconv.Itoa(index)+"."+"ipv6-address", values)
			}
		}
	}
	return body
}

func (data *DomainVRF) updateFromBody(ctx context.Context, res []byte) {
	for i := range data.ListDomain {
		keys := [...]string{"domain-name"}
		keyValues := [...]string{data.ListDomain[i].DomainName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "list.domain").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("domain-name"); value.Exists() && !data.ListDomain[i].DomainName.IsNull() {
			data.ListDomain[i].DomainName = types.StringValue(value.String())
		} else {
			data.ListDomain[i].DomainName = types.StringNull()
		}
		if value := r.Get("order"); value.Exists() && !data.ListDomain[i].Order.IsNull() {
			data.ListDomain[i].Order = types.Int64Value(value.Int())
		} else {
			data.ListDomain[i].Order = types.Int64Null()
		}
	}
	if value := gjson.GetBytes(res, "lookup.disable"); !data.LookupDisable.IsNull() {
		if value.Exists() {
			data.LookupDisable = types.BoolValue(true)
		} else {
			data.LookupDisable = types.BoolValue(false)
		}
	} else {
		data.LookupDisable = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "lookup.source-interface"); value.Exists() && !data.LookupSourceInterface.IsNull() {
		data.LookupSourceInterface = types.StringValue(value.String())
	} else {
		data.LookupSourceInterface = types.StringNull()
	}
	if value := gjson.GetBytes(res, "name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	for i := range data.Ipv4Host {
		keys := [...]string{"host-name"}
		keyValues := [...]string{data.Ipv4Host[i].HostName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "ipv4.hosts.host").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("host-name"); value.Exists() && !data.Ipv4Host[i].HostName.IsNull() {
			data.Ipv4Host[i].HostName = types.StringValue(value.String())
		} else {
			data.Ipv4Host[i].HostName = types.StringNull()
		}
		if value := r.Get("ip-address"); value.Exists() && !data.Ipv4Host[i].IpAddress.IsNull() {
			data.Ipv4Host[i].IpAddress = helpers.GetStringList(value.Array())
		} else {
			data.Ipv4Host[i].IpAddress = types.ListNull(types.StringType)
		}
	}
	for i := range data.NameServer {
		keys := [...]string{"address"}
		keyValues := [...]string{data.NameServer[i].Address.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "name-servers.name-server").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("address"); value.Exists() && !data.NameServer[i].Address.IsNull() {
			data.NameServer[i].Address = types.StringValue(value.String())
		} else {
			data.NameServer[i].Address = types.StringNull()
		}
		if value := r.Get("order"); value.Exists() && !data.NameServer[i].Order.IsNull() {
			data.NameServer[i].Order = types.Int64Value(value.Int())
		} else {
			data.NameServer[i].Order = types.Int64Null()
		}
	}
	for i := range data.Ipv6Host {
		keys := [...]string{"host-name"}
		keyValues := [...]string{data.Ipv6Host[i].HostName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "ipv6.host.host").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("host-name"); value.Exists() && !data.Ipv6Host[i].HostName.IsNull() {
			data.Ipv6Host[i].HostName = types.StringValue(value.String())
		} else {
			data.Ipv6Host[i].HostName = types.StringNull()
		}
		if value := r.Get("ipv6-address"); value.Exists() && !data.Ipv6Host[i].Ipv6Address.IsNull() {
			data.Ipv6Host[i].Ipv6Address = helpers.GetStringList(value.Array())
		} else {
			data.Ipv6Host[i].Ipv6Address = types.ListNull(types.StringType)
		}
	}
	if value := gjson.GetBytes(res, "multicast"); value.Exists() && !data.Multicast.IsNull() {
		data.Multicast = types.StringValue(value.String())
	} else {
		data.Multicast = types.StringNull()
	}
}

func (data *DomainVRF) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "list.domain"); value.Exists() {
		data.ListDomain = make([]DomainVRFListDomain, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := DomainVRFListDomain{}
			if cValue := v.Get("domain-name"); cValue.Exists() {
				item.DomainName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("order"); cValue.Exists() {
				item.Order = types.Int64Value(cValue.Int())
			}
			data.ListDomain = append(data.ListDomain, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "lookup.disable"); value.Exists() {
		data.LookupDisable = types.BoolValue(true)
	} else {
		data.LookupDisable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "lookup.source-interface"); value.Exists() {
		data.LookupSourceInterface = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.hosts.host"); value.Exists() {
		data.Ipv4Host = make([]DomainVRFIpv4Host, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := DomainVRFIpv4Host{}
			if cValue := v.Get("host-name"); cValue.Exists() {
				item.HostName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ip-address"); cValue.Exists() {
				item.IpAddress = helpers.GetStringList(cValue.Array())
			} else {
				item.IpAddress = types.ListNull(types.StringType)
			}
			data.Ipv4Host = append(data.Ipv4Host, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "name-servers.name-server"); value.Exists() {
		data.NameServer = make([]DomainVRFNameServer, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := DomainVRFNameServer{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("order"); cValue.Exists() {
				item.Order = types.Int64Value(cValue.Int())
			}
			data.NameServer = append(data.NameServer, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "ipv6.host.host"); value.Exists() {
		data.Ipv6Host = make([]DomainVRFIpv6Host, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := DomainVRFIpv6Host{}
			if cValue := v.Get("host-name"); cValue.Exists() {
				item.HostName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv6-address"); cValue.Exists() {
				item.Ipv6Address = helpers.GetStringList(cValue.Array())
			} else {
				item.Ipv6Address = types.ListNull(types.StringType)
			}
			data.Ipv6Host = append(data.Ipv6Host, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "multicast"); value.Exists() {
		data.Multicast = types.StringValue(value.String())
	}
}

func (data *DomainVRF) getDeletedListItems(ctx context.Context, state DomainVRF) []string {
	deletedListItems := make([]string, 0)
	for i := range state.ListDomain {
		keys := [...]string{"domain-name"}
		stateKeyValues := [...]string{state.ListDomain[i].DomainName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.ListDomain[i].DomainName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.ListDomain {
			found = true
			if state.ListDomain[i].DomainName.ValueString() != data.ListDomain[j].DomainName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/list/domain%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv4Host {
		keys := [...]string{"host-name"}
		stateKeyValues := [...]string{state.Ipv4Host[i].HostName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4Host[i].HostName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4Host {
			found = true
			if state.Ipv4Host[i].HostName.ValueString() != data.Ipv4Host[j].HostName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/ipv4/hosts/host%v", state.getPath(), keyString))
		}
	}
	for i := range state.NameServer {
		keys := [...]string{"address"}
		stateKeyValues := [...]string{state.NameServer[i].Address.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.NameServer[i].Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.NameServer {
			found = true
			if state.NameServer[i].Address.ValueString() != data.NameServer[j].Address.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/name-servers/name-server%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv6Host {
		keys := [...]string{"host-name"}
		stateKeyValues := [...]string{state.Ipv6Host[i].HostName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6Host[i].HostName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6Host {
			found = true
			if state.Ipv6Host[i].HostName.ValueString() != data.Ipv6Host[j].HostName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/ipv6/host/host%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *DomainVRF) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.ListDomain {
		keys := [...]string{"domain-name"}
		keyValues := [...]string{data.ListDomain[i].DomainName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.LookupDisable.IsNull() && !data.LookupDisable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/lookup/disable", data.getPath()))
	}
	for i := range data.Ipv4Host {
		keys := [...]string{"host-name"}
		keyValues := [...]string{data.Ipv4Host[i].HostName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.NameServer {
		keys := [...]string{"address"}
		keyValues := [...]string{data.NameServer[i].Address.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv6Host {
		keys := [...]string{"host-name"}
		keyValues := [...]string{data.Ipv6Host[i].HostName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	return emptyLeafsDelete
}
