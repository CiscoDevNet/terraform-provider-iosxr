// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type ErrorDisableRecovery struct {
	Device                              types.String `tfsdk:"device"`
	Id                                  types.String `tfsdk:"id"`
	DeleteMode                          types.String `tfsdk:"delete_mode"`
	LinkOamSessionDownInterval          types.Int64  `tfsdk:"link_oam_session_down_interval"`
	LinkOamDiscoveryTimeoutInterval     types.Int64  `tfsdk:"link_oam_discovery_timeout_interval"`
	LinkOamCapabilitiesConflictInterval types.Int64  `tfsdk:"link_oam_capabilities_conflict_interval"`
	LinkOamMiswiredInterval             types.Int64  `tfsdk:"link_oam_miswired_interval"`
	LinkOamLinkFaultInterval            types.Int64  `tfsdk:"link_oam_link_fault_interval"`
	LinkOamDyingGaspInterval            types.Int64  `tfsdk:"link_oam_dying_gasp_interval"`
	LinkOamCriticalEventInterval        types.Int64  `tfsdk:"link_oam_critical_event_interval"`
	LinkOamThresholdBreachedInterval    types.Int64  `tfsdk:"link_oam_threshold_breached_interval"`
	StpBpduGuardInterval                types.Int64  `tfsdk:"stp_bpdu_guard_interval"`
	StpLegacyBpduInterval               types.Int64  `tfsdk:"stp_legacy_bpdu_interval"`
	ClusterUdldInterval                 types.Int64  `tfsdk:"cluster_udld_interval"`
	ClusterMinlinksInterval             types.Int64  `tfsdk:"cluster_minlinks_interval"`
	UdldUnidirectionalInterval          types.Int64  `tfsdk:"udld_unidirectional_interval"`
	UdldNeighborMismatchInterval        types.Int64  `tfsdk:"udld_neighbor_mismatch_interval"`
	UdldTimeoutInterval                 types.Int64  `tfsdk:"udld_timeout_interval"`
	UdldLoopbackInterval                types.Int64  `tfsdk:"udld_loopback_interval"`
	PvrstPvidMismatchInterval           types.Int64  `tfsdk:"pvrst_pvid_mismatch_interval"`
	L2vpnBportMacMoveInterval           types.Int64  `tfsdk:"l2vpn_bport_mac_move_interval"`
	OtTrackStateChangeInterval          types.Int64  `tfsdk:"ot_track_state_change_interval"`
	LinkOamDampeningInterval            types.Int64  `tfsdk:"link_oam_dampening_interval"`
}

type ErrorDisableRecoveryData struct {
	Device                              types.String `tfsdk:"device"`
	Id                                  types.String `tfsdk:"id"`
	LinkOamSessionDownInterval          types.Int64  `tfsdk:"link_oam_session_down_interval"`
	LinkOamDiscoveryTimeoutInterval     types.Int64  `tfsdk:"link_oam_discovery_timeout_interval"`
	LinkOamCapabilitiesConflictInterval types.Int64  `tfsdk:"link_oam_capabilities_conflict_interval"`
	LinkOamMiswiredInterval             types.Int64  `tfsdk:"link_oam_miswired_interval"`
	LinkOamLinkFaultInterval            types.Int64  `tfsdk:"link_oam_link_fault_interval"`
	LinkOamDyingGaspInterval            types.Int64  `tfsdk:"link_oam_dying_gasp_interval"`
	LinkOamCriticalEventInterval        types.Int64  `tfsdk:"link_oam_critical_event_interval"`
	LinkOamThresholdBreachedInterval    types.Int64  `tfsdk:"link_oam_threshold_breached_interval"`
	StpBpduGuardInterval                types.Int64  `tfsdk:"stp_bpdu_guard_interval"`
	StpLegacyBpduInterval               types.Int64  `tfsdk:"stp_legacy_bpdu_interval"`
	ClusterUdldInterval                 types.Int64  `tfsdk:"cluster_udld_interval"`
	ClusterMinlinksInterval             types.Int64  `tfsdk:"cluster_minlinks_interval"`
	UdldUnidirectionalInterval          types.Int64  `tfsdk:"udld_unidirectional_interval"`
	UdldNeighborMismatchInterval        types.Int64  `tfsdk:"udld_neighbor_mismatch_interval"`
	UdldTimeoutInterval                 types.Int64  `tfsdk:"udld_timeout_interval"`
	UdldLoopbackInterval                types.Int64  `tfsdk:"udld_loopback_interval"`
	PvrstPvidMismatchInterval           types.Int64  `tfsdk:"pvrst_pvid_mismatch_interval"`
	L2vpnBportMacMoveInterval           types.Int64  `tfsdk:"l2vpn_bport_mac_move_interval"`
	OtTrackStateChangeInterval          types.Int64  `tfsdk:"ot_track_state_change_interval"`
	LinkOamDampeningInterval            types.Int64  `tfsdk:"link_oam_dampening_interval"`
}

func (data ErrorDisableRecovery) getPath() string {
	return "Cisco-IOS-XR-um-error-disable-cfg:/error-disable/recovery/cause"
}

func (data ErrorDisableRecoveryData) getPath() string {
	return "Cisco-IOS-XR-um-error-disable-cfg:/error-disable/recovery/cause"
}

func (data ErrorDisableRecovery) toBody(ctx context.Context) string {
	body := "{}"
	if !data.LinkOamSessionDownInterval.IsNull() && !data.LinkOamSessionDownInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-session-down.interval", strconv.FormatInt(data.LinkOamSessionDownInterval.ValueInt64(), 10))
	}
	if !data.LinkOamDiscoveryTimeoutInterval.IsNull() && !data.LinkOamDiscoveryTimeoutInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-discovery-timeout.interval", strconv.FormatInt(data.LinkOamDiscoveryTimeoutInterval.ValueInt64(), 10))
	}
	if !data.LinkOamCapabilitiesConflictInterval.IsNull() && !data.LinkOamCapabilitiesConflictInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-capabilities-conflict.interval", strconv.FormatInt(data.LinkOamCapabilitiesConflictInterval.ValueInt64(), 10))
	}
	if !data.LinkOamMiswiredInterval.IsNull() && !data.LinkOamMiswiredInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-miswired.interval", strconv.FormatInt(data.LinkOamMiswiredInterval.ValueInt64(), 10))
	}
	if !data.LinkOamLinkFaultInterval.IsNull() && !data.LinkOamLinkFaultInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-link-fault.interval", strconv.FormatInt(data.LinkOamLinkFaultInterval.ValueInt64(), 10))
	}
	if !data.LinkOamDyingGaspInterval.IsNull() && !data.LinkOamDyingGaspInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-dying-gasp.interval", strconv.FormatInt(data.LinkOamDyingGaspInterval.ValueInt64(), 10))
	}
	if !data.LinkOamCriticalEventInterval.IsNull() && !data.LinkOamCriticalEventInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-critical-event.interval", strconv.FormatInt(data.LinkOamCriticalEventInterval.ValueInt64(), 10))
	}
	if !data.LinkOamThresholdBreachedInterval.IsNull() && !data.LinkOamThresholdBreachedInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-threshold-breached.interval", strconv.FormatInt(data.LinkOamThresholdBreachedInterval.ValueInt64(), 10))
	}
	if !data.StpBpduGuardInterval.IsNull() && !data.StpBpduGuardInterval.IsUnknown() {
		body, _ = sjson.Set(body, "stp-bpdu-guard.interval", strconv.FormatInt(data.StpBpduGuardInterval.ValueInt64(), 10))
	}
	if !data.StpLegacyBpduInterval.IsNull() && !data.StpLegacyBpduInterval.IsUnknown() {
		body, _ = sjson.Set(body, "stp-legacy-bpdu.interval", strconv.FormatInt(data.StpLegacyBpduInterval.ValueInt64(), 10))
	}
	if !data.ClusterUdldInterval.IsNull() && !data.ClusterUdldInterval.IsUnknown() {
		body, _ = sjson.Set(body, "cluster-udld.interval", strconv.FormatInt(data.ClusterUdldInterval.ValueInt64(), 10))
	}
	if !data.ClusterMinlinksInterval.IsNull() && !data.ClusterMinlinksInterval.IsUnknown() {
		body, _ = sjson.Set(body, "cluster-minlinks.interval", strconv.FormatInt(data.ClusterMinlinksInterval.ValueInt64(), 10))
	}
	if !data.UdldUnidirectionalInterval.IsNull() && !data.UdldUnidirectionalInterval.IsUnknown() {
		body, _ = sjson.Set(body, "udld-unidirectional.interval", strconv.FormatInt(data.UdldUnidirectionalInterval.ValueInt64(), 10))
	}
	if !data.UdldNeighborMismatchInterval.IsNull() && !data.UdldNeighborMismatchInterval.IsUnknown() {
		body, _ = sjson.Set(body, "udld-neighbor-mismatch.interval", strconv.FormatInt(data.UdldNeighborMismatchInterval.ValueInt64(), 10))
	}
	if !data.UdldTimeoutInterval.IsNull() && !data.UdldTimeoutInterval.IsUnknown() {
		body, _ = sjson.Set(body, "udld-timeout.interval", strconv.FormatInt(data.UdldTimeoutInterval.ValueInt64(), 10))
	}
	if !data.UdldLoopbackInterval.IsNull() && !data.UdldLoopbackInterval.IsUnknown() {
		body, _ = sjson.Set(body, "udld-loopback.interval", strconv.FormatInt(data.UdldLoopbackInterval.ValueInt64(), 10))
	}
	if !data.PvrstPvidMismatchInterval.IsNull() && !data.PvrstPvidMismatchInterval.IsUnknown() {
		body, _ = sjson.Set(body, "pvrst-pvid-mismatch.interval", strconv.FormatInt(data.PvrstPvidMismatchInterval.ValueInt64(), 10))
	}
	if !data.L2vpnBportMacMoveInterval.IsNull() && !data.L2vpnBportMacMoveInterval.IsUnknown() {
		body, _ = sjson.Set(body, "l2vpn-bport-mac-move.interval", strconv.FormatInt(data.L2vpnBportMacMoveInterval.ValueInt64(), 10))
	}
	if !data.OtTrackStateChangeInterval.IsNull() && !data.OtTrackStateChangeInterval.IsUnknown() {
		body, _ = sjson.Set(body, "ot-track-state-change.interval", strconv.FormatInt(data.OtTrackStateChangeInterval.ValueInt64(), 10))
	}
	if !data.LinkOamDampeningInterval.IsNull() && !data.LinkOamDampeningInterval.IsUnknown() {
		body, _ = sjson.Set(body, "link-oam-dampening.interval", strconv.FormatInt(data.LinkOamDampeningInterval.ValueInt64(), 10))
	}
	return body
}

func (data *ErrorDisableRecovery) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "link-oam-session-down.interval"); value.Exists() && !data.LinkOamSessionDownInterval.IsNull() {
		data.LinkOamSessionDownInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamSessionDownInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "link-oam-discovery-timeout.interval"); value.Exists() && !data.LinkOamDiscoveryTimeoutInterval.IsNull() {
		data.LinkOamDiscoveryTimeoutInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamDiscoveryTimeoutInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "link-oam-capabilities-conflict.interval"); value.Exists() && !data.LinkOamCapabilitiesConflictInterval.IsNull() {
		data.LinkOamCapabilitiesConflictInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamCapabilitiesConflictInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "link-oam-miswired.interval"); value.Exists() && !data.LinkOamMiswiredInterval.IsNull() {
		data.LinkOamMiswiredInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamMiswiredInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "link-oam-link-fault.interval"); value.Exists() && !data.LinkOamLinkFaultInterval.IsNull() {
		data.LinkOamLinkFaultInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamLinkFaultInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "link-oam-dying-gasp.interval"); value.Exists() && !data.LinkOamDyingGaspInterval.IsNull() {
		data.LinkOamDyingGaspInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamDyingGaspInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "link-oam-critical-event.interval"); value.Exists() && !data.LinkOamCriticalEventInterval.IsNull() {
		data.LinkOamCriticalEventInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamCriticalEventInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "link-oam-threshold-breached.interval"); value.Exists() && !data.LinkOamThresholdBreachedInterval.IsNull() {
		data.LinkOamThresholdBreachedInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamThresholdBreachedInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "stp-bpdu-guard.interval"); value.Exists() && !data.StpBpduGuardInterval.IsNull() {
		data.StpBpduGuardInterval = types.Int64Value(value.Int())
	} else {
		data.StpBpduGuardInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "stp-legacy-bpdu.interval"); value.Exists() && !data.StpLegacyBpduInterval.IsNull() {
		data.StpLegacyBpduInterval = types.Int64Value(value.Int())
	} else {
		data.StpLegacyBpduInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "cluster-udld.interval"); value.Exists() && !data.ClusterUdldInterval.IsNull() {
		data.ClusterUdldInterval = types.Int64Value(value.Int())
	} else {
		data.ClusterUdldInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "cluster-minlinks.interval"); value.Exists() && !data.ClusterMinlinksInterval.IsNull() {
		data.ClusterMinlinksInterval = types.Int64Value(value.Int())
	} else {
		data.ClusterMinlinksInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "udld-unidirectional.interval"); value.Exists() && !data.UdldUnidirectionalInterval.IsNull() {
		data.UdldUnidirectionalInterval = types.Int64Value(value.Int())
	} else {
		data.UdldUnidirectionalInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "udld-neighbor-mismatch.interval"); value.Exists() && !data.UdldNeighborMismatchInterval.IsNull() {
		data.UdldNeighborMismatchInterval = types.Int64Value(value.Int())
	} else {
		data.UdldNeighborMismatchInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "udld-timeout.interval"); value.Exists() && !data.UdldTimeoutInterval.IsNull() {
		data.UdldTimeoutInterval = types.Int64Value(value.Int())
	} else {
		data.UdldTimeoutInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "udld-loopback.interval"); value.Exists() && !data.UdldLoopbackInterval.IsNull() {
		data.UdldLoopbackInterval = types.Int64Value(value.Int())
	} else {
		data.UdldLoopbackInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "pvrst-pvid-mismatch.interval"); value.Exists() && !data.PvrstPvidMismatchInterval.IsNull() {
		data.PvrstPvidMismatchInterval = types.Int64Value(value.Int())
	} else {
		data.PvrstPvidMismatchInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "l2vpn-bport-mac-move.interval"); value.Exists() && !data.L2vpnBportMacMoveInterval.IsNull() {
		data.L2vpnBportMacMoveInterval = types.Int64Value(value.Int())
	} else {
		data.L2vpnBportMacMoveInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "ot-track-state-change.interval"); value.Exists() && !data.OtTrackStateChangeInterval.IsNull() {
		data.OtTrackStateChangeInterval = types.Int64Value(value.Int())
	} else {
		data.OtTrackStateChangeInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "link-oam-dampening.interval"); value.Exists() && !data.LinkOamDampeningInterval.IsNull() {
		data.LinkOamDampeningInterval = types.Int64Value(value.Int())
	} else {
		data.LinkOamDampeningInterval = types.Int64Null()
	}
}

func (data *ErrorDisableRecovery) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "link-oam-session-down.interval"); value.Exists() {
		data.LinkOamSessionDownInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-discovery-timeout.interval"); value.Exists() {
		data.LinkOamDiscoveryTimeoutInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-capabilities-conflict.interval"); value.Exists() {
		data.LinkOamCapabilitiesConflictInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-miswired.interval"); value.Exists() {
		data.LinkOamMiswiredInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-link-fault.interval"); value.Exists() {
		data.LinkOamLinkFaultInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-dying-gasp.interval"); value.Exists() {
		data.LinkOamDyingGaspInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-critical-event.interval"); value.Exists() {
		data.LinkOamCriticalEventInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-threshold-breached.interval"); value.Exists() {
		data.LinkOamThresholdBreachedInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "stp-bpdu-guard.interval"); value.Exists() {
		data.StpBpduGuardInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "stp-legacy-bpdu.interval"); value.Exists() {
		data.StpLegacyBpduInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cluster-udld.interval"); value.Exists() {
		data.ClusterUdldInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cluster-minlinks.interval"); value.Exists() {
		data.ClusterMinlinksInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "udld-unidirectional.interval"); value.Exists() {
		data.UdldUnidirectionalInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "udld-neighbor-mismatch.interval"); value.Exists() {
		data.UdldNeighborMismatchInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "udld-timeout.interval"); value.Exists() {
		data.UdldTimeoutInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "udld-loopback.interval"); value.Exists() {
		data.UdldLoopbackInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "pvrst-pvid-mismatch.interval"); value.Exists() {
		data.PvrstPvidMismatchInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "l2vpn-bport-mac-move.interval"); value.Exists() {
		data.L2vpnBportMacMoveInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ot-track-state-change.interval"); value.Exists() {
		data.OtTrackStateChangeInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-dampening.interval"); value.Exists() {
		data.LinkOamDampeningInterval = types.Int64Value(value.Int())
	}
}

func (data *ErrorDisableRecoveryData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "link-oam-session-down.interval"); value.Exists() {
		data.LinkOamSessionDownInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-discovery-timeout.interval"); value.Exists() {
		data.LinkOamDiscoveryTimeoutInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-capabilities-conflict.interval"); value.Exists() {
		data.LinkOamCapabilitiesConflictInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-miswired.interval"); value.Exists() {
		data.LinkOamMiswiredInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-link-fault.interval"); value.Exists() {
		data.LinkOamLinkFaultInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-dying-gasp.interval"); value.Exists() {
		data.LinkOamDyingGaspInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-critical-event.interval"); value.Exists() {
		data.LinkOamCriticalEventInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-threshold-breached.interval"); value.Exists() {
		data.LinkOamThresholdBreachedInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "stp-bpdu-guard.interval"); value.Exists() {
		data.StpBpduGuardInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "stp-legacy-bpdu.interval"); value.Exists() {
		data.StpLegacyBpduInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cluster-udld.interval"); value.Exists() {
		data.ClusterUdldInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cluster-minlinks.interval"); value.Exists() {
		data.ClusterMinlinksInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "udld-unidirectional.interval"); value.Exists() {
		data.UdldUnidirectionalInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "udld-neighbor-mismatch.interval"); value.Exists() {
		data.UdldNeighborMismatchInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "udld-timeout.interval"); value.Exists() {
		data.UdldTimeoutInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "udld-loopback.interval"); value.Exists() {
		data.UdldLoopbackInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "pvrst-pvid-mismatch.interval"); value.Exists() {
		data.PvrstPvidMismatchInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "l2vpn-bport-mac-move.interval"); value.Exists() {
		data.L2vpnBportMacMoveInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ot-track-state-change.interval"); value.Exists() {
		data.OtTrackStateChangeInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "link-oam-dampening.interval"); value.Exists() {
		data.LinkOamDampeningInterval = types.Int64Value(value.Int())
	}
}

func (data *ErrorDisableRecovery) getDeletedItems(ctx context.Context, state ErrorDisableRecovery) []string {
	deletedItems := make([]string, 0)
	if !state.LinkOamSessionDownInterval.IsNull() && data.LinkOamSessionDownInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-session-down/interval", state.getPath()))
	}
	if !state.LinkOamDiscoveryTimeoutInterval.IsNull() && data.LinkOamDiscoveryTimeoutInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-discovery-timeout/interval", state.getPath()))
	}
	if !state.LinkOamCapabilitiesConflictInterval.IsNull() && data.LinkOamCapabilitiesConflictInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-capabilities-conflict/interval", state.getPath()))
	}
	if !state.LinkOamMiswiredInterval.IsNull() && data.LinkOamMiswiredInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-miswired/interval", state.getPath()))
	}
	if !state.LinkOamLinkFaultInterval.IsNull() && data.LinkOamLinkFaultInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-link-fault/interval", state.getPath()))
	}
	if !state.LinkOamDyingGaspInterval.IsNull() && data.LinkOamDyingGaspInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-dying-gasp/interval", state.getPath()))
	}
	if !state.LinkOamCriticalEventInterval.IsNull() && data.LinkOamCriticalEventInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-critical-event/interval", state.getPath()))
	}
	if !state.LinkOamThresholdBreachedInterval.IsNull() && data.LinkOamThresholdBreachedInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-threshold-breached/interval", state.getPath()))
	}
	if !state.StpBpduGuardInterval.IsNull() && data.StpBpduGuardInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/stp-bpdu-guard/interval", state.getPath()))
	}
	if !state.StpLegacyBpduInterval.IsNull() && data.StpLegacyBpduInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/stp-legacy-bpdu/interval", state.getPath()))
	}
	if !state.ClusterUdldInterval.IsNull() && data.ClusterUdldInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cluster-udld/interval", state.getPath()))
	}
	if !state.ClusterMinlinksInterval.IsNull() && data.ClusterMinlinksInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cluster-minlinks/interval", state.getPath()))
	}
	if !state.UdldUnidirectionalInterval.IsNull() && data.UdldUnidirectionalInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/udld-unidirectional/interval", state.getPath()))
	}
	if !state.UdldNeighborMismatchInterval.IsNull() && data.UdldNeighborMismatchInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/udld-neighbor-mismatch/interval", state.getPath()))
	}
	if !state.UdldTimeoutInterval.IsNull() && data.UdldTimeoutInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/udld-timeout/interval", state.getPath()))
	}
	if !state.UdldLoopbackInterval.IsNull() && data.UdldLoopbackInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/udld-loopback/interval", state.getPath()))
	}
	if !state.PvrstPvidMismatchInterval.IsNull() && data.PvrstPvidMismatchInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/pvrst-pvid-mismatch/interval", state.getPath()))
	}
	if !state.L2vpnBportMacMoveInterval.IsNull() && data.L2vpnBportMacMoveInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/l2vpn-bport-mac-move/interval", state.getPath()))
	}
	if !state.OtTrackStateChangeInterval.IsNull() && data.OtTrackStateChangeInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ot-track-state-change/interval", state.getPath()))
	}
	if !state.LinkOamDampeningInterval.IsNull() && data.LinkOamDampeningInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/link-oam-dampening/interval", state.getPath()))
	}
	return deletedItems
}

func (data *ErrorDisableRecovery) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}

func (data *ErrorDisableRecovery) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.LinkOamSessionDownInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-session-down/interval", data.getPath()))
	}
	if !data.LinkOamDiscoveryTimeoutInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-discovery-timeout/interval", data.getPath()))
	}
	if !data.LinkOamCapabilitiesConflictInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-capabilities-conflict/interval", data.getPath()))
	}
	if !data.LinkOamMiswiredInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-miswired/interval", data.getPath()))
	}
	if !data.LinkOamLinkFaultInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-link-fault/interval", data.getPath()))
	}
	if !data.LinkOamDyingGaspInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-dying-gasp/interval", data.getPath()))
	}
	if !data.LinkOamCriticalEventInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-critical-event/interval", data.getPath()))
	}
	if !data.LinkOamThresholdBreachedInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-threshold-breached/interval", data.getPath()))
	}
	if !data.StpBpduGuardInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/stp-bpdu-guard/interval", data.getPath()))
	}
	if !data.StpLegacyBpduInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/stp-legacy-bpdu/interval", data.getPath()))
	}
	if !data.ClusterUdldInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cluster-udld/interval", data.getPath()))
	}
	if !data.ClusterMinlinksInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cluster-minlinks/interval", data.getPath()))
	}
	if !data.UdldUnidirectionalInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/udld-unidirectional/interval", data.getPath()))
	}
	if !data.UdldNeighborMismatchInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/udld-neighbor-mismatch/interval", data.getPath()))
	}
	if !data.UdldTimeoutInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/udld-timeout/interval", data.getPath()))
	}
	if !data.UdldLoopbackInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/udld-loopback/interval", data.getPath()))
	}
	if !data.PvrstPvidMismatchInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/pvrst-pvid-mismatch/interval", data.getPath()))
	}
	if !data.L2vpnBportMacMoveInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/l2vpn-bport-mac-move/interval", data.getPath()))
	}
	if !data.OtTrackStateChangeInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ot-track-state-change/interval", data.getPath()))
	}
	if !data.LinkOamDampeningInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/link-oam-dampening/interval", data.getPath()))
	}
	return deletePaths
}
