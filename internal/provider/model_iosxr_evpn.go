// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type EVPN struct {
	Device                             types.String       `tfsdk:"device"`
	Id                                 types.String       `tfsdk:"id"`
	DeleteMode                         types.String       `tfsdk:"delete_mode"`
	SourceInterface                    types.String       `tfsdk:"source_interface"`
	Interfaces                         []EVPNInterfaces   `tfsdk:"interfaces"`
	Srv6                               types.Bool         `tfsdk:"srv6"`
	Srv6Locators                       []EVPNSrv6Locators `tfsdk:"srv6_locators"`
	Srv6UsidAllocationWideLocalIdBlock types.Bool         `tfsdk:"srv6_usid_allocation_wide_local_id_block"`
}

type EVPNData struct {
	Device                             types.String       `tfsdk:"device"`
	Id                                 types.String       `tfsdk:"id"`
	SourceInterface                    types.String       `tfsdk:"source_interface"`
	Interfaces                         []EVPNInterfaces   `tfsdk:"interfaces"`
	Srv6                               types.Bool         `tfsdk:"srv6"`
	Srv6Locators                       []EVPNSrv6Locators `tfsdk:"srv6_locators"`
	Srv6UsidAllocationWideLocalIdBlock types.Bool         `tfsdk:"srv6_usid_allocation_wide_local_id_block"`
}
type EVPNInterfaces struct {
	InterfaceName          types.String `tfsdk:"interface_name"`
	EthernetSegmentEnable  types.Bool   `tfsdk:"ethernet_segment_enable"`
	EthernetSegmentEsiZero types.String `tfsdk:"ethernet_segment_esi_zero"`
}
type EVPNSrv6Locators struct {
	LocatorName                    types.String `tfsdk:"locator_name"`
	UsidAllocationWideLocalIdBlock types.Bool   `tfsdk:"usid_allocation_wide_local_id_block"`
}

func (data EVPN) getPath() string {
	return "Cisco-IOS-XR-um-l2vpn-cfg:/evpn"
}

func (data EVPNData) getPath() string {
	return "Cisco-IOS-XR-um-l2vpn-cfg:/evpn"
}

func (data EVPN) toBody(ctx context.Context) string {
	body := "{}"
	if !data.SourceInterface.IsNull() && !data.SourceInterface.IsUnknown() {
		body, _ = sjson.Set(body, "source.interface", data.SourceInterface.ValueString())
	}
	if !data.Srv6.IsNull() && !data.Srv6.IsUnknown() {
		if data.Srv6.ValueBool() {
			body, _ = sjson.Set(body, "segment-routing.srv6", map[string]string{})
		}
	}
	if !data.Srv6UsidAllocationWideLocalIdBlock.IsNull() && !data.Srv6UsidAllocationWideLocalIdBlock.IsUnknown() {
		if data.Srv6UsidAllocationWideLocalIdBlock.ValueBool() {
			body, _ = sjson.Set(body, "segment-routing.srv6.usid.allocation.wide-local-id-block", map[string]string{})
		}
	}
	if len(data.Interfaces) > 0 {
		body, _ = sjson.Set(body, "interface.interface", []interface{}{})
		for index, item := range data.Interfaces {
			if !item.InterfaceName.IsNull() && !item.InterfaceName.IsUnknown() {
				body, _ = sjson.Set(body, "interface.interface"+"."+strconv.Itoa(index)+"."+"interface-name", item.InterfaceName.ValueString())
			}
			if !item.EthernetSegmentEnable.IsNull() && !item.EthernetSegmentEnable.IsUnknown() {
				if item.EthernetSegmentEnable.ValueBool() {
					body, _ = sjson.Set(body, "interface.interface"+"."+strconv.Itoa(index)+"."+"ethernet-segment", map[string]string{})
				}
			}
			if !item.EthernetSegmentEsiZero.IsNull() && !item.EthernetSegmentEsiZero.IsUnknown() {
				body, _ = sjson.Set(body, "interface.interface"+"."+strconv.Itoa(index)+"."+"ethernet-segment.identifier.type.zero.esi", item.EthernetSegmentEsiZero.ValueString())
			}
		}
	}
	if len(data.Srv6Locators) > 0 {
		body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator", []interface{}{})
		for index, item := range data.Srv6Locators {
			if !item.LocatorName.IsNull() && !item.LocatorName.IsUnknown() {
				body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator"+"."+strconv.Itoa(index)+"."+"locator-name", item.LocatorName.ValueString())
			}
			if !item.UsidAllocationWideLocalIdBlock.IsNull() && !item.UsidAllocationWideLocalIdBlock.IsUnknown() {
				if item.UsidAllocationWideLocalIdBlock.ValueBool() {
					body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator"+"."+strconv.Itoa(index)+"."+"usid.allocation.wide-local-id-block", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *EVPN) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "source.interface"); value.Exists() && !data.SourceInterface.IsNull() {
		data.SourceInterface = types.StringValue(value.String())
	} else {
		data.SourceInterface = types.StringNull()
	}
	for i := range data.Interfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.Interfaces[i].InterfaceName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "interface.interface").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("interface-name"); value.Exists() && !data.Interfaces[i].InterfaceName.IsNull() {
			data.Interfaces[i].InterfaceName = types.StringValue(value.String())
		} else {
			data.Interfaces[i].InterfaceName = types.StringNull()
		}
		if value := r.Get("ethernet-segment"); !data.Interfaces[i].EthernetSegmentEnable.IsNull() {
			if value.Exists() {
				data.Interfaces[i].EthernetSegmentEnable = types.BoolValue(true)
			} else {
				data.Interfaces[i].EthernetSegmentEnable = types.BoolValue(false)
			}
		} else {
			data.Interfaces[i].EthernetSegmentEnable = types.BoolNull()
		}
		if value := r.Get("ethernet-segment.identifier.type.zero.esi"); value.Exists() && !data.Interfaces[i].EthernetSegmentEsiZero.IsNull() {
			data.Interfaces[i].EthernetSegmentEsiZero = types.StringValue(value.String())
		} else {
			data.Interfaces[i].EthernetSegmentEsiZero = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6"); !data.Srv6.IsNull() {
		if value.Exists() {
			data.Srv6 = types.BoolValue(true)
		} else {
			data.Srv6 = types.BoolValue(false)
		}
	} else {
		data.Srv6 = types.BoolNull()
	}
	for i := range data.Srv6Locators {
		keys := [...]string{"locator-name"}
		keyValues := [...]string{data.Srv6Locators[i].LocatorName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "segment-routing.srv6.locators.locator").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("locator-name"); value.Exists() && !data.Srv6Locators[i].LocatorName.IsNull() {
			data.Srv6Locators[i].LocatorName = types.StringValue(value.String())
		} else {
			data.Srv6Locators[i].LocatorName = types.StringNull()
		}
		if value := r.Get("usid.allocation.wide-local-id-block"); !data.Srv6Locators[i].UsidAllocationWideLocalIdBlock.IsNull() {
			if value.Exists() {
				data.Srv6Locators[i].UsidAllocationWideLocalIdBlock = types.BoolValue(true)
			} else {
				data.Srv6Locators[i].UsidAllocationWideLocalIdBlock = types.BoolValue(false)
			}
		} else {
			data.Srv6Locators[i].UsidAllocationWideLocalIdBlock = types.BoolNull()
		}
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6.usid.allocation.wide-local-id-block"); !data.Srv6UsidAllocationWideLocalIdBlock.IsNull() {
		if value.Exists() {
			data.Srv6UsidAllocationWideLocalIdBlock = types.BoolValue(true)
		} else {
			data.Srv6UsidAllocationWideLocalIdBlock = types.BoolValue(false)
		}
	} else {
		data.Srv6UsidAllocationWideLocalIdBlock = types.BoolNull()
	}
}

func (data *EVPN) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "source.interface"); value.Exists() {
		data.SourceInterface = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "interface.interface"); value.Exists() {
		data.Interfaces = make([]EVPNInterfaces, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNInterfaces{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ethernet-segment"); cValue.Exists() {
				item.EthernetSegmentEnable = types.BoolValue(true)
			} else {
				item.EthernetSegmentEnable = types.BoolValue(false)
			}
			if cValue := v.Get("ethernet-segment.identifier.type.zero.esi"); cValue.Exists() {
				item.EthernetSegmentEsiZero = types.StringValue(cValue.String())
			}
			data.Interfaces = append(data.Interfaces, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6"); value.Exists() {
		data.Srv6 = types.BoolValue(true)
	} else {
		data.Srv6 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6.locators.locator"); value.Exists() {
		data.Srv6Locators = make([]EVPNSrv6Locators, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSrv6Locators{}
			if cValue := v.Get("locator-name"); cValue.Exists() {
				item.LocatorName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("usid.allocation.wide-local-id-block"); cValue.Exists() {
				item.UsidAllocationWideLocalIdBlock = types.BoolValue(true)
			} else {
				item.UsidAllocationWideLocalIdBlock = types.BoolValue(false)
			}
			data.Srv6Locators = append(data.Srv6Locators, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6.usid.allocation.wide-local-id-block"); value.Exists() {
		data.Srv6UsidAllocationWideLocalIdBlock = types.BoolValue(true)
	} else {
		data.Srv6UsidAllocationWideLocalIdBlock = types.BoolValue(false)
	}
}

func (data *EVPNData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "source.interface"); value.Exists() {
		data.SourceInterface = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "interface.interface"); value.Exists() {
		data.Interfaces = make([]EVPNInterfaces, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNInterfaces{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ethernet-segment"); cValue.Exists() {
				item.EthernetSegmentEnable = types.BoolValue(true)
			} else {
				item.EthernetSegmentEnable = types.BoolValue(false)
			}
			if cValue := v.Get("ethernet-segment.identifier.type.zero.esi"); cValue.Exists() {
				item.EthernetSegmentEsiZero = types.StringValue(cValue.String())
			}
			data.Interfaces = append(data.Interfaces, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6"); value.Exists() {
		data.Srv6 = types.BoolValue(true)
	} else {
		data.Srv6 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6.locators.locator"); value.Exists() {
		data.Srv6Locators = make([]EVPNSrv6Locators, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSrv6Locators{}
			if cValue := v.Get("locator-name"); cValue.Exists() {
				item.LocatorName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("usid.allocation.wide-local-id-block"); cValue.Exists() {
				item.UsidAllocationWideLocalIdBlock = types.BoolValue(true)
			} else {
				item.UsidAllocationWideLocalIdBlock = types.BoolValue(false)
			}
			data.Srv6Locators = append(data.Srv6Locators, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6.usid.allocation.wide-local-id-block"); value.Exists() {
		data.Srv6UsidAllocationWideLocalIdBlock = types.BoolValue(true)
	} else {
		data.Srv6UsidAllocationWideLocalIdBlock = types.BoolValue(false)
	}
}

func (data *EVPN) getDeletedItems(ctx context.Context, state EVPN) []string {
	deletedItems := make([]string, 0)
	if !state.SourceInterface.IsNull() && data.SourceInterface.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/source/interface", state.getPath()))
	}
	for i := range state.Interfaces {
		keys := [...]string{"interface-name"}
		stateKeyValues := [...]string{state.Interfaces[i].InterfaceName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Interfaces[i].InterfaceName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Interfaces {
			found = true
			if state.Interfaces[i].InterfaceName.ValueString() != data.Interfaces[j].InterfaceName.ValueString() {
				found = false
			}
			if found {
				if !state.Interfaces[i].EthernetSegmentEnable.IsNull() && data.Interfaces[j].EthernetSegmentEnable.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/interface/interface%v/ethernet-segment", state.getPath(), keyString))
				}
				if !state.Interfaces[i].EthernetSegmentEsiZero.IsNull() && data.Interfaces[j].EthernetSegmentEsiZero.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/interface/interface%v/ethernet-segment/identifier/type/zero/esi", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/interface/interface%v", state.getPath(), keyString))
		}
	}
	if !state.Srv6.IsNull() && data.Srv6.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/segment-routing/srv6", state.getPath()))
	}
	for i := range state.Srv6Locators {
		keys := [...]string{"locator-name"}
		stateKeyValues := [...]string{state.Srv6Locators[i].LocatorName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Srv6Locators[i].LocatorName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Srv6Locators {
			found = true
			if state.Srv6Locators[i].LocatorName.ValueString() != data.Srv6Locators[j].LocatorName.ValueString() {
				found = false
			}
			if found {
				if !state.Srv6Locators[i].UsidAllocationWideLocalIdBlock.IsNull() && data.Srv6Locators[j].UsidAllocationWideLocalIdBlock.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/segment-routing/srv6/locators/locator%v/usid/allocation/wide-local-id-block", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/segment-routing/srv6/locators/locator%v", state.getPath(), keyString))
		}
	}
	if !state.Srv6UsidAllocationWideLocalIdBlock.IsNull() && data.Srv6UsidAllocationWideLocalIdBlock.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/segment-routing/srv6/usid/allocation/wide-local-id-block", state.getPath()))
	}
	return deletedItems
}

func (data *EVPN) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.Interfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.Interfaces[i].InterfaceName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.Interfaces[i].EthernetSegmentEnable.IsNull() && !data.Interfaces[i].EthernetSegmentEnable.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/interface/interface%v/ethernet-segment", data.getPath(), keyString))
		}
	}
	if !data.Srv6.IsNull() && !data.Srv6.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/segment-routing/srv6", data.getPath()))
	}
	for i := range data.Srv6Locators {
		keys := [...]string{"locator-name"}
		keyValues := [...]string{data.Srv6Locators[i].LocatorName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.Srv6Locators[i].UsidAllocationWideLocalIdBlock.IsNull() && !data.Srv6Locators[i].UsidAllocationWideLocalIdBlock.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/segment-routing/srv6/locators/locator%v/usid/allocation/wide-local-id-block", data.getPath(), keyString))
		}
	}
	if !data.Srv6UsidAllocationWideLocalIdBlock.IsNull() && !data.Srv6UsidAllocationWideLocalIdBlock.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/segment-routing/srv6/usid/allocation/wide-local-id-block", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *EVPN) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.SourceInterface.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/source/interface", data.getPath()))
	}
	for i := range data.Interfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.Interfaces[i].InterfaceName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/interface/interface%v", data.getPath(), keyString))
	}
	if !data.Srv6.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/segment-routing/srv6", data.getPath()))
	}
	for i := range data.Srv6Locators {
		keys := [...]string{"locator-name"}
		keyValues := [...]string{data.Srv6Locators[i].LocatorName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/segment-routing/srv6/locators/locator%v", data.getPath(), keyString))
	}
	if !data.Srv6UsidAllocationWideLocalIdBlock.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/segment-routing/srv6/usid/allocation/wide-local-id-block", data.getPath()))
	}
	return deletePaths
}
