// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type EVPNEVI struct {
	Device                                types.String                                   `tfsdk:"device"`
	Id                                    types.String                                   `tfsdk:"id"`
	DeleteMode                            types.String                                   `tfsdk:"delete_mode"`
	VpnId                                 types.Int64                                    `tfsdk:"vpn_id"`
	Description                           types.String                                   `tfsdk:"description"`
	LoadBalancing                         types.Bool                                     `tfsdk:"load_balancing"`
	LoadBalancingFlowLabelStatic          types.Bool                                     `tfsdk:"load_balancing_flow_label_static"`
	BgpRdTwoByteAsNumber                  types.Int64                                    `tfsdk:"bgp_rd_two_byte_as_number"`
	BgpRdTwoByteAsAssignedNumber          types.Int64                                    `tfsdk:"bgp_rd_two_byte_as_assigned_number"`
	BgpRdFourByteAsNumber                 types.Int64                                    `tfsdk:"bgp_rd_four_byte_as_number"`
	BgpRdFourByteAsAssignedNumber         types.Int64                                    `tfsdk:"bgp_rd_four_byte_as_assigned_number"`
	BgpRdIpv4Address                      types.String                                   `tfsdk:"bgp_rd_ipv4_address"`
	BgpRdIpv4AddressAssignedNumber        types.Int64                                    `tfsdk:"bgp_rd_ipv4_address_assigned_number"`
	BgpRouteTargetImportTwoByteAsFormat   []EVPNEVIBgpRouteTargetImportTwoByteAsFormat   `tfsdk:"bgp_route_target_import_two_byte_as_format"`
	BgpRouteTargetImportFourByteAsFormat  []EVPNEVIBgpRouteTargetImportFourByteAsFormat  `tfsdk:"bgp_route_target_import_four_byte_as_format"`
	BgpRouteTargetImportIpv4AddressFormat []EVPNEVIBgpRouteTargetImportIpv4AddressFormat `tfsdk:"bgp_route_target_import_ipv4_address_format"`
	BgpRouteTargetExportTwoByteAsFormat   []EVPNEVIBgpRouteTargetExportTwoByteAsFormat   `tfsdk:"bgp_route_target_export_two_byte_as_format"`
	BgpRouteTargetExportFourByteAsFormat  []EVPNEVIBgpRouteTargetExportFourByteAsFormat  `tfsdk:"bgp_route_target_export_four_byte_as_format"`
	BgpRouteTargetExportIpv4AddressFormat []EVPNEVIBgpRouteTargetExportIpv4AddressFormat `tfsdk:"bgp_route_target_export_ipv4_address_format"`
	BgpRoutePolicyImport                  types.String                                   `tfsdk:"bgp_route_policy_import"`
	BgpRoutePolicyExport                  types.String                                   `tfsdk:"bgp_route_policy_export"`
	AdvertiseMac                          types.Bool                                     `tfsdk:"advertise_mac"`
	UnknownUnicastSuppression             types.Bool                                     `tfsdk:"unknown_unicast_suppression"`
	ControlWordDisable                    types.Bool                                     `tfsdk:"control_word_disable"`
	Etree                                 types.Bool                                     `tfsdk:"etree"`
	EtreeLeaf                             types.Bool                                     `tfsdk:"etree_leaf"`
	EtreeRtLeaf                           types.Bool                                     `tfsdk:"etree_rt_leaf"`
}

type EVPNEVIData struct {
	Device                                types.String                                   `tfsdk:"device"`
	Id                                    types.String                                   `tfsdk:"id"`
	VpnId                                 types.Int64                                    `tfsdk:"vpn_id"`
	Description                           types.String                                   `tfsdk:"description"`
	LoadBalancing                         types.Bool                                     `tfsdk:"load_balancing"`
	LoadBalancingFlowLabelStatic          types.Bool                                     `tfsdk:"load_balancing_flow_label_static"`
	BgpRdTwoByteAsNumber                  types.Int64                                    `tfsdk:"bgp_rd_two_byte_as_number"`
	BgpRdTwoByteAsAssignedNumber          types.Int64                                    `tfsdk:"bgp_rd_two_byte_as_assigned_number"`
	BgpRdFourByteAsNumber                 types.Int64                                    `tfsdk:"bgp_rd_four_byte_as_number"`
	BgpRdFourByteAsAssignedNumber         types.Int64                                    `tfsdk:"bgp_rd_four_byte_as_assigned_number"`
	BgpRdIpv4Address                      types.String                                   `tfsdk:"bgp_rd_ipv4_address"`
	BgpRdIpv4AddressAssignedNumber        types.Int64                                    `tfsdk:"bgp_rd_ipv4_address_assigned_number"`
	BgpRouteTargetImportTwoByteAsFormat   []EVPNEVIBgpRouteTargetImportTwoByteAsFormat   `tfsdk:"bgp_route_target_import_two_byte_as_format"`
	BgpRouteTargetImportFourByteAsFormat  []EVPNEVIBgpRouteTargetImportFourByteAsFormat  `tfsdk:"bgp_route_target_import_four_byte_as_format"`
	BgpRouteTargetImportIpv4AddressFormat []EVPNEVIBgpRouteTargetImportIpv4AddressFormat `tfsdk:"bgp_route_target_import_ipv4_address_format"`
	BgpRouteTargetExportTwoByteAsFormat   []EVPNEVIBgpRouteTargetExportTwoByteAsFormat   `tfsdk:"bgp_route_target_export_two_byte_as_format"`
	BgpRouteTargetExportFourByteAsFormat  []EVPNEVIBgpRouteTargetExportFourByteAsFormat  `tfsdk:"bgp_route_target_export_four_byte_as_format"`
	BgpRouteTargetExportIpv4AddressFormat []EVPNEVIBgpRouteTargetExportIpv4AddressFormat `tfsdk:"bgp_route_target_export_ipv4_address_format"`
	BgpRoutePolicyImport                  types.String                                   `tfsdk:"bgp_route_policy_import"`
	BgpRoutePolicyExport                  types.String                                   `tfsdk:"bgp_route_policy_export"`
	AdvertiseMac                          types.Bool                                     `tfsdk:"advertise_mac"`
	UnknownUnicastSuppression             types.Bool                                     `tfsdk:"unknown_unicast_suppression"`
	ControlWordDisable                    types.Bool                                     `tfsdk:"control_word_disable"`
	Etree                                 types.Bool                                     `tfsdk:"etree"`
	EtreeLeaf                             types.Bool                                     `tfsdk:"etree_leaf"`
	EtreeRtLeaf                           types.Bool                                     `tfsdk:"etree_rt_leaf"`
}
type EVPNEVIBgpRouteTargetImportTwoByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNEVIBgpRouteTargetImportFourByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNEVIBgpRouteTargetImportIpv4AddressFormat struct {
	Ipv4Address    types.String `tfsdk:"ipv4_address"`
	AssignedNumber types.Int64  `tfsdk:"assigned_number"`
}
type EVPNEVIBgpRouteTargetExportTwoByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNEVIBgpRouteTargetExportFourByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNEVIBgpRouteTargetExportIpv4AddressFormat struct {
	Ipv4Address    types.String `tfsdk:"ipv4_address"`
	AssignedNumber types.Int64  `tfsdk:"assigned_number"`
}

func (data EVPNEVI) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-l2vpn-cfg:/evpn/evis/evi[vpn-id=%v]", data.VpnId.ValueInt64())
}

func (data EVPNEVIData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-l2vpn-cfg:/evpn/evis/evi[vpn-id=%v]", data.VpnId.ValueInt64())
}

func (data EVPNEVI) toBody(ctx context.Context) string {
	body := "{}"
	if !data.VpnId.IsNull() && !data.VpnId.IsUnknown() {
		body, _ = sjson.Set(body, "vpn-id", strconv.FormatInt(data.VpnId.ValueInt64(), 10))
	}
	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.LoadBalancing.IsNull() && !data.LoadBalancing.IsUnknown() {
		if data.LoadBalancing.ValueBool() {
			body, _ = sjson.Set(body, "load-balancing", map[string]string{})
		}
	}
	if !data.LoadBalancingFlowLabelStatic.IsNull() && !data.LoadBalancingFlowLabelStatic.IsUnknown() {
		if data.LoadBalancingFlowLabelStatic.ValueBool() {
			body, _ = sjson.Set(body, "load-balancing.flow-label.static", map[string]string{})
		}
	}
	if !data.BgpRdTwoByteAsNumber.IsNull() && !data.BgpRdTwoByteAsNumber.IsUnknown() {
		body, _ = sjson.Set(body, "bgp.rd.two-byte-as-number", strconv.FormatInt(data.BgpRdTwoByteAsNumber.ValueInt64(), 10))
	}
	if !data.BgpRdTwoByteAsAssignedNumber.IsNull() && !data.BgpRdTwoByteAsAssignedNumber.IsUnknown() {
		body, _ = sjson.Set(body, "bgp.rd.two-byte-as-assigned-number", strconv.FormatInt(data.BgpRdTwoByteAsAssignedNumber.ValueInt64(), 10))
	}
	if !data.BgpRdFourByteAsNumber.IsNull() && !data.BgpRdFourByteAsNumber.IsUnknown() {
		body, _ = sjson.Set(body, "bgp.rd.four-byte-as-number", strconv.FormatInt(data.BgpRdFourByteAsNumber.ValueInt64(), 10))
	}
	if !data.BgpRdFourByteAsAssignedNumber.IsNull() && !data.BgpRdFourByteAsAssignedNumber.IsUnknown() {
		body, _ = sjson.Set(body, "bgp.rd.four-byte-as-assigned-number", strconv.FormatInt(data.BgpRdFourByteAsAssignedNumber.ValueInt64(), 10))
	}
	if !data.BgpRdIpv4Address.IsNull() && !data.BgpRdIpv4Address.IsUnknown() {
		body, _ = sjson.Set(body, "bgp.rd.ipv4-address", data.BgpRdIpv4Address.ValueString())
	}
	if !data.BgpRdIpv4AddressAssignedNumber.IsNull() && !data.BgpRdIpv4AddressAssignedNumber.IsUnknown() {
		body, _ = sjson.Set(body, "bgp.rd.ipv4-address-assigned-number", strconv.FormatInt(data.BgpRdIpv4AddressAssignedNumber.ValueInt64(), 10))
	}
	if !data.BgpRoutePolicyImport.IsNull() && !data.BgpRoutePolicyImport.IsUnknown() {
		body, _ = sjson.Set(body, "bgp.route-policy.import", data.BgpRoutePolicyImport.ValueString())
	}
	if !data.BgpRoutePolicyExport.IsNull() && !data.BgpRoutePolicyExport.IsUnknown() {
		body, _ = sjson.Set(body, "bgp.route-policy.export", data.BgpRoutePolicyExport.ValueString())
	}
	if !data.AdvertiseMac.IsNull() && !data.AdvertiseMac.IsUnknown() {
		if data.AdvertiseMac.ValueBool() {
			body, _ = sjson.Set(body, "advertise-mac", map[string]string{})
		}
	}
	if !data.UnknownUnicastSuppression.IsNull() && !data.UnknownUnicastSuppression.IsUnknown() {
		if data.UnknownUnicastSuppression.ValueBool() {
			body, _ = sjson.Set(body, "unknown-unicast-suppression", map[string]string{})
		}
	}
	if !data.ControlWordDisable.IsNull() && !data.ControlWordDisable.IsUnknown() {
		if data.ControlWordDisable.ValueBool() {
			body, _ = sjson.Set(body, "control-word-disable", map[string]string{})
		}
	}
	if !data.Etree.IsNull() && !data.Etree.IsUnknown() {
		if data.Etree.ValueBool() {
			body, _ = sjson.Set(body, "etree", map[string]string{})
		}
	}
	if !data.EtreeLeaf.IsNull() && !data.EtreeLeaf.IsUnknown() {
		if data.EtreeLeaf.ValueBool() {
			body, _ = sjson.Set(body, "etree.leaf", map[string]string{})
		}
	}
	if !data.EtreeRtLeaf.IsNull() && !data.EtreeRtLeaf.IsUnknown() {
		if data.EtreeRtLeaf.ValueBool() {
			body, _ = sjson.Set(body, "etree.rt-leaf", map[string]string{})
		}
	}
	if len(data.BgpRouteTargetImportTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetImportTwoByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetImportFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetImportFourByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetImportIpv4AddressFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetImportIpv4AddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetExportTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetExportTwoByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetExportFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetExportFourByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetExportIpv4AddressFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetExportIpv4AddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	return body
}

func (data *EVPNEVI) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := gjson.GetBytes(res, "load-balancing"); !data.LoadBalancing.IsNull() {
		if value.Exists() {
			data.LoadBalancing = types.BoolValue(true)
		} else {
			data.LoadBalancing = types.BoolValue(false)
		}
	} else {
		data.LoadBalancing = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "load-balancing.flow-label.static"); !data.LoadBalancingFlowLabelStatic.IsNull() {
		if value.Exists() {
			data.LoadBalancingFlowLabelStatic = types.BoolValue(true)
		} else {
			data.LoadBalancingFlowLabelStatic = types.BoolValue(false)
		}
	} else {
		data.LoadBalancingFlowLabelStatic = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "bgp.rd.two-byte-as-number"); value.Exists() && !data.BgpRdTwoByteAsNumber.IsNull() {
		data.BgpRdTwoByteAsNumber = types.Int64Value(value.Int())
	} else {
		data.BgpRdTwoByteAsNumber = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "bgp.rd.two-byte-as-assigned-number"); value.Exists() && !data.BgpRdTwoByteAsAssignedNumber.IsNull() {
		data.BgpRdTwoByteAsAssignedNumber = types.Int64Value(value.Int())
	} else {
		data.BgpRdTwoByteAsAssignedNumber = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "bgp.rd.four-byte-as-number"); value.Exists() && !data.BgpRdFourByteAsNumber.IsNull() {
		data.BgpRdFourByteAsNumber = types.Int64Value(value.Int())
	} else {
		data.BgpRdFourByteAsNumber = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "bgp.rd.four-byte-as-assigned-number"); value.Exists() && !data.BgpRdFourByteAsAssignedNumber.IsNull() {
		data.BgpRdFourByteAsAssignedNumber = types.Int64Value(value.Int())
	} else {
		data.BgpRdFourByteAsAssignedNumber = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "bgp.rd.ipv4-address"); value.Exists() && !data.BgpRdIpv4Address.IsNull() {
		data.BgpRdIpv4Address = types.StringValue(value.String())
	} else {
		data.BgpRdIpv4Address = types.StringNull()
	}
	if value := gjson.GetBytes(res, "bgp.rd.ipv4-address-assigned-number"); value.Exists() && !data.BgpRdIpv4AddressAssignedNumber.IsNull() {
		data.BgpRdIpv4AddressAssignedNumber = types.Int64Value(value.Int())
	} else {
		data.BgpRdIpv4AddressAssignedNumber = types.Int64Null()
	}
	for i := range data.BgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.IsNull() {
			data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.IsNull() {
			data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.IsNull() {
			data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.IsNull() {
			data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.IsNull() {
			data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.IsNull() {
			data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	if value := gjson.GetBytes(res, "bgp.route-policy.import"); value.Exists() && !data.BgpRoutePolicyImport.IsNull() {
		data.BgpRoutePolicyImport = types.StringValue(value.String())
	} else {
		data.BgpRoutePolicyImport = types.StringNull()
	}
	if value := gjson.GetBytes(res, "bgp.route-policy.export"); value.Exists() && !data.BgpRoutePolicyExport.IsNull() {
		data.BgpRoutePolicyExport = types.StringValue(value.String())
	} else {
		data.BgpRoutePolicyExport = types.StringNull()
	}
	if value := gjson.GetBytes(res, "advertise-mac"); !data.AdvertiseMac.IsNull() {
		if value.Exists() {
			data.AdvertiseMac = types.BoolValue(true)
		} else {
			data.AdvertiseMac = types.BoolValue(false)
		}
	} else {
		data.AdvertiseMac = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "unknown-unicast-suppression"); !data.UnknownUnicastSuppression.IsNull() {
		if value.Exists() {
			data.UnknownUnicastSuppression = types.BoolValue(true)
		} else {
			data.UnknownUnicastSuppression = types.BoolValue(false)
		}
	} else {
		data.UnknownUnicastSuppression = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "control-word-disable"); !data.ControlWordDisable.IsNull() {
		if value.Exists() {
			data.ControlWordDisable = types.BoolValue(true)
		} else {
			data.ControlWordDisable = types.BoolValue(false)
		}
	} else {
		data.ControlWordDisable = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "etree"); !data.Etree.IsNull() {
		if value.Exists() {
			data.Etree = types.BoolValue(true)
		} else {
			data.Etree = types.BoolValue(false)
		}
	} else {
		data.Etree = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "etree.leaf"); !data.EtreeLeaf.IsNull() {
		if value.Exists() {
			data.EtreeLeaf = types.BoolValue(true)
		} else {
			data.EtreeLeaf = types.BoolValue(false)
		}
	} else {
		data.EtreeLeaf = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "etree.rt-leaf"); !data.EtreeRtLeaf.IsNull() {
		if value.Exists() {
			data.EtreeRtLeaf = types.BoolValue(true)
		} else {
			data.EtreeRtLeaf = types.BoolValue(false)
		}
	} else {
		data.EtreeRtLeaf = types.BoolNull()
	}
}

func (data *EVPNEVI) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "load-balancing"); value.Exists() {
		data.LoadBalancing = types.BoolValue(true)
	} else {
		data.LoadBalancing = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "load-balancing.flow-label.static"); value.Exists() {
		data.LoadBalancingFlowLabelStatic = types.BoolValue(true)
	} else {
		data.LoadBalancingFlowLabelStatic = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "bgp.rd.two-byte-as-number"); value.Exists() {
		data.BgpRdTwoByteAsNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.rd.two-byte-as-assigned-number"); value.Exists() {
		data.BgpRdTwoByteAsAssignedNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.rd.four-byte-as-number"); value.Exists() {
		data.BgpRdFourByteAsNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.rd.four-byte-as-assigned-number"); value.Exists() {
		data.BgpRdFourByteAsAssignedNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.rd.ipv4-address"); value.Exists() {
		data.BgpRdIpv4Address = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "bgp.rd.ipv4-address-assigned-number"); value.Exists() {
		data.BgpRdIpv4AddressAssignedNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetImportTwoByteAsFormat = make([]EVPNEVIBgpRouteTargetImportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetImportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportTwoByteAsFormat = append(data.BgpRouteTargetImportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetImportFourByteAsFormat = make([]EVPNEVIBgpRouteTargetImportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetImportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportFourByteAsFormat = append(data.BgpRouteTargetImportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.BgpRouteTargetImportIpv4AddressFormat = make([]EVPNEVIBgpRouteTargetImportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetImportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportIpv4AddressFormat = append(data.BgpRouteTargetImportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetExportTwoByteAsFormat = make([]EVPNEVIBgpRouteTargetExportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetExportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportTwoByteAsFormat = append(data.BgpRouteTargetExportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetExportFourByteAsFormat = make([]EVPNEVIBgpRouteTargetExportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetExportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportFourByteAsFormat = append(data.BgpRouteTargetExportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.BgpRouteTargetExportIpv4AddressFormat = make([]EVPNEVIBgpRouteTargetExportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetExportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportIpv4AddressFormat = append(data.BgpRouteTargetExportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-policy.import"); value.Exists() {
		data.BgpRoutePolicyImport = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "bgp.route-policy.export"); value.Exists() {
		data.BgpRoutePolicyExport = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "advertise-mac"); value.Exists() {
		data.AdvertiseMac = types.BoolValue(true)
	} else {
		data.AdvertiseMac = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "unknown-unicast-suppression"); value.Exists() {
		data.UnknownUnicastSuppression = types.BoolValue(true)
	} else {
		data.UnknownUnicastSuppression = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "control-word-disable"); value.Exists() {
		data.ControlWordDisable = types.BoolValue(true)
	} else {
		data.ControlWordDisable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "etree"); value.Exists() {
		data.Etree = types.BoolValue(true)
	} else {
		data.Etree = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "etree.leaf"); value.Exists() {
		data.EtreeLeaf = types.BoolValue(true)
	} else {
		data.EtreeLeaf = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "etree.rt-leaf"); value.Exists() {
		data.EtreeRtLeaf = types.BoolValue(true)
	} else {
		data.EtreeRtLeaf = types.BoolValue(false)
	}
}

func (data *EVPNEVIData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "load-balancing"); value.Exists() {
		data.LoadBalancing = types.BoolValue(true)
	} else {
		data.LoadBalancing = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "load-balancing.flow-label.static"); value.Exists() {
		data.LoadBalancingFlowLabelStatic = types.BoolValue(true)
	} else {
		data.LoadBalancingFlowLabelStatic = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "bgp.rd.two-byte-as-number"); value.Exists() {
		data.BgpRdTwoByteAsNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.rd.two-byte-as-assigned-number"); value.Exists() {
		data.BgpRdTwoByteAsAssignedNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.rd.four-byte-as-number"); value.Exists() {
		data.BgpRdFourByteAsNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.rd.four-byte-as-assigned-number"); value.Exists() {
		data.BgpRdFourByteAsAssignedNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.rd.ipv4-address"); value.Exists() {
		data.BgpRdIpv4Address = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "bgp.rd.ipv4-address-assigned-number"); value.Exists() {
		data.BgpRdIpv4AddressAssignedNumber = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetImportTwoByteAsFormat = make([]EVPNEVIBgpRouteTargetImportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetImportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportTwoByteAsFormat = append(data.BgpRouteTargetImportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetImportFourByteAsFormat = make([]EVPNEVIBgpRouteTargetImportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetImportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportFourByteAsFormat = append(data.BgpRouteTargetImportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.BgpRouteTargetImportIpv4AddressFormat = make([]EVPNEVIBgpRouteTargetImportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetImportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportIpv4AddressFormat = append(data.BgpRouteTargetImportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetExportTwoByteAsFormat = make([]EVPNEVIBgpRouteTargetExportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetExportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportTwoByteAsFormat = append(data.BgpRouteTargetExportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetExportFourByteAsFormat = make([]EVPNEVIBgpRouteTargetExportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetExportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportFourByteAsFormat = append(data.BgpRouteTargetExportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.BgpRouteTargetExportIpv4AddressFormat = make([]EVPNEVIBgpRouteTargetExportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEVIBgpRouteTargetExportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportIpv4AddressFormat = append(data.BgpRouteTargetExportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-policy.import"); value.Exists() {
		data.BgpRoutePolicyImport = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "bgp.route-policy.export"); value.Exists() {
		data.BgpRoutePolicyExport = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "advertise-mac"); value.Exists() {
		data.AdvertiseMac = types.BoolValue(true)
	} else {
		data.AdvertiseMac = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "unknown-unicast-suppression"); value.Exists() {
		data.UnknownUnicastSuppression = types.BoolValue(true)
	} else {
		data.UnknownUnicastSuppression = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "control-word-disable"); value.Exists() {
		data.ControlWordDisable = types.BoolValue(true)
	} else {
		data.ControlWordDisable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "etree"); value.Exists() {
		data.Etree = types.BoolValue(true)
	} else {
		data.Etree = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "etree.leaf"); value.Exists() {
		data.EtreeLeaf = types.BoolValue(true)
	} else {
		data.EtreeLeaf = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "etree.rt-leaf"); value.Exists() {
		data.EtreeRtLeaf = types.BoolValue(true)
	} else {
		data.EtreeRtLeaf = types.BoolValue(false)
	}
}

func (data *EVPNEVI) getDeletedItems(ctx context.Context, state EVPNEVI) []string {
	deletedItems := make([]string, 0)
	if !state.Description.IsNull() && data.Description.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/description", state.getPath()))
	}
	if !state.LoadBalancing.IsNull() && data.LoadBalancing.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/load-balancing", state.getPath()))
	}
	if !state.LoadBalancingFlowLabelStatic.IsNull() && data.LoadBalancingFlowLabelStatic.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/load-balancing/flow-label/static", state.getPath()))
	}
	if !state.BgpRdTwoByteAsNumber.IsNull() && data.BgpRdTwoByteAsNumber.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/rd/two-byte-as-number", state.getPath()))
	}
	if !state.BgpRdTwoByteAsAssignedNumber.IsNull() && data.BgpRdTwoByteAsAssignedNumber.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/rd/two-byte-as-assigned-number", state.getPath()))
	}
	if !state.BgpRdFourByteAsNumber.IsNull() && data.BgpRdFourByteAsNumber.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/rd/four-byte-as-number", state.getPath()))
	}
	if !state.BgpRdFourByteAsAssignedNumber.IsNull() && data.BgpRdFourByteAsAssignedNumber.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/rd/four-byte-as-assigned-number", state.getPath()))
	}
	if !state.BgpRdIpv4Address.IsNull() && data.BgpRdIpv4Address.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/rd/ipv4-address", state.getPath()))
	}
	if !state.BgpRdIpv4AddressAssignedNumber.IsNull() && data.BgpRdIpv4AddressAssignedNumber.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/rd/ipv4-address-assigned-number", state.getPath()))
	}
	for i := range state.BgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetImportTwoByteAsFormat {
			found = true
			if state.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64() != data.BgpRouteTargetImportTwoByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetImportTwoByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/import/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetImportFourByteAsFormat {
			found = true
			if state.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64() != data.BgpRouteTargetImportFourByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetImportFourByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/import/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		stateKeyValues := [...]string{state.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetImportIpv4AddressFormat {
			found = true
			if state.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString() != data.BgpRouteTargetImportIpv4AddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetImportIpv4AddressFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/import/ipv4-address-rts/ipv4-address-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetExportTwoByteAsFormat {
			found = true
			if state.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64() != data.BgpRouteTargetExportTwoByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetExportTwoByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/export/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetExportFourByteAsFormat {
			found = true
			if state.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64() != data.BgpRouteTargetExportFourByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetExportFourByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/export/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		stateKeyValues := [...]string{state.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetExportIpv4AddressFormat {
			found = true
			if state.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString() != data.BgpRouteTargetExportIpv4AddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetExportIpv4AddressFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/export/ipv4-address-rts/ipv4-address-rt%v", state.getPath(), keyString))
		}
	}
	if !state.BgpRoutePolicyImport.IsNull() && data.BgpRoutePolicyImport.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-policy/import", state.getPath()))
	}
	if !state.BgpRoutePolicyExport.IsNull() && data.BgpRoutePolicyExport.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-policy/export", state.getPath()))
	}
	if !state.AdvertiseMac.IsNull() && data.AdvertiseMac.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/advertise-mac", state.getPath()))
	}
	if !state.UnknownUnicastSuppression.IsNull() && data.UnknownUnicastSuppression.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/unknown-unicast-suppression", state.getPath()))
	}
	if !state.ControlWordDisable.IsNull() && data.ControlWordDisable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/control-word-disable", state.getPath()))
	}
	if !state.Etree.IsNull() && data.Etree.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/etree", state.getPath()))
	}
	if !state.EtreeLeaf.IsNull() && data.EtreeLeaf.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/etree/leaf", state.getPath()))
	}
	if !state.EtreeRtLeaf.IsNull() && data.EtreeRtLeaf.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/etree/rt-leaf", state.getPath()))
	}
	return deletedItems
}

func (data *EVPNEVI) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.LoadBalancing.IsNull() && !data.LoadBalancing.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/load-balancing", data.getPath()))
	}
	if !data.LoadBalancingFlowLabelStatic.IsNull() && !data.LoadBalancingFlowLabelStatic.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/load-balancing/flow-label/static", data.getPath()))
	}
	for i := range data.BgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.AdvertiseMac.IsNull() && !data.AdvertiseMac.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/advertise-mac", data.getPath()))
	}
	if !data.UnknownUnicastSuppression.IsNull() && !data.UnknownUnicastSuppression.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/unknown-unicast-suppression", data.getPath()))
	}
	if !data.ControlWordDisable.IsNull() && !data.ControlWordDisable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/control-word-disable", data.getPath()))
	}
	if !data.Etree.IsNull() && !data.Etree.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/etree", data.getPath()))
	}
	if !data.EtreeLeaf.IsNull() && !data.EtreeLeaf.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/etree/leaf", data.getPath()))
	}
	if !data.EtreeRtLeaf.IsNull() && !data.EtreeRtLeaf.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/etree/rt-leaf", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *EVPNEVI) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Description.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/description", data.getPath()))
	}
	if !data.LoadBalancing.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/load-balancing", data.getPath()))
	}
	if !data.LoadBalancingFlowLabelStatic.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/load-balancing/flow-label/static", data.getPath()))
	}
	if !data.BgpRdTwoByteAsNumber.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/rd/two-byte-as-number", data.getPath()))
	}
	if !data.BgpRdTwoByteAsAssignedNumber.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/rd/two-byte-as-assigned-number", data.getPath()))
	}
	if !data.BgpRdFourByteAsNumber.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/rd/four-byte-as-number", data.getPath()))
	}
	if !data.BgpRdFourByteAsAssignedNumber.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/rd/four-byte-as-assigned-number", data.getPath()))
	}
	if !data.BgpRdIpv4Address.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/rd/ipv4-address", data.getPath()))
	}
	if !data.BgpRdIpv4AddressAssignedNumber.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/rd/ipv4-address-assigned-number", data.getPath()))
	}
	for i := range data.BgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/import/two-byte-as-rts/two-byte-as-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/import/four-byte-as-rts/four-byte-as-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/import/ipv4-address-rts/ipv4-address-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/export/two-byte-as-rts/two-byte-as-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/export/four-byte-as-rts/four-byte-as-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/export/ipv4-address-rts/ipv4-address-rt%v", data.getPath(), keyString))
	}
	if !data.BgpRoutePolicyImport.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-policy/import", data.getPath()))
	}
	if !data.BgpRoutePolicyExport.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-policy/export", data.getPath()))
	}
	if !data.AdvertiseMac.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/advertise-mac", data.getPath()))
	}
	if !data.UnknownUnicastSuppression.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/unknown-unicast-suppression", data.getPath()))
	}
	if !data.ControlWordDisable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/control-word-disable", data.getPath()))
	}
	if !data.Etree.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/etree", data.getPath()))
	}
	if !data.EtreeLeaf.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/etree/leaf", data.getPath()))
	}
	if !data.EtreeRtLeaf.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/etree/rt-leaf", data.getPath()))
	}
	return deletePaths
}
