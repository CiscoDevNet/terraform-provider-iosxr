// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type EVPNGroup struct {
	Device         types.String              `tfsdk:"device"`
	Id             types.String              `tfsdk:"id"`
	GroupId        types.Int64               `tfsdk:"group_id"`
	CoreInterfaces []EVPNGroupCoreInterfaces `tfsdk:"core_interfaces"`
}
type EVPNGroupCoreInterfaces struct {
	InterfaceName types.String `tfsdk:"interface_name"`
}

func (data EVPNGroup) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-l2vpn-cfg:/evpn/groups/group[group-name=%v]", data.GroupId.ValueInt64())
}

func (data EVPNGroup) toBody(ctx context.Context) string {
	body := "{}"
	if !data.GroupId.IsNull() && !data.GroupId.IsUnknown() {
		body, _ = sjson.Set(body, "group-name", strconv.FormatInt(data.GroupId.ValueInt64(), 10))
	}
	if len(data.CoreInterfaces) > 0 {
		body, _ = sjson.Set(body, "core.interface", []interface{}{})
		for index, item := range data.CoreInterfaces {
			if !item.InterfaceName.IsNull() && !item.InterfaceName.IsUnknown() {
				body, _ = sjson.Set(body, "core.interface"+"."+strconv.Itoa(index)+"."+"interface-name", item.InterfaceName.ValueString())
			}
		}
	}
	return body
}

func (data *EVPNGroup) updateFromBody(ctx context.Context, res []byte) {
	for i := range data.CoreInterfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.CoreInterfaces[i].InterfaceName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "core.interface").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("interface-name"); value.Exists() && !data.CoreInterfaces[i].InterfaceName.IsNull() {
			data.CoreInterfaces[i].InterfaceName = types.StringValue(value.String())
		} else {
			data.CoreInterfaces[i].InterfaceName = types.StringNull()
		}
	}
}

func (data *EVPNGroup) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "core.interface"); value.Exists() {
		data.CoreInterfaces = make([]EVPNGroupCoreInterfaces, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNGroupCoreInterfaces{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			data.CoreInterfaces = append(data.CoreInterfaces, item)
			return true
		})
	}
}

func (data *EVPNGroup) fromPlan(ctx context.Context, plan EVPNGroup) {
	data.Device = plan.Device
	data.GroupId = types.Int64Value(plan.GroupId.ValueInt64())
}

func (data *EVPNGroup) getDeletedListItems(ctx context.Context, state EVPNGroup) []string {
	deletedListItems := make([]string, 0)
	for i := range state.CoreInterfaces {
		keys := [...]string{"interface-name"}
		stateKeyValues := [...]string{state.CoreInterfaces[i].InterfaceName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.CoreInterfaces[i].InterfaceName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.CoreInterfaces {
			found = true
			if state.CoreInterfaces[i].InterfaceName.ValueString() != data.CoreInterfaces[j].InterfaceName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/core/interface%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *EVPNGroup) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
