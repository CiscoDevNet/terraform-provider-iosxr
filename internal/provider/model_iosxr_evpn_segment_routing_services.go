// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type EVPNSegmentRoutingServices struct {
	Device                                    types.String                                                          `tfsdk:"device"`
	Id                                        types.String                                                          `tfsdk:"id"`
	VpnId                                     types.Int64                                                           `tfsdk:"vpn_id"`
	Description                               types.String                                                          `tfsdk:"description"`
	EvpnBgpRouteTargetImportTwoByteAsFormat   []EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportTwoByteAsFormat   `tfsdk:"evpn_bgp_route_target_import_two_byte_as_format"`
	EvpnBgpRouteTargetImportFourByteAsFormat  []EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportFourByteAsFormat  `tfsdk:"evpn_bgp_route_target_import_four_byte_as_format"`
	EvpnBgpRouteTargetImportIpv4AddressFormat []EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportIpv4AddressFormat `tfsdk:"evpn_bgp_route_target_import_ipv4_address_format"`
	EvpnBgpRouteTargetExportTwoByteAsFormat   []EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportTwoByteAsFormat   `tfsdk:"evpn_bgp_route_target_export_two_byte_as_format"`
	EvpnBgpRouteTargetExportFourByteAsFormat  []EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportFourByteAsFormat  `tfsdk:"evpn_bgp_route_target_export_four_byte_as_format"`
	EvpnBgpRouteTargetExportIpv4AddressFormat []EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportIpv4AddressFormat `tfsdk:"evpn_bgp_route_target_export_ipv4_address_format"`
	AdvertiseMacBviMac                        types.Bool                                                            `tfsdk:"advertise_mac_bvi_mac"`
	Locator                                   types.String                                                          `tfsdk:"locator"`
}
type EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportTwoByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportFourByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportIpv4AddressFormat struct {
	Ipv4Address    types.String `tfsdk:"ipv4_address"`
	AssignedNumber types.Int64  `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportTwoByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportFourByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportIpv4AddressFormat struct {
	Ipv4Address    types.String `tfsdk:"ipv4_address"`
	AssignedNumber types.Int64  `tfsdk:"assigned_number"`
}

func (data EVPNSegmentRoutingServices) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-l2vpn-cfg:/evpn/evis/segment-routing/srv6/evi[vpn-id=%v]", data.VpnId.ValueInt64())
}

func (data EVPNSegmentRoutingServices) toBody(ctx context.Context) string {
	body := "{}"
	if !data.VpnId.IsNull() && !data.VpnId.IsUnknown() {
		body, _ = sjson.Set(body, "vpn-id", strconv.FormatInt(data.VpnId.ValueInt64(), 10))
	}
	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.AdvertiseMacBviMac.IsNull() && !data.AdvertiseMacBviMac.IsUnknown() {
		if data.AdvertiseMacBviMac.ValueBool() {
			body, _ = sjson.Set(body, "advertise-mac.bvi-mac", map[string]string{})
		}
	}
	if !data.Locator.IsNull() && !data.Locator.IsUnknown() {
		body, _ = sjson.Set(body, "locator", data.Locator.ValueString())
	}
	if len(data.EvpnBgpRouteTargetImportTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.EvpnBgpRouteTargetImportTwoByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.EvpnBgpRouteTargetImportFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.EvpnBgpRouteTargetImportFourByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.EvpnBgpRouteTargetImportIpv4AddressFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt", []interface{}{})
		for index, item := range data.EvpnBgpRouteTargetImportIpv4AddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.EvpnBgpRouteTargetExportTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.EvpnBgpRouteTargetExportTwoByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.EvpnBgpRouteTargetExportFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.EvpnBgpRouteTargetExportFourByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.EvpnBgpRouteTargetExportIpv4AddressFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt", []interface{}{})
		for index, item := range data.EvpnBgpRouteTargetExportIpv4AddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	return body
}

func (data *EVPNSegmentRoutingServices) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	for i := range data.EvpnBgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AsNumber.IsNull() {
			data.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.IsNull() {
			data.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.EvpnBgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.EvpnBgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.EvpnBgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.EvpnBgpRouteTargetImportFourByteAsFormat[i].AsNumber.IsNull() {
			data.EvpnBgpRouteTargetImportFourByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetImportFourByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.EvpnBgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.IsNull() {
			data.EvpnBgpRouteTargetImportFourByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetImportFourByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.EvpnBgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.EvpnBgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.EvpnBgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.EvpnBgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.IsNull() {
			data.EvpnBgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.EvpnBgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.EvpnBgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.IsNull() {
			data.EvpnBgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.EvpnBgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AsNumber.IsNull() {
			data.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.IsNull() {
			data.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.EvpnBgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.EvpnBgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.EvpnBgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.EvpnBgpRouteTargetExportFourByteAsFormat[i].AsNumber.IsNull() {
			data.EvpnBgpRouteTargetExportFourByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetExportFourByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.EvpnBgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.IsNull() {
			data.EvpnBgpRouteTargetExportFourByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetExportFourByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.EvpnBgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.EvpnBgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.EvpnBgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.EvpnBgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.IsNull() {
			data.EvpnBgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.EvpnBgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.EvpnBgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.IsNull() {
			data.EvpnBgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.EvpnBgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	if value := gjson.GetBytes(res, "advertise-mac.bvi-mac"); !data.AdvertiseMacBviMac.IsNull() {
		if value.Exists() {
			data.AdvertiseMacBviMac = types.BoolValue(true)
		} else {
			data.AdvertiseMacBviMac = types.BoolValue(false)
		}
	} else {
		data.AdvertiseMacBviMac = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "locator"); value.Exists() && !data.Locator.IsNull() {
		data.Locator = types.StringValue(value.String())
	} else {
		data.Locator = types.StringNull()
	}
}

func (data *EVPNSegmentRoutingServices) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.EvpnBgpRouteTargetImportTwoByteAsFormat = make([]EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.EvpnBgpRouteTargetImportTwoByteAsFormat = append(data.EvpnBgpRouteTargetImportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.EvpnBgpRouteTargetImportFourByteAsFormat = make([]EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.EvpnBgpRouteTargetImportFourByteAsFormat = append(data.EvpnBgpRouteTargetImportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.EvpnBgpRouteTargetImportIpv4AddressFormat = make([]EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingServicesEvpnBgpRouteTargetImportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.EvpnBgpRouteTargetImportIpv4AddressFormat = append(data.EvpnBgpRouteTargetImportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.EvpnBgpRouteTargetExportTwoByteAsFormat = make([]EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.EvpnBgpRouteTargetExportTwoByteAsFormat = append(data.EvpnBgpRouteTargetExportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.EvpnBgpRouteTargetExportFourByteAsFormat = make([]EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.EvpnBgpRouteTargetExportFourByteAsFormat = append(data.EvpnBgpRouteTargetExportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.EvpnBgpRouteTargetExportIpv4AddressFormat = make([]EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingServicesEvpnBgpRouteTargetExportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.EvpnBgpRouteTargetExportIpv4AddressFormat = append(data.EvpnBgpRouteTargetExportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "advertise-mac.bvi-mac"); value.Exists() {
		data.AdvertiseMacBviMac = types.BoolValue(true)
	} else {
		data.AdvertiseMacBviMac = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "locator"); value.Exists() {
		data.Locator = types.StringValue(value.String())
	}
}

func (data *EVPNSegmentRoutingServices) getDeletedListItems(ctx context.Context, state EVPNSegmentRoutingServices) []string {
	deletedListItems := make([]string, 0)
	for i := range state.EvpnBgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.EvpnBgpRouteTargetImportTwoByteAsFormat {
			found = true
			if state.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64() != data.EvpnBgpRouteTargetImportTwoByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.EvpnBgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64() != data.EvpnBgpRouteTargetImportTwoByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/bgp/route-target/import/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.EvpnBgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.EvpnBgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.EvpnBgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.EvpnBgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.EvpnBgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.EvpnBgpRouteTargetImportFourByteAsFormat {
			found = true
			if state.EvpnBgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64() != data.EvpnBgpRouteTargetImportFourByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.EvpnBgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64() != data.EvpnBgpRouteTargetImportFourByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/bgp/route-target/import/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.EvpnBgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		stateKeyValues := [...]string{state.EvpnBgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.EvpnBgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.EvpnBgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.EvpnBgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.EvpnBgpRouteTargetImportIpv4AddressFormat {
			found = true
			if state.EvpnBgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString() != data.EvpnBgpRouteTargetImportIpv4AddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.EvpnBgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64() != data.EvpnBgpRouteTargetImportIpv4AddressFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/bgp/route-target/import/ipv4-address-rts/ipv4-address-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.EvpnBgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.EvpnBgpRouteTargetExportTwoByteAsFormat {
			found = true
			if state.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64() != data.EvpnBgpRouteTargetExportTwoByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.EvpnBgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64() != data.EvpnBgpRouteTargetExportTwoByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/bgp/route-target/export/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.EvpnBgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.EvpnBgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.EvpnBgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.EvpnBgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.EvpnBgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.EvpnBgpRouteTargetExportFourByteAsFormat {
			found = true
			if state.EvpnBgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64() != data.EvpnBgpRouteTargetExportFourByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.EvpnBgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64() != data.EvpnBgpRouteTargetExportFourByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/bgp/route-target/export/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.EvpnBgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		stateKeyValues := [...]string{state.EvpnBgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.EvpnBgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.EvpnBgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.EvpnBgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.EvpnBgpRouteTargetExportIpv4AddressFormat {
			found = true
			if state.EvpnBgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString() != data.EvpnBgpRouteTargetExportIpv4AddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.EvpnBgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64() != data.EvpnBgpRouteTargetExportIpv4AddressFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/bgp/route-target/export/ipv4-address-rts/ipv4-address-rt%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *EVPNSegmentRoutingServices) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	if !data.AdvertiseMacBviMac.IsNull() && !data.AdvertiseMacBviMac.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/advertise-mac/bvi-mac", data.getPath()))
	}
	return emptyLeafsDelete
}
