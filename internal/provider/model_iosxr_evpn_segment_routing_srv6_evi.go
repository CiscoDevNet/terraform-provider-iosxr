// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type EVPNSegmentRoutingSRv6EVI struct {
	Device                                types.String                                                     `tfsdk:"device"`
	Id                                    types.String                                                     `tfsdk:"id"`
	VpnId                                 types.Int64                                                      `tfsdk:"vpn_id"`
	Description                           types.String                                                     `tfsdk:"description"`
	BgpRouteTargetImportTwoByteAsFormat   []EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportTwoByteAsFormat   `tfsdk:"bgp_route_target_import_two_byte_as_format"`
	BgpRouteTargetImportFourByteAsFormat  []EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportFourByteAsFormat  `tfsdk:"bgp_route_target_import_four_byte_as_format"`
	BgpRouteTargetImportIpv4AddressFormat []EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportIpv4AddressFormat `tfsdk:"bgp_route_target_import_ipv4_address_format"`
	BgpRouteTargetExportTwoByteAsFormat   []EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportTwoByteAsFormat   `tfsdk:"bgp_route_target_export_two_byte_as_format"`
	BgpRouteTargetExportFourByteAsFormat  []EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportFourByteAsFormat  `tfsdk:"bgp_route_target_export_four_byte_as_format"`
	BgpRouteTargetExportIpv4AddressFormat []EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportIpv4AddressFormat `tfsdk:"bgp_route_target_export_ipv4_address_format"`
	AdvertiseMac                          types.Bool                                                       `tfsdk:"advertise_mac"`
	Locator                               types.String                                                     `tfsdk:"locator"`
}

type EVPNSegmentRoutingSRv6EVIData struct {
	Device                                types.String                                                     `tfsdk:"device"`
	Id                                    types.String                                                     `tfsdk:"id"`
	VpnId                                 types.Int64                                                      `tfsdk:"vpn_id"`
	Description                           types.String                                                     `tfsdk:"description"`
	BgpRouteTargetImportTwoByteAsFormat   []EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportTwoByteAsFormat   `tfsdk:"bgp_route_target_import_two_byte_as_format"`
	BgpRouteTargetImportFourByteAsFormat  []EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportFourByteAsFormat  `tfsdk:"bgp_route_target_import_four_byte_as_format"`
	BgpRouteTargetImportIpv4AddressFormat []EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportIpv4AddressFormat `tfsdk:"bgp_route_target_import_ipv4_address_format"`
	BgpRouteTargetExportTwoByteAsFormat   []EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportTwoByteAsFormat   `tfsdk:"bgp_route_target_export_two_byte_as_format"`
	BgpRouteTargetExportFourByteAsFormat  []EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportFourByteAsFormat  `tfsdk:"bgp_route_target_export_four_byte_as_format"`
	BgpRouteTargetExportIpv4AddressFormat []EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportIpv4AddressFormat `tfsdk:"bgp_route_target_export_ipv4_address_format"`
	AdvertiseMac                          types.Bool                                                       `tfsdk:"advertise_mac"`
	Locator                               types.String                                                     `tfsdk:"locator"`
}
type EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportTwoByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportFourByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportIpv4AddressFormat struct {
	Ipv4Address    types.String `tfsdk:"ipv4_address"`
	AssignedNumber types.Int64  `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportTwoByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportFourByteAsFormat struct {
	AsNumber       types.Int64 `tfsdk:"as_number"`
	AssignedNumber types.Int64 `tfsdk:"assigned_number"`
}
type EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportIpv4AddressFormat struct {
	Ipv4Address    types.String `tfsdk:"ipv4_address"`
	AssignedNumber types.Int64  `tfsdk:"assigned_number"`
}

func (data EVPNSegmentRoutingSRv6EVI) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-l2vpn-cfg:/evpn/evis/segment-routing/srv6/evi[vpn-id=%v]", data.VpnId.ValueInt64())
}

func (data EVPNSegmentRoutingSRv6EVIData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-l2vpn-cfg:/evpn/evis/segment-routing/srv6/evi[vpn-id=%v]", data.VpnId.ValueInt64())
}

func (data EVPNSegmentRoutingSRv6EVI) toBody(ctx context.Context) string {
	body := "{}"
	if !data.VpnId.IsNull() && !data.VpnId.IsUnknown() {
		body, _ = sjson.Set(body, "vpn-id", strconv.FormatInt(data.VpnId.ValueInt64(), 10))
	}
	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.AdvertiseMac.IsNull() && !data.AdvertiseMac.IsUnknown() {
		if data.AdvertiseMac.ValueBool() {
			body, _ = sjson.Set(body, "advertise-mac", map[string]string{})
		}
	}
	if !data.Locator.IsNull() && !data.Locator.IsUnknown() {
		body, _ = sjson.Set(body, "locator", data.Locator.ValueString())
	}
	if len(data.BgpRouteTargetImportTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetImportTwoByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetImportFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetImportFourByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetImportIpv4AddressFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetImportIpv4AddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetExportTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetExportTwoByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetExportFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetExportFourByteAsFormat {
			if !item.AsNumber.IsNull() && !item.AsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.AsNumber.ValueInt64(), 10))
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	if len(data.BgpRouteTargetExportIpv4AddressFormat) > 0 {
		body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt", []interface{}{})
		for index, item := range data.BgpRouteTargetExportIpv4AddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.AssignedNumber.IsNull() && !item.AssignedNumber.IsUnknown() {
				body, _ = sjson.Set(body, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"+"."+strconv.Itoa(index)+"."+"assigned-number", strconv.FormatInt(item.AssignedNumber.ValueInt64(), 10))
			}
		}
	}
	return body
}

func (data *EVPNSegmentRoutingSRv6EVI) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	for i := range data.BgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.IsNull() {
			data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.IsNull() {
			data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.IsNull() {
			data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.IsNull() {
			data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.IsNull() {
			data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber = types.Int64Null()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	for i := range data.BgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.IsNull() {
			data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("assigned-number"); value.Exists() && !data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.IsNull() {
			data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber = types.Int64Value(value.Int())
		} else {
			data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber = types.Int64Null()
		}
	}
	if value := gjson.GetBytes(res, "advertise-mac"); !data.AdvertiseMac.IsNull() {
		if value.Exists() {
			data.AdvertiseMac = types.BoolValue(true)
		} else {
			data.AdvertiseMac = types.BoolValue(false)
		}
	} else {
		data.AdvertiseMac = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "locator"); value.Exists() && !data.Locator.IsNull() {
		data.Locator = types.StringValue(value.String())
	} else {
		data.Locator = types.StringNull()
	}
}

func (data *EVPNSegmentRoutingSRv6EVI) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetImportTwoByteAsFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportTwoByteAsFormat = append(data.BgpRouteTargetImportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetImportFourByteAsFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportFourByteAsFormat = append(data.BgpRouteTargetImportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.BgpRouteTargetImportIpv4AddressFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportIpv4AddressFormat = append(data.BgpRouteTargetImportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetExportTwoByteAsFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportTwoByteAsFormat = append(data.BgpRouteTargetExportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetExportFourByteAsFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportFourByteAsFormat = append(data.BgpRouteTargetExportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.BgpRouteTargetExportIpv4AddressFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportIpv4AddressFormat = append(data.BgpRouteTargetExportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "advertise-mac"); value.Exists() {
		data.AdvertiseMac = types.BoolValue(true)
	} else {
		data.AdvertiseMac = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "locator"); value.Exists() {
		data.Locator = types.StringValue(value.String())
	}
}

func (data *EVPNSegmentRoutingSRv6EVIData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetImportTwoByteAsFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportTwoByteAsFormat = append(data.BgpRouteTargetImportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetImportFourByteAsFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportFourByteAsFormat = append(data.BgpRouteTargetImportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.import.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.BgpRouteTargetImportIpv4AddressFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetImportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetImportIpv4AddressFormat = append(data.BgpRouteTargetImportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetExportTwoByteAsFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportTwoByteAsFormat = append(data.BgpRouteTargetExportTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.BgpRouteTargetExportFourByteAsFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.AsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportFourByteAsFormat = append(data.BgpRouteTargetExportFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bgp.route-target.export.ipv4-address-rts.ipv4-address-rt"); value.Exists() {
		data.BgpRouteTargetExportIpv4AddressFormat = make([]EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportIpv4AddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNSegmentRoutingSRv6EVIBgpRouteTargetExportIpv4AddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("assigned-number"); cValue.Exists() {
				item.AssignedNumber = types.Int64Value(cValue.Int())
			}
			data.BgpRouteTargetExportIpv4AddressFormat = append(data.BgpRouteTargetExportIpv4AddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "advertise-mac"); value.Exists() {
		data.AdvertiseMac = types.BoolValue(true)
	} else {
		data.AdvertiseMac = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "locator"); value.Exists() {
		data.Locator = types.StringValue(value.String())
	}
}

func (data *EVPNSegmentRoutingSRv6EVI) getDeletedItems(ctx context.Context, state EVPNSegmentRoutingSRv6EVI) []string {
	deletedItems := make([]string, 0)
	if !state.Description.IsNull() && data.Description.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/description", state.getPath()))
	}
	for i := range state.BgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetImportTwoByteAsFormat {
			found = true
			if state.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64() != data.BgpRouteTargetImportTwoByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetImportTwoByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/import/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetImportFourByteAsFormat {
			found = true
			if state.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64() != data.BgpRouteTargetImportFourByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetImportFourByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/import/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		stateKeyValues := [...]string{state.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetImportIpv4AddressFormat {
			found = true
			if state.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString() != data.BgpRouteTargetImportIpv4AddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetImportIpv4AddressFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/import/ipv4-address-rts/ipv4-address-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetExportTwoByteAsFormat {
			found = true
			if state.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64() != data.BgpRouteTargetExportTwoByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetExportTwoByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/export/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(state.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetExportFourByteAsFormat {
			found = true
			if state.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64() != data.BgpRouteTargetExportFourByteAsFormat[j].AsNumber.ValueInt64() {
				found = false
			}
			if state.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetExportFourByteAsFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/export/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.BgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		stateKeyValues := [...]string{state.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.BgpRouteTargetExportIpv4AddressFormat {
			found = true
			if state.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString() != data.BgpRouteTargetExportIpv4AddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64() != data.BgpRouteTargetExportIpv4AddressFormat[j].AssignedNumber.ValueInt64() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/bgp/route-target/export/ipv4-address-rts/ipv4-address-rt%v", state.getPath(), keyString))
		}
	}
	if !state.AdvertiseMac.IsNull() && data.AdvertiseMac.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/advertise-mac", state.getPath()))
	}
	if !state.Locator.IsNull() && data.Locator.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/locator", state.getPath()))
	}
	return deletedItems
}

func (data *EVPNSegmentRoutingSRv6EVI) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.BgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.BgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.AdvertiseMac.IsNull() && !data.AdvertiseMac.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/advertise-mac", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *EVPNSegmentRoutingSRv6EVI) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Description.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/description", data.getPath()))
	}
	for i := range data.BgpRouteTargetImportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/import/two-byte-as-rts/two-byte-as-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetImportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetImportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/import/four-byte-as-rts/four-byte-as-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetImportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetImportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetImportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/import/ipv4-address-rts/ipv4-address-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetExportTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportTwoByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/export/two-byte-as-rts/two-byte-as-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetExportFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "assigned-number"}
		keyValues := [...]string{strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AsNumber.ValueInt64(), 10), strconv.FormatInt(data.BgpRouteTargetExportFourByteAsFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/export/four-byte-as-rts/four-byte-as-rt%v", data.getPath(), keyString))
	}
	for i := range data.BgpRouteTargetExportIpv4AddressFormat {
		keys := [...]string{"ipv4-address", "assigned-number"}
		keyValues := [...]string{data.BgpRouteTargetExportIpv4AddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.BgpRouteTargetExportIpv4AddressFormat[i].AssignedNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bgp/route-target/export/ipv4-address-rts/ipv4-address-rt%v", data.getPath(), keyString))
	}
	if !data.AdvertiseMac.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/advertise-mac", data.getPath()))
	}
	if !data.Locator.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/locator", data.getPath()))
	}
	return deletePaths
}
