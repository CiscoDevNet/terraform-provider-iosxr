// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type FlowExporterMap struct {
	Device       types.String                  `tfsdk:"device"`
	Id           types.String                  `tfsdk:"id"`
	ExporterMaps []FlowExporterMapExporterMaps `tfsdk:"exporter_maps"`
}

type FlowExporterMapData struct {
	Device       types.String                  `tfsdk:"device"`
	Id           types.String                  `tfsdk:"id"`
	ExporterMaps []FlowExporterMapExporterMaps `tfsdk:"exporter_maps"`
}
type FlowExporterMapExporterMaps struct {
	ExporterMapName                     types.String `tfsdk:"exporter_map_name"`
	DestinationIpv4Address              types.String `tfsdk:"destination_ipv4_address"`
	DestinationIpv6Address              types.String `tfsdk:"destination_ipv6_address"`
	DestinationVrf                      types.String `tfsdk:"destination_vrf"`
	Source                              types.String `tfsdk:"source"`
	Dscp                                types.Int64  `tfsdk:"dscp"`
	PacketLength                        types.Int64  `tfsdk:"packet_length"`
	TransportUdp                        types.Int64  `tfsdk:"transport_udp"`
	DfbitSet                            types.Bool   `tfsdk:"dfbit_set"`
	VersionExportFormat                 types.String `tfsdk:"version_export_format"`
	VersionTemplateDataTimeout          types.Int64  `tfsdk:"version_template_data_timeout"`
	VersionTemplateOptionsTimeout       types.Int64  `tfsdk:"version_template_options_timeout"`
	VersionTemplateTimeout              types.Int64  `tfsdk:"version_template_timeout"`
	VersionOptionsInterfaceTableTimeout types.Int64  `tfsdk:"version_options_interface_table_timeout"`
	VersionOptionsSamplerTableTimeout   types.Int64  `tfsdk:"version_options_sampler_table_timeout"`
	VersionOptionsClassTableTimeout     types.Int64  `tfsdk:"version_options_class_table_timeout"`
	VersionOptionsVrfTableTimeout       types.Int64  `tfsdk:"version_options_vrf_table_timeout"`
}

func (data FlowExporterMap) getPath() string {
	return "Cisco-IOS-XR-um-flow-cfg:/flow/exporter-maps"
}

func (data FlowExporterMapData) getPath() string {
	return "Cisco-IOS-XR-um-flow-cfg:/flow/exporter-maps"
}

func (data FlowExporterMap) toBody(ctx context.Context) string {
	body := "{}"
	if len(data.ExporterMaps) > 0 {
		body, _ = sjson.Set(body, "exporter-map", []interface{}{})
		for index, item := range data.ExporterMaps {
			if !item.ExporterMapName.IsNull() && !item.ExporterMapName.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"exporter-map-name", item.ExporterMapName.ValueString())
			}
			if !item.DestinationIpv4Address.IsNull() && !item.DestinationIpv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"destination.ipv4-address", item.DestinationIpv4Address.ValueString())
			}
			if !item.DestinationIpv6Address.IsNull() && !item.DestinationIpv6Address.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"destination.ipv6-address", item.DestinationIpv6Address.ValueString())
			}
			if !item.DestinationVrf.IsNull() && !item.DestinationVrf.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"destination.vrf", item.DestinationVrf.ValueString())
			}
			if !item.Source.IsNull() && !item.Source.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"source", item.Source.ValueString())
			}
			if !item.Dscp.IsNull() && !item.Dscp.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"dscp", strconv.FormatInt(item.Dscp.ValueInt64(), 10))
			}
			if !item.PacketLength.IsNull() && !item.PacketLength.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"packet-length", strconv.FormatInt(item.PacketLength.ValueInt64(), 10))
			}
			if !item.TransportUdp.IsNull() && !item.TransportUdp.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"transport.udp", strconv.FormatInt(item.TransportUdp.ValueInt64(), 10))
			}
			if !item.DfbitSet.IsNull() && !item.DfbitSet.IsUnknown() {
				if item.DfbitSet.ValueBool() {
					body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"dfbit.set", map[string]string{})
				}
			}
			if !item.VersionExportFormat.IsNull() && !item.VersionExportFormat.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"version.export-format", item.VersionExportFormat.ValueString())
			}
			if !item.VersionTemplateDataTimeout.IsNull() && !item.VersionTemplateDataTimeout.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"version.template.data.timeout", strconv.FormatInt(item.VersionTemplateDataTimeout.ValueInt64(), 10))
			}
			if !item.VersionTemplateOptionsTimeout.IsNull() && !item.VersionTemplateOptionsTimeout.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"version.template.options.timeout", strconv.FormatInt(item.VersionTemplateOptionsTimeout.ValueInt64(), 10))
			}
			if !item.VersionTemplateTimeout.IsNull() && !item.VersionTemplateTimeout.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"version.template.timeout", strconv.FormatInt(item.VersionTemplateTimeout.ValueInt64(), 10))
			}
			if !item.VersionOptionsInterfaceTableTimeout.IsNull() && !item.VersionOptionsInterfaceTableTimeout.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"version.options.interface-table.timeout", strconv.FormatInt(item.VersionOptionsInterfaceTableTimeout.ValueInt64(), 10))
			}
			if !item.VersionOptionsSamplerTableTimeout.IsNull() && !item.VersionOptionsSamplerTableTimeout.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"version.options.sampler-table.timeout", strconv.FormatInt(item.VersionOptionsSamplerTableTimeout.ValueInt64(), 10))
			}
			if !item.VersionOptionsClassTableTimeout.IsNull() && !item.VersionOptionsClassTableTimeout.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"version.options.class-table.timeout", strconv.FormatInt(item.VersionOptionsClassTableTimeout.ValueInt64(), 10))
			}
			if !item.VersionOptionsVrfTableTimeout.IsNull() && !item.VersionOptionsVrfTableTimeout.IsUnknown() {
				body, _ = sjson.Set(body, "exporter-map"+"."+strconv.Itoa(index)+"."+"version.options.vrf-table.timeout", strconv.FormatInt(item.VersionOptionsVrfTableTimeout.ValueInt64(), 10))
			}
		}
	}
	return body
}

func (data *FlowExporterMap) updateFromBody(ctx context.Context, res []byte) {
	for i := range data.ExporterMaps {
		keys := [...]string{"exporter-map-name"}
		keyValues := [...]string{data.ExporterMaps[i].ExporterMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "exporter-map").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("exporter-map-name"); value.Exists() && !data.ExporterMaps[i].ExporterMapName.IsNull() {
			data.ExporterMaps[i].ExporterMapName = types.StringValue(value.String())
		} else {
			data.ExporterMaps[i].ExporterMapName = types.StringNull()
		}
		if value := r.Get("destination.ipv4-address"); value.Exists() && !data.ExporterMaps[i].DestinationIpv4Address.IsNull() {
			data.ExporterMaps[i].DestinationIpv4Address = types.StringValue(value.String())
		} else {
			data.ExporterMaps[i].DestinationIpv4Address = types.StringNull()
		}
		if value := r.Get("destination.ipv6-address"); value.Exists() && !data.ExporterMaps[i].DestinationIpv6Address.IsNull() {
			data.ExporterMaps[i].DestinationIpv6Address = types.StringValue(value.String())
		} else {
			data.ExporterMaps[i].DestinationIpv6Address = types.StringNull()
		}
		if value := r.Get("destination.vrf"); value.Exists() && !data.ExporterMaps[i].DestinationVrf.IsNull() {
			data.ExporterMaps[i].DestinationVrf = types.StringValue(value.String())
		} else {
			data.ExporterMaps[i].DestinationVrf = types.StringNull()
		}
		if value := r.Get("source"); value.Exists() && !data.ExporterMaps[i].Source.IsNull() {
			data.ExporterMaps[i].Source = types.StringValue(value.String())
		} else {
			data.ExporterMaps[i].Source = types.StringNull()
		}
		if value := r.Get("dscp"); value.Exists() && !data.ExporterMaps[i].Dscp.IsNull() {
			data.ExporterMaps[i].Dscp = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].Dscp = types.Int64Null()
		}
		if value := r.Get("packet-length"); value.Exists() && !data.ExporterMaps[i].PacketLength.IsNull() {
			data.ExporterMaps[i].PacketLength = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].PacketLength = types.Int64Null()
		}
		if value := r.Get("transport.udp"); value.Exists() && !data.ExporterMaps[i].TransportUdp.IsNull() {
			data.ExporterMaps[i].TransportUdp = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].TransportUdp = types.Int64Null()
		}
		if value := r.Get("dfbit.set"); !data.ExporterMaps[i].DfbitSet.IsNull() {
			if value.Exists() {
				data.ExporterMaps[i].DfbitSet = types.BoolValue(true)
			} else {
				data.ExporterMaps[i].DfbitSet = types.BoolValue(false)
			}
		} else {
			data.ExporterMaps[i].DfbitSet = types.BoolNull()
		}
		if value := r.Get("version.export-format"); value.Exists() && !data.ExporterMaps[i].VersionExportFormat.IsNull() {
			data.ExporterMaps[i].VersionExportFormat = types.StringValue(value.String())
		} else {
			data.ExporterMaps[i].VersionExportFormat = types.StringNull()
		}
		if value := r.Get("version.template.data.timeout"); value.Exists() && !data.ExporterMaps[i].VersionTemplateDataTimeout.IsNull() {
			data.ExporterMaps[i].VersionTemplateDataTimeout = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].VersionTemplateDataTimeout = types.Int64Null()
		}
		if value := r.Get("version.template.options.timeout"); value.Exists() && !data.ExporterMaps[i].VersionTemplateOptionsTimeout.IsNull() {
			data.ExporterMaps[i].VersionTemplateOptionsTimeout = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].VersionTemplateOptionsTimeout = types.Int64Null()
		}
		if value := r.Get("version.template.timeout"); value.Exists() && !data.ExporterMaps[i].VersionTemplateTimeout.IsNull() {
			data.ExporterMaps[i].VersionTemplateTimeout = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].VersionTemplateTimeout = types.Int64Null()
		}
		if value := r.Get("version.options.interface-table.timeout"); value.Exists() && !data.ExporterMaps[i].VersionOptionsInterfaceTableTimeout.IsNull() {
			data.ExporterMaps[i].VersionOptionsInterfaceTableTimeout = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].VersionOptionsInterfaceTableTimeout = types.Int64Null()
		}
		if value := r.Get("version.options.sampler-table.timeout"); value.Exists() && !data.ExporterMaps[i].VersionOptionsSamplerTableTimeout.IsNull() {
			data.ExporterMaps[i].VersionOptionsSamplerTableTimeout = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].VersionOptionsSamplerTableTimeout = types.Int64Null()
		}
		if value := r.Get("version.options.class-table.timeout"); value.Exists() && !data.ExporterMaps[i].VersionOptionsClassTableTimeout.IsNull() {
			data.ExporterMaps[i].VersionOptionsClassTableTimeout = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].VersionOptionsClassTableTimeout = types.Int64Null()
		}
		if value := r.Get("version.options.vrf-table.timeout"); value.Exists() && !data.ExporterMaps[i].VersionOptionsVrfTableTimeout.IsNull() {
			data.ExporterMaps[i].VersionOptionsVrfTableTimeout = types.Int64Value(value.Int())
		} else {
			data.ExporterMaps[i].VersionOptionsVrfTableTimeout = types.Int64Null()
		}
	}
}

func (data *FlowExporterMapData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "exporter-map"); value.Exists() {
		data.ExporterMaps = make([]FlowExporterMapExporterMaps, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := FlowExporterMapExporterMaps{}
			if cValue := v.Get("exporter-map-name"); cValue.Exists() {
				item.ExporterMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("destination.ipv4-address"); cValue.Exists() {
				item.DestinationIpv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("destination.ipv6-address"); cValue.Exists() {
				item.DestinationIpv6Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("destination.vrf"); cValue.Exists() {
				item.DestinationVrf = types.StringValue(cValue.String())
			}
			if cValue := v.Get("source"); cValue.Exists() {
				item.Source = types.StringValue(cValue.String())
			}
			if cValue := v.Get("dscp"); cValue.Exists() {
				item.Dscp = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("packet-length"); cValue.Exists() {
				item.PacketLength = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("transport.udp"); cValue.Exists() {
				item.TransportUdp = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("dfbit.set"); cValue.Exists() {
				item.DfbitSet = types.BoolValue(true)
			} else {
				item.DfbitSet = types.BoolValue(false)
			}
			if cValue := v.Get("version.export-format"); cValue.Exists() {
				item.VersionExportFormat = types.StringValue(cValue.String())
			}
			if cValue := v.Get("version.template.data.timeout"); cValue.Exists() {
				item.VersionTemplateDataTimeout = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("version.template.options.timeout"); cValue.Exists() {
				item.VersionTemplateOptionsTimeout = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("version.template.timeout"); cValue.Exists() {
				item.VersionTemplateTimeout = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("version.options.interface-table.timeout"); cValue.Exists() {
				item.VersionOptionsInterfaceTableTimeout = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("version.options.sampler-table.timeout"); cValue.Exists() {
				item.VersionOptionsSamplerTableTimeout = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("version.options.class-table.timeout"); cValue.Exists() {
				item.VersionOptionsClassTableTimeout = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("version.options.vrf-table.timeout"); cValue.Exists() {
				item.VersionOptionsVrfTableTimeout = types.Int64Value(cValue.Int())
			}
			data.ExporterMaps = append(data.ExporterMaps, item)
			return true
		})
	}
}

func (data *FlowExporterMap) getDeletedListItems(ctx context.Context, state FlowExporterMap) []string {
	deletedListItems := make([]string, 0)
	for i := range state.ExporterMaps {
		keys := [...]string{"exporter-map-name"}
		stateKeyValues := [...]string{state.ExporterMaps[i].ExporterMapName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.ExporterMaps[i].ExporterMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.ExporterMaps {
			found = true
			if state.ExporterMaps[i].ExporterMapName.ValueString() != data.ExporterMaps[j].ExporterMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/exporter-map%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *FlowExporterMap) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.ExporterMaps {
		keys := [...]string{"exporter-map-name"}
		keyValues := [...]string{data.ExporterMaps[i].ExporterMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.ExporterMaps[i].DfbitSet.IsNull() && !data.ExporterMaps[i].DfbitSet.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/exporter-map%v/dfbit/set", data.getPath(), keyString))
		}
	}
	return emptyLeafsDelete
}

func (data *FlowExporterMap) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.ExporterMaps {
		keys := [...]string{"exporter-map-name"}
		keyValues := [...]string{data.ExporterMaps[i].ExporterMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/exporter-map%v", data.getPath(), keyString))
	}
	return deletePaths
}
