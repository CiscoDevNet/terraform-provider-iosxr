// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type FlowMonitorMap struct {
	Device                                types.String              `tfsdk:"device"`
	Id                                    types.String              `tfsdk:"id"`
	Name                                  types.String              `tfsdk:"name"`
	Exporters                             []FlowMonitorMapExporters `tfsdk:"exporters"`
	OptionOutphysint                      types.Bool                `tfsdk:"option_outphysint"`
	OptionFiltered                        types.Bool                `tfsdk:"option_filtered"`
	OptionBgpattr                         types.Bool                `tfsdk:"option_bgpattr"`
	OptionOutbundlemember                 types.Bool                `tfsdk:"option_outbundlemember"`
	RecordIpv4                            types.Bool                `tfsdk:"record_ipv4"`
	RecordIpv4Destination                 types.Bool                `tfsdk:"record_ipv4_destination"`
	RecordIpv4DestinationTos              types.Bool                `tfsdk:"record_ipv4_destination_tos"`
	RecordIpv4As                          types.Bool                `tfsdk:"record_ipv4_as"`
	RecordIpv4ProtocolPort                types.Bool                `tfsdk:"record_ipv4_protocol_port"`
	RecordIpv4Prefix                      types.Bool                `tfsdk:"record_ipv4_prefix"`
	RecordIpv4SourcePrefix                types.Bool                `tfsdk:"record_ipv4_source_prefix"`
	RecordIpv4DestinationPrefix           types.Bool                `tfsdk:"record_ipv4_destination_prefix"`
	RecordIpv4AsTos                       types.Bool                `tfsdk:"record_ipv4_as_tos"`
	RecordIpv4ProtocolPortTos             types.Bool                `tfsdk:"record_ipv4_protocol_port_tos"`
	RecordIpv4PrefixTos                   types.Bool                `tfsdk:"record_ipv4_prefix_tos"`
	RecordIpv4SourcePrefixTos             types.Bool                `tfsdk:"record_ipv4_source_prefix_tos"`
	RecordIpv4DestinationPrefixTos        types.Bool                `tfsdk:"record_ipv4_destination_prefix_tos"`
	RecordIpv4PrefixPort                  types.Bool                `tfsdk:"record_ipv4_prefix_port"`
	RecordIpv4BgpNexthopTos               types.Bool                `tfsdk:"record_ipv4_bgp_nexthop_tos"`
	RecordIpv4PeerAs                      types.Bool                `tfsdk:"record_ipv4_peer_as"`
	RecordIpv4Gtp                         types.Bool                `tfsdk:"record_ipv4_gtp"`
	RecordIpv6                            types.Bool                `tfsdk:"record_ipv6"`
	RecordIpv6Destination                 types.Bool                `tfsdk:"record_ipv6_destination"`
	RecordIpv6PeerAs                      types.Bool                `tfsdk:"record_ipv6_peer_as"`
	RecordIpv6Gtp                         types.Bool                `tfsdk:"record_ipv6_gtp"`
	RecordMpls                            types.Bool                `tfsdk:"record_mpls"`
	RecordMplsIpv4Fields                  types.Bool                `tfsdk:"record_mpls_ipv4_fields"`
	RecordMplsIpv6Fields                  types.Bool                `tfsdk:"record_mpls_ipv6_fields"`
	RecordMplsIpv4Ipv6Fields              types.Bool                `tfsdk:"record_mpls_ipv4_ipv6_fields"`
	RecordMplsLabels                      types.Int64               `tfsdk:"record_mpls_labels"`
	RecordMapT                            types.Bool                `tfsdk:"record_map_t"`
	RecordSflow                           types.Bool                `tfsdk:"record_sflow"`
	RecordDatalinkRecord                  types.Bool                `tfsdk:"record_datalink_record"`
	RecordDefaultRtp                      types.Bool                `tfsdk:"record_default_rtp"`
	RecordDefaultMdi                      types.Bool                `tfsdk:"record_default_mdi"`
	CacheEntries                          types.Int64               `tfsdk:"cache_entries"`
	CacheTimeoutActive                    types.Int64               `tfsdk:"cache_timeout_active"`
	CacheTimeoutInactive                  types.Int64               `tfsdk:"cache_timeout_inactive"`
	CacheTimeoutUpdate                    types.Int64               `tfsdk:"cache_timeout_update"`
	CacheTimeoutRateLimit                 types.Int64               `tfsdk:"cache_timeout_rate_limit"`
	CachePermanent                        types.Bool                `tfsdk:"cache_permanent"`
	CacheImmediate                        types.Bool                `tfsdk:"cache_immediate"`
	HwCacheTimeoutInactive                types.Int64               `tfsdk:"hw_cache_timeout_inactive"`
	SflowOptions                          types.Bool                `tfsdk:"sflow_options"`
	SflowOptionsExtendedRouter            types.Bool                `tfsdk:"sflow_options_extended_router"`
	SflowOptionsExtendedGateway           types.Bool                `tfsdk:"sflow_options_extended_gateway"`
	SflowOptionsExtendedIpv4TunnelEgress  types.Bool                `tfsdk:"sflow_options_extended_ipv4_tunnel_egress"`
	SflowOptionsExtendedIpv6TunnelEgress  types.Bool                `tfsdk:"sflow_options_extended_ipv6_tunnel_egress"`
	SflowOptionsIfCountersPollingInterval types.Int64               `tfsdk:"sflow_options_if_counters_polling_interval"`
	SflowOptionsSampleHeaderSize          types.Int64               `tfsdk:"sflow_options_sample_header_size"`
	SflowOptionsInputIfindex              types.String              `tfsdk:"sflow_options_input_ifindex"`
	SflowOptionsOutputIfindex             types.String              `tfsdk:"sflow_options_output_ifindex"`
}

type FlowMonitorMapData struct {
	Device                                types.String              `tfsdk:"device"`
	Id                                    types.String              `tfsdk:"id"`
	Name                                  types.String              `tfsdk:"name"`
	Exporters                             []FlowMonitorMapExporters `tfsdk:"exporters"`
	OptionOutphysint                      types.Bool                `tfsdk:"option_outphysint"`
	OptionFiltered                        types.Bool                `tfsdk:"option_filtered"`
	OptionBgpattr                         types.Bool                `tfsdk:"option_bgpattr"`
	OptionOutbundlemember                 types.Bool                `tfsdk:"option_outbundlemember"`
	RecordIpv4                            types.Bool                `tfsdk:"record_ipv4"`
	RecordIpv4Destination                 types.Bool                `tfsdk:"record_ipv4_destination"`
	RecordIpv4DestinationTos              types.Bool                `tfsdk:"record_ipv4_destination_tos"`
	RecordIpv4As                          types.Bool                `tfsdk:"record_ipv4_as"`
	RecordIpv4ProtocolPort                types.Bool                `tfsdk:"record_ipv4_protocol_port"`
	RecordIpv4Prefix                      types.Bool                `tfsdk:"record_ipv4_prefix"`
	RecordIpv4SourcePrefix                types.Bool                `tfsdk:"record_ipv4_source_prefix"`
	RecordIpv4DestinationPrefix           types.Bool                `tfsdk:"record_ipv4_destination_prefix"`
	RecordIpv4AsTos                       types.Bool                `tfsdk:"record_ipv4_as_tos"`
	RecordIpv4ProtocolPortTos             types.Bool                `tfsdk:"record_ipv4_protocol_port_tos"`
	RecordIpv4PrefixTos                   types.Bool                `tfsdk:"record_ipv4_prefix_tos"`
	RecordIpv4SourcePrefixTos             types.Bool                `tfsdk:"record_ipv4_source_prefix_tos"`
	RecordIpv4DestinationPrefixTos        types.Bool                `tfsdk:"record_ipv4_destination_prefix_tos"`
	RecordIpv4PrefixPort                  types.Bool                `tfsdk:"record_ipv4_prefix_port"`
	RecordIpv4BgpNexthopTos               types.Bool                `tfsdk:"record_ipv4_bgp_nexthop_tos"`
	RecordIpv4PeerAs                      types.Bool                `tfsdk:"record_ipv4_peer_as"`
	RecordIpv4Gtp                         types.Bool                `tfsdk:"record_ipv4_gtp"`
	RecordIpv6                            types.Bool                `tfsdk:"record_ipv6"`
	RecordIpv6Destination                 types.Bool                `tfsdk:"record_ipv6_destination"`
	RecordIpv6PeerAs                      types.Bool                `tfsdk:"record_ipv6_peer_as"`
	RecordIpv6Gtp                         types.Bool                `tfsdk:"record_ipv6_gtp"`
	RecordMpls                            types.Bool                `tfsdk:"record_mpls"`
	RecordMplsIpv4Fields                  types.Bool                `tfsdk:"record_mpls_ipv4_fields"`
	RecordMplsIpv6Fields                  types.Bool                `tfsdk:"record_mpls_ipv6_fields"`
	RecordMplsIpv4Ipv6Fields              types.Bool                `tfsdk:"record_mpls_ipv4_ipv6_fields"`
	RecordMplsLabels                      types.Int64               `tfsdk:"record_mpls_labels"`
	RecordMapT                            types.Bool                `tfsdk:"record_map_t"`
	RecordSflow                           types.Bool                `tfsdk:"record_sflow"`
	RecordDatalinkRecord                  types.Bool                `tfsdk:"record_datalink_record"`
	RecordDefaultRtp                      types.Bool                `tfsdk:"record_default_rtp"`
	RecordDefaultMdi                      types.Bool                `tfsdk:"record_default_mdi"`
	CacheEntries                          types.Int64               `tfsdk:"cache_entries"`
	CacheTimeoutActive                    types.Int64               `tfsdk:"cache_timeout_active"`
	CacheTimeoutInactive                  types.Int64               `tfsdk:"cache_timeout_inactive"`
	CacheTimeoutUpdate                    types.Int64               `tfsdk:"cache_timeout_update"`
	CacheTimeoutRateLimit                 types.Int64               `tfsdk:"cache_timeout_rate_limit"`
	CachePermanent                        types.Bool                `tfsdk:"cache_permanent"`
	CacheImmediate                        types.Bool                `tfsdk:"cache_immediate"`
	HwCacheTimeoutInactive                types.Int64               `tfsdk:"hw_cache_timeout_inactive"`
	SflowOptions                          types.Bool                `tfsdk:"sflow_options"`
	SflowOptionsExtendedRouter            types.Bool                `tfsdk:"sflow_options_extended_router"`
	SflowOptionsExtendedGateway           types.Bool                `tfsdk:"sflow_options_extended_gateway"`
	SflowOptionsExtendedIpv4TunnelEgress  types.Bool                `tfsdk:"sflow_options_extended_ipv4_tunnel_egress"`
	SflowOptionsExtendedIpv6TunnelEgress  types.Bool                `tfsdk:"sflow_options_extended_ipv6_tunnel_egress"`
	SflowOptionsIfCountersPollingInterval types.Int64               `tfsdk:"sflow_options_if_counters_polling_interval"`
	SflowOptionsSampleHeaderSize          types.Int64               `tfsdk:"sflow_options_sample_header_size"`
	SflowOptionsInputIfindex              types.String              `tfsdk:"sflow_options_input_ifindex"`
	SflowOptionsOutputIfindex             types.String              `tfsdk:"sflow_options_output_ifindex"`
}
type FlowMonitorMapExporters struct {
	Name types.String `tfsdk:"name"`
}

func (data FlowMonitorMap) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-flow-cfg:/flow/monitor-map/monitor-maps/monitor-map[monitor-map-name=%s]", data.Name.ValueString())
}

func (data FlowMonitorMapData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-flow-cfg:/flow/monitor-map/monitor-maps/monitor-map[monitor-map-name=%s]", data.Name.ValueString())
}

func (data FlowMonitorMap) toBody(ctx context.Context) string {
	body := "{}"
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, "monitor-map-name", data.Name.ValueString())
	}
	if !data.OptionOutphysint.IsNull() && !data.OptionOutphysint.IsUnknown() {
		if data.OptionOutphysint.ValueBool() {
			body, _ = sjson.Set(body, "option.outphysint", map[string]string{})
		}
	}
	if !data.OptionFiltered.IsNull() && !data.OptionFiltered.IsUnknown() {
		if data.OptionFiltered.ValueBool() {
			body, _ = sjson.Set(body, "option.filtered", map[string]string{})
		}
	}
	if !data.OptionBgpattr.IsNull() && !data.OptionBgpattr.IsUnknown() {
		if data.OptionBgpattr.ValueBool() {
			body, _ = sjson.Set(body, "option.bgpattr", map[string]string{})
		}
	}
	if !data.OptionOutbundlemember.IsNull() && !data.OptionOutbundlemember.IsUnknown() {
		if data.OptionOutbundlemember.ValueBool() {
			body, _ = sjson.Set(body, "option.outbundlemember", map[string]string{})
		}
	}
	if !data.RecordIpv4.IsNull() && !data.RecordIpv4.IsUnknown() {
		if data.RecordIpv4.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4", map[string]string{})
		}
	}
	if !data.RecordIpv4Destination.IsNull() && !data.RecordIpv4Destination.IsUnknown() {
		if data.RecordIpv4Destination.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.destination", map[string]string{})
		}
	}
	if !data.RecordIpv4DestinationTos.IsNull() && !data.RecordIpv4DestinationTos.IsUnknown() {
		if data.RecordIpv4DestinationTos.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.destination-tos", map[string]string{})
		}
	}
	if !data.RecordIpv4As.IsNull() && !data.RecordIpv4As.IsUnknown() {
		if data.RecordIpv4As.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.as", map[string]string{})
		}
	}
	if !data.RecordIpv4ProtocolPort.IsNull() && !data.RecordIpv4ProtocolPort.IsUnknown() {
		if data.RecordIpv4ProtocolPort.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.protocol-port", map[string]string{})
		}
	}
	if !data.RecordIpv4Prefix.IsNull() && !data.RecordIpv4Prefix.IsUnknown() {
		if data.RecordIpv4Prefix.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.prefix", map[string]string{})
		}
	}
	if !data.RecordIpv4SourcePrefix.IsNull() && !data.RecordIpv4SourcePrefix.IsUnknown() {
		if data.RecordIpv4SourcePrefix.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.source-prefix", map[string]string{})
		}
	}
	if !data.RecordIpv4DestinationPrefix.IsNull() && !data.RecordIpv4DestinationPrefix.IsUnknown() {
		if data.RecordIpv4DestinationPrefix.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.destination-prefix", map[string]string{})
		}
	}
	if !data.RecordIpv4AsTos.IsNull() && !data.RecordIpv4AsTos.IsUnknown() {
		if data.RecordIpv4AsTos.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.as-tos", map[string]string{})
		}
	}
	if !data.RecordIpv4ProtocolPortTos.IsNull() && !data.RecordIpv4ProtocolPortTos.IsUnknown() {
		if data.RecordIpv4ProtocolPortTos.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.protocol-port-tos", map[string]string{})
		}
	}
	if !data.RecordIpv4PrefixTos.IsNull() && !data.RecordIpv4PrefixTos.IsUnknown() {
		if data.RecordIpv4PrefixTos.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.prefix-tos", map[string]string{})
		}
	}
	if !data.RecordIpv4SourcePrefixTos.IsNull() && !data.RecordIpv4SourcePrefixTos.IsUnknown() {
		if data.RecordIpv4SourcePrefixTos.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.source-prefix-tos", map[string]string{})
		}
	}
	if !data.RecordIpv4DestinationPrefixTos.IsNull() && !data.RecordIpv4DestinationPrefixTos.IsUnknown() {
		if data.RecordIpv4DestinationPrefixTos.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.destination-prefix-tos", map[string]string{})
		}
	}
	if !data.RecordIpv4PrefixPort.IsNull() && !data.RecordIpv4PrefixPort.IsUnknown() {
		if data.RecordIpv4PrefixPort.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.prefix-port", map[string]string{})
		}
	}
	if !data.RecordIpv4BgpNexthopTos.IsNull() && !data.RecordIpv4BgpNexthopTos.IsUnknown() {
		if data.RecordIpv4BgpNexthopTos.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.bgp-nexthop-tos", map[string]string{})
		}
	}
	if !data.RecordIpv4PeerAs.IsNull() && !data.RecordIpv4PeerAs.IsUnknown() {
		if data.RecordIpv4PeerAs.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.peer-as", map[string]string{})
		}
	}
	if !data.RecordIpv4Gtp.IsNull() && !data.RecordIpv4Gtp.IsUnknown() {
		if data.RecordIpv4Gtp.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv4.gtp", map[string]string{})
		}
	}
	if !data.RecordIpv6.IsNull() && !data.RecordIpv6.IsUnknown() {
		if data.RecordIpv6.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv6", map[string]string{})
		}
	}
	if !data.RecordIpv6Destination.IsNull() && !data.RecordIpv6Destination.IsUnknown() {
		if data.RecordIpv6Destination.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv6.destination", map[string]string{})
		}
	}
	if !data.RecordIpv6PeerAs.IsNull() && !data.RecordIpv6PeerAs.IsUnknown() {
		if data.RecordIpv6PeerAs.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv6.peer-as", map[string]string{})
		}
	}
	if !data.RecordIpv6Gtp.IsNull() && !data.RecordIpv6Gtp.IsUnknown() {
		if data.RecordIpv6Gtp.ValueBool() {
			body, _ = sjson.Set(body, "record.ipv6.gtp", map[string]string{})
		}
	}
	if !data.RecordMpls.IsNull() && !data.RecordMpls.IsUnknown() {
		if data.RecordMpls.ValueBool() {
			body, _ = sjson.Set(body, "record.mpls", map[string]string{})
		}
	}
	if !data.RecordMplsIpv4Fields.IsNull() && !data.RecordMplsIpv4Fields.IsUnknown() {
		if data.RecordMplsIpv4Fields.ValueBool() {
			body, _ = sjson.Set(body, "record.mpls.ipv4-fields", map[string]string{})
		}
	}
	if !data.RecordMplsIpv6Fields.IsNull() && !data.RecordMplsIpv6Fields.IsUnknown() {
		if data.RecordMplsIpv6Fields.ValueBool() {
			body, _ = sjson.Set(body, "record.mpls.ipv6-fields", map[string]string{})
		}
	}
	if !data.RecordMplsIpv4Ipv6Fields.IsNull() && !data.RecordMplsIpv4Ipv6Fields.IsUnknown() {
		if data.RecordMplsIpv4Ipv6Fields.ValueBool() {
			body, _ = sjson.Set(body, "record.mpls.ipv4-ipv6-fields", map[string]string{})
		}
	}
	if !data.RecordMplsLabels.IsNull() && !data.RecordMplsLabels.IsUnknown() {
		body, _ = sjson.Set(body, "record.mpls.labels", strconv.FormatInt(data.RecordMplsLabels.ValueInt64(), 10))
	}
	if !data.RecordMapT.IsNull() && !data.RecordMapT.IsUnknown() {
		if data.RecordMapT.ValueBool() {
			body, _ = sjson.Set(body, "record.map-t", map[string]string{})
		}
	}
	if !data.RecordSflow.IsNull() && !data.RecordSflow.IsUnknown() {
		if data.RecordSflow.ValueBool() {
			body, _ = sjson.Set(body, "record.sflow", map[string]string{})
		}
	}
	if !data.RecordDatalinkRecord.IsNull() && !data.RecordDatalinkRecord.IsUnknown() {
		if data.RecordDatalinkRecord.ValueBool() {
			body, _ = sjson.Set(body, "record.datalink-record", map[string]string{})
		}
	}
	if !data.RecordDefaultRtp.IsNull() && !data.RecordDefaultRtp.IsUnknown() {
		if data.RecordDefaultRtp.ValueBool() {
			body, _ = sjson.Set(body, "record.default-rtp", map[string]string{})
		}
	}
	if !data.RecordDefaultMdi.IsNull() && !data.RecordDefaultMdi.IsUnknown() {
		if data.RecordDefaultMdi.ValueBool() {
			body, _ = sjson.Set(body, "record.default-mdi", map[string]string{})
		}
	}
	if !data.CacheEntries.IsNull() && !data.CacheEntries.IsUnknown() {
		body, _ = sjson.Set(body, "cache.entries", strconv.FormatInt(data.CacheEntries.ValueInt64(), 10))
	}
	if !data.CacheTimeoutActive.IsNull() && !data.CacheTimeoutActive.IsUnknown() {
		body, _ = sjson.Set(body, "cache.timeout.active", strconv.FormatInt(data.CacheTimeoutActive.ValueInt64(), 10))
	}
	if !data.CacheTimeoutInactive.IsNull() && !data.CacheTimeoutInactive.IsUnknown() {
		body, _ = sjson.Set(body, "cache.timeout.inactive", strconv.FormatInt(data.CacheTimeoutInactive.ValueInt64(), 10))
	}
	if !data.CacheTimeoutUpdate.IsNull() && !data.CacheTimeoutUpdate.IsUnknown() {
		body, _ = sjson.Set(body, "cache.timeout.update", strconv.FormatInt(data.CacheTimeoutUpdate.ValueInt64(), 10))
	}
	if !data.CacheTimeoutRateLimit.IsNull() && !data.CacheTimeoutRateLimit.IsUnknown() {
		body, _ = sjson.Set(body, "cache.timeout.rate-limit", strconv.FormatInt(data.CacheTimeoutRateLimit.ValueInt64(), 10))
	}
	if !data.CachePermanent.IsNull() && !data.CachePermanent.IsUnknown() {
		if data.CachePermanent.ValueBool() {
			body, _ = sjson.Set(body, "cache.permanent", map[string]string{})
		}
	}
	if !data.CacheImmediate.IsNull() && !data.CacheImmediate.IsUnknown() {
		if data.CacheImmediate.ValueBool() {
			body, _ = sjson.Set(body, "cache.immediate", map[string]string{})
		}
	}
	if !data.HwCacheTimeoutInactive.IsNull() && !data.HwCacheTimeoutInactive.IsUnknown() {
		body, _ = sjson.Set(body, "hw-cache.timeout.inactive", strconv.FormatInt(data.HwCacheTimeoutInactive.ValueInt64(), 10))
	}
	if !data.SflowOptions.IsNull() && !data.SflowOptions.IsUnknown() {
		if data.SflowOptions.ValueBool() {
			body, _ = sjson.Set(body, "sflow.options", map[string]string{})
		}
	}
	if !data.SflowOptionsExtendedRouter.IsNull() && !data.SflowOptionsExtendedRouter.IsUnknown() {
		if data.SflowOptionsExtendedRouter.ValueBool() {
			body, _ = sjson.Set(body, "sflow.options.extended-router", map[string]string{})
		}
	}
	if !data.SflowOptionsExtendedGateway.IsNull() && !data.SflowOptionsExtendedGateway.IsUnknown() {
		if data.SflowOptionsExtendedGateway.ValueBool() {
			body, _ = sjson.Set(body, "sflow.options.extended-gateway", map[string]string{})
		}
	}
	if !data.SflowOptionsExtendedIpv4TunnelEgress.IsNull() && !data.SflowOptionsExtendedIpv4TunnelEgress.IsUnknown() {
		if data.SflowOptionsExtendedIpv4TunnelEgress.ValueBool() {
			body, _ = sjson.Set(body, "sflow.options.extended-ipv4-tunnel-egress", map[string]string{})
		}
	}
	if !data.SflowOptionsExtendedIpv6TunnelEgress.IsNull() && !data.SflowOptionsExtendedIpv6TunnelEgress.IsUnknown() {
		if data.SflowOptionsExtendedIpv6TunnelEgress.ValueBool() {
			body, _ = sjson.Set(body, "sflow.options.extended-ipv6-tunnel-egress", map[string]string{})
		}
	}
	if !data.SflowOptionsIfCountersPollingInterval.IsNull() && !data.SflowOptionsIfCountersPollingInterval.IsUnknown() {
		body, _ = sjson.Set(body, "sflow.options.if-counters.polling-interval", strconv.FormatInt(data.SflowOptionsIfCountersPollingInterval.ValueInt64(), 10))
	}
	if !data.SflowOptionsSampleHeaderSize.IsNull() && !data.SflowOptionsSampleHeaderSize.IsUnknown() {
		body, _ = sjson.Set(body, "sflow.options.sample-header.size", strconv.FormatInt(data.SflowOptionsSampleHeaderSize.ValueInt64(), 10))
	}
	if !data.SflowOptionsInputIfindex.IsNull() && !data.SflowOptionsInputIfindex.IsUnknown() {
		body, _ = sjson.Set(body, "sflow.options.input.ifindex", data.SflowOptionsInputIfindex.ValueString())
	}
	if !data.SflowOptionsOutputIfindex.IsNull() && !data.SflowOptionsOutputIfindex.IsUnknown() {
		body, _ = sjson.Set(body, "sflow.options.output.ifindex", data.SflowOptionsOutputIfindex.ValueString())
	}
	if len(data.Exporters) > 0 {
		body, _ = sjson.Set(body, "exporters.exporter", []interface{}{})
		for index, item := range data.Exporters {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, "exporters.exporter"+"."+strconv.Itoa(index)+"."+"exporter-name", item.Name.ValueString())
			}
		}
	}
	return body
}

func (data *FlowMonitorMap) updateFromBody(ctx context.Context, res []byte) {
	for i := range data.Exporters {
		keys := [...]string{"exporter-name"}
		keyValues := [...]string{data.Exporters[i].Name.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "exporters.exporter").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("exporter-name"); value.Exists() && !data.Exporters[i].Name.IsNull() {
			data.Exporters[i].Name = types.StringValue(value.String())
		} else {
			data.Exporters[i].Name = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "option.outphysint"); !data.OptionOutphysint.IsNull() {
		if value.Exists() {
			data.OptionOutphysint = types.BoolValue(true)
		} else {
			data.OptionOutphysint = types.BoolValue(false)
		}
	} else {
		data.OptionOutphysint = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "option.filtered"); !data.OptionFiltered.IsNull() {
		if value.Exists() {
			data.OptionFiltered = types.BoolValue(true)
		} else {
			data.OptionFiltered = types.BoolValue(false)
		}
	} else {
		data.OptionFiltered = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "option.bgpattr"); !data.OptionBgpattr.IsNull() {
		if value.Exists() {
			data.OptionBgpattr = types.BoolValue(true)
		} else {
			data.OptionBgpattr = types.BoolValue(false)
		}
	} else {
		data.OptionBgpattr = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "option.outbundlemember"); !data.OptionOutbundlemember.IsNull() {
		if value.Exists() {
			data.OptionOutbundlemember = types.BoolValue(true)
		} else {
			data.OptionOutbundlemember = types.BoolValue(false)
		}
	} else {
		data.OptionOutbundlemember = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4"); !data.RecordIpv4.IsNull() {
		if value.Exists() {
			data.RecordIpv4 = types.BoolValue(true)
		} else {
			data.RecordIpv4 = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4 = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination"); !data.RecordIpv4Destination.IsNull() {
		if value.Exists() {
			data.RecordIpv4Destination = types.BoolValue(true)
		} else {
			data.RecordIpv4Destination = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4Destination = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-tos"); !data.RecordIpv4DestinationTos.IsNull() {
		if value.Exists() {
			data.RecordIpv4DestinationTos = types.BoolValue(true)
		} else {
			data.RecordIpv4DestinationTos = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4DestinationTos = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.as"); !data.RecordIpv4As.IsNull() {
		if value.Exists() {
			data.RecordIpv4As = types.BoolValue(true)
		} else {
			data.RecordIpv4As = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4As = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.protocol-port"); !data.RecordIpv4ProtocolPort.IsNull() {
		if value.Exists() {
			data.RecordIpv4ProtocolPort = types.BoolValue(true)
		} else {
			data.RecordIpv4ProtocolPort = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4ProtocolPort = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix"); !data.RecordIpv4Prefix.IsNull() {
		if value.Exists() {
			data.RecordIpv4Prefix = types.BoolValue(true)
		} else {
			data.RecordIpv4Prefix = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4Prefix = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.source-prefix"); !data.RecordIpv4SourcePrefix.IsNull() {
		if value.Exists() {
			data.RecordIpv4SourcePrefix = types.BoolValue(true)
		} else {
			data.RecordIpv4SourcePrefix = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4SourcePrefix = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-prefix"); !data.RecordIpv4DestinationPrefix.IsNull() {
		if value.Exists() {
			data.RecordIpv4DestinationPrefix = types.BoolValue(true)
		} else {
			data.RecordIpv4DestinationPrefix = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4DestinationPrefix = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.as-tos"); !data.RecordIpv4AsTos.IsNull() {
		if value.Exists() {
			data.RecordIpv4AsTos = types.BoolValue(true)
		} else {
			data.RecordIpv4AsTos = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4AsTos = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.protocol-port-tos"); !data.RecordIpv4ProtocolPortTos.IsNull() {
		if value.Exists() {
			data.RecordIpv4ProtocolPortTos = types.BoolValue(true)
		} else {
			data.RecordIpv4ProtocolPortTos = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4ProtocolPortTos = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix-tos"); !data.RecordIpv4PrefixTos.IsNull() {
		if value.Exists() {
			data.RecordIpv4PrefixTos = types.BoolValue(true)
		} else {
			data.RecordIpv4PrefixTos = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4PrefixTos = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.source-prefix-tos"); !data.RecordIpv4SourcePrefixTos.IsNull() {
		if value.Exists() {
			data.RecordIpv4SourcePrefixTos = types.BoolValue(true)
		} else {
			data.RecordIpv4SourcePrefixTos = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4SourcePrefixTos = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-prefix-tos"); !data.RecordIpv4DestinationPrefixTos.IsNull() {
		if value.Exists() {
			data.RecordIpv4DestinationPrefixTos = types.BoolValue(true)
		} else {
			data.RecordIpv4DestinationPrefixTos = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4DestinationPrefixTos = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix-port"); !data.RecordIpv4PrefixPort.IsNull() {
		if value.Exists() {
			data.RecordIpv4PrefixPort = types.BoolValue(true)
		} else {
			data.RecordIpv4PrefixPort = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4PrefixPort = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.bgp-nexthop-tos"); !data.RecordIpv4BgpNexthopTos.IsNull() {
		if value.Exists() {
			data.RecordIpv4BgpNexthopTos = types.BoolValue(true)
		} else {
			data.RecordIpv4BgpNexthopTos = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4BgpNexthopTos = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.peer-as"); !data.RecordIpv4PeerAs.IsNull() {
		if value.Exists() {
			data.RecordIpv4PeerAs = types.BoolValue(true)
		} else {
			data.RecordIpv4PeerAs = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4PeerAs = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv4.gtp"); !data.RecordIpv4Gtp.IsNull() {
		if value.Exists() {
			data.RecordIpv4Gtp = types.BoolValue(true)
		} else {
			data.RecordIpv4Gtp = types.BoolValue(false)
		}
	} else {
		data.RecordIpv4Gtp = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv6"); !data.RecordIpv6.IsNull() {
		if value.Exists() {
			data.RecordIpv6 = types.BoolValue(true)
		} else {
			data.RecordIpv6 = types.BoolValue(false)
		}
	} else {
		data.RecordIpv6 = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv6.destination"); !data.RecordIpv6Destination.IsNull() {
		if value.Exists() {
			data.RecordIpv6Destination = types.BoolValue(true)
		} else {
			data.RecordIpv6Destination = types.BoolValue(false)
		}
	} else {
		data.RecordIpv6Destination = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv6.peer-as"); !data.RecordIpv6PeerAs.IsNull() {
		if value.Exists() {
			data.RecordIpv6PeerAs = types.BoolValue(true)
		} else {
			data.RecordIpv6PeerAs = types.BoolValue(false)
		}
	} else {
		data.RecordIpv6PeerAs = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.ipv6.gtp"); !data.RecordIpv6Gtp.IsNull() {
		if value.Exists() {
			data.RecordIpv6Gtp = types.BoolValue(true)
		} else {
			data.RecordIpv6Gtp = types.BoolValue(false)
		}
	} else {
		data.RecordIpv6Gtp = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.mpls"); !data.RecordMpls.IsNull() {
		if value.Exists() {
			data.RecordMpls = types.BoolValue(true)
		} else {
			data.RecordMpls = types.BoolValue(false)
		}
	} else {
		data.RecordMpls = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv4-fields"); !data.RecordMplsIpv4Fields.IsNull() {
		if value.Exists() {
			data.RecordMplsIpv4Fields = types.BoolValue(true)
		} else {
			data.RecordMplsIpv4Fields = types.BoolValue(false)
		}
	} else {
		data.RecordMplsIpv4Fields = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv6-fields"); !data.RecordMplsIpv6Fields.IsNull() {
		if value.Exists() {
			data.RecordMplsIpv6Fields = types.BoolValue(true)
		} else {
			data.RecordMplsIpv6Fields = types.BoolValue(false)
		}
	} else {
		data.RecordMplsIpv6Fields = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv4-ipv6-fields"); !data.RecordMplsIpv4Ipv6Fields.IsNull() {
		if value.Exists() {
			data.RecordMplsIpv4Ipv6Fields = types.BoolValue(true)
		} else {
			data.RecordMplsIpv4Ipv6Fields = types.BoolValue(false)
		}
	} else {
		data.RecordMplsIpv4Ipv6Fields = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.mpls.labels"); value.Exists() && !data.RecordMplsLabels.IsNull() {
		data.RecordMplsLabels = types.Int64Value(value.Int())
	} else {
		data.RecordMplsLabels = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "record.map-t"); !data.RecordMapT.IsNull() {
		if value.Exists() {
			data.RecordMapT = types.BoolValue(true)
		} else {
			data.RecordMapT = types.BoolValue(false)
		}
	} else {
		data.RecordMapT = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.sflow"); !data.RecordSflow.IsNull() {
		if value.Exists() {
			data.RecordSflow = types.BoolValue(true)
		} else {
			data.RecordSflow = types.BoolValue(false)
		}
	} else {
		data.RecordSflow = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.datalink-record"); !data.RecordDatalinkRecord.IsNull() {
		if value.Exists() {
			data.RecordDatalinkRecord = types.BoolValue(true)
		} else {
			data.RecordDatalinkRecord = types.BoolValue(false)
		}
	} else {
		data.RecordDatalinkRecord = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.default-rtp"); !data.RecordDefaultRtp.IsNull() {
		if value.Exists() {
			data.RecordDefaultRtp = types.BoolValue(true)
		} else {
			data.RecordDefaultRtp = types.BoolValue(false)
		}
	} else {
		data.RecordDefaultRtp = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "record.default-mdi"); !data.RecordDefaultMdi.IsNull() {
		if value.Exists() {
			data.RecordDefaultMdi = types.BoolValue(true)
		} else {
			data.RecordDefaultMdi = types.BoolValue(false)
		}
	} else {
		data.RecordDefaultMdi = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "cache.entries"); value.Exists() && !data.CacheEntries.IsNull() {
		data.CacheEntries = types.Int64Value(value.Int())
	} else {
		data.CacheEntries = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "cache.timeout.active"); value.Exists() && !data.CacheTimeoutActive.IsNull() {
		data.CacheTimeoutActive = types.Int64Value(value.Int())
	} else {
		data.CacheTimeoutActive = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "cache.timeout.inactive"); value.Exists() && !data.CacheTimeoutInactive.IsNull() {
		data.CacheTimeoutInactive = types.Int64Value(value.Int())
	} else {
		data.CacheTimeoutInactive = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "cache.timeout.update"); value.Exists() && !data.CacheTimeoutUpdate.IsNull() {
		data.CacheTimeoutUpdate = types.Int64Value(value.Int())
	} else {
		data.CacheTimeoutUpdate = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "cache.timeout.rate-limit"); value.Exists() && !data.CacheTimeoutRateLimit.IsNull() {
		data.CacheTimeoutRateLimit = types.Int64Value(value.Int())
	} else {
		data.CacheTimeoutRateLimit = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "cache.permanent"); !data.CachePermanent.IsNull() {
		if value.Exists() {
			data.CachePermanent = types.BoolValue(true)
		} else {
			data.CachePermanent = types.BoolValue(false)
		}
	} else {
		data.CachePermanent = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "cache.immediate"); !data.CacheImmediate.IsNull() {
		if value.Exists() {
			data.CacheImmediate = types.BoolValue(true)
		} else {
			data.CacheImmediate = types.BoolValue(false)
		}
	} else {
		data.CacheImmediate = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "hw-cache.timeout.inactive"); value.Exists() && !data.HwCacheTimeoutInactive.IsNull() {
		data.HwCacheTimeoutInactive = types.Int64Value(value.Int())
	} else {
		data.HwCacheTimeoutInactive = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "sflow.options"); !data.SflowOptions.IsNull() {
		if value.Exists() {
			data.SflowOptions = types.BoolValue(true)
		} else {
			data.SflowOptions = types.BoolValue(false)
		}
	} else {
		data.SflowOptions = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-router"); !data.SflowOptionsExtendedRouter.IsNull() {
		if value.Exists() {
			data.SflowOptionsExtendedRouter = types.BoolValue(true)
		} else {
			data.SflowOptionsExtendedRouter = types.BoolValue(false)
		}
	} else {
		data.SflowOptionsExtendedRouter = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-gateway"); !data.SflowOptionsExtendedGateway.IsNull() {
		if value.Exists() {
			data.SflowOptionsExtendedGateway = types.BoolValue(true)
		} else {
			data.SflowOptionsExtendedGateway = types.BoolValue(false)
		}
	} else {
		data.SflowOptionsExtendedGateway = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-ipv4-tunnel-egress"); !data.SflowOptionsExtendedIpv4TunnelEgress.IsNull() {
		if value.Exists() {
			data.SflowOptionsExtendedIpv4TunnelEgress = types.BoolValue(true)
		} else {
			data.SflowOptionsExtendedIpv4TunnelEgress = types.BoolValue(false)
		}
	} else {
		data.SflowOptionsExtendedIpv4TunnelEgress = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-ipv6-tunnel-egress"); !data.SflowOptionsExtendedIpv6TunnelEgress.IsNull() {
		if value.Exists() {
			data.SflowOptionsExtendedIpv6TunnelEgress = types.BoolValue(true)
		} else {
			data.SflowOptionsExtendedIpv6TunnelEgress = types.BoolValue(false)
		}
	} else {
		data.SflowOptionsExtendedIpv6TunnelEgress = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "sflow.options.if-counters.polling-interval"); value.Exists() && !data.SflowOptionsIfCountersPollingInterval.IsNull() {
		data.SflowOptionsIfCountersPollingInterval = types.Int64Value(value.Int())
	} else {
		data.SflowOptionsIfCountersPollingInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "sflow.options.sample-header.size"); value.Exists() && !data.SflowOptionsSampleHeaderSize.IsNull() {
		data.SflowOptionsSampleHeaderSize = types.Int64Value(value.Int())
	} else {
		data.SflowOptionsSampleHeaderSize = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "sflow.options.input.ifindex"); value.Exists() && !data.SflowOptionsInputIfindex.IsNull() {
		data.SflowOptionsInputIfindex = types.StringValue(value.String())
	} else {
		data.SflowOptionsInputIfindex = types.StringNull()
	}
	if value := gjson.GetBytes(res, "sflow.options.output.ifindex"); value.Exists() && !data.SflowOptionsOutputIfindex.IsNull() {
		data.SflowOptionsOutputIfindex = types.StringValue(value.String())
	} else {
		data.SflowOptionsOutputIfindex = types.StringNull()
	}
}

func (data *FlowMonitorMap) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "exporters.exporter"); value.Exists() {
		data.Exporters = make([]FlowMonitorMapExporters, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := FlowMonitorMapExporters{}
			if cValue := v.Get("exporter-name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.Exporters = append(data.Exporters, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "option.outphysint"); value.Exists() {
		data.OptionOutphysint = types.BoolValue(true)
	} else {
		data.OptionOutphysint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "option.filtered"); value.Exists() {
		data.OptionFiltered = types.BoolValue(true)
	} else {
		data.OptionFiltered = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "option.bgpattr"); value.Exists() {
		data.OptionBgpattr = types.BoolValue(true)
	} else {
		data.OptionBgpattr = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "option.outbundlemember"); value.Exists() {
		data.OptionOutbundlemember = types.BoolValue(true)
	} else {
		data.OptionOutbundlemember = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4"); value.Exists() {
		data.RecordIpv4 = types.BoolValue(true)
	} else {
		data.RecordIpv4 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination"); value.Exists() {
		data.RecordIpv4Destination = types.BoolValue(true)
	} else {
		data.RecordIpv4Destination = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-tos"); value.Exists() {
		data.RecordIpv4DestinationTos = types.BoolValue(true)
	} else {
		data.RecordIpv4DestinationTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.as"); value.Exists() {
		data.RecordIpv4As = types.BoolValue(true)
	} else {
		data.RecordIpv4As = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.protocol-port"); value.Exists() {
		data.RecordIpv4ProtocolPort = types.BoolValue(true)
	} else {
		data.RecordIpv4ProtocolPort = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix"); value.Exists() {
		data.RecordIpv4Prefix = types.BoolValue(true)
	} else {
		data.RecordIpv4Prefix = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.source-prefix"); value.Exists() {
		data.RecordIpv4SourcePrefix = types.BoolValue(true)
	} else {
		data.RecordIpv4SourcePrefix = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-prefix"); value.Exists() {
		data.RecordIpv4DestinationPrefix = types.BoolValue(true)
	} else {
		data.RecordIpv4DestinationPrefix = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.as-tos"); value.Exists() {
		data.RecordIpv4AsTos = types.BoolValue(true)
	} else {
		data.RecordIpv4AsTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.protocol-port-tos"); value.Exists() {
		data.RecordIpv4ProtocolPortTos = types.BoolValue(true)
	} else {
		data.RecordIpv4ProtocolPortTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix-tos"); value.Exists() {
		data.RecordIpv4PrefixTos = types.BoolValue(true)
	} else {
		data.RecordIpv4PrefixTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.source-prefix-tos"); value.Exists() {
		data.RecordIpv4SourcePrefixTos = types.BoolValue(true)
	} else {
		data.RecordIpv4SourcePrefixTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-prefix-tos"); value.Exists() {
		data.RecordIpv4DestinationPrefixTos = types.BoolValue(true)
	} else {
		data.RecordIpv4DestinationPrefixTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix-port"); value.Exists() {
		data.RecordIpv4PrefixPort = types.BoolValue(true)
	} else {
		data.RecordIpv4PrefixPort = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.bgp-nexthop-tos"); value.Exists() {
		data.RecordIpv4BgpNexthopTos = types.BoolValue(true)
	} else {
		data.RecordIpv4BgpNexthopTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.peer-as"); value.Exists() {
		data.RecordIpv4PeerAs = types.BoolValue(true)
	} else {
		data.RecordIpv4PeerAs = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.gtp"); value.Exists() {
		data.RecordIpv4Gtp = types.BoolValue(true)
	} else {
		data.RecordIpv4Gtp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv6"); value.Exists() {
		data.RecordIpv6 = types.BoolValue(true)
	} else {
		data.RecordIpv6 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv6.destination"); value.Exists() {
		data.RecordIpv6Destination = types.BoolValue(true)
	} else {
		data.RecordIpv6Destination = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv6.peer-as"); value.Exists() {
		data.RecordIpv6PeerAs = types.BoolValue(true)
	} else {
		data.RecordIpv6PeerAs = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv6.gtp"); value.Exists() {
		data.RecordIpv6Gtp = types.BoolValue(true)
	} else {
		data.RecordIpv6Gtp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls"); value.Exists() {
		data.RecordMpls = types.BoolValue(true)
	} else {
		data.RecordMpls = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv4-fields"); value.Exists() {
		data.RecordMplsIpv4Fields = types.BoolValue(true)
	} else {
		data.RecordMplsIpv4Fields = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv6-fields"); value.Exists() {
		data.RecordMplsIpv6Fields = types.BoolValue(true)
	} else {
		data.RecordMplsIpv6Fields = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv4-ipv6-fields"); value.Exists() {
		data.RecordMplsIpv4Ipv6Fields = types.BoolValue(true)
	} else {
		data.RecordMplsIpv4Ipv6Fields = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls.labels"); value.Exists() {
		data.RecordMplsLabels = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "record.map-t"); value.Exists() {
		data.RecordMapT = types.BoolValue(true)
	} else {
		data.RecordMapT = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.sflow"); value.Exists() {
		data.RecordSflow = types.BoolValue(true)
	} else {
		data.RecordSflow = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.datalink-record"); value.Exists() {
		data.RecordDatalinkRecord = types.BoolValue(true)
	} else {
		data.RecordDatalinkRecord = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.default-rtp"); value.Exists() {
		data.RecordDefaultRtp = types.BoolValue(true)
	} else {
		data.RecordDefaultRtp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.default-mdi"); value.Exists() {
		data.RecordDefaultMdi = types.BoolValue(true)
	} else {
		data.RecordDefaultMdi = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "cache.entries"); value.Exists() {
		data.CacheEntries = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.timeout.active"); value.Exists() {
		data.CacheTimeoutActive = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.timeout.inactive"); value.Exists() {
		data.CacheTimeoutInactive = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.timeout.update"); value.Exists() {
		data.CacheTimeoutUpdate = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.timeout.rate-limit"); value.Exists() {
		data.CacheTimeoutRateLimit = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.permanent"); value.Exists() {
		data.CachePermanent = types.BoolValue(true)
	} else {
		data.CachePermanent = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "cache.immediate"); value.Exists() {
		data.CacheImmediate = types.BoolValue(true)
	} else {
		data.CacheImmediate = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "hw-cache.timeout.inactive"); value.Exists() {
		data.HwCacheTimeoutInactive = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "sflow.options"); value.Exists() {
		data.SflowOptions = types.BoolValue(true)
	} else {
		data.SflowOptions = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-router"); value.Exists() {
		data.SflowOptionsExtendedRouter = types.BoolValue(true)
	} else {
		data.SflowOptionsExtendedRouter = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-gateway"); value.Exists() {
		data.SflowOptionsExtendedGateway = types.BoolValue(true)
	} else {
		data.SflowOptionsExtendedGateway = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-ipv4-tunnel-egress"); value.Exists() {
		data.SflowOptionsExtendedIpv4TunnelEgress = types.BoolValue(true)
	} else {
		data.SflowOptionsExtendedIpv4TunnelEgress = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-ipv6-tunnel-egress"); value.Exists() {
		data.SflowOptionsExtendedIpv6TunnelEgress = types.BoolValue(true)
	} else {
		data.SflowOptionsExtendedIpv6TunnelEgress = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.if-counters.polling-interval"); value.Exists() {
		data.SflowOptionsIfCountersPollingInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "sflow.options.sample-header.size"); value.Exists() {
		data.SflowOptionsSampleHeaderSize = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "sflow.options.input.ifindex"); value.Exists() {
		data.SflowOptionsInputIfindex = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "sflow.options.output.ifindex"); value.Exists() {
		data.SflowOptionsOutputIfindex = types.StringValue(value.String())
	}
}

func (data *FlowMonitorMapData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "exporters.exporter"); value.Exists() {
		data.Exporters = make([]FlowMonitorMapExporters, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := FlowMonitorMapExporters{}
			if cValue := v.Get("exporter-name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.Exporters = append(data.Exporters, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "option.outphysint"); value.Exists() {
		data.OptionOutphysint = types.BoolValue(true)
	} else {
		data.OptionOutphysint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "option.filtered"); value.Exists() {
		data.OptionFiltered = types.BoolValue(true)
	} else {
		data.OptionFiltered = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "option.bgpattr"); value.Exists() {
		data.OptionBgpattr = types.BoolValue(true)
	} else {
		data.OptionBgpattr = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "option.outbundlemember"); value.Exists() {
		data.OptionOutbundlemember = types.BoolValue(true)
	} else {
		data.OptionOutbundlemember = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4"); value.Exists() {
		data.RecordIpv4 = types.BoolValue(true)
	} else {
		data.RecordIpv4 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination"); value.Exists() {
		data.RecordIpv4Destination = types.BoolValue(true)
	} else {
		data.RecordIpv4Destination = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-tos"); value.Exists() {
		data.RecordIpv4DestinationTos = types.BoolValue(true)
	} else {
		data.RecordIpv4DestinationTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.as"); value.Exists() {
		data.RecordIpv4As = types.BoolValue(true)
	} else {
		data.RecordIpv4As = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.protocol-port"); value.Exists() {
		data.RecordIpv4ProtocolPort = types.BoolValue(true)
	} else {
		data.RecordIpv4ProtocolPort = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix"); value.Exists() {
		data.RecordIpv4Prefix = types.BoolValue(true)
	} else {
		data.RecordIpv4Prefix = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.source-prefix"); value.Exists() {
		data.RecordIpv4SourcePrefix = types.BoolValue(true)
	} else {
		data.RecordIpv4SourcePrefix = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-prefix"); value.Exists() {
		data.RecordIpv4DestinationPrefix = types.BoolValue(true)
	} else {
		data.RecordIpv4DestinationPrefix = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.as-tos"); value.Exists() {
		data.RecordIpv4AsTos = types.BoolValue(true)
	} else {
		data.RecordIpv4AsTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.protocol-port-tos"); value.Exists() {
		data.RecordIpv4ProtocolPortTos = types.BoolValue(true)
	} else {
		data.RecordIpv4ProtocolPortTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix-tos"); value.Exists() {
		data.RecordIpv4PrefixTos = types.BoolValue(true)
	} else {
		data.RecordIpv4PrefixTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.source-prefix-tos"); value.Exists() {
		data.RecordIpv4SourcePrefixTos = types.BoolValue(true)
	} else {
		data.RecordIpv4SourcePrefixTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.destination-prefix-tos"); value.Exists() {
		data.RecordIpv4DestinationPrefixTos = types.BoolValue(true)
	} else {
		data.RecordIpv4DestinationPrefixTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.prefix-port"); value.Exists() {
		data.RecordIpv4PrefixPort = types.BoolValue(true)
	} else {
		data.RecordIpv4PrefixPort = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.bgp-nexthop-tos"); value.Exists() {
		data.RecordIpv4BgpNexthopTos = types.BoolValue(true)
	} else {
		data.RecordIpv4BgpNexthopTos = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.peer-as"); value.Exists() {
		data.RecordIpv4PeerAs = types.BoolValue(true)
	} else {
		data.RecordIpv4PeerAs = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv4.gtp"); value.Exists() {
		data.RecordIpv4Gtp = types.BoolValue(true)
	} else {
		data.RecordIpv4Gtp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv6"); value.Exists() {
		data.RecordIpv6 = types.BoolValue(true)
	} else {
		data.RecordIpv6 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv6.destination"); value.Exists() {
		data.RecordIpv6Destination = types.BoolValue(true)
	} else {
		data.RecordIpv6Destination = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv6.peer-as"); value.Exists() {
		data.RecordIpv6PeerAs = types.BoolValue(true)
	} else {
		data.RecordIpv6PeerAs = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.ipv6.gtp"); value.Exists() {
		data.RecordIpv6Gtp = types.BoolValue(true)
	} else {
		data.RecordIpv6Gtp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls"); value.Exists() {
		data.RecordMpls = types.BoolValue(true)
	} else {
		data.RecordMpls = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv4-fields"); value.Exists() {
		data.RecordMplsIpv4Fields = types.BoolValue(true)
	} else {
		data.RecordMplsIpv4Fields = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv6-fields"); value.Exists() {
		data.RecordMplsIpv6Fields = types.BoolValue(true)
	} else {
		data.RecordMplsIpv6Fields = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls.ipv4-ipv6-fields"); value.Exists() {
		data.RecordMplsIpv4Ipv6Fields = types.BoolValue(true)
	} else {
		data.RecordMplsIpv4Ipv6Fields = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.mpls.labels"); value.Exists() {
		data.RecordMplsLabels = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "record.map-t"); value.Exists() {
		data.RecordMapT = types.BoolValue(true)
	} else {
		data.RecordMapT = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.sflow"); value.Exists() {
		data.RecordSflow = types.BoolValue(true)
	} else {
		data.RecordSflow = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.datalink-record"); value.Exists() {
		data.RecordDatalinkRecord = types.BoolValue(true)
	} else {
		data.RecordDatalinkRecord = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.default-rtp"); value.Exists() {
		data.RecordDefaultRtp = types.BoolValue(true)
	} else {
		data.RecordDefaultRtp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "record.default-mdi"); value.Exists() {
		data.RecordDefaultMdi = types.BoolValue(true)
	} else {
		data.RecordDefaultMdi = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "cache.entries"); value.Exists() {
		data.CacheEntries = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.timeout.active"); value.Exists() {
		data.CacheTimeoutActive = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.timeout.inactive"); value.Exists() {
		data.CacheTimeoutInactive = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.timeout.update"); value.Exists() {
		data.CacheTimeoutUpdate = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.timeout.rate-limit"); value.Exists() {
		data.CacheTimeoutRateLimit = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "cache.permanent"); value.Exists() {
		data.CachePermanent = types.BoolValue(true)
	} else {
		data.CachePermanent = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "cache.immediate"); value.Exists() {
		data.CacheImmediate = types.BoolValue(true)
	} else {
		data.CacheImmediate = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "hw-cache.timeout.inactive"); value.Exists() {
		data.HwCacheTimeoutInactive = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "sflow.options"); value.Exists() {
		data.SflowOptions = types.BoolValue(true)
	} else {
		data.SflowOptions = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-router"); value.Exists() {
		data.SflowOptionsExtendedRouter = types.BoolValue(true)
	} else {
		data.SflowOptionsExtendedRouter = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-gateway"); value.Exists() {
		data.SflowOptionsExtendedGateway = types.BoolValue(true)
	} else {
		data.SflowOptionsExtendedGateway = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-ipv4-tunnel-egress"); value.Exists() {
		data.SflowOptionsExtendedIpv4TunnelEgress = types.BoolValue(true)
	} else {
		data.SflowOptionsExtendedIpv4TunnelEgress = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.extended-ipv6-tunnel-egress"); value.Exists() {
		data.SflowOptionsExtendedIpv6TunnelEgress = types.BoolValue(true)
	} else {
		data.SflowOptionsExtendedIpv6TunnelEgress = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sflow.options.if-counters.polling-interval"); value.Exists() {
		data.SflowOptionsIfCountersPollingInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "sflow.options.sample-header.size"); value.Exists() {
		data.SflowOptionsSampleHeaderSize = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "sflow.options.input.ifindex"); value.Exists() {
		data.SflowOptionsInputIfindex = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "sflow.options.output.ifindex"); value.Exists() {
		data.SflowOptionsOutputIfindex = types.StringValue(value.String())
	}
}

func (data *FlowMonitorMap) getDeletedItems(ctx context.Context, state FlowMonitorMap) []string {
	deletedItems := make([]string, 0)
	for i := range state.Exporters {
		keys := [...]string{"exporter-name"}
		stateKeyValues := [...]string{state.Exporters[i].Name.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Exporters[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Exporters {
			found = true
			if state.Exporters[i].Name.ValueString() != data.Exporters[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/exporters/exporter%v", state.getPath(), keyString))
		}
	}
	if !state.OptionOutphysint.IsNull() && data.OptionOutphysint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/option/outphysint", state.getPath()))
	}
	if !state.OptionFiltered.IsNull() && data.OptionFiltered.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/option/filtered", state.getPath()))
	}
	if !state.OptionBgpattr.IsNull() && data.OptionBgpattr.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/option/bgpattr", state.getPath()))
	}
	if !state.OptionOutbundlemember.IsNull() && data.OptionOutbundlemember.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/option/outbundlemember", state.getPath()))
	}
	if !state.RecordIpv4.IsNull() && data.RecordIpv4.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4", state.getPath()))
	}
	if !state.RecordIpv4Destination.IsNull() && data.RecordIpv4Destination.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/destination", state.getPath()))
	}
	if !state.RecordIpv4DestinationTos.IsNull() && data.RecordIpv4DestinationTos.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/destination-tos", state.getPath()))
	}
	if !state.RecordIpv4As.IsNull() && data.RecordIpv4As.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/as", state.getPath()))
	}
	if !state.RecordIpv4ProtocolPort.IsNull() && data.RecordIpv4ProtocolPort.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/protocol-port", state.getPath()))
	}
	if !state.RecordIpv4Prefix.IsNull() && data.RecordIpv4Prefix.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/prefix", state.getPath()))
	}
	if !state.RecordIpv4SourcePrefix.IsNull() && data.RecordIpv4SourcePrefix.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/source-prefix", state.getPath()))
	}
	if !state.RecordIpv4DestinationPrefix.IsNull() && data.RecordIpv4DestinationPrefix.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/destination-prefix", state.getPath()))
	}
	if !state.RecordIpv4AsTos.IsNull() && data.RecordIpv4AsTos.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/as-tos", state.getPath()))
	}
	if !state.RecordIpv4ProtocolPortTos.IsNull() && data.RecordIpv4ProtocolPortTos.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/protocol-port-tos", state.getPath()))
	}
	if !state.RecordIpv4PrefixTos.IsNull() && data.RecordIpv4PrefixTos.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/prefix-tos", state.getPath()))
	}
	if !state.RecordIpv4SourcePrefixTos.IsNull() && data.RecordIpv4SourcePrefixTos.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/source-prefix-tos", state.getPath()))
	}
	if !state.RecordIpv4DestinationPrefixTos.IsNull() && data.RecordIpv4DestinationPrefixTos.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/destination-prefix-tos", state.getPath()))
	}
	if !state.RecordIpv4PrefixPort.IsNull() && data.RecordIpv4PrefixPort.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/prefix-port", state.getPath()))
	}
	if !state.RecordIpv4BgpNexthopTos.IsNull() && data.RecordIpv4BgpNexthopTos.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/bgp-nexthop-tos", state.getPath()))
	}
	if !state.RecordIpv4PeerAs.IsNull() && data.RecordIpv4PeerAs.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/peer-as", state.getPath()))
	}
	if !state.RecordIpv4Gtp.IsNull() && data.RecordIpv4Gtp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv4/gtp", state.getPath()))
	}
	if !state.RecordIpv6.IsNull() && data.RecordIpv6.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv6", state.getPath()))
	}
	if !state.RecordIpv6Destination.IsNull() && data.RecordIpv6Destination.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv6/destination", state.getPath()))
	}
	if !state.RecordIpv6PeerAs.IsNull() && data.RecordIpv6PeerAs.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv6/peer-as", state.getPath()))
	}
	if !state.RecordIpv6Gtp.IsNull() && data.RecordIpv6Gtp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/ipv6/gtp", state.getPath()))
	}
	if !state.RecordMpls.IsNull() && data.RecordMpls.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/mpls", state.getPath()))
	}
	if !state.RecordMplsIpv4Fields.IsNull() && data.RecordMplsIpv4Fields.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/mpls/ipv4-fields", state.getPath()))
	}
	if !state.RecordMplsIpv6Fields.IsNull() && data.RecordMplsIpv6Fields.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/mpls/ipv6-fields", state.getPath()))
	}
	if !state.RecordMplsIpv4Ipv6Fields.IsNull() && data.RecordMplsIpv4Ipv6Fields.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/mpls/ipv4-ipv6-fields", state.getPath()))
	}
	if !state.RecordMplsLabels.IsNull() && data.RecordMplsLabels.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/mpls/labels", state.getPath()))
	}
	if !state.RecordMapT.IsNull() && data.RecordMapT.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/map-t", state.getPath()))
	}
	if !state.RecordSflow.IsNull() && data.RecordSflow.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/sflow", state.getPath()))
	}
	if !state.RecordDatalinkRecord.IsNull() && data.RecordDatalinkRecord.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/datalink-record", state.getPath()))
	}
	if !state.RecordDefaultRtp.IsNull() && data.RecordDefaultRtp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/default-rtp", state.getPath()))
	}
	if !state.RecordDefaultMdi.IsNull() && data.RecordDefaultMdi.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/record/default-mdi", state.getPath()))
	}
	if !state.CacheEntries.IsNull() && data.CacheEntries.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cache/entries", state.getPath()))
	}
	if !state.CacheTimeoutActive.IsNull() && data.CacheTimeoutActive.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cache/timeout/active", state.getPath()))
	}
	if !state.CacheTimeoutInactive.IsNull() && data.CacheTimeoutInactive.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cache/timeout/inactive", state.getPath()))
	}
	if !state.CacheTimeoutUpdate.IsNull() && data.CacheTimeoutUpdate.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cache/timeout/update", state.getPath()))
	}
	if !state.CacheTimeoutRateLimit.IsNull() && data.CacheTimeoutRateLimit.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cache/timeout/rate-limit", state.getPath()))
	}
	if !state.CachePermanent.IsNull() && data.CachePermanent.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cache/permanent", state.getPath()))
	}
	if !state.CacheImmediate.IsNull() && data.CacheImmediate.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cache/immediate", state.getPath()))
	}
	if !state.HwCacheTimeoutInactive.IsNull() && data.HwCacheTimeoutInactive.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hw-cache/timeout/inactive", state.getPath()))
	}
	if !state.SflowOptions.IsNull() && data.SflowOptions.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options", state.getPath()))
	}
	if !state.SflowOptionsExtendedRouter.IsNull() && data.SflowOptionsExtendedRouter.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options/extended-router", state.getPath()))
	}
	if !state.SflowOptionsExtendedGateway.IsNull() && data.SflowOptionsExtendedGateway.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options/extended-gateway", state.getPath()))
	}
	if !state.SflowOptionsExtendedIpv4TunnelEgress.IsNull() && data.SflowOptionsExtendedIpv4TunnelEgress.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options/extended-ipv4-tunnel-egress", state.getPath()))
	}
	if !state.SflowOptionsExtendedIpv6TunnelEgress.IsNull() && data.SflowOptionsExtendedIpv6TunnelEgress.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options/extended-ipv6-tunnel-egress", state.getPath()))
	}
	if !state.SflowOptionsIfCountersPollingInterval.IsNull() && data.SflowOptionsIfCountersPollingInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options/if-counters/polling-interval", state.getPath()))
	}
	if !state.SflowOptionsSampleHeaderSize.IsNull() && data.SflowOptionsSampleHeaderSize.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options/sample-header/size", state.getPath()))
	}
	if !state.SflowOptionsInputIfindex.IsNull() && data.SflowOptionsInputIfindex.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options/input/ifindex", state.getPath()))
	}
	if !state.SflowOptionsOutputIfindex.IsNull() && data.SflowOptionsOutputIfindex.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sflow/options/output/ifindex", state.getPath()))
	}
	return deletedItems
}

func (data *FlowMonitorMap) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.Exporters {
		keys := [...]string{"exporter-name"}
		keyValues := [...]string{data.Exporters[i].Name.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.OptionOutphysint.IsNull() && !data.OptionOutphysint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/option/outphysint", data.getPath()))
	}
	if !data.OptionFiltered.IsNull() && !data.OptionFiltered.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/option/filtered", data.getPath()))
	}
	if !data.OptionBgpattr.IsNull() && !data.OptionBgpattr.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/option/bgpattr", data.getPath()))
	}
	if !data.OptionOutbundlemember.IsNull() && !data.OptionOutbundlemember.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/option/outbundlemember", data.getPath()))
	}
	if !data.RecordIpv4.IsNull() && !data.RecordIpv4.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4", data.getPath()))
	}
	if !data.RecordIpv4Destination.IsNull() && !data.RecordIpv4Destination.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/destination", data.getPath()))
	}
	if !data.RecordIpv4DestinationTos.IsNull() && !data.RecordIpv4DestinationTos.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/destination-tos", data.getPath()))
	}
	if !data.RecordIpv4As.IsNull() && !data.RecordIpv4As.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/as", data.getPath()))
	}
	if !data.RecordIpv4ProtocolPort.IsNull() && !data.RecordIpv4ProtocolPort.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/protocol-port", data.getPath()))
	}
	if !data.RecordIpv4Prefix.IsNull() && !data.RecordIpv4Prefix.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/prefix", data.getPath()))
	}
	if !data.RecordIpv4SourcePrefix.IsNull() && !data.RecordIpv4SourcePrefix.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/source-prefix", data.getPath()))
	}
	if !data.RecordIpv4DestinationPrefix.IsNull() && !data.RecordIpv4DestinationPrefix.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/destination-prefix", data.getPath()))
	}
	if !data.RecordIpv4AsTos.IsNull() && !data.RecordIpv4AsTos.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/as-tos", data.getPath()))
	}
	if !data.RecordIpv4ProtocolPortTos.IsNull() && !data.RecordIpv4ProtocolPortTos.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/protocol-port-tos", data.getPath()))
	}
	if !data.RecordIpv4PrefixTos.IsNull() && !data.RecordIpv4PrefixTos.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/prefix-tos", data.getPath()))
	}
	if !data.RecordIpv4SourcePrefixTos.IsNull() && !data.RecordIpv4SourcePrefixTos.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/source-prefix-tos", data.getPath()))
	}
	if !data.RecordIpv4DestinationPrefixTos.IsNull() && !data.RecordIpv4DestinationPrefixTos.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/destination-prefix-tos", data.getPath()))
	}
	if !data.RecordIpv4PrefixPort.IsNull() && !data.RecordIpv4PrefixPort.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/prefix-port", data.getPath()))
	}
	if !data.RecordIpv4BgpNexthopTos.IsNull() && !data.RecordIpv4BgpNexthopTos.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/bgp-nexthop-tos", data.getPath()))
	}
	if !data.RecordIpv4PeerAs.IsNull() && !data.RecordIpv4PeerAs.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/peer-as", data.getPath()))
	}
	if !data.RecordIpv4Gtp.IsNull() && !data.RecordIpv4Gtp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv4/gtp", data.getPath()))
	}
	if !data.RecordIpv6.IsNull() && !data.RecordIpv6.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv6", data.getPath()))
	}
	if !data.RecordIpv6Destination.IsNull() && !data.RecordIpv6Destination.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv6/destination", data.getPath()))
	}
	if !data.RecordIpv6PeerAs.IsNull() && !data.RecordIpv6PeerAs.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv6/peer-as", data.getPath()))
	}
	if !data.RecordIpv6Gtp.IsNull() && !data.RecordIpv6Gtp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/ipv6/gtp", data.getPath()))
	}
	if !data.RecordMpls.IsNull() && !data.RecordMpls.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/mpls", data.getPath()))
	}
	if !data.RecordMplsIpv4Fields.IsNull() && !data.RecordMplsIpv4Fields.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/mpls/ipv4-fields", data.getPath()))
	}
	if !data.RecordMplsIpv6Fields.IsNull() && !data.RecordMplsIpv6Fields.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/mpls/ipv6-fields", data.getPath()))
	}
	if !data.RecordMplsIpv4Ipv6Fields.IsNull() && !data.RecordMplsIpv4Ipv6Fields.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/mpls/ipv4-ipv6-fields", data.getPath()))
	}
	if !data.RecordMapT.IsNull() && !data.RecordMapT.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/map-t", data.getPath()))
	}
	if !data.RecordSflow.IsNull() && !data.RecordSflow.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/sflow", data.getPath()))
	}
	if !data.RecordDatalinkRecord.IsNull() && !data.RecordDatalinkRecord.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/datalink-record", data.getPath()))
	}
	if !data.RecordDefaultRtp.IsNull() && !data.RecordDefaultRtp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/default-rtp", data.getPath()))
	}
	if !data.RecordDefaultMdi.IsNull() && !data.RecordDefaultMdi.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/record/default-mdi", data.getPath()))
	}
	if !data.CachePermanent.IsNull() && !data.CachePermanent.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/cache/permanent", data.getPath()))
	}
	if !data.CacheImmediate.IsNull() && !data.CacheImmediate.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/cache/immediate", data.getPath()))
	}
	if !data.SflowOptions.IsNull() && !data.SflowOptions.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/sflow/options", data.getPath()))
	}
	if !data.SflowOptionsExtendedRouter.IsNull() && !data.SflowOptionsExtendedRouter.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/sflow/options/extended-router", data.getPath()))
	}
	if !data.SflowOptionsExtendedGateway.IsNull() && !data.SflowOptionsExtendedGateway.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/sflow/options/extended-gateway", data.getPath()))
	}
	if !data.SflowOptionsExtendedIpv4TunnelEgress.IsNull() && !data.SflowOptionsExtendedIpv4TunnelEgress.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/sflow/options/extended-ipv4-tunnel-egress", data.getPath()))
	}
	if !data.SflowOptionsExtendedIpv6TunnelEgress.IsNull() && !data.SflowOptionsExtendedIpv6TunnelEgress.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/sflow/options/extended-ipv6-tunnel-egress", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *FlowMonitorMap) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.Exporters {
		keys := [...]string{"exporter-name"}
		keyValues := [...]string{data.Exporters[i].Name.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/exporters/exporter%v", data.getPath(), keyString))
	}
	if !data.OptionOutphysint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/option/outphysint", data.getPath()))
	}
	if !data.OptionFiltered.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/option/filtered", data.getPath()))
	}
	if !data.OptionBgpattr.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/option/bgpattr", data.getPath()))
	}
	if !data.OptionOutbundlemember.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/option/outbundlemember", data.getPath()))
	}
	if !data.RecordIpv4.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4", data.getPath()))
	}
	if !data.RecordIpv4Destination.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/destination", data.getPath()))
	}
	if !data.RecordIpv4DestinationTos.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/destination-tos", data.getPath()))
	}
	if !data.RecordIpv4As.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/as", data.getPath()))
	}
	if !data.RecordIpv4ProtocolPort.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/protocol-port", data.getPath()))
	}
	if !data.RecordIpv4Prefix.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/prefix", data.getPath()))
	}
	if !data.RecordIpv4SourcePrefix.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/source-prefix", data.getPath()))
	}
	if !data.RecordIpv4DestinationPrefix.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/destination-prefix", data.getPath()))
	}
	if !data.RecordIpv4AsTos.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/as-tos", data.getPath()))
	}
	if !data.RecordIpv4ProtocolPortTos.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/protocol-port-tos", data.getPath()))
	}
	if !data.RecordIpv4PrefixTos.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/prefix-tos", data.getPath()))
	}
	if !data.RecordIpv4SourcePrefixTos.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/source-prefix-tos", data.getPath()))
	}
	if !data.RecordIpv4DestinationPrefixTos.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/destination-prefix-tos", data.getPath()))
	}
	if !data.RecordIpv4PrefixPort.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/prefix-port", data.getPath()))
	}
	if !data.RecordIpv4BgpNexthopTos.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/bgp-nexthop-tos", data.getPath()))
	}
	if !data.RecordIpv4PeerAs.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/peer-as", data.getPath()))
	}
	if !data.RecordIpv4Gtp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv4/gtp", data.getPath()))
	}
	if !data.RecordIpv6.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv6", data.getPath()))
	}
	if !data.RecordIpv6Destination.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv6/destination", data.getPath()))
	}
	if !data.RecordIpv6PeerAs.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv6/peer-as", data.getPath()))
	}
	if !data.RecordIpv6Gtp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/ipv6/gtp", data.getPath()))
	}
	if !data.RecordMpls.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/mpls", data.getPath()))
	}
	if !data.RecordMplsIpv4Fields.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/mpls/ipv4-fields", data.getPath()))
	}
	if !data.RecordMplsIpv6Fields.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/mpls/ipv6-fields", data.getPath()))
	}
	if !data.RecordMplsIpv4Ipv6Fields.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/mpls/ipv4-ipv6-fields", data.getPath()))
	}
	if !data.RecordMplsLabels.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/mpls/labels", data.getPath()))
	}
	if !data.RecordMapT.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/map-t", data.getPath()))
	}
	if !data.RecordSflow.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/sflow", data.getPath()))
	}
	if !data.RecordDatalinkRecord.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/datalink-record", data.getPath()))
	}
	if !data.RecordDefaultRtp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/default-rtp", data.getPath()))
	}
	if !data.RecordDefaultMdi.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/record/default-mdi", data.getPath()))
	}
	if !data.CacheEntries.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cache/entries", data.getPath()))
	}
	if !data.CacheTimeoutActive.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cache/timeout/active", data.getPath()))
	}
	if !data.CacheTimeoutInactive.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cache/timeout/inactive", data.getPath()))
	}
	if !data.CacheTimeoutUpdate.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cache/timeout/update", data.getPath()))
	}
	if !data.CacheTimeoutRateLimit.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cache/timeout/rate-limit", data.getPath()))
	}
	if !data.CachePermanent.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cache/permanent", data.getPath()))
	}
	if !data.CacheImmediate.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cache/immediate", data.getPath()))
	}
	if !data.HwCacheTimeoutInactive.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hw-cache/timeout/inactive", data.getPath()))
	}
	if !data.SflowOptions.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options", data.getPath()))
	}
	if !data.SflowOptionsExtendedRouter.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options/extended-router", data.getPath()))
	}
	if !data.SflowOptionsExtendedGateway.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options/extended-gateway", data.getPath()))
	}
	if !data.SflowOptionsExtendedIpv4TunnelEgress.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options/extended-ipv4-tunnel-egress", data.getPath()))
	}
	if !data.SflowOptionsExtendedIpv6TunnelEgress.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options/extended-ipv6-tunnel-egress", data.getPath()))
	}
	if !data.SflowOptionsIfCountersPollingInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options/if-counters/polling-interval", data.getPath()))
	}
	if !data.SflowOptionsSampleHeaderSize.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options/sample-header/size", data.getPath()))
	}
	if !data.SflowOptionsInputIfindex.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options/input/ifindex", data.getPath()))
	}
	if !data.SflowOptionsOutputIfindex.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sflow/options/output/ifindex", data.getPath()))
	}
	return deletePaths
}
