// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/tidwall/sjson"

	"github.com/tidwall/gjson"
)

type Interface struct {
	Device                       types.String `tfsdk:"device"`
	Id                           types.String `tfsdk:"id"`
	InterfaceName                types.String `tfsdk:"interface_name"`
	SubInterfaceTypeL2transport  types.Bool   `tfsdk:"l2transport"`
	SubInterfaceTypePointToPoint types.Bool   `tfsdk:"point_to_point"`
	SubInterfaceTypeMultipoint   types.Bool   `tfsdk:"multipoint"`
	Shutdown                     types.Bool   `tfsdk:"shutdown"`
	Mtu                          types.Int64  `tfsdk:"mtu"`
	Bandwidth                    types.Int64  `tfsdk:"bandwidth"`
	Description                  types.String `tfsdk:"description"`
	Vrf                          types.String `tfsdk:"vrf"`
}

func (data Interface) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-interface-cfg:/interfaces/interface[interface-name=%s]", data.InterfaceName.Value)
}

func (data Interface) toBody() string {
	body := "{}"

	if !data.SubInterfaceTypeL2transport.Null && !data.SubInterfaceTypeL2transport.Unknown {
		if data.SubInterfaceTypeL2transport.Value {
			body, _ = sjson.Set(body, "sub-interface-type.l2transport", map[string]string{})
		}
	}
	if !data.SubInterfaceTypePointToPoint.Null && !data.SubInterfaceTypePointToPoint.Unknown {
		if data.SubInterfaceTypePointToPoint.Value {
			body, _ = sjson.Set(body, "sub-interface-type.point-to-point", map[string]string{})
		}
	}
	if !data.SubInterfaceTypeMultipoint.Null && !data.SubInterfaceTypeMultipoint.Unknown {
		if data.SubInterfaceTypeMultipoint.Value {
			body, _ = sjson.Set(body, "sub-interface-type.multipoint", map[string]string{})
		}
	}
	if !data.Shutdown.Null && !data.Shutdown.Unknown {
		if data.Shutdown.Value {
			body, _ = sjson.Set(body, "shutdown", map[string]string{})
		}
	}
	if !data.Mtu.Null && !data.Mtu.Unknown {
		body, _ = sjson.Set(body, "mtu", strconv.FormatInt(data.Mtu.Value, 10))
	}
	if !data.Bandwidth.Null && !data.Bandwidth.Unknown {
		body, _ = sjson.Set(body, "bandwidth", strconv.FormatInt(data.Bandwidth.Value, 10))
	}
	if !data.Description.Null && !data.Description.Unknown {
		body, _ = sjson.Set(body, "description", data.Description.Value)
	}
	if !data.Vrf.Null && !data.Vrf.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-vrf-cfg:vrf", data.Vrf.Value)
	}

	return body
}

func (data *Interface) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "sub-interface-type.l2transport"); value.Exists() {
		data.SubInterfaceTypeL2transport.Value = true
	}
	if value := gjson.GetBytes(res, "sub-interface-type.point-to-point"); value.Exists() {
		data.SubInterfaceTypePointToPoint.Value = true
	}
	if value := gjson.GetBytes(res, "sub-interface-type.multipoint"); value.Exists() {
		data.SubInterfaceTypeMultipoint.Value = true
	}
	if value := gjson.GetBytes(res, "shutdown"); value.Exists() {
		data.Shutdown.Value = true
	}
	if value := gjson.GetBytes(res, "mtu"); value.Exists() {
		data.Mtu.Value = value.Int()
	}
	if value := gjson.GetBytes(res, "bandwidth"); value.Exists() {
		data.Bandwidth.Value = value.Int()
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description.Value = value.String()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-vrf-cfg:vrf"); value.Exists() {
		data.Vrf.Value = value.String()
	}
}

func (data *Interface) fromPlan(plan Interface) {
	data.Device = plan.Device
	data.InterfaceName.Value = plan.InterfaceName.Value
}
