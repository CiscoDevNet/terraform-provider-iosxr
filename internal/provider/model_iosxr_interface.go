// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/tidwall/sjson"

	"github.com/tidwall/gjson"
)

type Interface struct {
	Device        types.String `tfsdk:"device"`
	Id            types.String `tfsdk:"id"`
	InterfaceName types.String `tfsdk:"interface_name"`
	L2transport   types.Bool   `tfsdk:"l2transport"`
	PointToPoint  types.Bool   `tfsdk:"point_to_point"`
	Multipoint    types.Bool   `tfsdk:"multipoint"`
	Shutdown      types.Bool   `tfsdk:"shutdown"`
	Mtu           types.Int64  `tfsdk:"mtu"`
	Bandwidth     types.Int64  `tfsdk:"bandwidth"`
	Description   types.String `tfsdk:"description"`
	Vrf           types.String `tfsdk:"vrf"`
}

func (data Interface) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-interface-cfg:/interfaces/interface[interface-name=%s]", data.InterfaceName.Value)
}

func (data Interface) toBody() string {
	body := "{}"
	if !data.L2transport.Null && !data.L2transport.Unknown {
		if data.L2transport.Value {
			body, _ = sjson.Set(body, "sub-interface-type.l2transport", map[string]string{})
		}
	}
	if !data.PointToPoint.Null && !data.PointToPoint.Unknown {
		if data.PointToPoint.Value {
			body, _ = sjson.Set(body, "sub-interface-type.point-to-point", map[string]string{})
		}
	}
	if !data.Multipoint.Null && !data.Multipoint.Unknown {
		if data.Multipoint.Value {
			body, _ = sjson.Set(body, "sub-interface-type.multipoint", map[string]string{})
		}
	}
	if !data.Shutdown.Null && !data.Shutdown.Unknown {
		if data.Shutdown.Value {
			body, _ = sjson.Set(body, "shutdown", map[string]string{})
		}
	}
	if !data.Mtu.Null && !data.Mtu.Unknown {
		body, _ = sjson.Set(body, "mtu", strconv.FormatInt(data.Mtu.Value, 10))
	}
	if !data.Bandwidth.Null && !data.Bandwidth.Unknown {
		body, _ = sjson.Set(body, "bandwidth", strconv.FormatInt(data.Bandwidth.Value, 10))
	}
	if !data.Description.Null && !data.Description.Unknown {
		body, _ = sjson.Set(body, "description", data.Description.Value)
	}
	if !data.Vrf.Null && !data.Vrf.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-vrf-cfg:vrf", data.Vrf.Value)
	}
	return body
}

func (data *Interface) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "sub-interface-type.l2transport"); value.Exists() {
		data.L2transport.Value = true
	} else {
		data.L2transport.Value = false
	}
	if value := gjson.GetBytes(res, "sub-interface-type.point-to-point"); value.Exists() {
		data.PointToPoint.Value = true
	} else {
		data.PointToPoint.Value = false
	}
	if value := gjson.GetBytes(res, "sub-interface-type.multipoint"); value.Exists() {
		data.Multipoint.Value = true
	} else {
		data.Multipoint.Value = false
	}
	if value := gjson.GetBytes(res, "shutdown"); value.Exists() {
		data.Shutdown.Value = true
	} else {
		data.Shutdown.Value = false
	}
	if value := gjson.GetBytes(res, "mtu"); value.Exists() {
		data.Mtu.Value = value.Int()
	} else {
		data.Mtu.Null = true
	}
	if value := gjson.GetBytes(res, "bandwidth"); value.Exists() {
		data.Bandwidth.Value = value.Int()
	} else {
		data.Bandwidth.Null = true
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description.Value = value.String()
	} else {
		data.Description.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-vrf-cfg:vrf"); value.Exists() {
		data.Vrf.Value = value.String()
	} else {
		data.Vrf.Null = true
	}
}

func (data *Interface) fromPlan(plan Interface) {
	data.Device = plan.Device
	data.InterfaceName.Value = plan.InterfaceName.Value
}

func (data *Interface) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.InterfaceName.Unknown {
		data.InterfaceName.Unknown = false
		data.InterfaceName.Null = true
	}
	if data.L2transport.Unknown {
		data.L2transport.Unknown = false
		data.L2transport.Null = true
	}
	if data.PointToPoint.Unknown {
		data.PointToPoint.Unknown = false
		data.PointToPoint.Null = true
	}
	if data.Multipoint.Unknown {
		data.Multipoint.Unknown = false
		data.Multipoint.Null = true
	}
	if data.Shutdown.Unknown {
		data.Shutdown.Unknown = false
		data.Shutdown.Null = true
	}
	if data.Mtu.Unknown {
		data.Mtu.Unknown = false
		data.Mtu.Null = true
	}
	if data.Bandwidth.Unknown {
		data.Bandwidth.Unknown = false
		data.Bandwidth.Null = true
	}
	if data.Description.Unknown {
		data.Description.Unknown = false
		data.Description.Null = true
	}
	if data.Vrf.Unknown {
		data.Vrf.Unknown = false
		data.Vrf.Null = true
	}
}

func (data *Interface) getDeletedListItems(state Interface) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *Interface) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
