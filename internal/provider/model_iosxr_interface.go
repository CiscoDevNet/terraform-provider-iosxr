// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type Interface struct {
	Device                                           types.String                              `tfsdk:"device"`
	Id                                               types.String                              `tfsdk:"id"`
	DeleteMode                                       types.String                              `tfsdk:"delete_mode"`
	InterfaceName                                    types.String                              `tfsdk:"interface_name"`
	L2transport                                      types.Bool                                `tfsdk:"l2transport"`
	PointToPoint                                     types.Bool                                `tfsdk:"point_to_point"`
	Multipoint                                       types.Bool                                `tfsdk:"multipoint"`
	DampeningDecayHalfLifeValue                      types.Int64                               `tfsdk:"dampening_decay_half_life_value"`
	Ipv4PointToPoint                                 types.Bool                                `tfsdk:"ipv4_point_to_point"`
	ServicePolicyInput                               []InterfaceServicePolicyInput             `tfsdk:"service_policy_input"`
	ServicePolicyOutput                              []InterfaceServicePolicyOutput            `tfsdk:"service_policy_output"`
	BfdModeIetf                                      types.Bool                                `tfsdk:"bfd_mode_ietf"`
	EncapsulationDot1qVlanId                         types.Int64                               `tfsdk:"encapsulation_dot1q_vlan_id"`
	L2transportEncapsulationDot1qVlanId              types.String                              `tfsdk:"l2transport_encapsulation_dot1q_vlan_id"`
	L2transportEncapsulationDot1qSecondDot1q         types.String                              `tfsdk:"l2transport_encapsulation_dot1q_second_dot1q"`
	RewriteIngressTagPopOne                          types.Bool                                `tfsdk:"rewrite_ingress_tag_pop_one"`
	RewriteIngressTagPopTwo                          types.Bool                                `tfsdk:"rewrite_ingress_tag_pop_two"`
	Shutdown                                         types.Bool                                `tfsdk:"shutdown"`
	Mtu                                              types.Int64                               `tfsdk:"mtu"`
	Bandwidth                                        types.Int64                               `tfsdk:"bandwidth"`
	Description                                      types.String                              `tfsdk:"description"`
	LoadInterval                                     types.Int64                               `tfsdk:"load_interval"`
	Vrf                                              types.String                              `tfsdk:"vrf"`
	Ipv4Address                                      types.String                              `tfsdk:"ipv4_address"`
	Ipv4Netmask                                      types.String                              `tfsdk:"ipv4_netmask"`
	Unnumbered                                       types.String                              `tfsdk:"unnumbered"`
	Ipv4VerifyUnicastSourceReachableViaType          types.String                              `tfsdk:"ipv4_verify_unicast_source_reachable_via_type"`
	Ipv4VerifyUnicastSourceReachableViaAllowSelfPing types.Bool                                `tfsdk:"ipv4_verify_unicast_source_reachable_via_allow_self_ping"`
	Ipv4VerifyUnicastSourceReachableViaAllowDefault  types.Bool                                `tfsdk:"ipv4_verify_unicast_source_reachable_via_allow_default"`
	Ipv4AccessGroupIngressAcl1                       types.String                              `tfsdk:"ipv4_access_group_ingress_acl1"`
	Ipv4AccessGroupIngressHardwareCount              types.Bool                                `tfsdk:"ipv4_access_group_ingress_hardware_count"`
	Ipv4AccessGroupIngressInterfaceStatistics        types.Bool                                `tfsdk:"ipv4_access_group_ingress_interface_statistics"`
	Ipv4AccessGroupIngressCompressLevel              types.Int64                               `tfsdk:"ipv4_access_group_ingress_compress_level"`
	Ipv4AccessGroupEgressAcl                         types.String                              `tfsdk:"ipv4_access_group_egress_acl"`
	Ipv4AccessGroupEgressHardwareCount               types.Bool                                `tfsdk:"ipv4_access_group_egress_hardware_count"`
	Ipv4AccessGroupEgressInterfaceStatistics         types.Bool                                `tfsdk:"ipv4_access_group_egress_interface_statistics"`
	Ipv4AccessGroupEgressCompressLevel               types.Int64                               `tfsdk:"ipv4_access_group_egress_compress_level"`
	Ipv6VerifyUnicastSourceReachableViaType          types.String                              `tfsdk:"ipv6_verify_unicast_source_reachable_via_type"`
	Ipv6VerifyUnicastSourceReachableViaAllowSelfPing types.Bool                                `tfsdk:"ipv6_verify_unicast_source_reachable_via_allow_self_ping"`
	Ipv6VerifyUnicastSourceReachableViaAllowDefault  types.Bool                                `tfsdk:"ipv6_verify_unicast_source_reachable_via_allow_default"`
	Ipv6AccessGroupIngressAcl1                       types.String                              `tfsdk:"ipv6_access_group_ingress_acl1"`
	Ipv6AccessGroupIngressInterfaceStatistics        types.Bool                                `tfsdk:"ipv6_access_group_ingress_interface_statistics"`
	Ipv6AccessGroupIngressCompressLevel              types.Int64                               `tfsdk:"ipv6_access_group_ingress_compress_level"`
	Ipv6AccessGroupEgressAcl1                        types.String                              `tfsdk:"ipv6_access_group_egress_acl1"`
	Ipv6AccessGroupEgressInterfaceStatistics         types.Bool                                `tfsdk:"ipv6_access_group_egress_interface_statistics"`
	Ipv6AccessGroupEgressCompressLevel               types.Int64                               `tfsdk:"ipv6_access_group_egress_compress_level"`
	Ipv6LinkLocalAddress                             types.String                              `tfsdk:"ipv6_link_local_address"`
	Ipv6LinkLocalZone                                types.String                              `tfsdk:"ipv6_link_local_zone"`
	Ipv6Autoconfig                                   types.Bool                                `tfsdk:"ipv6_autoconfig"`
	Ipv6Enable                                       types.Bool                                `tfsdk:"ipv6_enable"`
	Ipv6Addresses                                    []InterfaceIpv6Addresses                  `tfsdk:"ipv6_addresses"`
	BundleMinimumActiveLinks                         types.Int64                               `tfsdk:"bundle_minimum_active_links"`
	BundleMaximumActiveLinks                         types.Int64                               `tfsdk:"bundle_maximum_active_links"`
	Cdp                                              types.Bool                                `tfsdk:"cdp"`
	BundleShutdown                                   types.Bool                                `tfsdk:"bundle_shutdown"`
	BundleLoadBalancingHashSrcIp                     types.Bool                                `tfsdk:"bundle_load_balancing_hash_src_ip"`
	BundleLoadBalancingHashDstIp                     types.Bool                                `tfsdk:"bundle_load_balancing_hash_dst_ip"`
	BundleId                                         types.Int64                               `tfsdk:"bundle_id"`
	BundleIdMode                                     types.String                              `tfsdk:"bundle_id_mode"`
	BundlePortPriority                               types.Int64                               `tfsdk:"bundle_port_priority"`
	FlowIpv4IngressMonitors                          []InterfaceFlowIpv4IngressMonitors        `tfsdk:"flow_ipv4_ingress_monitors"`
	FlowIpv4IngressMonitorSamplers                   []InterfaceFlowIpv4IngressMonitorSamplers `tfsdk:"flow_ipv4_ingress_monitor_samplers"`
	FlowIpv4EgressMonitors                           []InterfaceFlowIpv4EgressMonitors         `tfsdk:"flow_ipv4_egress_monitors"`
	FlowIpv4EgressMonitorSamplers                    []InterfaceFlowIpv4EgressMonitorSamplers  `tfsdk:"flow_ipv4_egress_monitor_samplers"`
	FlowIpv6IngressMonitors                          []InterfaceFlowIpv6IngressMonitors        `tfsdk:"flow_ipv6_ingress_monitors"`
	FlowIpv6IngressMonitorSamplers                   []InterfaceFlowIpv6IngressMonitorSamplers `tfsdk:"flow_ipv6_ingress_monitor_samplers"`
	FlowIpv6EgressMonitors                           []InterfaceFlowIpv6EgressMonitors         `tfsdk:"flow_ipv6_egress_monitors"`
	FlowIpv6EgressMonitorSamplers                    []InterfaceFlowIpv6EgressMonitorSamplers  `tfsdk:"flow_ipv6_egress_monitor_samplers"`
}

type InterfaceData struct {
	Device                                           types.String                              `tfsdk:"device"`
	Id                                               types.String                              `tfsdk:"id"`
	InterfaceName                                    types.String                              `tfsdk:"interface_name"`
	L2transport                                      types.Bool                                `tfsdk:"l2transport"`
	PointToPoint                                     types.Bool                                `tfsdk:"point_to_point"`
	Multipoint                                       types.Bool                                `tfsdk:"multipoint"`
	DampeningDecayHalfLifeValue                      types.Int64                               `tfsdk:"dampening_decay_half_life_value"`
	Ipv4PointToPoint                                 types.Bool                                `tfsdk:"ipv4_point_to_point"`
	ServicePolicyInput                               []InterfaceServicePolicyInput             `tfsdk:"service_policy_input"`
	ServicePolicyOutput                              []InterfaceServicePolicyOutput            `tfsdk:"service_policy_output"`
	BfdModeIetf                                      types.Bool                                `tfsdk:"bfd_mode_ietf"`
	EncapsulationDot1qVlanId                         types.Int64                               `tfsdk:"encapsulation_dot1q_vlan_id"`
	L2transportEncapsulationDot1qVlanId              types.String                              `tfsdk:"l2transport_encapsulation_dot1q_vlan_id"`
	L2transportEncapsulationDot1qSecondDot1q         types.String                              `tfsdk:"l2transport_encapsulation_dot1q_second_dot1q"`
	RewriteIngressTagPopOne                          types.Bool                                `tfsdk:"rewrite_ingress_tag_pop_one"`
	RewriteIngressTagPopTwo                          types.Bool                                `tfsdk:"rewrite_ingress_tag_pop_two"`
	Shutdown                                         types.Bool                                `tfsdk:"shutdown"`
	Mtu                                              types.Int64                               `tfsdk:"mtu"`
	Bandwidth                                        types.Int64                               `tfsdk:"bandwidth"`
	Description                                      types.String                              `tfsdk:"description"`
	LoadInterval                                     types.Int64                               `tfsdk:"load_interval"`
	Vrf                                              types.String                              `tfsdk:"vrf"`
	Ipv4Address                                      types.String                              `tfsdk:"ipv4_address"`
	Ipv4Netmask                                      types.String                              `tfsdk:"ipv4_netmask"`
	Unnumbered                                       types.String                              `tfsdk:"unnumbered"`
	Ipv4VerifyUnicastSourceReachableViaType          types.String                              `tfsdk:"ipv4_verify_unicast_source_reachable_via_type"`
	Ipv4VerifyUnicastSourceReachableViaAllowSelfPing types.Bool                                `tfsdk:"ipv4_verify_unicast_source_reachable_via_allow_self_ping"`
	Ipv4VerifyUnicastSourceReachableViaAllowDefault  types.Bool                                `tfsdk:"ipv4_verify_unicast_source_reachable_via_allow_default"`
	Ipv4AccessGroupIngressAcl1                       types.String                              `tfsdk:"ipv4_access_group_ingress_acl1"`
	Ipv4AccessGroupIngressHardwareCount              types.Bool                                `tfsdk:"ipv4_access_group_ingress_hardware_count"`
	Ipv4AccessGroupIngressInterfaceStatistics        types.Bool                                `tfsdk:"ipv4_access_group_ingress_interface_statistics"`
	Ipv4AccessGroupIngressCompressLevel              types.Int64                               `tfsdk:"ipv4_access_group_ingress_compress_level"`
	Ipv4AccessGroupEgressAcl                         types.String                              `tfsdk:"ipv4_access_group_egress_acl"`
	Ipv4AccessGroupEgressHardwareCount               types.Bool                                `tfsdk:"ipv4_access_group_egress_hardware_count"`
	Ipv4AccessGroupEgressInterfaceStatistics         types.Bool                                `tfsdk:"ipv4_access_group_egress_interface_statistics"`
	Ipv4AccessGroupEgressCompressLevel               types.Int64                               `tfsdk:"ipv4_access_group_egress_compress_level"`
	Ipv6VerifyUnicastSourceReachableViaType          types.String                              `tfsdk:"ipv6_verify_unicast_source_reachable_via_type"`
	Ipv6VerifyUnicastSourceReachableViaAllowSelfPing types.Bool                                `tfsdk:"ipv6_verify_unicast_source_reachable_via_allow_self_ping"`
	Ipv6VerifyUnicastSourceReachableViaAllowDefault  types.Bool                                `tfsdk:"ipv6_verify_unicast_source_reachable_via_allow_default"`
	Ipv6AccessGroupIngressAcl1                       types.String                              `tfsdk:"ipv6_access_group_ingress_acl1"`
	Ipv6AccessGroupIngressInterfaceStatistics        types.Bool                                `tfsdk:"ipv6_access_group_ingress_interface_statistics"`
	Ipv6AccessGroupIngressCompressLevel              types.Int64                               `tfsdk:"ipv6_access_group_ingress_compress_level"`
	Ipv6AccessGroupEgressAcl1                        types.String                              `tfsdk:"ipv6_access_group_egress_acl1"`
	Ipv6AccessGroupEgressInterfaceStatistics         types.Bool                                `tfsdk:"ipv6_access_group_egress_interface_statistics"`
	Ipv6AccessGroupEgressCompressLevel               types.Int64                               `tfsdk:"ipv6_access_group_egress_compress_level"`
	Ipv6LinkLocalAddress                             types.String                              `tfsdk:"ipv6_link_local_address"`
	Ipv6LinkLocalZone                                types.String                              `tfsdk:"ipv6_link_local_zone"`
	Ipv6Autoconfig                                   types.Bool                                `tfsdk:"ipv6_autoconfig"`
	Ipv6Enable                                       types.Bool                                `tfsdk:"ipv6_enable"`
	Ipv6Addresses                                    []InterfaceIpv6Addresses                  `tfsdk:"ipv6_addresses"`
	BundleMinimumActiveLinks                         types.Int64                               `tfsdk:"bundle_minimum_active_links"`
	BundleMaximumActiveLinks                         types.Int64                               `tfsdk:"bundle_maximum_active_links"`
	Cdp                                              types.Bool                                `tfsdk:"cdp"`
	BundleShutdown                                   types.Bool                                `tfsdk:"bundle_shutdown"`
	BundleLoadBalancingHashSrcIp                     types.Bool                                `tfsdk:"bundle_load_balancing_hash_src_ip"`
	BundleLoadBalancingHashDstIp                     types.Bool                                `tfsdk:"bundle_load_balancing_hash_dst_ip"`
	BundleId                                         types.Int64                               `tfsdk:"bundle_id"`
	BundleIdMode                                     types.String                              `tfsdk:"bundle_id_mode"`
	BundlePortPriority                               types.Int64                               `tfsdk:"bundle_port_priority"`
	FlowIpv4IngressMonitors                          []InterfaceFlowIpv4IngressMonitors        `tfsdk:"flow_ipv4_ingress_monitors"`
	FlowIpv4IngressMonitorSamplers                   []InterfaceFlowIpv4IngressMonitorSamplers `tfsdk:"flow_ipv4_ingress_monitor_samplers"`
	FlowIpv4EgressMonitors                           []InterfaceFlowIpv4EgressMonitors         `tfsdk:"flow_ipv4_egress_monitors"`
	FlowIpv4EgressMonitorSamplers                    []InterfaceFlowIpv4EgressMonitorSamplers  `tfsdk:"flow_ipv4_egress_monitor_samplers"`
	FlowIpv6IngressMonitors                          []InterfaceFlowIpv6IngressMonitors        `tfsdk:"flow_ipv6_ingress_monitors"`
	FlowIpv6IngressMonitorSamplers                   []InterfaceFlowIpv6IngressMonitorSamplers `tfsdk:"flow_ipv6_ingress_monitor_samplers"`
	FlowIpv6EgressMonitors                           []InterfaceFlowIpv6EgressMonitors         `tfsdk:"flow_ipv6_egress_monitors"`
	FlowIpv6EgressMonitorSamplers                    []InterfaceFlowIpv6EgressMonitorSamplers  `tfsdk:"flow_ipv6_egress_monitor_samplers"`
}
type InterfaceServicePolicyInput struct {
	Name types.String `tfsdk:"name"`
}
type InterfaceServicePolicyOutput struct {
	Name types.String `tfsdk:"name"`
}
type InterfaceIpv6Addresses struct {
	Address      types.String `tfsdk:"address"`
	PrefixLength types.Int64  `tfsdk:"prefix_length"`
	Zone         types.String `tfsdk:"zone"`
}
type InterfaceFlowIpv4IngressMonitors struct {
	MonitorMapName types.String `tfsdk:"monitor_map_name"`
}
type InterfaceFlowIpv4IngressMonitorSamplers struct {
	MonitorMapName types.String `tfsdk:"monitor_map_name"`
	SamplerMapName types.String `tfsdk:"sampler_map_name"`
}
type InterfaceFlowIpv4EgressMonitors struct {
	MonitorMapName types.String `tfsdk:"monitor_map_name"`
}
type InterfaceFlowIpv4EgressMonitorSamplers struct {
	MonitorMapName types.String `tfsdk:"monitor_map_name"`
	SamplerMapName types.String `tfsdk:"sampler_map_name"`
}
type InterfaceFlowIpv6IngressMonitors struct {
	MonitorMapName types.String `tfsdk:"monitor_map_name"`
}
type InterfaceFlowIpv6IngressMonitorSamplers struct {
	MonitorMapName types.String `tfsdk:"monitor_map_name"`
	SamplerMapName types.String `tfsdk:"sampler_map_name"`
}
type InterfaceFlowIpv6EgressMonitors struct {
	MonitorMapName types.String `tfsdk:"monitor_map_name"`
}
type InterfaceFlowIpv6EgressMonitorSamplers struct {
	MonitorMapName types.String `tfsdk:"monitor_map_name"`
	SamplerMapName types.String `tfsdk:"sampler_map_name"`
}

func (data Interface) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-interface-cfg:/interfaces/interface[interface-name=%s]", data.InterfaceName.ValueString())
}

func (data InterfaceData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-interface-cfg:/interfaces/interface[interface-name=%s]", data.InterfaceName.ValueString())
}

func (data Interface) toBody(ctx context.Context) string {
	body := "{}"
	if !data.InterfaceName.IsNull() && !data.InterfaceName.IsUnknown() {
		body, _ = sjson.Set(body, "interface-name", data.InterfaceName.ValueString())
	}
	if !data.L2transport.IsNull() && !data.L2transport.IsUnknown() {
		if data.L2transport.ValueBool() {
			body, _ = sjson.Set(body, "sub-interface-type.l2transport", map[string]string{})
		}
	}
	if !data.PointToPoint.IsNull() && !data.PointToPoint.IsUnknown() {
		if data.PointToPoint.ValueBool() {
			body, _ = sjson.Set(body, "sub-interface-type.point-to-point", map[string]string{})
		}
	}
	if !data.Multipoint.IsNull() && !data.Multipoint.IsUnknown() {
		if data.Multipoint.ValueBool() {
			body, _ = sjson.Set(body, "sub-interface-type.multipoint", map[string]string{})
		}
	}
	if !data.DampeningDecayHalfLifeValue.IsNull() && !data.DampeningDecayHalfLifeValue.IsUnknown() {
		body, _ = sjson.Set(body, "dampening.decay-half-life.value", strconv.FormatInt(data.DampeningDecayHalfLifeValue.ValueInt64(), 10))
	}
	if !data.Ipv4PointToPoint.IsNull() && !data.Ipv4PointToPoint.IsUnknown() {
		if data.Ipv4PointToPoint.ValueBool() {
			body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:point-to-point", map[string]string{})
		}
	}
	if !data.BfdModeIetf.IsNull() && !data.BfdModeIetf.IsUnknown() {
		if data.BfdModeIetf.ValueBool() {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bfd.mode.ietf", map[string]string{})
		}
	}
	if !data.EncapsulationDot1qVlanId.IsNull() && !data.EncapsulationDot1qVlanId.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-l2-ethernet-cfg:encapsulation.dot1q.vlan-id", strconv.FormatInt(data.EncapsulationDot1qVlanId.ValueInt64(), 10))
	}
	if !data.L2transportEncapsulationDot1qVlanId.IsNull() && !data.L2transportEncapsulationDot1qVlanId.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation.dot1q.vlan-id", data.L2transportEncapsulationDot1qVlanId.ValueString())
	}
	if !data.L2transportEncapsulationDot1qSecondDot1q.IsNull() && !data.L2transportEncapsulationDot1qSecondDot1q.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation.dot1q.second-dot1q", data.L2transportEncapsulationDot1qSecondDot1q.ValueString())
	}
	if !data.RewriteIngressTagPopOne.IsNull() && !data.RewriteIngressTagPopOne.IsUnknown() {
		if data.RewriteIngressTagPopOne.ValueBool() {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite.ingress.tag.pop.one", map[string]string{})
		}
	}
	if !data.RewriteIngressTagPopTwo.IsNull() && !data.RewriteIngressTagPopTwo.IsUnknown() {
		if data.RewriteIngressTagPopTwo.ValueBool() {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite.ingress.tag.pop.two", map[string]string{})
		}
	}
	if !data.Shutdown.IsNull() && !data.Shutdown.IsUnknown() {
		if data.Shutdown.ValueBool() {
			body, _ = sjson.Set(body, "shutdown", map[string]string{})
		}
	}
	if !data.Mtu.IsNull() && !data.Mtu.IsUnknown() {
		body, _ = sjson.Set(body, "mtu", strconv.FormatInt(data.Mtu.ValueInt64(), 10))
	}
	if !data.Bandwidth.IsNull() && !data.Bandwidth.IsUnknown() {
		body, _ = sjson.Set(body, "bandwidth", strconv.FormatInt(data.Bandwidth.ValueInt64(), 10))
	}
	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.LoadInterval.IsNull() && !data.LoadInterval.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-statistics-cfg:load-interval", strconv.FormatInt(data.LoadInterval.ValueInt64(), 10))
	}
	if !data.Vrf.IsNull() && !data.Vrf.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-vrf-cfg:vrf", data.Vrf.ValueString())
	}
	if !data.Ipv4Address.IsNull() && !data.Ipv4Address.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.address", data.Ipv4Address.ValueString())
	}
	if !data.Ipv4Netmask.IsNull() && !data.Ipv4Netmask.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.netmask", data.Ipv4Netmask.ValueString())
	}
	if !data.Unnumbered.IsNull() && !data.Unnumbered.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.unnumbered", data.Unnumbered.ValueString())
	}
	if !data.Ipv4VerifyUnicastSourceReachableViaType.IsNull() && !data.Ipv4VerifyUnicastSourceReachableViaType.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.type", data.Ipv4VerifyUnicastSourceReachableViaType.ValueString())
	}
	if !data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() && !data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.allow-self-ping", data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing.ValueBool())
	}
	if !data.Ipv4VerifyUnicastSourceReachableViaAllowDefault.IsNull() && !data.Ipv4VerifyUnicastSourceReachableViaAllowDefault.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.allow-default", data.Ipv4VerifyUnicastSourceReachableViaAllowDefault.ValueBool())
	}
	if !data.Ipv4AccessGroupIngressAcl1.IsNull() && !data.Ipv4AccessGroupIngressAcl1.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.access-list-name-1.name", data.Ipv4AccessGroupIngressAcl1.ValueString())
	}
	if !data.Ipv4AccessGroupIngressHardwareCount.IsNull() && !data.Ipv4AccessGroupIngressHardwareCount.IsUnknown() {
		if data.Ipv4AccessGroupIngressHardwareCount.ValueBool() {
			body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.hardware-count", map[string]string{})
		}
	}
	if !data.Ipv4AccessGroupIngressInterfaceStatistics.IsNull() && !data.Ipv4AccessGroupIngressInterfaceStatistics.IsUnknown() {
		if data.Ipv4AccessGroupIngressInterfaceStatistics.ValueBool() {
			body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.interface-statistics", map[string]string{})
		}
	}
	if !data.Ipv4AccessGroupIngressCompressLevel.IsNull() && !data.Ipv4AccessGroupIngressCompressLevel.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.compress-level", strconv.FormatInt(data.Ipv4AccessGroupIngressCompressLevel.ValueInt64(), 10))
	}
	if !data.Ipv4AccessGroupEgressAcl.IsNull() && !data.Ipv4AccessGroupEgressAcl.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.access-list-name.name", data.Ipv4AccessGroupEgressAcl.ValueString())
	}
	if !data.Ipv4AccessGroupEgressHardwareCount.IsNull() && !data.Ipv4AccessGroupEgressHardwareCount.IsUnknown() {
		if data.Ipv4AccessGroupEgressHardwareCount.ValueBool() {
			body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.hardware-count", map[string]string{})
		}
	}
	if !data.Ipv4AccessGroupEgressInterfaceStatistics.IsNull() && !data.Ipv4AccessGroupEgressInterfaceStatistics.IsUnknown() {
		if data.Ipv4AccessGroupEgressInterfaceStatistics.ValueBool() {
			body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.interface-statistics", map[string]string{})
		}
	}
	if !data.Ipv4AccessGroupEgressCompressLevel.IsNull() && !data.Ipv4AccessGroupEgressCompressLevel.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.compress-level", strconv.FormatInt(data.Ipv4AccessGroupEgressCompressLevel.ValueInt64(), 10))
	}
	if !data.Ipv6VerifyUnicastSourceReachableViaType.IsNull() && !data.Ipv6VerifyUnicastSourceReachableViaType.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.type", data.Ipv6VerifyUnicastSourceReachableViaType.ValueString())
	}
	if !data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() && !data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.allow-self-ping", data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing.ValueBool())
	}
	if !data.Ipv6VerifyUnicastSourceReachableViaAllowDefault.IsNull() && !data.Ipv6VerifyUnicastSourceReachableViaAllowDefault.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.allow-default", data.Ipv6VerifyUnicastSourceReachableViaAllowDefault.ValueBool())
	}
	if !data.Ipv6AccessGroupIngressAcl1.IsNull() && !data.Ipv6AccessGroupIngressAcl1.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.access-list-name-1.name", data.Ipv6AccessGroupIngressAcl1.ValueString())
	}
	if !data.Ipv6AccessGroupIngressInterfaceStatistics.IsNull() && !data.Ipv6AccessGroupIngressInterfaceStatistics.IsUnknown() {
		if data.Ipv6AccessGroupIngressInterfaceStatistics.ValueBool() {
			body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.interface-statistics", map[string]string{})
		}
	}
	if !data.Ipv6AccessGroupIngressCompressLevel.IsNull() && !data.Ipv6AccessGroupIngressCompressLevel.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.compress-level", strconv.FormatInt(data.Ipv6AccessGroupIngressCompressLevel.ValueInt64(), 10))
	}
	if !data.Ipv6AccessGroupEgressAcl1.IsNull() && !data.Ipv6AccessGroupEgressAcl1.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.access-list-name-1.name", data.Ipv6AccessGroupEgressAcl1.ValueString())
	}
	if !data.Ipv6AccessGroupEgressInterfaceStatistics.IsNull() && !data.Ipv6AccessGroupEgressInterfaceStatistics.IsUnknown() {
		if data.Ipv6AccessGroupEgressInterfaceStatistics.ValueBool() {
			body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.interface-statistics", map[string]string{})
		}
	}
	if !data.Ipv6AccessGroupEgressCompressLevel.IsNull() && !data.Ipv6AccessGroupEgressCompressLevel.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.compress-level", strconv.FormatInt(data.Ipv6AccessGroupEgressCompressLevel.ValueInt64(), 10))
	}
	if !data.Ipv6LinkLocalAddress.IsNull() && !data.Ipv6LinkLocalAddress.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address", data.Ipv6LinkLocalAddress.ValueString())
	}
	if !data.Ipv6LinkLocalZone.IsNull() && !data.Ipv6LinkLocalZone.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone", data.Ipv6LinkLocalZone.ValueString())
	}
	if !data.Ipv6Autoconfig.IsNull() && !data.Ipv6Autoconfig.IsUnknown() {
		if data.Ipv6Autoconfig.ValueBool() {
			body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig", map[string]string{})
		}
	}
	if !data.Ipv6Enable.IsNull() && !data.Ipv6Enable.IsUnknown() {
		if data.Ipv6Enable.ValueBool() {
			body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:enable", map[string]string{})
		}
	}
	if !data.BundleMinimumActiveLinks.IsNull() && !data.BundleMinimumActiveLinks.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.minimum-active.links", strconv.FormatInt(data.BundleMinimumActiveLinks.ValueInt64(), 10))
	}
	if !data.BundleMaximumActiveLinks.IsNull() && !data.BundleMaximumActiveLinks.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.maximum-active.links.maximum-number", strconv.FormatInt(data.BundleMaximumActiveLinks.ValueInt64(), 10))
	}
	if !data.Cdp.IsNull() && !data.Cdp.IsUnknown() {
		if data.Cdp.ValueBool() {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-cdp-cfg:cdp", map[string]string{})
		}
	}
	if !data.BundleShutdown.IsNull() && !data.BundleShutdown.IsUnknown() {
		if data.BundleShutdown.ValueBool() {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.shutdown", map[string]string{})
		}
	}
	if !data.BundleLoadBalancingHashSrcIp.IsNull() && !data.BundleLoadBalancingHashSrcIp.IsUnknown() {
		if data.BundleLoadBalancingHashSrcIp.ValueBool() {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.load-balancing.hash.src-ip", map[string]string{})
		}
	}
	if !data.BundleLoadBalancingHashDstIp.IsNull() && !data.BundleLoadBalancingHashDstIp.IsUnknown() {
		if data.BundleLoadBalancingHashDstIp.ValueBool() {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.load-balancing.hash.dst-ip", map[string]string{})
		}
	}
	if !data.BundleId.IsNull() && !data.BundleId.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.id.bundle-id", strconv.FormatInt(data.BundleId.ValueInt64(), 10))
	}
	if !data.BundleIdMode.IsNull() && !data.BundleIdMode.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.id.mode", data.BundleIdMode.ValueString())
	}
	if !data.BundlePortPriority.IsNull() && !data.BundlePortPriority.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.port-priority", strconv.FormatInt(data.BundlePortPriority.ValueInt64(), 10))
	}
	if len(data.ServicePolicyInput) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.input", []interface{}{})
		for index, item := range data.ServicePolicyInput {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.input"+"."+strconv.Itoa(index)+"."+"service-policy-name", item.Name.ValueString())
			}
		}
	}
	if len(data.ServicePolicyOutput) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.output", []interface{}{})
		for index, item := range data.ServicePolicyOutput {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.output"+"."+strconv.Itoa(index)+"."+"service-policy-name", item.Name.ValueString())
			}
		}
	}
	if len(data.Ipv6Addresses) > 0 {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address", []interface{}{})
		for index, item := range data.Ipv6Addresses {
			if !item.Address.IsNull() && !item.Address.IsUnknown() {
				body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"+"."+strconv.Itoa(index)+"."+"address", item.Address.ValueString())
			}
			if !item.PrefixLength.IsNull() && !item.PrefixLength.IsUnknown() {
				body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"+"."+strconv.Itoa(index)+"."+"prefix-length", strconv.FormatInt(item.PrefixLength.ValueInt64(), 10))
			}
			if !item.Zone.IsNull() && !item.Zone.IsUnknown() {
				body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"+"."+strconv.Itoa(index)+"."+"zone", item.Zone.ValueString())
			}
		}
	}
	if len(data.FlowIpv4IngressMonitors) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitors.ingress-monitor", []interface{}{})
		for index, item := range data.FlowIpv4IngressMonitors {
			if !item.MonitorMapName.IsNull() && !item.MonitorMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitors.ingress-monitor"+"."+strconv.Itoa(index)+"."+"monitor-map-name", item.MonitorMapName.ValueString())
			}
		}
	}
	if len(data.FlowIpv4IngressMonitorSamplers) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitor-samplers.ingress-monitor-sampler", []interface{}{})
		for index, item := range data.FlowIpv4IngressMonitorSamplers {
			if !item.MonitorMapName.IsNull() && !item.MonitorMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitor-samplers.ingress-monitor-sampler"+"."+strconv.Itoa(index)+"."+"monitor-map-name", item.MonitorMapName.ValueString())
			}
			if !item.SamplerMapName.IsNull() && !item.SamplerMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitor-samplers.ingress-monitor-sampler"+"."+strconv.Itoa(index)+"."+"sampler-map-name", item.SamplerMapName.ValueString())
			}
		}
	}
	if len(data.FlowIpv4EgressMonitors) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitors.egress-monitor", []interface{}{})
		for index, item := range data.FlowIpv4EgressMonitors {
			if !item.MonitorMapName.IsNull() && !item.MonitorMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitors.egress-monitor"+"."+strconv.Itoa(index)+"."+"monitor-map-name", item.MonitorMapName.ValueString())
			}
		}
	}
	if len(data.FlowIpv4EgressMonitorSamplers) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitor-samplers.egress-monitor-sampler", []interface{}{})
		for index, item := range data.FlowIpv4EgressMonitorSamplers {
			if !item.MonitorMapName.IsNull() && !item.MonitorMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitor-samplers.egress-monitor-sampler"+"."+strconv.Itoa(index)+"."+"monitor-map-name", item.MonitorMapName.ValueString())
			}
			if !item.SamplerMapName.IsNull() && !item.SamplerMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitor-samplers.egress-monitor-sampler"+"."+strconv.Itoa(index)+"."+"sampler-map-name", item.SamplerMapName.ValueString())
			}
		}
	}
	if len(data.FlowIpv6IngressMonitors) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitors.ingress-monitor", []interface{}{})
		for index, item := range data.FlowIpv6IngressMonitors {
			if !item.MonitorMapName.IsNull() && !item.MonitorMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitors.ingress-monitor"+"."+strconv.Itoa(index)+"."+"monitor-map-name", item.MonitorMapName.ValueString())
			}
		}
	}
	if len(data.FlowIpv6IngressMonitorSamplers) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitor-samplers.ingress-monitor-sampler", []interface{}{})
		for index, item := range data.FlowIpv6IngressMonitorSamplers {
			if !item.MonitorMapName.IsNull() && !item.MonitorMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitor-samplers.ingress-monitor-sampler"+"."+strconv.Itoa(index)+"."+"monitor-map-name", item.MonitorMapName.ValueString())
			}
			if !item.SamplerMapName.IsNull() && !item.SamplerMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitor-samplers.ingress-monitor-sampler"+"."+strconv.Itoa(index)+"."+"sampler-map-name", item.SamplerMapName.ValueString())
			}
		}
	}
	if len(data.FlowIpv6EgressMonitors) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitors.egress-monitor", []interface{}{})
		for index, item := range data.FlowIpv6EgressMonitors {
			if !item.MonitorMapName.IsNull() && !item.MonitorMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitors.egress-monitor"+"."+strconv.Itoa(index)+"."+"monitor-map-name", item.MonitorMapName.ValueString())
			}
		}
	}
	if len(data.FlowIpv6EgressMonitorSamplers) > 0 {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitor-samplers.egress-monitor-sampler", []interface{}{})
		for index, item := range data.FlowIpv6EgressMonitorSamplers {
			if !item.MonitorMapName.IsNull() && !item.MonitorMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitor-samplers.egress-monitor-sampler"+"."+strconv.Itoa(index)+"."+"monitor-map-name", item.MonitorMapName.ValueString())
			}
			if !item.SamplerMapName.IsNull() && !item.SamplerMapName.IsUnknown() {
				body, _ = sjson.Set(body, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitor-samplers.egress-monitor-sampler"+"."+strconv.Itoa(index)+"."+"sampler-map-name", item.SamplerMapName.ValueString())
			}
		}
	}
	return body
}

func (data *Interface) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "sub-interface-type.l2transport"); !data.L2transport.IsNull() {
		if value.Exists() {
			data.L2transport = types.BoolValue(true)
		} else {
			data.L2transport = types.BoolValue(false)
		}
	} else {
		data.L2transport = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "sub-interface-type.point-to-point"); !data.PointToPoint.IsNull() {
		if value.Exists() {
			data.PointToPoint = types.BoolValue(true)
		} else {
			data.PointToPoint = types.BoolValue(false)
		}
	} else {
		data.PointToPoint = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "sub-interface-type.multipoint"); !data.Multipoint.IsNull() {
		if value.Exists() {
			data.Multipoint = types.BoolValue(true)
		} else {
			data.Multipoint = types.BoolValue(false)
		}
	} else {
		data.Multipoint = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "dampening.decay-half-life.value"); value.Exists() && !data.DampeningDecayHalfLifeValue.IsNull() {
		data.DampeningDecayHalfLifeValue = types.Int64Value(value.Int())
	} else {
		data.DampeningDecayHalfLifeValue = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:point-to-point"); !data.Ipv4PointToPoint.IsNull() {
		if value.Exists() {
			data.Ipv4PointToPoint = types.BoolValue(true)
		} else {
			data.Ipv4PointToPoint = types.BoolValue(false)
		}
	} else {
		data.Ipv4PointToPoint = types.BoolNull()
	}
	for i := range data.ServicePolicyInput {
		keys := [...]string{"service-policy-name"}
		keyValues := [...]string{data.ServicePolicyInput[i].Name.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.input").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("service-policy-name"); value.Exists() && !data.ServicePolicyInput[i].Name.IsNull() {
			data.ServicePolicyInput[i].Name = types.StringValue(value.String())
		} else {
			data.ServicePolicyInput[i].Name = types.StringNull()
		}
	}
	for i := range data.ServicePolicyOutput {
		keys := [...]string{"service-policy-name"}
		keyValues := [...]string{data.ServicePolicyOutput[i].Name.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.output").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("service-policy-name"); value.Exists() && !data.ServicePolicyOutput[i].Name.IsNull() {
			data.ServicePolicyOutput[i].Name = types.StringValue(value.String())
		} else {
			data.ServicePolicyOutput[i].Name = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bfd.mode.ietf"); !data.BfdModeIetf.IsNull() {
		if value.Exists() {
			data.BfdModeIetf = types.BoolValue(true)
		} else {
			data.BfdModeIetf = types.BoolValue(false)
		}
	} else {
		data.BfdModeIetf = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:encapsulation.dot1q.vlan-id"); value.Exists() && !data.EncapsulationDot1qVlanId.IsNull() {
		data.EncapsulationDot1qVlanId = types.Int64Value(value.Int())
	} else {
		data.EncapsulationDot1qVlanId = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation.dot1q.vlan-id"); value.Exists() && !data.L2transportEncapsulationDot1qVlanId.IsNull() {
		data.L2transportEncapsulationDot1qVlanId = types.StringValue(value.String())
	} else {
		data.L2transportEncapsulationDot1qVlanId = types.StringNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation.dot1q.second-dot1q"); value.Exists() && !data.L2transportEncapsulationDot1qSecondDot1q.IsNull() {
		data.L2transportEncapsulationDot1qSecondDot1q = types.StringValue(value.String())
	} else {
		data.L2transportEncapsulationDot1qSecondDot1q = types.StringNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite.ingress.tag.pop.one"); !data.RewriteIngressTagPopOne.IsNull() {
		if value.Exists() {
			data.RewriteIngressTagPopOne = types.BoolValue(true)
		} else {
			data.RewriteIngressTagPopOne = types.BoolValue(false)
		}
	} else {
		data.RewriteIngressTagPopOne = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite.ingress.tag.pop.two"); !data.RewriteIngressTagPopTwo.IsNull() {
		if value.Exists() {
			data.RewriteIngressTagPopTwo = types.BoolValue(true)
		} else {
			data.RewriteIngressTagPopTwo = types.BoolValue(false)
		}
	} else {
		data.RewriteIngressTagPopTwo = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "shutdown"); !data.Shutdown.IsNull() {
		if value.Exists() {
			data.Shutdown = types.BoolValue(true)
		} else {
			data.Shutdown = types.BoolValue(false)
		}
	} else {
		data.Shutdown = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "mtu"); value.Exists() && !data.Mtu.IsNull() {
		data.Mtu = types.Int64Value(value.Int())
	} else {
		data.Mtu = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "bandwidth"); value.Exists() && !data.Bandwidth.IsNull() {
		data.Bandwidth = types.Int64Value(value.Int())
	} else {
		data.Bandwidth = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-statistics-cfg:load-interval"); value.Exists() && !data.LoadInterval.IsNull() {
		data.LoadInterval = types.Int64Value(value.Int())
	} else {
		data.LoadInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-vrf-cfg:vrf"); value.Exists() && !data.Vrf.IsNull() {
		data.Vrf = types.StringValue(value.String())
	} else {
		data.Vrf = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.address"); value.Exists() && !data.Ipv4Address.IsNull() {
		data.Ipv4Address = types.StringValue(value.String())
	} else {
		data.Ipv4Address = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.netmask"); value.Exists() && !data.Ipv4Netmask.IsNull() {
		data.Ipv4Netmask = types.StringValue(value.String())
	} else {
		data.Ipv4Netmask = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.unnumbered"); value.Exists() && !data.Unnumbered.IsNull() {
		data.Unnumbered = types.StringValue(value.String())
	} else {
		data.Unnumbered = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.type"); value.Exists() && !data.Ipv4VerifyUnicastSourceReachableViaType.IsNull() {
		data.Ipv4VerifyUnicastSourceReachableViaType = types.StringValue(value.String())
	} else {
		data.Ipv4VerifyUnicastSourceReachableViaType = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.allow-self-ping"); !data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() {
		if value.Exists() {
			data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(value.Bool())
		}
	} else {
		data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.allow-default"); !data.Ipv4VerifyUnicastSourceReachableViaAllowDefault.IsNull() {
		if value.Exists() {
			data.Ipv4VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(value.Bool())
		}
	} else {
		data.Ipv4VerifyUnicastSourceReachableViaAllowDefault = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.access-list-name-1.name"); value.Exists() && !data.Ipv4AccessGroupIngressAcl1.IsNull() {
		data.Ipv4AccessGroupIngressAcl1 = types.StringValue(value.String())
	} else {
		data.Ipv4AccessGroupIngressAcl1 = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.hardware-count"); !data.Ipv4AccessGroupIngressHardwareCount.IsNull() {
		if value.Exists() {
			data.Ipv4AccessGroupIngressHardwareCount = types.BoolValue(true)
		} else {
			data.Ipv4AccessGroupIngressHardwareCount = types.BoolValue(false)
		}
	} else {
		data.Ipv4AccessGroupIngressHardwareCount = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.interface-statistics"); !data.Ipv4AccessGroupIngressInterfaceStatistics.IsNull() {
		if value.Exists() {
			data.Ipv4AccessGroupIngressInterfaceStatistics = types.BoolValue(true)
		} else {
			data.Ipv4AccessGroupIngressInterfaceStatistics = types.BoolValue(false)
		}
	} else {
		data.Ipv4AccessGroupIngressInterfaceStatistics = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.compress-level"); value.Exists() && !data.Ipv4AccessGroupIngressCompressLevel.IsNull() {
		data.Ipv4AccessGroupIngressCompressLevel = types.Int64Value(value.Int())
	} else {
		data.Ipv4AccessGroupIngressCompressLevel = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.access-list-name.name"); value.Exists() && !data.Ipv4AccessGroupEgressAcl.IsNull() {
		data.Ipv4AccessGroupEgressAcl = types.StringValue(value.String())
	} else {
		data.Ipv4AccessGroupEgressAcl = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.hardware-count"); !data.Ipv4AccessGroupEgressHardwareCount.IsNull() {
		if value.Exists() {
			data.Ipv4AccessGroupEgressHardwareCount = types.BoolValue(true)
		} else {
			data.Ipv4AccessGroupEgressHardwareCount = types.BoolValue(false)
		}
	} else {
		data.Ipv4AccessGroupEgressHardwareCount = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.interface-statistics"); !data.Ipv4AccessGroupEgressInterfaceStatistics.IsNull() {
		if value.Exists() {
			data.Ipv4AccessGroupEgressInterfaceStatistics = types.BoolValue(true)
		} else {
			data.Ipv4AccessGroupEgressInterfaceStatistics = types.BoolValue(false)
		}
	} else {
		data.Ipv4AccessGroupEgressInterfaceStatistics = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.compress-level"); value.Exists() && !data.Ipv4AccessGroupEgressCompressLevel.IsNull() {
		data.Ipv4AccessGroupEgressCompressLevel = types.Int64Value(value.Int())
	} else {
		data.Ipv4AccessGroupEgressCompressLevel = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.type"); value.Exists() && !data.Ipv6VerifyUnicastSourceReachableViaType.IsNull() {
		data.Ipv6VerifyUnicastSourceReachableViaType = types.StringValue(value.String())
	} else {
		data.Ipv6VerifyUnicastSourceReachableViaType = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.allow-self-ping"); !data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() {
		if value.Exists() {
			data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(value.Bool())
		}
	} else {
		data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.allow-default"); !data.Ipv6VerifyUnicastSourceReachableViaAllowDefault.IsNull() {
		if value.Exists() {
			data.Ipv6VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(value.Bool())
		}
	} else {
		data.Ipv6VerifyUnicastSourceReachableViaAllowDefault = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.access-list-name-1.name"); value.Exists() && !data.Ipv6AccessGroupIngressAcl1.IsNull() {
		data.Ipv6AccessGroupIngressAcl1 = types.StringValue(value.String())
	} else {
		data.Ipv6AccessGroupIngressAcl1 = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.interface-statistics"); !data.Ipv6AccessGroupIngressInterfaceStatistics.IsNull() {
		if value.Exists() {
			data.Ipv6AccessGroupIngressInterfaceStatistics = types.BoolValue(true)
		} else {
			data.Ipv6AccessGroupIngressInterfaceStatistics = types.BoolValue(false)
		}
	} else {
		data.Ipv6AccessGroupIngressInterfaceStatistics = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.compress-level"); value.Exists() && !data.Ipv6AccessGroupIngressCompressLevel.IsNull() {
		data.Ipv6AccessGroupIngressCompressLevel = types.Int64Value(value.Int())
	} else {
		data.Ipv6AccessGroupIngressCompressLevel = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.access-list-name-1.name"); value.Exists() && !data.Ipv6AccessGroupEgressAcl1.IsNull() {
		data.Ipv6AccessGroupEgressAcl1 = types.StringValue(value.String())
	} else {
		data.Ipv6AccessGroupEgressAcl1 = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.interface-statistics"); !data.Ipv6AccessGroupEgressInterfaceStatistics.IsNull() {
		if value.Exists() {
			data.Ipv6AccessGroupEgressInterfaceStatistics = types.BoolValue(true)
		} else {
			data.Ipv6AccessGroupEgressInterfaceStatistics = types.BoolValue(false)
		}
	} else {
		data.Ipv6AccessGroupEgressInterfaceStatistics = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.compress-level"); value.Exists() && !data.Ipv6AccessGroupEgressCompressLevel.IsNull() {
		data.Ipv6AccessGroupEgressCompressLevel = types.Int64Value(value.Int())
	} else {
		data.Ipv6AccessGroupEgressCompressLevel = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address"); value.Exists() && !data.Ipv6LinkLocalAddress.IsNull() {
		data.Ipv6LinkLocalAddress = types.StringValue(value.String())
	} else {
		data.Ipv6LinkLocalAddress = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone"); value.Exists() && !data.Ipv6LinkLocalZone.IsNull() {
		data.Ipv6LinkLocalZone = types.StringValue(value.String())
	} else {
		data.Ipv6LinkLocalZone = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig"); !data.Ipv6Autoconfig.IsNull() {
		if value.Exists() {
			data.Ipv6Autoconfig = types.BoolValue(true)
		} else {
			data.Ipv6Autoconfig = types.BoolValue(false)
		}
	} else {
		data.Ipv6Autoconfig = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:enable"); !data.Ipv6Enable.IsNull() {
		if value.Exists() {
			data.Ipv6Enable = types.BoolValue(true)
		} else {
			data.Ipv6Enable = types.BoolValue(false)
		}
	} else {
		data.Ipv6Enable = types.BoolNull()
	}
	for i := range data.Ipv6Addresses {
		keys := [...]string{"address"}
		keyValues := [...]string{data.Ipv6Addresses[i].Address.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("address"); value.Exists() && !data.Ipv6Addresses[i].Address.IsNull() {
			data.Ipv6Addresses[i].Address = types.StringValue(value.String())
		} else {
			data.Ipv6Addresses[i].Address = types.StringNull()
		}
		if value := r.Get("prefix-length"); value.Exists() && !data.Ipv6Addresses[i].PrefixLength.IsNull() {
			data.Ipv6Addresses[i].PrefixLength = types.Int64Value(value.Int())
		} else {
			data.Ipv6Addresses[i].PrefixLength = types.Int64Null()
		}
		if value := r.Get("zone"); value.Exists() && !data.Ipv6Addresses[i].Zone.IsNull() {
			data.Ipv6Addresses[i].Zone = types.StringValue(value.String())
		} else {
			data.Ipv6Addresses[i].Zone = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.minimum-active.links"); value.Exists() && !data.BundleMinimumActiveLinks.IsNull() {
		data.BundleMinimumActiveLinks = types.Int64Value(value.Int())
	} else {
		data.BundleMinimumActiveLinks = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.maximum-active.links.maximum-number"); value.Exists() && !data.BundleMaximumActiveLinks.IsNull() {
		data.BundleMaximumActiveLinks = types.Int64Value(value.Int())
	} else {
		data.BundleMaximumActiveLinks = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-cdp-cfg:cdp"); !data.Cdp.IsNull() {
		if value.Exists() {
			data.Cdp = types.BoolValue(true)
		} else {
			data.Cdp = types.BoolValue(false)
		}
	} else {
		data.Cdp = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.shutdown"); !data.BundleShutdown.IsNull() {
		if value.Exists() {
			data.BundleShutdown = types.BoolValue(true)
		} else {
			data.BundleShutdown = types.BoolValue(false)
		}
	} else {
		data.BundleShutdown = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.load-balancing.hash.src-ip"); !data.BundleLoadBalancingHashSrcIp.IsNull() {
		if value.Exists() {
			data.BundleLoadBalancingHashSrcIp = types.BoolValue(true)
		} else {
			data.BundleLoadBalancingHashSrcIp = types.BoolValue(false)
		}
	} else {
		data.BundleLoadBalancingHashSrcIp = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.load-balancing.hash.dst-ip"); !data.BundleLoadBalancingHashDstIp.IsNull() {
		if value.Exists() {
			data.BundleLoadBalancingHashDstIp = types.BoolValue(true)
		} else {
			data.BundleLoadBalancingHashDstIp = types.BoolValue(false)
		}
	} else {
		data.BundleLoadBalancingHashDstIp = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.id.bundle-id"); value.Exists() && !data.BundleId.IsNull() {
		data.BundleId = types.Int64Value(value.Int())
	} else {
		data.BundleId = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.id.mode"); value.Exists() && !data.BundleIdMode.IsNull() {
		data.BundleIdMode = types.StringValue(value.String())
	} else {
		data.BundleIdMode = types.StringNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.port-priority"); value.Exists() && !data.BundlePortPriority.IsNull() {
		data.BundlePortPriority = types.Int64Value(value.Int())
	} else {
		data.BundlePortPriority = types.Int64Null()
	}
	for i := range data.FlowIpv4IngressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv4IngressMonitors[i].MonitorMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitors.ingress-monitor").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("monitor-map-name"); value.Exists() && !data.FlowIpv4IngressMonitors[i].MonitorMapName.IsNull() {
			data.FlowIpv4IngressMonitors[i].MonitorMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv4IngressMonitors[i].MonitorMapName = types.StringNull()
		}
	}
	for i := range data.FlowIpv4IngressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv4IngressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv4IngressMonitorSamplers[i].SamplerMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitor-samplers.ingress-monitor-sampler").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("monitor-map-name"); value.Exists() && !data.FlowIpv4IngressMonitorSamplers[i].MonitorMapName.IsNull() {
			data.FlowIpv4IngressMonitorSamplers[i].MonitorMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv4IngressMonitorSamplers[i].MonitorMapName = types.StringNull()
		}
		if value := r.Get("sampler-map-name"); value.Exists() && !data.FlowIpv4IngressMonitorSamplers[i].SamplerMapName.IsNull() {
			data.FlowIpv4IngressMonitorSamplers[i].SamplerMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv4IngressMonitorSamplers[i].SamplerMapName = types.StringNull()
		}
	}
	for i := range data.FlowIpv4EgressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv4EgressMonitors[i].MonitorMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitors.egress-monitor").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("monitor-map-name"); value.Exists() && !data.FlowIpv4EgressMonitors[i].MonitorMapName.IsNull() {
			data.FlowIpv4EgressMonitors[i].MonitorMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv4EgressMonitors[i].MonitorMapName = types.StringNull()
		}
	}
	for i := range data.FlowIpv4EgressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv4EgressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv4EgressMonitorSamplers[i].SamplerMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitor-samplers.egress-monitor-sampler").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("monitor-map-name"); value.Exists() && !data.FlowIpv4EgressMonitorSamplers[i].MonitorMapName.IsNull() {
			data.FlowIpv4EgressMonitorSamplers[i].MonitorMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv4EgressMonitorSamplers[i].MonitorMapName = types.StringNull()
		}
		if value := r.Get("sampler-map-name"); value.Exists() && !data.FlowIpv4EgressMonitorSamplers[i].SamplerMapName.IsNull() {
			data.FlowIpv4EgressMonitorSamplers[i].SamplerMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv4EgressMonitorSamplers[i].SamplerMapName = types.StringNull()
		}
	}
	for i := range data.FlowIpv6IngressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv6IngressMonitors[i].MonitorMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitors.ingress-monitor").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("monitor-map-name"); value.Exists() && !data.FlowIpv6IngressMonitors[i].MonitorMapName.IsNull() {
			data.FlowIpv6IngressMonitors[i].MonitorMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv6IngressMonitors[i].MonitorMapName = types.StringNull()
		}
	}
	for i := range data.FlowIpv6IngressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv6IngressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv6IngressMonitorSamplers[i].SamplerMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitor-samplers.ingress-monitor-sampler").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("monitor-map-name"); value.Exists() && !data.FlowIpv6IngressMonitorSamplers[i].MonitorMapName.IsNull() {
			data.FlowIpv6IngressMonitorSamplers[i].MonitorMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv6IngressMonitorSamplers[i].MonitorMapName = types.StringNull()
		}
		if value := r.Get("sampler-map-name"); value.Exists() && !data.FlowIpv6IngressMonitorSamplers[i].SamplerMapName.IsNull() {
			data.FlowIpv6IngressMonitorSamplers[i].SamplerMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv6IngressMonitorSamplers[i].SamplerMapName = types.StringNull()
		}
	}
	for i := range data.FlowIpv6EgressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv6EgressMonitors[i].MonitorMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitors.egress-monitor").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("monitor-map-name"); value.Exists() && !data.FlowIpv6EgressMonitors[i].MonitorMapName.IsNull() {
			data.FlowIpv6EgressMonitors[i].MonitorMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv6EgressMonitors[i].MonitorMapName = types.StringNull()
		}
	}
	for i := range data.FlowIpv6EgressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv6EgressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv6EgressMonitorSamplers[i].SamplerMapName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitor-samplers.egress-monitor-sampler").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("monitor-map-name"); value.Exists() && !data.FlowIpv6EgressMonitorSamplers[i].MonitorMapName.IsNull() {
			data.FlowIpv6EgressMonitorSamplers[i].MonitorMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv6EgressMonitorSamplers[i].MonitorMapName = types.StringNull()
		}
		if value := r.Get("sampler-map-name"); value.Exists() && !data.FlowIpv6EgressMonitorSamplers[i].SamplerMapName.IsNull() {
			data.FlowIpv6EgressMonitorSamplers[i].SamplerMapName = types.StringValue(value.String())
		} else {
			data.FlowIpv6EgressMonitorSamplers[i].SamplerMapName = types.StringNull()
		}
	}
}

func (data *Interface) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "sub-interface-type.l2transport"); value.Exists() {
		data.L2transport = types.BoolValue(true)
	} else {
		data.L2transport = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sub-interface-type.point-to-point"); value.Exists() {
		data.PointToPoint = types.BoolValue(true)
	} else {
		data.PointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sub-interface-type.multipoint"); value.Exists() {
		data.Multipoint = types.BoolValue(true)
	} else {
		data.Multipoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "dampening.decay-half-life.value"); value.Exists() {
		data.DampeningDecayHalfLifeValue = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:point-to-point"); value.Exists() {
		data.Ipv4PointToPoint = types.BoolValue(true)
	} else {
		data.Ipv4PointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.input"); value.Exists() {
		data.ServicePolicyInput = make([]InterfaceServicePolicyInput, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceServicePolicyInput{}
			if cValue := v.Get("service-policy-name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.ServicePolicyInput = append(data.ServicePolicyInput, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.output"); value.Exists() {
		data.ServicePolicyOutput = make([]InterfaceServicePolicyOutput, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceServicePolicyOutput{}
			if cValue := v.Get("service-policy-name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.ServicePolicyOutput = append(data.ServicePolicyOutput, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bfd.mode.ietf"); value.Exists() {
		data.BfdModeIetf = types.BoolValue(true)
	} else {
		data.BfdModeIetf = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:encapsulation.dot1q.vlan-id"); value.Exists() {
		data.EncapsulationDot1qVlanId = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation.dot1q.vlan-id"); value.Exists() {
		data.L2transportEncapsulationDot1qVlanId = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation.dot1q.second-dot1q"); value.Exists() {
		data.L2transportEncapsulationDot1qSecondDot1q = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite.ingress.tag.pop.one"); value.Exists() {
		data.RewriteIngressTagPopOne = types.BoolValue(true)
	} else {
		data.RewriteIngressTagPopOne = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite.ingress.tag.pop.two"); value.Exists() {
		data.RewriteIngressTagPopTwo = types.BoolValue(true)
	} else {
		data.RewriteIngressTagPopTwo = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "shutdown"); value.Exists() {
		data.Shutdown = types.BoolValue(true)
	} else {
		data.Shutdown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mtu"); value.Exists() {
		data.Mtu = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bandwidth"); value.Exists() {
		data.Bandwidth = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-statistics-cfg:load-interval"); value.Exists() {
		data.LoadInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-vrf-cfg:vrf"); value.Exists() {
		data.Vrf = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.address"); value.Exists() {
		data.Ipv4Address = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.netmask"); value.Exists() {
		data.Ipv4Netmask = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.unnumbered"); value.Exists() {
		data.Unnumbered = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.type"); value.Exists() {
		data.Ipv4VerifyUnicastSourceReachableViaType = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.allow-self-ping"); value.Exists() {
		data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(value.Bool())
	} else {
		data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.allow-default"); value.Exists() {
		data.Ipv4VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(value.Bool())
	} else {
		data.Ipv4VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.access-list-name-1.name"); value.Exists() {
		data.Ipv4AccessGroupIngressAcl1 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.hardware-count"); value.Exists() {
		data.Ipv4AccessGroupIngressHardwareCount = types.BoolValue(true)
	} else {
		data.Ipv4AccessGroupIngressHardwareCount = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.interface-statistics"); value.Exists() {
		data.Ipv4AccessGroupIngressInterfaceStatistics = types.BoolValue(true)
	} else {
		data.Ipv4AccessGroupIngressInterfaceStatistics = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.compress-level"); value.Exists() {
		data.Ipv4AccessGroupIngressCompressLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.access-list-name.name"); value.Exists() {
		data.Ipv4AccessGroupEgressAcl = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.hardware-count"); value.Exists() {
		data.Ipv4AccessGroupEgressHardwareCount = types.BoolValue(true)
	} else {
		data.Ipv4AccessGroupEgressHardwareCount = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.interface-statistics"); value.Exists() {
		data.Ipv4AccessGroupEgressInterfaceStatistics = types.BoolValue(true)
	} else {
		data.Ipv4AccessGroupEgressInterfaceStatistics = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.compress-level"); value.Exists() {
		data.Ipv4AccessGroupEgressCompressLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.type"); value.Exists() {
		data.Ipv6VerifyUnicastSourceReachableViaType = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.allow-self-ping"); value.Exists() {
		data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(value.Bool())
	} else {
		data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.allow-default"); value.Exists() {
		data.Ipv6VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(value.Bool())
	} else {
		data.Ipv6VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.access-list-name-1.name"); value.Exists() {
		data.Ipv6AccessGroupIngressAcl1 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.interface-statistics"); value.Exists() {
		data.Ipv6AccessGroupIngressInterfaceStatistics = types.BoolValue(true)
	} else {
		data.Ipv6AccessGroupIngressInterfaceStatistics = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.compress-level"); value.Exists() {
		data.Ipv6AccessGroupIngressCompressLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.access-list-name-1.name"); value.Exists() {
		data.Ipv6AccessGroupEgressAcl1 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.interface-statistics"); value.Exists() {
		data.Ipv6AccessGroupEgressInterfaceStatistics = types.BoolValue(true)
	} else {
		data.Ipv6AccessGroupEgressInterfaceStatistics = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.compress-level"); value.Exists() {
		data.Ipv6AccessGroupEgressCompressLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address"); value.Exists() {
		data.Ipv6LinkLocalAddress = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone"); value.Exists() {
		data.Ipv6LinkLocalZone = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig"); value.Exists() {
		data.Ipv6Autoconfig = types.BoolValue(true)
	} else {
		data.Ipv6Autoconfig = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:enable"); value.Exists() {
		data.Ipv6Enable = types.BoolValue(true)
	} else {
		data.Ipv6Enable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"); value.Exists() {
		data.Ipv6Addresses = make([]InterfaceIpv6Addresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceIpv6Addresses{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("prefix-length"); cValue.Exists() {
				item.PrefixLength = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("zone"); cValue.Exists() {
				item.Zone = types.StringValue(cValue.String())
			}
			data.Ipv6Addresses = append(data.Ipv6Addresses, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.minimum-active.links"); value.Exists() {
		data.BundleMinimumActiveLinks = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.maximum-active.links.maximum-number"); value.Exists() {
		data.BundleMaximumActiveLinks = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-cdp-cfg:cdp"); value.Exists() {
		data.Cdp = types.BoolValue(true)
	} else {
		data.Cdp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.shutdown"); value.Exists() {
		data.BundleShutdown = types.BoolValue(true)
	} else {
		data.BundleShutdown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.load-balancing.hash.src-ip"); value.Exists() {
		data.BundleLoadBalancingHashSrcIp = types.BoolValue(true)
	} else {
		data.BundleLoadBalancingHashSrcIp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.load-balancing.hash.dst-ip"); value.Exists() {
		data.BundleLoadBalancingHashDstIp = types.BoolValue(true)
	} else {
		data.BundleLoadBalancingHashDstIp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.id.bundle-id"); value.Exists() {
		data.BundleId = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.id.mode"); value.Exists() {
		data.BundleIdMode = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.port-priority"); value.Exists() {
		data.BundlePortPriority = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitors.ingress-monitor"); value.Exists() {
		data.FlowIpv4IngressMonitors = make([]InterfaceFlowIpv4IngressMonitors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv4IngressMonitors{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv4IngressMonitors = append(data.FlowIpv4IngressMonitors, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitor-samplers.ingress-monitor-sampler"); value.Exists() {
		data.FlowIpv4IngressMonitorSamplers = make([]InterfaceFlowIpv4IngressMonitorSamplers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv4IngressMonitorSamplers{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("sampler-map-name"); cValue.Exists() {
				item.SamplerMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv4IngressMonitorSamplers = append(data.FlowIpv4IngressMonitorSamplers, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitors.egress-monitor"); value.Exists() {
		data.FlowIpv4EgressMonitors = make([]InterfaceFlowIpv4EgressMonitors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv4EgressMonitors{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv4EgressMonitors = append(data.FlowIpv4EgressMonitors, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitor-samplers.egress-monitor-sampler"); value.Exists() {
		data.FlowIpv4EgressMonitorSamplers = make([]InterfaceFlowIpv4EgressMonitorSamplers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv4EgressMonitorSamplers{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("sampler-map-name"); cValue.Exists() {
				item.SamplerMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv4EgressMonitorSamplers = append(data.FlowIpv4EgressMonitorSamplers, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitors.ingress-monitor"); value.Exists() {
		data.FlowIpv6IngressMonitors = make([]InterfaceFlowIpv6IngressMonitors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv6IngressMonitors{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv6IngressMonitors = append(data.FlowIpv6IngressMonitors, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitor-samplers.ingress-monitor-sampler"); value.Exists() {
		data.FlowIpv6IngressMonitorSamplers = make([]InterfaceFlowIpv6IngressMonitorSamplers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv6IngressMonitorSamplers{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("sampler-map-name"); cValue.Exists() {
				item.SamplerMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv6IngressMonitorSamplers = append(data.FlowIpv6IngressMonitorSamplers, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitors.egress-monitor"); value.Exists() {
		data.FlowIpv6EgressMonitors = make([]InterfaceFlowIpv6EgressMonitors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv6EgressMonitors{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv6EgressMonitors = append(data.FlowIpv6EgressMonitors, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitor-samplers.egress-monitor-sampler"); value.Exists() {
		data.FlowIpv6EgressMonitorSamplers = make([]InterfaceFlowIpv6EgressMonitorSamplers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv6EgressMonitorSamplers{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("sampler-map-name"); cValue.Exists() {
				item.SamplerMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv6EgressMonitorSamplers = append(data.FlowIpv6EgressMonitorSamplers, item)
			return true
		})
	}
}

func (data *InterfaceData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "sub-interface-type.l2transport"); value.Exists() {
		data.L2transport = types.BoolValue(true)
	} else {
		data.L2transport = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sub-interface-type.point-to-point"); value.Exists() {
		data.PointToPoint = types.BoolValue(true)
	} else {
		data.PointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sub-interface-type.multipoint"); value.Exists() {
		data.Multipoint = types.BoolValue(true)
	} else {
		data.Multipoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "dampening.decay-half-life.value"); value.Exists() {
		data.DampeningDecayHalfLifeValue = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:point-to-point"); value.Exists() {
		data.Ipv4PointToPoint = types.BoolValue(true)
	} else {
		data.Ipv4PointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.input"); value.Exists() {
		data.ServicePolicyInput = make([]InterfaceServicePolicyInput, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceServicePolicyInput{}
			if cValue := v.Get("service-policy-name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.ServicePolicyInput = append(data.ServicePolicyInput, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy.output"); value.Exists() {
		data.ServicePolicyOutput = make([]InterfaceServicePolicyOutput, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceServicePolicyOutput{}
			if cValue := v.Get("service-policy-name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.ServicePolicyOutput = append(data.ServicePolicyOutput, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bfd.mode.ietf"); value.Exists() {
		data.BfdModeIetf = types.BoolValue(true)
	} else {
		data.BfdModeIetf = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:encapsulation.dot1q.vlan-id"); value.Exists() {
		data.EncapsulationDot1qVlanId = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation.dot1q.vlan-id"); value.Exists() {
		data.L2transportEncapsulationDot1qVlanId = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation.dot1q.second-dot1q"); value.Exists() {
		data.L2transportEncapsulationDot1qSecondDot1q = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite.ingress.tag.pop.one"); value.Exists() {
		data.RewriteIngressTagPopOne = types.BoolValue(true)
	} else {
		data.RewriteIngressTagPopOne = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite.ingress.tag.pop.two"); value.Exists() {
		data.RewriteIngressTagPopTwo = types.BoolValue(true)
	} else {
		data.RewriteIngressTagPopTwo = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "shutdown"); value.Exists() {
		data.Shutdown = types.BoolValue(true)
	} else {
		data.Shutdown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mtu"); value.Exists() {
		data.Mtu = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bandwidth"); value.Exists() {
		data.Bandwidth = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-statistics-cfg:load-interval"); value.Exists() {
		data.LoadInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-vrf-cfg:vrf"); value.Exists() {
		data.Vrf = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.address"); value.Exists() {
		data.Ipv4Address = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.netmask"); value.Exists() {
		data.Ipv4Netmask = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.unnumbered"); value.Exists() {
		data.Unnumbered = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.type"); value.Exists() {
		data.Ipv4VerifyUnicastSourceReachableViaType = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.allow-self-ping"); value.Exists() {
		data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(value.Bool())
	} else {
		data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ipv4-cfg:verify.unicast.source.reachable-via.allow-default"); value.Exists() {
		data.Ipv4VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(value.Bool())
	} else {
		data.Ipv4VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.access-list-name-1.name"); value.Exists() {
		data.Ipv4AccessGroupIngressAcl1 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.hardware-count"); value.Exists() {
		data.Ipv4AccessGroupIngressHardwareCount = types.BoolValue(true)
	} else {
		data.Ipv4AccessGroupIngressHardwareCount = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.interface-statistics"); value.Exists() {
		data.Ipv4AccessGroupIngressInterfaceStatistics = types.BoolValue(true)
	} else {
		data.Ipv4AccessGroupIngressInterfaceStatistics = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.compress-level"); value.Exists() {
		data.Ipv4AccessGroupIngressCompressLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.access-list-name.name"); value.Exists() {
		data.Ipv4AccessGroupEgressAcl = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.hardware-count"); value.Exists() {
		data.Ipv4AccessGroupEgressHardwareCount = types.BoolValue(true)
	} else {
		data.Ipv4AccessGroupEgressHardwareCount = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.interface-statistics"); value.Exists() {
		data.Ipv4AccessGroupEgressInterfaceStatistics = types.BoolValue(true)
	} else {
		data.Ipv4AccessGroupEgressInterfaceStatistics = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.compress-level"); value.Exists() {
		data.Ipv4AccessGroupEgressCompressLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.type"); value.Exists() {
		data.Ipv6VerifyUnicastSourceReachableViaType = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.allow-self-ping"); value.Exists() {
		data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(value.Bool())
	} else {
		data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ipv6-cfg:verify.unicast.source.reachable-via.allow-default"); value.Exists() {
		data.Ipv6VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(value.Bool())
	} else {
		data.Ipv6VerifyUnicastSourceReachableViaAllowDefault = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.access-list-name-1.name"); value.Exists() {
		data.Ipv6AccessGroupIngressAcl1 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.interface-statistics"); value.Exists() {
		data.Ipv6AccessGroupIngressInterfaceStatistics = types.BoolValue(true)
	} else {
		data.Ipv6AccessGroupIngressInterfaceStatistics = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.ingress.compress-level"); value.Exists() {
		data.Ipv6AccessGroupIngressCompressLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.access-list-name-1.name"); value.Exists() {
		data.Ipv6AccessGroupEgressAcl1 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.interface-statistics"); value.Exists() {
		data.Ipv6AccessGroupEgressInterfaceStatistics = types.BoolValue(true)
	} else {
		data.Ipv6AccessGroupEgressInterfaceStatistics = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-access-group-cfg:access-group.egress.compress-level"); value.Exists() {
		data.Ipv6AccessGroupEgressCompressLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address"); value.Exists() {
		data.Ipv6LinkLocalAddress = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone"); value.Exists() {
		data.Ipv6LinkLocalZone = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig"); value.Exists() {
		data.Ipv6Autoconfig = types.BoolValue(true)
	} else {
		data.Ipv6Autoconfig = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:enable"); value.Exists() {
		data.Ipv6Enable = types.BoolValue(true)
	} else {
		data.Ipv6Enable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"); value.Exists() {
		data.Ipv6Addresses = make([]InterfaceIpv6Addresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceIpv6Addresses{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("prefix-length"); cValue.Exists() {
				item.PrefixLength = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("zone"); cValue.Exists() {
				item.Zone = types.StringValue(cValue.String())
			}
			data.Ipv6Addresses = append(data.Ipv6Addresses, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.minimum-active.links"); value.Exists() {
		data.BundleMinimumActiveLinks = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.maximum-active.links.maximum-number"); value.Exists() {
		data.BundleMaximumActiveLinks = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-cdp-cfg:cdp"); value.Exists() {
		data.Cdp = types.BoolValue(true)
	} else {
		data.Cdp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.shutdown"); value.Exists() {
		data.BundleShutdown = types.BoolValue(true)
	} else {
		data.BundleShutdown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.load-balancing.hash.src-ip"); value.Exists() {
		data.BundleLoadBalancingHashSrcIp = types.BoolValue(true)
	} else {
		data.BundleLoadBalancingHashSrcIp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.load-balancing.hash.dst-ip"); value.Exists() {
		data.BundleLoadBalancingHashDstIp = types.BoolValue(true)
	} else {
		data.BundleLoadBalancingHashDstIp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.id.bundle-id"); value.Exists() {
		data.BundleId = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.id.mode"); value.Exists() {
		data.BundleIdMode = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-bundle-cfg:bundle.port-priority"); value.Exists() {
		data.BundlePortPriority = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitors.ingress-monitor"); value.Exists() {
		data.FlowIpv4IngressMonitors = make([]InterfaceFlowIpv4IngressMonitors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv4IngressMonitors{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv4IngressMonitors = append(data.FlowIpv4IngressMonitors, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.ingress-monitor-samplers.ingress-monitor-sampler"); value.Exists() {
		data.FlowIpv4IngressMonitorSamplers = make([]InterfaceFlowIpv4IngressMonitorSamplers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv4IngressMonitorSamplers{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("sampler-map-name"); cValue.Exists() {
				item.SamplerMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv4IngressMonitorSamplers = append(data.FlowIpv4IngressMonitorSamplers, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitors.egress-monitor"); value.Exists() {
		data.FlowIpv4EgressMonitors = make([]InterfaceFlowIpv4EgressMonitors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv4EgressMonitors{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv4EgressMonitors = append(data.FlowIpv4EgressMonitors, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv4.monitor.egress-monitor-samplers.egress-monitor-sampler"); value.Exists() {
		data.FlowIpv4EgressMonitorSamplers = make([]InterfaceFlowIpv4EgressMonitorSamplers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv4EgressMonitorSamplers{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("sampler-map-name"); cValue.Exists() {
				item.SamplerMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv4EgressMonitorSamplers = append(data.FlowIpv4EgressMonitorSamplers, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitors.ingress-monitor"); value.Exists() {
		data.FlowIpv6IngressMonitors = make([]InterfaceFlowIpv6IngressMonitors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv6IngressMonitors{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv6IngressMonitors = append(data.FlowIpv6IngressMonitors, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.ingress-monitor-samplers.ingress-monitor-sampler"); value.Exists() {
		data.FlowIpv6IngressMonitorSamplers = make([]InterfaceFlowIpv6IngressMonitorSamplers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv6IngressMonitorSamplers{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("sampler-map-name"); cValue.Exists() {
				item.SamplerMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv6IngressMonitorSamplers = append(data.FlowIpv6IngressMonitorSamplers, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitors.egress-monitor"); value.Exists() {
		data.FlowIpv6EgressMonitors = make([]InterfaceFlowIpv6EgressMonitors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv6EgressMonitors{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv6EgressMonitors = append(data.FlowIpv6EgressMonitors, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-flow-cfg:flow.ipv6.monitor.egress-monitor-samplers.egress-monitor-sampler"); value.Exists() {
		data.FlowIpv6EgressMonitorSamplers = make([]InterfaceFlowIpv6EgressMonitorSamplers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceFlowIpv6EgressMonitorSamplers{}
			if cValue := v.Get("monitor-map-name"); cValue.Exists() {
				item.MonitorMapName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("sampler-map-name"); cValue.Exists() {
				item.SamplerMapName = types.StringValue(cValue.String())
			}
			data.FlowIpv6EgressMonitorSamplers = append(data.FlowIpv6EgressMonitorSamplers, item)
			return true
		})
	}
}

func (data *Interface) getDeletedItems(ctx context.Context, state Interface) []string {
	deletedItems := make([]string, 0)
	if !state.L2transport.IsNull() && data.L2transport.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sub-interface-type/l2transport", state.getPath()))
	}
	if !state.PointToPoint.IsNull() && data.PointToPoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sub-interface-type/point-to-point", state.getPath()))
	}
	if !state.Multipoint.IsNull() && data.Multipoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/sub-interface-type/multipoint", state.getPath()))
	}
	if !state.DampeningDecayHalfLifeValue.IsNull() && data.DampeningDecayHalfLifeValue.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/dampening/decay-half-life", state.getPath()))
	}
	if !state.Ipv4PointToPoint.IsNull() && data.Ipv4PointToPoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:point-to-point", state.getPath()))
	}
	for i := range state.ServicePolicyInput {
		keys := [...]string{"service-policy-name"}
		stateKeyValues := [...]string{state.ServicePolicyInput[i].Name.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.ServicePolicyInput[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.ServicePolicyInput {
			found = true
			if state.ServicePolicyInput[i].Name.ValueString() != data.ServicePolicyInput[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy/input%v", state.getPath(), keyString))
		}
	}
	for i := range state.ServicePolicyOutput {
		keys := [...]string{"service-policy-name"}
		stateKeyValues := [...]string{state.ServicePolicyOutput[i].Name.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.ServicePolicyOutput[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.ServicePolicyOutput {
			found = true
			if state.ServicePolicyOutput[i].Name.ValueString() != data.ServicePolicyOutput[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy/output%v", state.getPath(), keyString))
		}
	}
	if !state.BfdModeIetf.IsNull() && data.BfdModeIetf.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bfd/mode/ietf", state.getPath()))
	}
	if !state.EncapsulationDot1qVlanId.IsNull() && data.EncapsulationDot1qVlanId.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:encapsulation/dot1q/vlan-id", state.getPath()))
	}
	if !state.L2transportEncapsulationDot1qVlanId.IsNull() && data.L2transportEncapsulationDot1qVlanId.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation/dot1q/vlan-id", state.getPath()))
	}
	if !state.L2transportEncapsulationDot1qSecondDot1q.IsNull() && data.L2transportEncapsulationDot1qSecondDot1q.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation/dot1q/second-dot1q", state.getPath()))
	}
	if !state.RewriteIngressTagPopOne.IsNull() && data.RewriteIngressTagPopOne.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite/ingress/tag/pop/one", state.getPath()))
	}
	if !state.RewriteIngressTagPopTwo.IsNull() && data.RewriteIngressTagPopTwo.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite/ingress/tag/pop/two", state.getPath()))
	}
	if !state.Shutdown.IsNull() && data.Shutdown.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/shutdown", state.getPath()))
	}
	if !state.Mtu.IsNull() && data.Mtu.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mtu", state.getPath()))
	}
	if !state.Bandwidth.IsNull() && data.Bandwidth.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bandwidth", state.getPath()))
	}
	if !state.Description.IsNull() && data.Description.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/description", state.getPath()))
	}
	if !state.LoadInterval.IsNull() && data.LoadInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-statistics-cfg:load-interval", state.getPath()))
	}
	if !state.Vrf.IsNull() && data.Vrf.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-vrf-cfg:vrf", state.getPath()))
	}
	if !state.Ipv4Address.IsNull() && data.Ipv4Address.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/address", state.getPath()))
	}
	if !state.Ipv4Netmask.IsNull() && data.Ipv4Netmask.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/address", state.getPath()))
	}
	if !state.Unnumbered.IsNull() && data.Unnumbered.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/unnumbered", state.getPath()))
	}
	if !state.Ipv4VerifyUnicastSourceReachableViaType.IsNull() && data.Ipv4VerifyUnicastSourceReachableViaType.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:verify/unicast/source/reachable-via", state.getPath()))
	}
	if !state.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() && data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:verify/unicast/source/reachable-via", state.getPath()))
	}
	if !state.Ipv4VerifyUnicastSourceReachableViaAllowDefault.IsNull() && data.Ipv4VerifyUnicastSourceReachableViaAllowDefault.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:verify/unicast/source/reachable-via", state.getPath()))
	}
	if !state.Ipv4AccessGroupIngressAcl1.IsNull() && data.Ipv4AccessGroupIngressAcl1.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/access-list-name-1", state.getPath()))
	}
	if !state.Ipv4AccessGroupIngressHardwareCount.IsNull() && data.Ipv4AccessGroupIngressHardwareCount.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/hardware-count", state.getPath()))
	}
	if !state.Ipv4AccessGroupIngressInterfaceStatistics.IsNull() && data.Ipv4AccessGroupIngressInterfaceStatistics.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/interface-statistics", state.getPath()))
	}
	if !state.Ipv4AccessGroupIngressCompressLevel.IsNull() && data.Ipv4AccessGroupIngressCompressLevel.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/compress-level", state.getPath()))
	}
	if !state.Ipv4AccessGroupEgressAcl.IsNull() && data.Ipv4AccessGroupEgressAcl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/access-list-name", state.getPath()))
	}
	if !state.Ipv4AccessGroupEgressHardwareCount.IsNull() && data.Ipv4AccessGroupEgressHardwareCount.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/hardware-count", state.getPath()))
	}
	if !state.Ipv4AccessGroupEgressInterfaceStatistics.IsNull() && data.Ipv4AccessGroupEgressInterfaceStatistics.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/interface-statistics", state.getPath()))
	}
	if !state.Ipv4AccessGroupEgressCompressLevel.IsNull() && data.Ipv4AccessGroupEgressCompressLevel.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/compress-level", state.getPath()))
	}
	if !state.Ipv6VerifyUnicastSourceReachableViaType.IsNull() && data.Ipv6VerifyUnicastSourceReachableViaType.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ipv6-cfg:verify/unicast/source/reachable-via", state.getPath()))
	}
	if !state.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() && data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ipv6-cfg:verify/unicast/source/reachable-via", state.getPath()))
	}
	if !state.Ipv6VerifyUnicastSourceReachableViaAllowDefault.IsNull() && data.Ipv6VerifyUnicastSourceReachableViaAllowDefault.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ipv6-cfg:verify/unicast/source/reachable-via", state.getPath()))
	}
	if !state.Ipv6AccessGroupIngressAcl1.IsNull() && data.Ipv6AccessGroupIngressAcl1.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/access-list-name-1", state.getPath()))
	}
	if !state.Ipv6AccessGroupIngressInterfaceStatistics.IsNull() && data.Ipv6AccessGroupIngressInterfaceStatistics.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/interface-statistics", state.getPath()))
	}
	if !state.Ipv6AccessGroupIngressCompressLevel.IsNull() && data.Ipv6AccessGroupIngressCompressLevel.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/compress-level", state.getPath()))
	}
	if !state.Ipv6AccessGroupEgressAcl1.IsNull() && data.Ipv6AccessGroupEgressAcl1.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/access-list-name-1", state.getPath()))
	}
	if !state.Ipv6AccessGroupEgressInterfaceStatistics.IsNull() && data.Ipv6AccessGroupEgressInterfaceStatistics.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/interface-statistics", state.getPath()))
	}
	if !state.Ipv6AccessGroupEgressCompressLevel.IsNull() && data.Ipv6AccessGroupEgressCompressLevel.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/compress-level", state.getPath()))
	}
	if !state.Ipv6LinkLocalAddress.IsNull() && data.Ipv6LinkLocalAddress.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/link-local-address", state.getPath()))
	}
	if !state.Ipv6LinkLocalZone.IsNull() && data.Ipv6LinkLocalZone.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/link-local-address", state.getPath()))
	}
	if !state.Ipv6Autoconfig.IsNull() && data.Ipv6Autoconfig.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/autoconfig", state.getPath()))
	}
	if !state.Ipv6Enable.IsNull() && data.Ipv6Enable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:enable", state.getPath()))
	}
	for i := range state.Ipv6Addresses {
		keys := [...]string{"address"}
		stateKeyValues := [...]string{state.Ipv6Addresses[i].Address.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6Addresses[i].Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6Addresses {
			found = true
			if state.Ipv6Addresses[i].Address.ValueString() != data.Ipv6Addresses[j].Address.ValueString() {
				found = false
			}
			if found {
				if !state.Ipv6Addresses[i].PrefixLength.IsNull() && data.Ipv6Addresses[j].PrefixLength.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/ipv6-address%v/prefix-length", state.getPath(), keyString))
				}
				if !state.Ipv6Addresses[i].Zone.IsNull() && data.Ipv6Addresses[j].Zone.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/ipv6-address%v/zone", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/ipv6-address%v", state.getPath(), keyString))
		}
	}
	if !state.BundleMinimumActiveLinks.IsNull() && data.BundleMinimumActiveLinks.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/minimum-active/links", state.getPath()))
	}
	if !state.BundleMaximumActiveLinks.IsNull() && data.BundleMaximumActiveLinks.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/maximum-active/links/maximum-number", state.getPath()))
	}
	if !state.Cdp.IsNull() && data.Cdp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-cdp-cfg:cdp", state.getPath()))
	}
	if !state.BundleShutdown.IsNull() && data.BundleShutdown.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/shutdown", state.getPath()))
	}
	if !state.BundleLoadBalancingHashSrcIp.IsNull() && data.BundleLoadBalancingHashSrcIp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/load-balancing/hash/src-ip", state.getPath()))
	}
	if !state.BundleLoadBalancingHashDstIp.IsNull() && data.BundleLoadBalancingHashDstIp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/load-balancing/hash/dst-ip", state.getPath()))
	}
	if !state.BundleId.IsNull() && data.BundleId.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/id/bundle-id", state.getPath()))
	}
	if !state.BundleIdMode.IsNull() && data.BundleIdMode.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/id/mode", state.getPath()))
	}
	if !state.BundlePortPriority.IsNull() && data.BundlePortPriority.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/port-priority", state.getPath()))
	}
	for i := range state.FlowIpv4IngressMonitors {
		keys := [...]string{"monitor-map-name"}
		stateKeyValues := [...]string{state.FlowIpv4IngressMonitors[i].MonitorMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FlowIpv4IngressMonitors[i].MonitorMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FlowIpv4IngressMonitors {
			found = true
			if state.FlowIpv4IngressMonitors[i].MonitorMapName.ValueString() != data.FlowIpv4IngressMonitors[j].MonitorMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv4/monitor/ingress-monitors/ingress-monitor%v", state.getPath(), keyString))
		}
	}
	for i := range state.FlowIpv4IngressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		stateKeyValues := [...]string{state.FlowIpv4IngressMonitorSamplers[i].MonitorMapName.ValueString(), state.FlowIpv4IngressMonitorSamplers[i].SamplerMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FlowIpv4IngressMonitorSamplers[i].MonitorMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.FlowIpv4IngressMonitorSamplers[i].SamplerMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FlowIpv4IngressMonitorSamplers {
			found = true
			if state.FlowIpv4IngressMonitorSamplers[i].MonitorMapName.ValueString() != data.FlowIpv4IngressMonitorSamplers[j].MonitorMapName.ValueString() {
				found = false
			}
			if state.FlowIpv4IngressMonitorSamplers[i].SamplerMapName.ValueString() != data.FlowIpv4IngressMonitorSamplers[j].SamplerMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv4/monitor/ingress-monitor-samplers/ingress-monitor-sampler%v", state.getPath(), keyString))
		}
	}
	for i := range state.FlowIpv4EgressMonitors {
		keys := [...]string{"monitor-map-name"}
		stateKeyValues := [...]string{state.FlowIpv4EgressMonitors[i].MonitorMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FlowIpv4EgressMonitors[i].MonitorMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FlowIpv4EgressMonitors {
			found = true
			if state.FlowIpv4EgressMonitors[i].MonitorMapName.ValueString() != data.FlowIpv4EgressMonitors[j].MonitorMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv4/monitor/egress-monitors/egress-monitor%v", state.getPath(), keyString))
		}
	}
	for i := range state.FlowIpv4EgressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		stateKeyValues := [...]string{state.FlowIpv4EgressMonitorSamplers[i].MonitorMapName.ValueString(), state.FlowIpv4EgressMonitorSamplers[i].SamplerMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FlowIpv4EgressMonitorSamplers[i].MonitorMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.FlowIpv4EgressMonitorSamplers[i].SamplerMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FlowIpv4EgressMonitorSamplers {
			found = true
			if state.FlowIpv4EgressMonitorSamplers[i].MonitorMapName.ValueString() != data.FlowIpv4EgressMonitorSamplers[j].MonitorMapName.ValueString() {
				found = false
			}
			if state.FlowIpv4EgressMonitorSamplers[i].SamplerMapName.ValueString() != data.FlowIpv4EgressMonitorSamplers[j].SamplerMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv4/monitor/egress-monitor-samplers/egress-monitor-sampler%v", state.getPath(), keyString))
		}
	}
	for i := range state.FlowIpv6IngressMonitors {
		keys := [...]string{"monitor-map-name"}
		stateKeyValues := [...]string{state.FlowIpv6IngressMonitors[i].MonitorMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FlowIpv6IngressMonitors[i].MonitorMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FlowIpv6IngressMonitors {
			found = true
			if state.FlowIpv6IngressMonitors[i].MonitorMapName.ValueString() != data.FlowIpv6IngressMonitors[j].MonitorMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv6/monitor/ingress-monitors/ingress-monitor%v", state.getPath(), keyString))
		}
	}
	for i := range state.FlowIpv6IngressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		stateKeyValues := [...]string{state.FlowIpv6IngressMonitorSamplers[i].MonitorMapName.ValueString(), state.FlowIpv6IngressMonitorSamplers[i].SamplerMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FlowIpv6IngressMonitorSamplers[i].MonitorMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.FlowIpv6IngressMonitorSamplers[i].SamplerMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FlowIpv6IngressMonitorSamplers {
			found = true
			if state.FlowIpv6IngressMonitorSamplers[i].MonitorMapName.ValueString() != data.FlowIpv6IngressMonitorSamplers[j].MonitorMapName.ValueString() {
				found = false
			}
			if state.FlowIpv6IngressMonitorSamplers[i].SamplerMapName.ValueString() != data.FlowIpv6IngressMonitorSamplers[j].SamplerMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv6/monitor/ingress-monitor-samplers/ingress-monitor-sampler%v", state.getPath(), keyString))
		}
	}
	for i := range state.FlowIpv6EgressMonitors {
		keys := [...]string{"monitor-map-name"}
		stateKeyValues := [...]string{state.FlowIpv6EgressMonitors[i].MonitorMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FlowIpv6EgressMonitors[i].MonitorMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FlowIpv6EgressMonitors {
			found = true
			if state.FlowIpv6EgressMonitors[i].MonitorMapName.ValueString() != data.FlowIpv6EgressMonitors[j].MonitorMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv6/monitor/egress-monitors/egress-monitor%v", state.getPath(), keyString))
		}
	}
	for i := range state.FlowIpv6EgressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		stateKeyValues := [...]string{state.FlowIpv6EgressMonitorSamplers[i].MonitorMapName.ValueString(), state.FlowIpv6EgressMonitorSamplers[i].SamplerMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FlowIpv6EgressMonitorSamplers[i].MonitorMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.FlowIpv6EgressMonitorSamplers[i].SamplerMapName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FlowIpv6EgressMonitorSamplers {
			found = true
			if state.FlowIpv6EgressMonitorSamplers[i].MonitorMapName.ValueString() != data.FlowIpv6EgressMonitorSamplers[j].MonitorMapName.ValueString() {
				found = false
			}
			if state.FlowIpv6EgressMonitorSamplers[i].SamplerMapName.ValueString() != data.FlowIpv6EgressMonitorSamplers[j].SamplerMapName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv6/monitor/egress-monitor-samplers/egress-monitor-sampler%v", state.getPath(), keyString))
		}
	}
	return deletedItems
}

func (data *Interface) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.L2transport.IsNull() && !data.L2transport.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/sub-interface-type/l2transport", data.getPath()))
	}
	if !data.PointToPoint.IsNull() && !data.PointToPoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/sub-interface-type/point-to-point", data.getPath()))
	}
	if !data.Multipoint.IsNull() && !data.Multipoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/sub-interface-type/multipoint", data.getPath()))
	}
	if !data.Ipv4PointToPoint.IsNull() && !data.Ipv4PointToPoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:point-to-point", data.getPath()))
	}
	for i := range data.ServicePolicyInput {
		keys := [...]string{"service-policy-name"}
		keyValues := [...]string{data.ServicePolicyInput[i].Name.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.ServicePolicyOutput {
		keys := [...]string{"service-policy-name"}
		keyValues := [...]string{data.ServicePolicyOutput[i].Name.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.BfdModeIetf.IsNull() && !data.BfdModeIetf.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bfd/mode/ietf", data.getPath()))
	}
	if !data.RewriteIngressTagPopOne.IsNull() && !data.RewriteIngressTagPopOne.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite/ingress/tag/pop/one", data.getPath()))
	}
	if !data.RewriteIngressTagPopTwo.IsNull() && !data.RewriteIngressTagPopTwo.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite/ingress/tag/pop/two", data.getPath()))
	}
	if !data.Shutdown.IsNull() && !data.Shutdown.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/shutdown", data.getPath()))
	}
	if !data.Ipv4AccessGroupIngressHardwareCount.IsNull() && !data.Ipv4AccessGroupIngressHardwareCount.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/hardware-count", data.getPath()))
	}
	if !data.Ipv4AccessGroupIngressInterfaceStatistics.IsNull() && !data.Ipv4AccessGroupIngressInterfaceStatistics.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/interface-statistics", data.getPath()))
	}
	if !data.Ipv4AccessGroupEgressHardwareCount.IsNull() && !data.Ipv4AccessGroupEgressHardwareCount.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/hardware-count", data.getPath()))
	}
	if !data.Ipv4AccessGroupEgressInterfaceStatistics.IsNull() && !data.Ipv4AccessGroupEgressInterfaceStatistics.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/interface-statistics", data.getPath()))
	}
	if !data.Ipv6AccessGroupIngressInterfaceStatistics.IsNull() && !data.Ipv6AccessGroupIngressInterfaceStatistics.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/interface-statistics", data.getPath()))
	}
	if !data.Ipv6AccessGroupEgressInterfaceStatistics.IsNull() && !data.Ipv6AccessGroupEgressInterfaceStatistics.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/interface-statistics", data.getPath()))
	}
	if !data.Ipv6Autoconfig.IsNull() && !data.Ipv6Autoconfig.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/autoconfig", data.getPath()))
	}
	if !data.Ipv6Enable.IsNull() && !data.Ipv6Enable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:enable", data.getPath()))
	}
	for i := range data.Ipv6Addresses {
		keys := [...]string{"address"}
		keyValues := [...]string{data.Ipv6Addresses[i].Address.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.Cdp.IsNull() && !data.Cdp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XR-um-cdp-cfg:cdp", data.getPath()))
	}
	if !data.BundleShutdown.IsNull() && !data.BundleShutdown.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/shutdown", data.getPath()))
	}
	if !data.BundleLoadBalancingHashSrcIp.IsNull() && !data.BundleLoadBalancingHashSrcIp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/load-balancing/hash/src-ip", data.getPath()))
	}
	if !data.BundleLoadBalancingHashDstIp.IsNull() && !data.BundleLoadBalancingHashDstIp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/load-balancing/hash/dst-ip", data.getPath()))
	}
	for i := range data.FlowIpv4IngressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv4IngressMonitors[i].MonitorMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.FlowIpv4IngressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv4IngressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv4IngressMonitorSamplers[i].SamplerMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.FlowIpv4EgressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv4EgressMonitors[i].MonitorMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.FlowIpv4EgressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv4EgressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv4EgressMonitorSamplers[i].SamplerMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.FlowIpv6IngressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv6IngressMonitors[i].MonitorMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.FlowIpv6IngressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv6IngressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv6IngressMonitorSamplers[i].SamplerMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.FlowIpv6EgressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv6EgressMonitors[i].MonitorMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.FlowIpv6EgressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv6EgressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv6EgressMonitorSamplers[i].SamplerMapName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	return emptyLeafsDelete
}

func (data *Interface) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.L2transport.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sub-interface-type/l2transport", data.getPath()))
	}
	if !data.PointToPoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sub-interface-type/point-to-point", data.getPath()))
	}
	if !data.Multipoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/sub-interface-type/multipoint", data.getPath()))
	}
	if !data.DampeningDecayHalfLifeValue.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/dampening/decay-half-life", data.getPath()))
	}
	if !data.Ipv4PointToPoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:point-to-point", data.getPath()))
	}
	for i := range data.ServicePolicyInput {
		keys := [...]string{"service-policy-name"}
		keyValues := [...]string{data.ServicePolicyInput[i].Name.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy/input%v", data.getPath(), keyString))
	}
	for i := range data.ServicePolicyOutput {
		keys := [...]string{"service-policy-name"}
		keyValues := [...]string{data.ServicePolicyOutput[i].Name.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-service-policy-qos-cfg:service-policy/output%v", data.getPath(), keyString))
	}
	if !data.BfdModeIetf.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bfd/mode/ietf", data.getPath()))
	}
	if !data.EncapsulationDot1qVlanId.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:encapsulation/dot1q/vlan-id", data.getPath()))
	}
	if !data.L2transportEncapsulationDot1qVlanId.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation/dot1q/vlan-id", data.getPath()))
	}
	if !data.L2transportEncapsulationDot1qSecondDot1q.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:l2transport-encapsulation/dot1q/second-dot1q", data.getPath()))
	}
	if !data.RewriteIngressTagPopOne.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite/ingress/tag/pop/one", data.getPath()))
	}
	if !data.RewriteIngressTagPopTwo.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-l2-ethernet-cfg:rewrite/ingress/tag/pop/two", data.getPath()))
	}
	if !data.Shutdown.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/shutdown", data.getPath()))
	}
	if !data.Mtu.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mtu", data.getPath()))
	}
	if !data.Bandwidth.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bandwidth", data.getPath()))
	}
	if !data.Description.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/description", data.getPath()))
	}
	if !data.LoadInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-statistics-cfg:load-interval", data.getPath()))
	}
	if !data.Vrf.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-vrf-cfg:vrf", data.getPath()))
	}
	if !data.Ipv4Address.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/address", data.getPath()))
	}
	if !data.Ipv4Netmask.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/address", data.getPath()))
	}
	if !data.Unnumbered.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/unnumbered", data.getPath()))
	}
	if !data.Ipv4VerifyUnicastSourceReachableViaType.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:verify/unicast/source/reachable-via", data.getPath()))
	}
	if !data.Ipv4VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:verify/unicast/source/reachable-via", data.getPath()))
	}
	if !data.Ipv4VerifyUnicastSourceReachableViaAllowDefault.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-ipv4-cfg:verify/unicast/source/reachable-via", data.getPath()))
	}
	if !data.Ipv4AccessGroupIngressAcl1.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/access-list-name-1", data.getPath()))
	}
	if !data.Ipv4AccessGroupIngressHardwareCount.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/hardware-count", data.getPath()))
	}
	if !data.Ipv4AccessGroupIngressInterfaceStatistics.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/interface-statistics", data.getPath()))
	}
	if !data.Ipv4AccessGroupIngressCompressLevel.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/compress-level", data.getPath()))
	}
	if !data.Ipv4AccessGroupEgressAcl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/access-list-name", data.getPath()))
	}
	if !data.Ipv4AccessGroupEgressHardwareCount.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/hardware-count", data.getPath()))
	}
	if !data.Ipv4AccessGroupEgressInterfaceStatistics.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/interface-statistics", data.getPath()))
	}
	if !data.Ipv4AccessGroupEgressCompressLevel.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv4/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/compress-level", data.getPath()))
	}
	if !data.Ipv6VerifyUnicastSourceReachableViaType.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ipv6-cfg:verify/unicast/source/reachable-via", data.getPath()))
	}
	if !data.Ipv6VerifyUnicastSourceReachableViaAllowSelfPing.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ipv6-cfg:verify/unicast/source/reachable-via", data.getPath()))
	}
	if !data.Ipv6VerifyUnicastSourceReachableViaAllowDefault.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ipv6-cfg:verify/unicast/source/reachable-via", data.getPath()))
	}
	if !data.Ipv6AccessGroupIngressAcl1.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/access-list-name-1", data.getPath()))
	}
	if !data.Ipv6AccessGroupIngressInterfaceStatistics.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/interface-statistics", data.getPath()))
	}
	if !data.Ipv6AccessGroupIngressCompressLevel.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/ingress/compress-level", data.getPath()))
	}
	if !data.Ipv6AccessGroupEgressAcl1.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/access-list-name-1", data.getPath()))
	}
	if !data.Ipv6AccessGroupEgressInterfaceStatistics.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/interface-statistics", data.getPath()))
	}
	if !data.Ipv6AccessGroupEgressCompressLevel.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-access-group-cfg:access-group/egress/compress-level", data.getPath()))
	}
	if !data.Ipv6LinkLocalAddress.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/link-local-address", data.getPath()))
	}
	if !data.Ipv6LinkLocalZone.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/link-local-address", data.getPath()))
	}
	if !data.Ipv6Autoconfig.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/autoconfig", data.getPath()))
	}
	if !data.Ipv6Enable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:enable", data.getPath()))
	}
	for i := range data.Ipv6Addresses {
		keys := [...]string{"address"}
		keyValues := [...]string{data.Ipv6Addresses[i].Address.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/ipv6-address%v", data.getPath(), keyString))
	}
	if !data.BundleMinimumActiveLinks.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/minimum-active/links", data.getPath()))
	}
	if !data.BundleMaximumActiveLinks.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/maximum-active/links/maximum-number", data.getPath()))
	}
	if !data.Cdp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-cdp-cfg:cdp", data.getPath()))
	}
	if !data.BundleShutdown.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/shutdown", data.getPath()))
	}
	if !data.BundleLoadBalancingHashSrcIp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/load-balancing/hash/src-ip", data.getPath()))
	}
	if !data.BundleLoadBalancingHashDstIp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/load-balancing/hash/dst-ip", data.getPath()))
	}
	if !data.BundleId.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/id/bundle-id", data.getPath()))
	}
	if !data.BundleIdMode.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/id/mode", data.getPath()))
	}
	if !data.BundlePortPriority.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-if-bundle-cfg:bundle/port-priority", data.getPath()))
	}
	for i := range data.FlowIpv4IngressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv4IngressMonitors[i].MonitorMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv4/monitor/ingress-monitors/ingress-monitor%v", data.getPath(), keyString))
	}
	for i := range data.FlowIpv4IngressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv4IngressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv4IngressMonitorSamplers[i].SamplerMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv4/monitor/ingress-monitor-samplers/ingress-monitor-sampler%v", data.getPath(), keyString))
	}
	for i := range data.FlowIpv4EgressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv4EgressMonitors[i].MonitorMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv4/monitor/egress-monitors/egress-monitor%v", data.getPath(), keyString))
	}
	for i := range data.FlowIpv4EgressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv4EgressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv4EgressMonitorSamplers[i].SamplerMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv4/monitor/egress-monitor-samplers/egress-monitor-sampler%v", data.getPath(), keyString))
	}
	for i := range data.FlowIpv6IngressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv6IngressMonitors[i].MonitorMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv6/monitor/ingress-monitors/ingress-monitor%v", data.getPath(), keyString))
	}
	for i := range data.FlowIpv6IngressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv6IngressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv6IngressMonitorSamplers[i].SamplerMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv6/monitor/ingress-monitor-samplers/ingress-monitor-sampler%v", data.getPath(), keyString))
	}
	for i := range data.FlowIpv6EgressMonitors {
		keys := [...]string{"monitor-map-name"}
		keyValues := [...]string{data.FlowIpv6EgressMonitors[i].MonitorMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv6/monitor/egress-monitors/egress-monitor%v", data.getPath(), keyString))
	}
	for i := range data.FlowIpv6EgressMonitorSamplers {
		keys := [...]string{"monitor-map-name", "sampler-map-name"}
		keyValues := [...]string{data.FlowIpv6EgressMonitorSamplers[i].MonitorMapName.ValueString(), data.FlowIpv6EgressMonitorSamplers[i].SamplerMapName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-flow-cfg:flow/ipv6/monitor/egress-monitor-samplers/egress-monitor-sampler%v", data.getPath(), keyString))
	}
	return deletePaths
}
