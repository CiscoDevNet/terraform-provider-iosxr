// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type Interface struct {
	Device               types.String             `tfsdk:"device"`
	Id                   types.String             `tfsdk:"id"`
	InterfaceName        types.String             `tfsdk:"interface_name"`
	L2transport          types.Bool               `tfsdk:"l2transport"`
	PointToPoint         types.Bool               `tfsdk:"point_to_point"`
	Multipoint           types.Bool               `tfsdk:"multipoint"`
	Shutdown             types.Bool               `tfsdk:"shutdown"`
	Mtu                  types.Int64              `tfsdk:"mtu"`
	Bandwidth            types.Int64              `tfsdk:"bandwidth"`
	Description          types.String             `tfsdk:"description"`
	Vrf                  types.String             `tfsdk:"vrf"`
	Ipv4Address          types.String             `tfsdk:"ipv4_address"`
	Ipv4Netmask          types.String             `tfsdk:"ipv4_netmask"`
	Unnumbered           types.String             `tfsdk:"unnumbered"`
	Ipv6LinkLocalAddress types.String             `tfsdk:"ipv6_link_local_address"`
	Ipv6LinkLocalZone    types.String             `tfsdk:"ipv6_link_local_zone"`
	Ipv6Autoconfig       types.Bool               `tfsdk:"ipv6_autoconfig"`
	Ipv6Enable           types.Bool               `tfsdk:"ipv6_enable"`
	Ipv6Addresses        []InterfaceIpv6Addresses `tfsdk:"ipv6_addresses"`
}
type InterfaceIpv6Addresses struct {
	Address      types.String `tfsdk:"address"`
	PrefixLength types.Int64  `tfsdk:"prefix_length"`
	Zone         types.String `tfsdk:"zone"`
}

func (data Interface) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-interface-cfg:/interfaces/interface[interface-name=%s]", data.InterfaceName.ValueString())
}

func (data Interface) toBody() string {
	body := "{}"
	if !data.L2transport.IsNull() && !data.L2transport.IsUnknown() {
		if data.L2transport.ValueBool() {
			body, _ = sjson.Set(body, "sub-interface-type.l2transport", map[string]string{})
		}
	}
	if !data.PointToPoint.IsNull() && !data.PointToPoint.IsUnknown() {
		if data.PointToPoint.ValueBool() {
			body, _ = sjson.Set(body, "sub-interface-type.point-to-point", map[string]string{})
		}
	}
	if !data.Multipoint.IsNull() && !data.Multipoint.IsUnknown() {
		if data.Multipoint.ValueBool() {
			body, _ = sjson.Set(body, "sub-interface-type.multipoint", map[string]string{})
		}
	}
	if !data.Shutdown.IsNull() && !data.Shutdown.IsUnknown() {
		if data.Shutdown.ValueBool() {
			body, _ = sjson.Set(body, "shutdown", map[string]string{})
		}
	}
	if !data.Mtu.IsNull() && !data.Mtu.IsUnknown() {
		body, _ = sjson.Set(body, "mtu", strconv.FormatInt(data.Mtu.ValueInt64(), 10))
	}
	if !data.Bandwidth.IsNull() && !data.Bandwidth.IsUnknown() {
		body, _ = sjson.Set(body, "bandwidth", strconv.FormatInt(data.Bandwidth.ValueInt64(), 10))
	}
	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.Vrf.IsNull() && !data.Vrf.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-vrf-cfg:vrf", data.Vrf.ValueString())
	}
	if !data.Ipv4Address.IsNull() && !data.Ipv4Address.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.address", data.Ipv4Address.ValueString())
	}
	if !data.Ipv4Netmask.IsNull() && !data.Ipv4Netmask.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.netmask", data.Ipv4Netmask.ValueString())
	}
	if !data.Unnumbered.IsNull() && !data.Unnumbered.IsUnknown() {
		body, _ = sjson.Set(body, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.unnumbered", data.Unnumbered.ValueString())
	}
	if !data.Ipv6LinkLocalAddress.IsNull() && !data.Ipv6LinkLocalAddress.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address", data.Ipv6LinkLocalAddress.ValueString())
	}
	if !data.Ipv6LinkLocalZone.IsNull() && !data.Ipv6LinkLocalZone.IsUnknown() {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone", data.Ipv6LinkLocalZone.ValueString())
	}
	if !data.Ipv6Autoconfig.IsNull() && !data.Ipv6Autoconfig.IsUnknown() {
		if data.Ipv6Autoconfig.ValueBool() {
			body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig", map[string]string{})
		}
	}
	if !data.Ipv6Enable.IsNull() && !data.Ipv6Enable.IsUnknown() {
		if data.Ipv6Enable.ValueBool() {
			body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:enable", map[string]string{})
		}
	}
	if len(data.Ipv6Addresses) > 0 {
		body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address", []interface{}{})
		for index, item := range data.Ipv6Addresses {
			if !item.Address.IsNull() && !item.Address.IsUnknown() {
				body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"+"."+strconv.Itoa(index)+"."+"address", item.Address.ValueString())
			}
			if !item.PrefixLength.IsNull() && !item.PrefixLength.IsUnknown() {
				body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"+"."+strconv.Itoa(index)+"."+"prefix-length", strconv.FormatInt(item.PrefixLength.ValueInt64(), 10))
			}
			if !item.Zone.IsNull() && !item.Zone.IsUnknown() {
				body, _ = sjson.Set(body, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"+"."+strconv.Itoa(index)+"."+"zone", item.Zone.ValueString())
			}
		}
	}
	return body
}

func (data *Interface) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "sub-interface-type.l2transport"); value.Exists() {
		data.L2transport = types.BoolValue(true)
	} else {
		data.L2transport = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sub-interface-type.point-to-point"); value.Exists() {
		data.PointToPoint = types.BoolValue(true)
	} else {
		data.PointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sub-interface-type.multipoint"); value.Exists() {
		data.Multipoint = types.BoolValue(true)
	} else {
		data.Multipoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "shutdown"); value.Exists() {
		data.Shutdown = types.BoolValue(true)
	} else {
		data.Shutdown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mtu"); value.Exists() {
		data.Mtu = types.Int64Value(value.Int())
	} else {
		data.Mtu = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "bandwidth"); value.Exists() {
		data.Bandwidth = types.Int64Value(value.Int())
	} else {
		data.Bandwidth = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-vrf-cfg:vrf"); value.Exists() {
		data.Vrf = types.StringValue(value.String())
	} else {
		data.Vrf = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.address"); value.Exists() {
		data.Ipv4Address = types.StringValue(value.String())
	} else {
		data.Ipv4Address = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.netmask"); value.Exists() {
		data.Ipv4Netmask = types.StringValue(value.String())
	} else {
		data.Ipv4Netmask = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.unnumbered"); value.Exists() {
		data.Unnumbered = types.StringValue(value.String())
	} else {
		data.Unnumbered = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address"); value.Exists() {
		data.Ipv6LinkLocalAddress = types.StringValue(value.String())
	} else {
		data.Ipv6LinkLocalAddress = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone"); value.Exists() {
		data.Ipv6LinkLocalZone = types.StringValue(value.String())
	} else {
		data.Ipv6LinkLocalZone = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig"); value.Exists() {
		data.Ipv6Autoconfig = types.BoolValue(true)
	} else {
		data.Ipv6Autoconfig = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:enable"); value.Exists() {
		data.Ipv6Enable = types.BoolValue(true)
	} else {
		data.Ipv6Enable = types.BoolValue(false)
	}
	for i := range data.Ipv6Addresses {
		keys := [...]string{"address"}
		keyValues := [...]string{data.Ipv6Addresses[i].Address.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("address"); value.Exists() {
			data.Ipv6Addresses[i].Address = types.StringValue(value.String())
		} else {
			data.Ipv6Addresses[i].Address = types.StringNull()
		}
		if value := r.Get("prefix-length"); value.Exists() {
			data.Ipv6Addresses[i].PrefixLength = types.Int64Value(value.Int())
		} else {
			data.Ipv6Addresses[i].PrefixLength = types.Int64Null()
		}
		if value := r.Get("zone"); value.Exists() {
			data.Ipv6Addresses[i].Zone = types.StringValue(value.String())
		} else {
			data.Ipv6Addresses[i].Zone = types.StringNull()
		}
	}
}

func (data *Interface) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "sub-interface-type.l2transport"); value.Exists() {
		data.L2transport = types.BoolValue(true)
	} else {
		data.L2transport = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sub-interface-type.point-to-point"); value.Exists() {
		data.PointToPoint = types.BoolValue(true)
	} else {
		data.PointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "sub-interface-type.multipoint"); value.Exists() {
		data.Multipoint = types.BoolValue(true)
	} else {
		data.Multipoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "shutdown"); value.Exists() {
		data.Shutdown = types.BoolValue(true)
	} else {
		data.Shutdown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mtu"); value.Exists() {
		data.Mtu = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bandwidth"); value.Exists() {
		data.Bandwidth = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-vrf-cfg:vrf"); value.Exists() {
		data.Vrf = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.address"); value.Exists() {
		data.Ipv4Address = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.address.netmask"); value.Exists() {
		data.Ipv4Netmask = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv4.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.unnumbered"); value.Exists() {
		data.Unnumbered = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address"); value.Exists() {
		data.Ipv6LinkLocalAddress = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone"); value.Exists() {
		data.Ipv6LinkLocalZone = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig"); value.Exists() {
		data.Ipv6Autoconfig = types.BoolValue(true)
	} else {
		data.Ipv6Autoconfig = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:enable"); value.Exists() {
		data.Ipv6Enable = types.BoolValue(true)
	} else {
		data.Ipv6Enable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "ipv6.Cisco-IOS-XR-um-if-ip-address-cfg:addresses.ipv6-address"); value.Exists() {
		data.Ipv6Addresses = make([]InterfaceIpv6Addresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceIpv6Addresses{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("prefix-length"); cValue.Exists() {
				item.PrefixLength = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("zone"); cValue.Exists() {
				item.Zone = types.StringValue(cValue.String())
			}
			data.Ipv6Addresses = append(data.Ipv6Addresses, item)
			return true
		})
	}
}

func (data *Interface) fromPlan(plan Interface) {
	data.Device = plan.Device
	data.InterfaceName = types.StringValue(plan.InterfaceName.ValueString())
}

func (data *Interface) setUnknownValues() {
	if data.Device.IsUnknown() {
		data.Device = types.StringNull()
	}
	if data.Id.IsUnknown() {
		data.Id = types.StringNull()
	}
	if data.InterfaceName.IsUnknown() {
		data.InterfaceName = types.StringNull()
	}
	if data.L2transport.IsUnknown() {
		data.L2transport = types.BoolNull()
	}
	if data.PointToPoint.IsUnknown() {
		data.PointToPoint = types.BoolNull()
	}
	if data.Multipoint.IsUnknown() {
		data.Multipoint = types.BoolNull()
	}
	if data.Shutdown.IsUnknown() {
		data.Shutdown = types.BoolNull()
	}
	if data.Mtu.IsUnknown() {
		data.Mtu = types.Int64Null()
	}
	if data.Bandwidth.IsUnknown() {
		data.Bandwidth = types.Int64Null()
	}
	if data.Description.IsUnknown() {
		data.Description = types.StringNull()
	}
	if data.Vrf.IsUnknown() {
		data.Vrf = types.StringNull()
	}
	if data.Ipv4Address.IsUnknown() {
		data.Ipv4Address = types.StringNull()
	}
	if data.Ipv4Netmask.IsUnknown() {
		data.Ipv4Netmask = types.StringNull()
	}
	if data.Unnumbered.IsUnknown() {
		data.Unnumbered = types.StringNull()
	}
	if data.Ipv6LinkLocalAddress.IsUnknown() {
		data.Ipv6LinkLocalAddress = types.StringNull()
	}
	if data.Ipv6LinkLocalZone.IsUnknown() {
		data.Ipv6LinkLocalZone = types.StringNull()
	}
	if data.Ipv6Autoconfig.IsUnknown() {
		data.Ipv6Autoconfig = types.BoolNull()
	}
	if data.Ipv6Enable.IsUnknown() {
		data.Ipv6Enable = types.BoolNull()
	}
	for i := range data.Ipv6Addresses {
		if data.Ipv6Addresses[i].Address.IsUnknown() {
			data.Ipv6Addresses[i].Address = types.StringNull()
		}
		if data.Ipv6Addresses[i].PrefixLength.IsUnknown() {
			data.Ipv6Addresses[i].PrefixLength = types.Int64Null()
		}
		if data.Ipv6Addresses[i].Zone.IsUnknown() {
			data.Ipv6Addresses[i].Zone = types.StringNull()
		}
	}
}

func (data *Interface) getDeletedListItems(state Interface) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Ipv6Addresses {
		keys := [...]string{"address"}
		stateKeyValues := [...]string{state.Ipv6Addresses[i].Address.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6Addresses[i].Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6Addresses {
			found = true
			if state.Ipv6Addresses[i].Address.ValueString() != data.Ipv6Addresses[j].Address.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/ipv6-address%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *Interface) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
