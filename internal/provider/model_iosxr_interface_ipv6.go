// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/tidwall/sjson"

	"github.com/tidwall/gjson"
)

type InterfaceIPv6 struct {
	Device                           types.String `tfsdk:"device"`
	Id                               types.String `tfsdk:"id"`
	InterfaceName                    types.String `tfsdk:"interface_name"`
	AddressesLinkLocalAddressAddress types.String `tfsdk:"link_local_address"`
	AddressesLinkLocalAddressZone    types.String `tfsdk:"link_local_zone"`
	AddressesAutoconfig              types.Bool   `tfsdk:"autoconfig"`
	Enable                           types.Bool   `tfsdk:"enable"`
}

func (data InterfaceIPv6) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-interface-cfg:/interfaces/interface[interface-name=%s]/ipv6", data.InterfaceName.Value)
}

func (data InterfaceIPv6) toBody() string {
	body := "{}"

	if !data.AddressesLinkLocalAddressAddress.Null && !data.AddressesLinkLocalAddressAddress.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address", data.AddressesLinkLocalAddressAddress.Value)
	}
	if !data.AddressesLinkLocalAddressZone.Null && !data.AddressesLinkLocalAddressZone.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone", data.AddressesLinkLocalAddressZone.Value)
	}
	if !data.AddressesAutoconfig.Null && !data.AddressesAutoconfig.Unknown {
		if data.AddressesAutoconfig.Value {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig", map[string]string{})
		}
	}
	if !data.Enable.Null && !data.Enable.Unknown {
		if data.Enable.Value {
			body, _ = sjson.Set(body, "Cisco-IOS-XR-um-if-ip-address-cfg:enable", map[string]string{})
		}
	}

	return body
}

func (data *InterfaceIPv6) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.address"); value.Exists() {
		data.AddressesLinkLocalAddressAddress.Value = value.String()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-ip-address-cfg:addresses.link-local-address.zone"); value.Exists() {
		data.AddressesLinkLocalAddressZone.Value = value.String()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-ip-address-cfg:addresses.autoconfig"); value.Exists() {
		data.AddressesAutoconfig.Value = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-if-ip-address-cfg:enable"); value.Exists() {
		data.Enable.Value = true
	}
}

func (data *InterfaceIPv6) fromPlan(plan InterfaceIPv6) {
	data.Device = plan.Device
	data.InterfaceName.Value = plan.InterfaceName.Value
}
