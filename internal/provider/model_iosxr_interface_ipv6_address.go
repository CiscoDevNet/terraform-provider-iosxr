// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/tidwall/sjson"

	"github.com/tidwall/gjson"
)

type InterfaceIPv6Address struct {
	Device        types.String `tfsdk:"device"`
	Id            types.String `tfsdk:"id"`
	InterfaceName types.String `tfsdk:"interface_name"`
	Address       types.String `tfsdk:"address"`
	PrefixLength  types.Int64  `tfsdk:"prefix_length"`
	Zone          types.String `tfsdk:"zone"`
}

func (data InterfaceIPv6Address) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-interface-cfg:/interfaces/interface[interface-name=%s]/ipv6/Cisco-IOS-XR-um-if-ip-address-cfg:addresses/Cisco-IOS-XR-um-if-ip-address-cfg:ipv6-address[address=%s]", data.InterfaceName.Value, data.Address.Value)
}

func (data InterfaceIPv6Address) toBody() string {
	body := "{}"

	if !data.PrefixLength.Null && !data.PrefixLength.Unknown {
		body, _ = sjson.Set(body, "prefix-length", strconv.FormatInt(data.PrefixLength.Value, 10))
	}
	if !data.Zone.Null && !data.Zone.Unknown {
		body, _ = sjson.Set(body, "zone", data.Zone.Value)
	}

	return body
}

func (data *InterfaceIPv6Address) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "prefix-length"); value.Exists() {
		data.PrefixLength.Value = value.Int()
	}
	if value := gjson.GetBytes(res, "zone"); value.Exists() {
		data.Zone.Value = value.String()
	}
}

func (data *InterfaceIPv6Address) fromPlan(plan InterfaceIPv6Address) {
	data.Device = plan.Device
	data.InterfaceName.Value = plan.InterfaceName.Value
	data.Address.Value = plan.Address.Value
}
