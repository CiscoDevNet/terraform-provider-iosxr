// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type IPv6AccessListOptions struct {
	Device             types.String `tfsdk:"device"`
	Id                 types.String `tfsdk:"id"`
	DeleteMode         types.String `tfsdk:"delete_mode"`
	LogUpdateThreshold types.Int64  `tfsdk:"log_update_threshold"`
	LogUpdateRate      types.Int64  `tfsdk:"log_update_rate"`
	IcmpOff            types.Bool   `tfsdk:"icmp_off"`
}

type IPv6AccessListOptionsData struct {
	Device             types.String `tfsdk:"device"`
	Id                 types.String `tfsdk:"id"`
	LogUpdateThreshold types.Int64  `tfsdk:"log_update_threshold"`
	LogUpdateRate      types.Int64  `tfsdk:"log_update_rate"`
	IcmpOff            types.Bool   `tfsdk:"icmp_off"`
}

func (data IPv6AccessListOptions) getPath() string {
	return "Cisco-IOS-XR-um-ipv6-access-list-cfg:/ipv6/access-list-options"
}

func (data IPv6AccessListOptionsData) getPath() string {
	return "Cisco-IOS-XR-um-ipv6-access-list-cfg:/ipv6/access-list-options"
}

func (data IPv6AccessListOptions) toBody(ctx context.Context) string {
	body := "{}"
	if !data.LogUpdateThreshold.IsNull() && !data.LogUpdateThreshold.IsUnknown() {
		body, _ = sjson.Set(body, "log-update.threshold", strconv.FormatInt(data.LogUpdateThreshold.ValueInt64(), 10))
	}
	if !data.LogUpdateRate.IsNull() && !data.LogUpdateRate.IsUnknown() {
		body, _ = sjson.Set(body, "log-update.rate", strconv.FormatInt(data.LogUpdateRate.ValueInt64(), 10))
	}
	if !data.IcmpOff.IsNull() && !data.IcmpOff.IsUnknown() {
		if data.IcmpOff.ValueBool() {
			body, _ = sjson.Set(body, "icmp-off", map[string]string{})
		}
	}
	return body
}

func (data *IPv6AccessListOptions) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "log-update.threshold"); value.Exists() && !data.LogUpdateThreshold.IsNull() {
		data.LogUpdateThreshold = types.Int64Value(value.Int())
	} else {
		data.LogUpdateThreshold = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "log-update.rate"); value.Exists() && !data.LogUpdateRate.IsNull() {
		data.LogUpdateRate = types.Int64Value(value.Int())
	} else {
		data.LogUpdateRate = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "icmp-off"); !data.IcmpOff.IsNull() {
		if value.Exists() {
			data.IcmpOff = types.BoolValue(true)
		} else {
			data.IcmpOff = types.BoolValue(false)
		}
	} else {
		data.IcmpOff = types.BoolNull()
	}
}

func (data *IPv6AccessListOptions) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "log-update.threshold"); value.Exists() {
		data.LogUpdateThreshold = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "log-update.rate"); value.Exists() {
		data.LogUpdateRate = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "icmp-off"); value.Exists() {
		data.IcmpOff = types.BoolValue(true)
	} else {
		data.IcmpOff = types.BoolValue(false)
	}
}

func (data *IPv6AccessListOptionsData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "log-update.threshold"); value.Exists() {
		data.LogUpdateThreshold = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "log-update.rate"); value.Exists() {
		data.LogUpdateRate = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "icmp-off"); value.Exists() {
		data.IcmpOff = types.BoolValue(true)
	} else {
		data.IcmpOff = types.BoolValue(false)
	}
}

func (data *IPv6AccessListOptions) getDeletedItems(ctx context.Context, state IPv6AccessListOptions) []string {
	deletedItems := make([]string, 0)
	if !state.LogUpdateThreshold.IsNull() && data.LogUpdateThreshold.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/log-update/threshold", state.getPath()))
	}
	if !state.LogUpdateRate.IsNull() && data.LogUpdateRate.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/log-update/rate", state.getPath()))
	}
	if !state.IcmpOff.IsNull() && data.IcmpOff.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/icmp-off", state.getPath()))
	}
	return deletedItems
}

func (data *IPv6AccessListOptions) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.IcmpOff.IsNull() && !data.IcmpOff.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/icmp-off", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *IPv6AccessListOptions) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.LogUpdateThreshold.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/log-update/threshold", data.getPath()))
	}
	if !data.LogUpdateRate.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/log-update/rate", data.getPath()))
	}
	if !data.IcmpOff.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/icmp-off", data.getPath()))
	}
	return deletePaths
}
