// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
)

type L2VPNXconnectGroupP2PInterface struct {
	Device          types.String `tfsdk:"device"`
	Id              types.String `tfsdk:"id"`
	GroupName       types.String `tfsdk:"group_name"`
	P2pXconnectName types.String `tfsdk:"p2p_xconnect_name"`
	InterfaceName   types.String `tfsdk:"interface_name"`
}

func (data L2VPNXconnectGroupP2PInterface) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-l2vpn-cfg:/l2vpn/xconnect/groups/group[group-name=%s]/p2ps/p2p[p2p-xconnect-name=%s]/interfaces/interface[interface-name=%s]", data.GroupName.Value, data.P2pXconnectName.Value, data.InterfaceName.Value)
}

func (data L2VPNXconnectGroupP2PInterface) toBody() string {
	body := "{}"
	return body
}

func (data *L2VPNXconnectGroupP2PInterface) fromBody(res []byte) {
}

func (data *L2VPNXconnectGroupP2PInterface) fromPlan(plan L2VPNXconnectGroupP2PInterface) {
	data.Device = plan.Device
	data.GroupName.Value = plan.GroupName.Value
	data.P2pXconnectName.Value = plan.P2pXconnectName.Value
	data.InterfaceName.Value = plan.InterfaceName.Value
}

func (data *L2VPNXconnectGroupP2PInterface) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.GroupName.Unknown {
		data.GroupName.Unknown = false
		data.GroupName.Null = true
	}
	if data.P2pXconnectName.Unknown {
		data.P2pXconnectName.Unknown = false
		data.P2pXconnectName.Null = true
	}
	if data.InterfaceName.Unknown {
		data.InterfaceName.Unknown = false
		data.InterfaceName.Null = true
	}
}

func (data *L2VPNXconnectGroupP2PInterface) getDeletedListItems(state L2VPNXconnectGroupP2PInterface) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *L2VPNXconnectGroupP2PInterface) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
