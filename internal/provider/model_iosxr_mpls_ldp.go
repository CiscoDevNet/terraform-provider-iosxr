// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type MPLSLDP struct {
	Device                       types.String                 `tfsdk:"device"`
	Id                           types.String                 `tfsdk:"id"`
	DeleteMode                   types.String                 `tfsdk:"delete_mode"`
	RouterId                     types.String                 `tfsdk:"router_id"`
	AddressFamilies              []MPLSLDPAddressFamilies     `tfsdk:"address_families"`
	Interfaces                   []MPLSLDPInterfaces          `tfsdk:"interfaces"`
	CapabilitiesSacIpv4Disable   types.Bool                   `tfsdk:"capabilities_sac_ipv4_disable"`
	CapabilitiesSacIpv6Disable   types.Bool                   `tfsdk:"capabilities_sac_ipv6_disable"`
	CapabilitiesSacFec128Disable types.Bool                   `tfsdk:"capabilities_sac_fec128_disable"`
	CapabilitiesSacFec129Disable types.Bool                   `tfsdk:"capabilities_sac_fec129_disable"`
	IgpSyncDelayOnSessionUp      types.Int64                  `tfsdk:"igp_sync_delay_on_session_up"`
	IgpSyncDelayOnProcRestart    types.Int64                  `tfsdk:"igp_sync_delay_on_proc_restart"`
	MldpLoggingNotifications     types.Bool                   `tfsdk:"mldp_logging_notifications"`
	MldpAddressFamilies          []MPLSLDPMldpAddressFamilies `tfsdk:"mldp_address_families"`
	SessionProtection            types.Bool                   `tfsdk:"session_protection"`
}

type MPLSLDPData struct {
	Device                       types.String                 `tfsdk:"device"`
	Id                           types.String                 `tfsdk:"id"`
	RouterId                     types.String                 `tfsdk:"router_id"`
	AddressFamilies              []MPLSLDPAddressFamilies     `tfsdk:"address_families"`
	Interfaces                   []MPLSLDPInterfaces          `tfsdk:"interfaces"`
	CapabilitiesSacIpv4Disable   types.Bool                   `tfsdk:"capabilities_sac_ipv4_disable"`
	CapabilitiesSacIpv6Disable   types.Bool                   `tfsdk:"capabilities_sac_ipv6_disable"`
	CapabilitiesSacFec128Disable types.Bool                   `tfsdk:"capabilities_sac_fec128_disable"`
	CapabilitiesSacFec129Disable types.Bool                   `tfsdk:"capabilities_sac_fec129_disable"`
	IgpSyncDelayOnSessionUp      types.Int64                  `tfsdk:"igp_sync_delay_on_session_up"`
	IgpSyncDelayOnProcRestart    types.Int64                  `tfsdk:"igp_sync_delay_on_proc_restart"`
	MldpLoggingNotifications     types.Bool                   `tfsdk:"mldp_logging_notifications"`
	MldpAddressFamilies          []MPLSLDPMldpAddressFamilies `tfsdk:"mldp_address_families"`
	SessionProtection            types.Bool                   `tfsdk:"session_protection"`
}
type MPLSLDPAddressFamilies struct {
	AfName                          types.String `tfsdk:"af_name"`
	LabelLocalAllocateForAccessList types.String `tfsdk:"label_local_allocate_for_access_list"`
	LabelLocalAllocateForHostRoutes types.Bool   `tfsdk:"label_local_allocate_for_host_routes"`
}
type MPLSLDPInterfaces struct {
	InterfaceName types.String `tfsdk:"interface_name"`
}
type MPLSLDPMldpAddressFamilies struct {
	Name                           types.String `tfsdk:"name"`
	MakeBeforeBreakDelay           types.Int64  `tfsdk:"make_before_break_delay"`
	ForwardingRecursive            types.Bool   `tfsdk:"forwarding_recursive"`
	ForwardingRecursiveRoutePolicy types.String `tfsdk:"forwarding_recursive_route_policy"`
	RecursiveFec                   types.Bool   `tfsdk:"recursive_fec"`
}

func (data MPLSLDP) getPath() string {
	return "Cisco-IOS-XR-um-mpls-ldp-cfg:/mpls/ldp"
}

func (data MPLSLDPData) getPath() string {
	return "Cisco-IOS-XR-um-mpls-ldp-cfg:/mpls/ldp"
}

func (data MPLSLDP) toBody(ctx context.Context) string {
	body := "{}"
	if !data.RouterId.IsNull() && !data.RouterId.IsUnknown() {
		body, _ = sjson.Set(body, "router-id", data.RouterId.ValueString())
	}
	if !data.CapabilitiesSacIpv4Disable.IsNull() && !data.CapabilitiesSacIpv4Disable.IsUnknown() {
		if data.CapabilitiesSacIpv4Disable.ValueBool() {
			body, _ = sjson.Set(body, "capabilities.sac.ipv4-disable", map[string]string{})
		}
	}
	if !data.CapabilitiesSacIpv6Disable.IsNull() && !data.CapabilitiesSacIpv6Disable.IsUnknown() {
		if data.CapabilitiesSacIpv6Disable.ValueBool() {
			body, _ = sjson.Set(body, "capabilities.sac.ipv6-disable", map[string]string{})
		}
	}
	if !data.CapabilitiesSacFec128Disable.IsNull() && !data.CapabilitiesSacFec128Disable.IsUnknown() {
		if data.CapabilitiesSacFec128Disable.ValueBool() {
			body, _ = sjson.Set(body, "capabilities.sac.fec128-disable", map[string]string{})
		}
	}
	if !data.CapabilitiesSacFec129Disable.IsNull() && !data.CapabilitiesSacFec129Disable.IsUnknown() {
		if data.CapabilitiesSacFec129Disable.ValueBool() {
			body, _ = sjson.Set(body, "capabilities.sac.fec129-disable", map[string]string{})
		}
	}
	if !data.IgpSyncDelayOnSessionUp.IsNull() && !data.IgpSyncDelayOnSessionUp.IsUnknown() {
		body, _ = sjson.Set(body, "igp.sync.delay.on-session-up", strconv.FormatInt(data.IgpSyncDelayOnSessionUp.ValueInt64(), 10))
	}
	if !data.IgpSyncDelayOnProcRestart.IsNull() && !data.IgpSyncDelayOnProcRestart.IsUnknown() {
		body, _ = sjson.Set(body, "igp.sync.delay.on-proc-restart", strconv.FormatInt(data.IgpSyncDelayOnProcRestart.ValueInt64(), 10))
	}
	if !data.MldpLoggingNotifications.IsNull() && !data.MldpLoggingNotifications.IsUnknown() {
		if data.MldpLoggingNotifications.ValueBool() {
			body, _ = sjson.Set(body, "mldp.logging.notifications", map[string]string{})
		}
	}
	if !data.SessionProtection.IsNull() && !data.SessionProtection.IsUnknown() {
		if data.SessionProtection.ValueBool() {
			body, _ = sjson.Set(body, "session.protection", map[string]string{})
		}
	}
	if len(data.AddressFamilies) > 0 {
		body, _ = sjson.Set(body, "address-families.address-family", []interface{}{})
		for index, item := range data.AddressFamilies {
			if !item.AfName.IsNull() && !item.AfName.IsUnknown() {
				body, _ = sjson.Set(body, "address-families.address-family"+"."+strconv.Itoa(index)+"."+"af-name", item.AfName.ValueString())
			}
			if !item.LabelLocalAllocateForAccessList.IsNull() && !item.LabelLocalAllocateForAccessList.IsUnknown() {
				body, _ = sjson.Set(body, "address-families.address-family"+"."+strconv.Itoa(index)+"."+"label.local.allocate.for.access-list", item.LabelLocalAllocateForAccessList.ValueString())
			}
			if !item.LabelLocalAllocateForHostRoutes.IsNull() && !item.LabelLocalAllocateForHostRoutes.IsUnknown() {
				if item.LabelLocalAllocateForHostRoutes.ValueBool() {
					body, _ = sjson.Set(body, "address-families.address-family"+"."+strconv.Itoa(index)+"."+"label.local.allocate.for.host-routes", map[string]string{})
				}
			}
		}
	}
	if len(data.Interfaces) > 0 {
		body, _ = sjson.Set(body, "interfaces.interface", []interface{}{})
		for index, item := range data.Interfaces {
			if !item.InterfaceName.IsNull() && !item.InterfaceName.IsUnknown() {
				body, _ = sjson.Set(body, "interfaces.interface"+"."+strconv.Itoa(index)+"."+"interface-name", item.InterfaceName.ValueString())
			}
		}
	}
	if len(data.MldpAddressFamilies) > 0 {
		body, _ = sjson.Set(body, "mldp.address-families.address-family", []interface{}{})
		for index, item := range data.MldpAddressFamilies {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, "mldp.address-families.address-family"+"."+strconv.Itoa(index)+"."+"af-name", item.Name.ValueString())
			}
			if !item.MakeBeforeBreakDelay.IsNull() && !item.MakeBeforeBreakDelay.IsUnknown() {
				body, _ = sjson.Set(body, "mldp.address-families.address-family"+"."+strconv.Itoa(index)+"."+"make-before-break.delay.forwarding-delay", strconv.FormatInt(item.MakeBeforeBreakDelay.ValueInt64(), 10))
			}
			if !item.ForwardingRecursive.IsNull() && !item.ForwardingRecursive.IsUnknown() {
				if item.ForwardingRecursive.ValueBool() {
					body, _ = sjson.Set(body, "mldp.address-families.address-family"+"."+strconv.Itoa(index)+"."+"forwarding.recursive", map[string]string{})
				}
			}
			if !item.ForwardingRecursiveRoutePolicy.IsNull() && !item.ForwardingRecursiveRoutePolicy.IsUnknown() {
				body, _ = sjson.Set(body, "mldp.address-families.address-family"+"."+strconv.Itoa(index)+"."+"forwarding.recursive.route-policy", item.ForwardingRecursiveRoutePolicy.ValueString())
			}
			if !item.RecursiveFec.IsNull() && !item.RecursiveFec.IsUnknown() {
				if item.RecursiveFec.ValueBool() {
					body, _ = sjson.Set(body, "mldp.address-families.address-family"+"."+strconv.Itoa(index)+"."+"recursive-fec.enable", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *MPLSLDP) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "router-id"); value.Exists() && !data.RouterId.IsNull() {
		data.RouterId = types.StringValue(value.String())
	} else {
		data.RouterId = types.StringNull()
	}
	for i := range data.AddressFamilies {
		keys := [...]string{"af-name"}
		keyValues := [...]string{data.AddressFamilies[i].AfName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-families.address-family").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("af-name"); value.Exists() && !data.AddressFamilies[i].AfName.IsNull() {
			data.AddressFamilies[i].AfName = types.StringValue(value.String())
		} else {
			data.AddressFamilies[i].AfName = types.StringNull()
		}
		if value := r.Get("label.local.allocate.for.access-list"); value.Exists() && !data.AddressFamilies[i].LabelLocalAllocateForAccessList.IsNull() {
			data.AddressFamilies[i].LabelLocalAllocateForAccessList = types.StringValue(value.String())
		} else {
			data.AddressFamilies[i].LabelLocalAllocateForAccessList = types.StringNull()
		}
		if value := r.Get("label.local.allocate.for.host-routes"); !data.AddressFamilies[i].LabelLocalAllocateForHostRoutes.IsNull() {
			if value.Exists() {
				data.AddressFamilies[i].LabelLocalAllocateForHostRoutes = types.BoolValue(true)
			} else {
				data.AddressFamilies[i].LabelLocalAllocateForHostRoutes = types.BoolValue(false)
			}
		} else {
			data.AddressFamilies[i].LabelLocalAllocateForHostRoutes = types.BoolNull()
		}
	}
	for i := range data.Interfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.Interfaces[i].InterfaceName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "interfaces.interface").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("interface-name"); value.Exists() && !data.Interfaces[i].InterfaceName.IsNull() {
			data.Interfaces[i].InterfaceName = types.StringValue(value.String())
		} else {
			data.Interfaces[i].InterfaceName = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "capabilities.sac.ipv4-disable"); !data.CapabilitiesSacIpv4Disable.IsNull() {
		if value.Exists() {
			data.CapabilitiesSacIpv4Disable = types.BoolValue(true)
		} else {
			data.CapabilitiesSacIpv4Disable = types.BoolValue(false)
		}
	} else {
		data.CapabilitiesSacIpv4Disable = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "capabilities.sac.ipv6-disable"); !data.CapabilitiesSacIpv6Disable.IsNull() {
		if value.Exists() {
			data.CapabilitiesSacIpv6Disable = types.BoolValue(true)
		} else {
			data.CapabilitiesSacIpv6Disable = types.BoolValue(false)
		}
	} else {
		data.CapabilitiesSacIpv6Disable = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "capabilities.sac.fec128-disable"); !data.CapabilitiesSacFec128Disable.IsNull() {
		if value.Exists() {
			data.CapabilitiesSacFec128Disable = types.BoolValue(true)
		} else {
			data.CapabilitiesSacFec128Disable = types.BoolValue(false)
		}
	} else {
		data.CapabilitiesSacFec128Disable = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "capabilities.sac.fec129-disable"); !data.CapabilitiesSacFec129Disable.IsNull() {
		if value.Exists() {
			data.CapabilitiesSacFec129Disable = types.BoolValue(true)
		} else {
			data.CapabilitiesSacFec129Disable = types.BoolValue(false)
		}
	} else {
		data.CapabilitiesSacFec129Disable = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "igp.sync.delay.on-session-up"); value.Exists() && !data.IgpSyncDelayOnSessionUp.IsNull() {
		data.IgpSyncDelayOnSessionUp = types.Int64Value(value.Int())
	} else {
		data.IgpSyncDelayOnSessionUp = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "igp.sync.delay.on-proc-restart"); value.Exists() && !data.IgpSyncDelayOnProcRestart.IsNull() {
		data.IgpSyncDelayOnProcRestart = types.Int64Value(value.Int())
	} else {
		data.IgpSyncDelayOnProcRestart = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "mldp.logging.notifications"); !data.MldpLoggingNotifications.IsNull() {
		if value.Exists() {
			data.MldpLoggingNotifications = types.BoolValue(true)
		} else {
			data.MldpLoggingNotifications = types.BoolValue(false)
		}
	} else {
		data.MldpLoggingNotifications = types.BoolNull()
	}
	for i := range data.MldpAddressFamilies {
		keys := [...]string{"af-name"}
		keyValues := [...]string{data.MldpAddressFamilies[i].Name.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "mldp.address-families.address-family").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("af-name"); value.Exists() && !data.MldpAddressFamilies[i].Name.IsNull() {
			data.MldpAddressFamilies[i].Name = types.StringValue(value.String())
		} else {
			data.MldpAddressFamilies[i].Name = types.StringNull()
		}
		if value := r.Get("make-before-break.delay.forwarding-delay"); value.Exists() && !data.MldpAddressFamilies[i].MakeBeforeBreakDelay.IsNull() {
			data.MldpAddressFamilies[i].MakeBeforeBreakDelay = types.Int64Value(value.Int())
		} else {
			data.MldpAddressFamilies[i].MakeBeforeBreakDelay = types.Int64Null()
		}
		if value := r.Get("forwarding.recursive"); !data.MldpAddressFamilies[i].ForwardingRecursive.IsNull() {
			if value.Exists() {
				data.MldpAddressFamilies[i].ForwardingRecursive = types.BoolValue(true)
			} else {
				data.MldpAddressFamilies[i].ForwardingRecursive = types.BoolValue(false)
			}
		} else {
			data.MldpAddressFamilies[i].ForwardingRecursive = types.BoolNull()
		}
		if value := r.Get("forwarding.recursive.route-policy"); value.Exists() && !data.MldpAddressFamilies[i].ForwardingRecursiveRoutePolicy.IsNull() {
			data.MldpAddressFamilies[i].ForwardingRecursiveRoutePolicy = types.StringValue(value.String())
		} else {
			data.MldpAddressFamilies[i].ForwardingRecursiveRoutePolicy = types.StringNull()
		}
		if value := r.Get("recursive-fec.enable"); !data.MldpAddressFamilies[i].RecursiveFec.IsNull() {
			if value.Exists() {
				data.MldpAddressFamilies[i].RecursiveFec = types.BoolValue(true)
			} else {
				data.MldpAddressFamilies[i].RecursiveFec = types.BoolValue(false)
			}
		} else {
			data.MldpAddressFamilies[i].RecursiveFec = types.BoolNull()
		}
	}
	if value := gjson.GetBytes(res, "session.protection"); !data.SessionProtection.IsNull() {
		if value.Exists() {
			data.SessionProtection = types.BoolValue(true)
		} else {
			data.SessionProtection = types.BoolValue(false)
		}
	} else {
		data.SessionProtection = types.BoolNull()
	}
}

func (data *MPLSLDP) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "router-id"); value.Exists() {
		data.RouterId = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-families.address-family"); value.Exists() {
		data.AddressFamilies = make([]MPLSLDPAddressFamilies, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := MPLSLDPAddressFamilies{}
			if cValue := v.Get("af-name"); cValue.Exists() {
				item.AfName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("label.local.allocate.for.access-list"); cValue.Exists() {
				item.LabelLocalAllocateForAccessList = types.StringValue(cValue.String())
			}
			if cValue := v.Get("label.local.allocate.for.host-routes"); cValue.Exists() {
				item.LabelLocalAllocateForHostRoutes = types.BoolValue(true)
			} else {
				item.LabelLocalAllocateForHostRoutes = types.BoolValue(false)
			}
			data.AddressFamilies = append(data.AddressFamilies, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "interfaces.interface"); value.Exists() {
		data.Interfaces = make([]MPLSLDPInterfaces, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := MPLSLDPInterfaces{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			data.Interfaces = append(data.Interfaces, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "capabilities.sac.ipv4-disable"); value.Exists() {
		data.CapabilitiesSacIpv4Disable = types.BoolValue(true)
	} else {
		data.CapabilitiesSacIpv4Disable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "capabilities.sac.ipv6-disable"); value.Exists() {
		data.CapabilitiesSacIpv6Disable = types.BoolValue(true)
	} else {
		data.CapabilitiesSacIpv6Disable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "capabilities.sac.fec128-disable"); value.Exists() {
		data.CapabilitiesSacFec128Disable = types.BoolValue(true)
	} else {
		data.CapabilitiesSacFec128Disable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "capabilities.sac.fec129-disable"); value.Exists() {
		data.CapabilitiesSacFec129Disable = types.BoolValue(true)
	} else {
		data.CapabilitiesSacFec129Disable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "igp.sync.delay.on-session-up"); value.Exists() {
		data.IgpSyncDelayOnSessionUp = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "igp.sync.delay.on-proc-restart"); value.Exists() {
		data.IgpSyncDelayOnProcRestart = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "mldp.logging.notifications"); value.Exists() {
		data.MldpLoggingNotifications = types.BoolValue(true)
	} else {
		data.MldpLoggingNotifications = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mldp.address-families.address-family"); value.Exists() {
		data.MldpAddressFamilies = make([]MPLSLDPMldpAddressFamilies, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := MPLSLDPMldpAddressFamilies{}
			if cValue := v.Get("af-name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("make-before-break.delay.forwarding-delay"); cValue.Exists() {
				item.MakeBeforeBreakDelay = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("forwarding.recursive"); cValue.Exists() {
				item.ForwardingRecursive = types.BoolValue(true)
			} else {
				item.ForwardingRecursive = types.BoolValue(false)
			}
			if cValue := v.Get("forwarding.recursive.route-policy"); cValue.Exists() {
				item.ForwardingRecursiveRoutePolicy = types.StringValue(cValue.String())
			}
			if cValue := v.Get("recursive-fec.enable"); cValue.Exists() {
				item.RecursiveFec = types.BoolValue(true)
			} else {
				item.RecursiveFec = types.BoolValue(false)
			}
			data.MldpAddressFamilies = append(data.MldpAddressFamilies, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "session.protection"); value.Exists() {
		data.SessionProtection = types.BoolValue(true)
	} else {
		data.SessionProtection = types.BoolValue(false)
	}
}

func (data *MPLSLDPData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "router-id"); value.Exists() {
		data.RouterId = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-families.address-family"); value.Exists() {
		data.AddressFamilies = make([]MPLSLDPAddressFamilies, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := MPLSLDPAddressFamilies{}
			if cValue := v.Get("af-name"); cValue.Exists() {
				item.AfName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("label.local.allocate.for.access-list"); cValue.Exists() {
				item.LabelLocalAllocateForAccessList = types.StringValue(cValue.String())
			}
			if cValue := v.Get("label.local.allocate.for.host-routes"); cValue.Exists() {
				item.LabelLocalAllocateForHostRoutes = types.BoolValue(true)
			} else {
				item.LabelLocalAllocateForHostRoutes = types.BoolValue(false)
			}
			data.AddressFamilies = append(data.AddressFamilies, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "interfaces.interface"); value.Exists() {
		data.Interfaces = make([]MPLSLDPInterfaces, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := MPLSLDPInterfaces{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			data.Interfaces = append(data.Interfaces, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "capabilities.sac.ipv4-disable"); value.Exists() {
		data.CapabilitiesSacIpv4Disable = types.BoolValue(true)
	} else {
		data.CapabilitiesSacIpv4Disable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "capabilities.sac.ipv6-disable"); value.Exists() {
		data.CapabilitiesSacIpv6Disable = types.BoolValue(true)
	} else {
		data.CapabilitiesSacIpv6Disable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "capabilities.sac.fec128-disable"); value.Exists() {
		data.CapabilitiesSacFec128Disable = types.BoolValue(true)
	} else {
		data.CapabilitiesSacFec128Disable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "capabilities.sac.fec129-disable"); value.Exists() {
		data.CapabilitiesSacFec129Disable = types.BoolValue(true)
	} else {
		data.CapabilitiesSacFec129Disable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "igp.sync.delay.on-session-up"); value.Exists() {
		data.IgpSyncDelayOnSessionUp = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "igp.sync.delay.on-proc-restart"); value.Exists() {
		data.IgpSyncDelayOnProcRestart = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "mldp.logging.notifications"); value.Exists() {
		data.MldpLoggingNotifications = types.BoolValue(true)
	} else {
		data.MldpLoggingNotifications = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mldp.address-families.address-family"); value.Exists() {
		data.MldpAddressFamilies = make([]MPLSLDPMldpAddressFamilies, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := MPLSLDPMldpAddressFamilies{}
			if cValue := v.Get("af-name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("make-before-break.delay.forwarding-delay"); cValue.Exists() {
				item.MakeBeforeBreakDelay = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("forwarding.recursive"); cValue.Exists() {
				item.ForwardingRecursive = types.BoolValue(true)
			} else {
				item.ForwardingRecursive = types.BoolValue(false)
			}
			if cValue := v.Get("forwarding.recursive.route-policy"); cValue.Exists() {
				item.ForwardingRecursiveRoutePolicy = types.StringValue(cValue.String())
			}
			if cValue := v.Get("recursive-fec.enable"); cValue.Exists() {
				item.RecursiveFec = types.BoolValue(true)
			} else {
				item.RecursiveFec = types.BoolValue(false)
			}
			data.MldpAddressFamilies = append(data.MldpAddressFamilies, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "session.protection"); value.Exists() {
		data.SessionProtection = types.BoolValue(true)
	} else {
		data.SessionProtection = types.BoolValue(false)
	}
}

func (data *MPLSLDP) getDeletedItems(ctx context.Context, state MPLSLDP) []string {
	deletedItems := make([]string, 0)
	if !state.RouterId.IsNull() && data.RouterId.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/router-id", state.getPath()))
	}
	for i := range state.AddressFamilies {
		keys := [...]string{"af-name"}
		stateKeyValues := [...]string{state.AddressFamilies[i].AfName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilies[i].AfName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilies {
			found = true
			if state.AddressFamilies[i].AfName.ValueString() != data.AddressFamilies[j].AfName.ValueString() {
				found = false
			}
			if found {
				if !state.AddressFamilies[i].LabelLocalAllocateForAccessList.IsNull() && data.AddressFamilies[j].LabelLocalAllocateForAccessList.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/address-families/address-family%v/label/local/allocate/for/access-list", state.getPath(), keyString))
				}
				if !state.AddressFamilies[i].LabelLocalAllocateForHostRoutes.IsNull() && data.AddressFamilies[j].LabelLocalAllocateForHostRoutes.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/address-families/address-family%v/label/local/allocate/for/host-routes", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-families/address-family%v", state.getPath(), keyString))
		}
	}
	for i := range state.Interfaces {
		keys := [...]string{"interface-name"}
		stateKeyValues := [...]string{state.Interfaces[i].InterfaceName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Interfaces[i].InterfaceName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Interfaces {
			found = true
			if state.Interfaces[i].InterfaceName.ValueString() != data.Interfaces[j].InterfaceName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/interfaces/interface%v", state.getPath(), keyString))
		}
	}
	if !state.CapabilitiesSacIpv4Disable.IsNull() && data.CapabilitiesSacIpv4Disable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/capabilities/sac/ipv4-disable", state.getPath()))
	}
	if !state.CapabilitiesSacIpv6Disable.IsNull() && data.CapabilitiesSacIpv6Disable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/capabilities/sac/ipv6-disable", state.getPath()))
	}
	if !state.CapabilitiesSacFec128Disable.IsNull() && data.CapabilitiesSacFec128Disable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/capabilities/sac/fec128-disable", state.getPath()))
	}
	if !state.CapabilitiesSacFec129Disable.IsNull() && data.CapabilitiesSacFec129Disable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/capabilities/sac/fec129-disable", state.getPath()))
	}
	if !state.IgpSyncDelayOnSessionUp.IsNull() && data.IgpSyncDelayOnSessionUp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/igp/sync/delay/on-session-up", state.getPath()))
	}
	if !state.IgpSyncDelayOnProcRestart.IsNull() && data.IgpSyncDelayOnProcRestart.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/igp/sync/delay/on-proc-restart", state.getPath()))
	}
	if !state.MldpLoggingNotifications.IsNull() && data.MldpLoggingNotifications.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mldp/logging/notifications", state.getPath()))
	}
	for i := range state.MldpAddressFamilies {
		keys := [...]string{"af-name"}
		stateKeyValues := [...]string{state.MldpAddressFamilies[i].Name.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.MldpAddressFamilies[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.MldpAddressFamilies {
			found = true
			if state.MldpAddressFamilies[i].Name.ValueString() != data.MldpAddressFamilies[j].Name.ValueString() {
				found = false
			}
			if found {
				if !state.MldpAddressFamilies[i].MakeBeforeBreakDelay.IsNull() && data.MldpAddressFamilies[j].MakeBeforeBreakDelay.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/mldp/address-families/address-family%v/make-before-break/delay/forwarding-delay", state.getPath(), keyString))
				}
				if !state.MldpAddressFamilies[i].ForwardingRecursive.IsNull() && data.MldpAddressFamilies[j].ForwardingRecursive.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/mldp/address-families/address-family%v/forwarding/recursive", state.getPath(), keyString))
				}
				if !state.MldpAddressFamilies[i].ForwardingRecursiveRoutePolicy.IsNull() && data.MldpAddressFamilies[j].ForwardingRecursiveRoutePolicy.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/mldp/address-families/address-family%v/forwarding/recursive/route-policy", state.getPath(), keyString))
				}
				if !state.MldpAddressFamilies[i].RecursiveFec.IsNull() && data.MldpAddressFamilies[j].RecursiveFec.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/mldp/address-families/address-family%v/recursive-fec/enable", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/mldp/address-families/address-family%v", state.getPath(), keyString))
		}
	}
	if !state.SessionProtection.IsNull() && data.SessionProtection.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/session/protection", state.getPath()))
	}
	return deletedItems
}

func (data *MPLSLDP) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.AddressFamilies {
		keys := [...]string{"af-name"}
		keyValues := [...]string{data.AddressFamilies[i].AfName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.AddressFamilies[i].LabelLocalAllocateForHostRoutes.IsNull() && !data.AddressFamilies[i].LabelLocalAllocateForHostRoutes.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/address-families/address-family%v/label/local/allocate/for/host-routes", data.getPath(), keyString))
		}
	}
	for i := range data.Interfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.Interfaces[i].InterfaceName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.CapabilitiesSacIpv4Disable.IsNull() && !data.CapabilitiesSacIpv4Disable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/capabilities/sac/ipv4-disable", data.getPath()))
	}
	if !data.CapabilitiesSacIpv6Disable.IsNull() && !data.CapabilitiesSacIpv6Disable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/capabilities/sac/ipv6-disable", data.getPath()))
	}
	if !data.CapabilitiesSacFec128Disable.IsNull() && !data.CapabilitiesSacFec128Disable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/capabilities/sac/fec128-disable", data.getPath()))
	}
	if !data.CapabilitiesSacFec129Disable.IsNull() && !data.CapabilitiesSacFec129Disable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/capabilities/sac/fec129-disable", data.getPath()))
	}
	if !data.MldpLoggingNotifications.IsNull() && !data.MldpLoggingNotifications.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mldp/logging/notifications", data.getPath()))
	}
	for i := range data.MldpAddressFamilies {
		keys := [...]string{"af-name"}
		keyValues := [...]string{data.MldpAddressFamilies[i].Name.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.MldpAddressFamilies[i].ForwardingRecursive.IsNull() && !data.MldpAddressFamilies[i].ForwardingRecursive.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mldp/address-families/address-family%v/forwarding/recursive", data.getPath(), keyString))
		}
		if !data.MldpAddressFamilies[i].RecursiveFec.IsNull() && !data.MldpAddressFamilies[i].RecursiveFec.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mldp/address-families/address-family%v/recursive-fec/enable", data.getPath(), keyString))
		}
	}
	if !data.SessionProtection.IsNull() && !data.SessionProtection.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/session/protection", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *MPLSLDP) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.RouterId.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/router-id", data.getPath()))
	}
	for i := range data.AddressFamilies {
		keys := [...]string{"af-name"}
		keyValues := [...]string{data.AddressFamilies[i].AfName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-families/address-family%v", data.getPath(), keyString))
	}
	for i := range data.Interfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.Interfaces[i].InterfaceName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/interfaces/interface%v", data.getPath(), keyString))
	}
	if !data.CapabilitiesSacIpv4Disable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/capabilities/sac/ipv4-disable", data.getPath()))
	}
	if !data.CapabilitiesSacIpv6Disable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/capabilities/sac/ipv6-disable", data.getPath()))
	}
	if !data.CapabilitiesSacFec128Disable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/capabilities/sac/fec128-disable", data.getPath()))
	}
	if !data.CapabilitiesSacFec129Disable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/capabilities/sac/fec129-disable", data.getPath()))
	}
	if !data.IgpSyncDelayOnSessionUp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/igp/sync/delay/on-session-up", data.getPath()))
	}
	if !data.IgpSyncDelayOnProcRestart.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/igp/sync/delay/on-proc-restart", data.getPath()))
	}
	if !data.MldpLoggingNotifications.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mldp/logging/notifications", data.getPath()))
	}
	for i := range data.MldpAddressFamilies {
		keys := [...]string{"af-name"}
		keyValues := [...]string{data.MldpAddressFamilies[i].Name.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mldp/address-families/address-family%v", data.getPath(), keyString))
	}
	if !data.SessionProtection.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/session/protection", data.getPath()))
	}
	return deletePaths
}
