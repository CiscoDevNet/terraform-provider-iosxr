// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type MPLSTrafficEng struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	DeleteMode types.String `tfsdk:"delete_mode"`
	TrafficEng types.Bool   `tfsdk:"traffic_eng"`
}
type MPLSTrafficEngData struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	TrafficEng types.Bool   `tfsdk:"traffic_eng"`
}

func (data MPLSTrafficEng) getPath() string {
	return "Cisco-IOS-XR-um-mpls-te-cfg:/mpls"
}

func (data MPLSTrafficEngData) getPath() string {
	return "Cisco-IOS-XR-um-mpls-te-cfg:/mpls"
}

func (data MPLSTrafficEng) toBody(ctx context.Context) string {
	body := "{}"
	if !data.TrafficEng.IsNull() && !data.TrafficEng.IsUnknown() {
		if data.TrafficEng.ValueBool() {
			body, _ = sjson.Set(body, "traffic-eng", map[string]string{})
		}
	}
	return body
}

func (data *MPLSTrafficEng) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "traffic-eng"); !data.TrafficEng.IsNull() {
		if value.Exists() {
			data.TrafficEng = types.BoolValue(true)
		} else {
			data.TrafficEng = types.BoolValue(false)
		}
	} else {
		data.TrafficEng = types.BoolNull()
	}
}

func (data *MPLSTrafficEngData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "traffic-eng"); value.Exists() {
		data.TrafficEng = types.BoolValue(true)
	} else {
		data.TrafficEng = types.BoolValue(false)
	}
}

func (data *MPLSTrafficEng) getDeletedListItems(ctx context.Context, state MPLSTrafficEng) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *MPLSTrafficEng) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.TrafficEng.IsNull() && !data.TrafficEng.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traffic-eng", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *MPLSTrafficEng) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.TrafficEng.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traffic-eng", data.getPath()))
	}
	return deletePaths
}
