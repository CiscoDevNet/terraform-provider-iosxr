// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type OCSystemConfig struct {
	Device      types.String `tfsdk:"device"`
	Id          types.String `tfsdk:"id"`
	Hostname    types.String `tfsdk:"hostname"`
	DomainName  types.String `tfsdk:"domain_name"`
	LoginBanner types.String `tfsdk:"login_banner"`
	MotdBanner  types.String `tfsdk:"motd_banner"`
}
type OCSystemConfigData struct {
	Device      types.String `tfsdk:"device"`
	Id          types.String `tfsdk:"id"`
	Hostname    types.String `tfsdk:"hostname"`
	DomainName  types.String `tfsdk:"domain_name"`
	LoginBanner types.String `tfsdk:"login_banner"`
	MotdBanner  types.String `tfsdk:"motd_banner"`
}

func (data OCSystemConfig) getPath() string {
	return "openconfig-system:/system/config"
}

func (data OCSystemConfigData) getPath() string {
	return "openconfig-system:/system/config"
}

func (data OCSystemConfig) toBody(ctx context.Context) string {
	body := "{}"
	if !data.Hostname.IsNull() && !data.Hostname.IsUnknown() {
		body, _ = sjson.Set(body, "hostname", data.Hostname.ValueString())
	}
	if !data.DomainName.IsNull() && !data.DomainName.IsUnknown() {
		body, _ = sjson.Set(body, "domain-name", data.DomainName.ValueString())
	}
	if !data.LoginBanner.IsNull() && !data.LoginBanner.IsUnknown() {
		body, _ = sjson.Set(body, "login-banner", data.LoginBanner.ValueString())
	}
	if !data.MotdBanner.IsNull() && !data.MotdBanner.IsUnknown() {
		body, _ = sjson.Set(body, "motd-banner", data.MotdBanner.ValueString())
	}
	return body
}

func (data *OCSystemConfig) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "hostname"); value.Exists() && !data.Hostname.IsNull() {
		data.Hostname = types.StringValue(value.String())
	} else {
		data.Hostname = types.StringNull()
	}
	if value := gjson.GetBytes(res, "domain-name"); value.Exists() && !data.DomainName.IsNull() {
		data.DomainName = types.StringValue(value.String())
	} else {
		data.DomainName = types.StringNull()
	}
	if value := gjson.GetBytes(res, "login-banner"); value.Exists() && !data.LoginBanner.IsNull() {
		data.LoginBanner = types.StringValue(value.String())
	} else {
		data.LoginBanner = types.StringNull()
	}
	if value := gjson.GetBytes(res, "motd-banner"); value.Exists() && !data.MotdBanner.IsNull() {
		data.MotdBanner = types.StringValue(value.String())
	} else {
		data.MotdBanner = types.StringNull()
	}
}

func (data *OCSystemConfigData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "hostname"); value.Exists() {
		data.Hostname = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "domain-name"); value.Exists() {
		data.DomainName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "login-banner"); value.Exists() {
		data.LoginBanner = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "motd-banner"); value.Exists() {
		data.MotdBanner = types.StringValue(value.String())
	}
}

func (data *OCSystemConfig) getDeletedListItems(ctx context.Context, state OCSystemConfig) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *OCSystemConfig) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}

func (data *OCSystemConfig) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Hostname.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hostname", data.getPath()))
	}
	if !data.DomainName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/domain-name", data.getPath()))
	}
	if !data.LoginBanner.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login-banner", data.getPath()))
	}
	if !data.MotdBanner.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/motd-banner", data.getPath()))
	}
	return deletePaths
}
