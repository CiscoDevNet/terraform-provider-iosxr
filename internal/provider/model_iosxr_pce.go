// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type PCE struct {
	Device                   types.String        `tfsdk:"device"`
	Id                       types.String        `tfsdk:"id"`
	AddressIpv4              types.String        `tfsdk:"address_ipv4"`
	AddressIpv6              types.String        `tfsdk:"address_ipv6"`
	StateSyncIpv4s           []PCEStateSyncIpv4s `tfsdk:"state_sync_ipv4s"`
	PeerFilterIpv4AccessList types.String        `tfsdk:"peer_filter_ipv4_access_list"`
	ApiAuthenticationDigest  types.Bool          `tfsdk:"api_authentication_digest"`
	ApiSiblingIpv4           types.String        `tfsdk:"api_sibling_ipv4"`
	ApiUsers                 []PCEApiUsers       `tfsdk:"api_users"`
}
type PCEStateSyncIpv4s struct {
	Address types.String `tfsdk:"address"`
}
type PCEApiUsers struct {
	UserName          types.String `tfsdk:"user_name"`
	PasswordEncrypted types.String `tfsdk:"password_encrypted"`
}

func (data PCE) getPath() string {
	return "Cisco-IOS-XR-um-pce-cfg:/pce"
}

func (data PCE) toBody(ctx context.Context) string {
	body := "{}"
	if !data.AddressIpv4.IsNull() && !data.AddressIpv4.IsUnknown() {
		body, _ = sjson.Set(body, "address.ipv4", data.AddressIpv4.ValueString())
	}
	if !data.AddressIpv6.IsNull() && !data.AddressIpv6.IsUnknown() {
		body, _ = sjson.Set(body, "address.ipv6", data.AddressIpv6.ValueString())
	}
	if !data.PeerFilterIpv4AccessList.IsNull() && !data.PeerFilterIpv4AccessList.IsUnknown() {
		body, _ = sjson.Set(body, "peer-filter.ipv4.access-list", data.PeerFilterIpv4AccessList.ValueString())
	}
	if !data.ApiAuthenticationDigest.IsNull() && !data.ApiAuthenticationDigest.IsUnknown() {
		if data.ApiAuthenticationDigest.ValueBool() {
			body, _ = sjson.Set(body, "api.authentication.digest", map[string]string{})
		}
	}
	if !data.ApiSiblingIpv4.IsNull() && !data.ApiSiblingIpv4.IsUnknown() {
		body, _ = sjson.Set(body, "api.sibling.ipv4", data.ApiSiblingIpv4.ValueString())
	}
	if len(data.StateSyncIpv4s) > 0 {
		body, _ = sjson.Set(body, "state-sync.ipv4s.ipv4", []interface{}{})
		for index, item := range data.StateSyncIpv4s {
			if !item.Address.IsNull() && !item.Address.IsUnknown() {
				body, _ = sjson.Set(body, "state-sync.ipv4s.ipv4"+"."+strconv.Itoa(index)+"."+"address", item.Address.ValueString())
			}
		}
	}
	if len(data.ApiUsers) > 0 {
		body, _ = sjson.Set(body, "api.users.user", []interface{}{})
		for index, item := range data.ApiUsers {
			if !item.UserName.IsNull() && !item.UserName.IsUnknown() {
				body, _ = sjson.Set(body, "api.users.user"+"."+strconv.Itoa(index)+"."+"user-name", item.UserName.ValueString())
			}
			if !item.PasswordEncrypted.IsNull() && !item.PasswordEncrypted.IsUnknown() {
				body, _ = sjson.Set(body, "api.users.user"+"."+strconv.Itoa(index)+"."+"password.encrypted", item.PasswordEncrypted.ValueString())
			}
		}
	}
	return body
}

func (data *PCE) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "address.ipv4"); value.Exists() && !data.AddressIpv4.IsNull() {
		data.AddressIpv4 = types.StringValue(value.String())
	} else {
		data.AddressIpv4 = types.StringNull()
	}
	if value := gjson.GetBytes(res, "address.ipv6"); value.Exists() && !data.AddressIpv6.IsNull() {
		data.AddressIpv6 = types.StringValue(value.String())
	} else {
		data.AddressIpv6 = types.StringNull()
	}
	for i := range data.StateSyncIpv4s {
		keys := [...]string{"address"}
		keyValues := [...]string{data.StateSyncIpv4s[i].Address.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "state-sync.ipv4s.ipv4").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("address"); value.Exists() && !data.StateSyncIpv4s[i].Address.IsNull() {
			data.StateSyncIpv4s[i].Address = types.StringValue(value.String())
		} else {
			data.StateSyncIpv4s[i].Address = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "peer-filter.ipv4.access-list"); value.Exists() && !data.PeerFilterIpv4AccessList.IsNull() {
		data.PeerFilterIpv4AccessList = types.StringValue(value.String())
	} else {
		data.PeerFilterIpv4AccessList = types.StringNull()
	}
	if value := gjson.GetBytes(res, "api.authentication.digest"); !data.ApiAuthenticationDigest.IsNull() {
		if value.Exists() {
			data.ApiAuthenticationDigest = types.BoolValue(true)
		} else {
			data.ApiAuthenticationDigest = types.BoolValue(false)
		}
	} else {
		data.ApiAuthenticationDigest = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "api.sibling.ipv4"); value.Exists() && !data.ApiSiblingIpv4.IsNull() {
		data.ApiSiblingIpv4 = types.StringValue(value.String())
	} else {
		data.ApiSiblingIpv4 = types.StringNull()
	}
	for i := range data.ApiUsers {
		keys := [...]string{"user-name"}
		keyValues := [...]string{data.ApiUsers[i].UserName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "api.users.user").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("user-name"); value.Exists() && !data.ApiUsers[i].UserName.IsNull() {
			data.ApiUsers[i].UserName = types.StringValue(value.String())
		} else {
			data.ApiUsers[i].UserName = types.StringNull()
		}
		if value := r.Get("password.encrypted"); value.Exists() && !data.ApiUsers[i].PasswordEncrypted.IsNull() {
			data.ApiUsers[i].PasswordEncrypted = types.StringValue(value.String())
		} else {
			data.ApiUsers[i].PasswordEncrypted = types.StringNull()
		}
	}
}

func (data *PCE) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "address.ipv4"); value.Exists() {
		data.AddressIpv4 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address.ipv6"); value.Exists() {
		data.AddressIpv6 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "state-sync.ipv4s.ipv4"); value.Exists() {
		data.StateSyncIpv4s = make([]PCEStateSyncIpv4s, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := PCEStateSyncIpv4s{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			data.StateSyncIpv4s = append(data.StateSyncIpv4s, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "peer-filter.ipv4.access-list"); value.Exists() {
		data.PeerFilterIpv4AccessList = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "api.authentication.digest"); value.Exists() {
		data.ApiAuthenticationDigest = types.BoolValue(true)
	} else {
		data.ApiAuthenticationDigest = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "api.sibling.ipv4"); value.Exists() {
		data.ApiSiblingIpv4 = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "api.users.user"); value.Exists() {
		data.ApiUsers = make([]PCEApiUsers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := PCEApiUsers{}
			if cValue := v.Get("user-name"); cValue.Exists() {
				item.UserName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("password.encrypted"); cValue.Exists() {
				item.PasswordEncrypted = types.StringValue(cValue.String())
			}
			data.ApiUsers = append(data.ApiUsers, item)
			return true
		})
	}
}

func (data *PCE) getDeletedListItems(ctx context.Context, state PCE) []string {
	deletedListItems := make([]string, 0)
	for i := range state.StateSyncIpv4s {
		keys := [...]string{"address"}
		stateKeyValues := [...]string{state.StateSyncIpv4s[i].Address.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.StateSyncIpv4s[i].Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.StateSyncIpv4s {
			found = true
			if state.StateSyncIpv4s[i].Address.ValueString() != data.StateSyncIpv4s[j].Address.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if found {
		} else {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/state-sync/ipv4s/ipv4%v", state.getPath(), keyString))
		}
	}
	for i := range state.ApiUsers {
		keys := [...]string{"user-name"}
		stateKeyValues := [...]string{state.ApiUsers[i].UserName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.ApiUsers[i].UserName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.ApiUsers {
			found = true
			if state.ApiUsers[i].UserName.ValueString() != data.ApiUsers[j].UserName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if found {
		} else {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/api/users/user%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *PCE) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.StateSyncIpv4s {
		keys := [...]string{"address"}
		keyValues := [...]string{data.StateSyncIpv4s[i].Address.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.ApiAuthenticationDigest.IsNull() && !data.ApiAuthenticationDigest.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/api/authentication/digest", data.getPath()))
	}
	for i := range data.ApiUsers {
		keys := [...]string{"user-name"}
		keyValues := [...]string{data.ApiUsers[i].UserName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	return emptyLeafsDelete
}
