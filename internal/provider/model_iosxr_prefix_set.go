// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type PrefixSet struct {
	Device  types.String `tfsdk:"device"`
	Id      types.String `tfsdk:"id"`
	SetName types.String `tfsdk:"set_name"`
	Rpl     types.String `tfsdk:"rpl"`
}

func (data PrefixSet) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/sets/prefix-sets/prefix-set[set-name=%s]", data.SetName.ValueString())
}

func (data PrefixSet) toBody(ctx context.Context) string {
	body := "{}"
	if !data.SetName.IsNull() && !data.SetName.IsUnknown() {
		body, _ = sjson.Set(body, "set-name", data.SetName.ValueString())
	}
	if !data.Rpl.IsNull() && !data.Rpl.IsUnknown() {
		body, _ = sjson.Set(body, "rpl-prefix-set", data.Rpl.ValueString())
	}
	return body
}

func (data *PrefixSet) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "rpl-prefix-set"); value.Exists() && !data.Rpl.IsNull() {
		data.Rpl = types.StringValue(value.String())
	} else {
		data.Rpl = types.StringNull()
	}
}

func (data *PrefixSet) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "rpl-prefix-set"); value.Exists() {
		data.Rpl = types.StringValue(value.String())
	}
}

func (data *PrefixSet) fromPlan(ctx context.Context, plan PrefixSet) {
	data.Device = plan.Device
	data.SetName = types.StringValue(plan.SetName.ValueString())
}

func (data *PrefixSet) getDeletedListItems(ctx context.Context, state PrefixSet) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *PrefixSet) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
