// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type QOSPolicyMap struct {
	Device                          types.String                             `tfsdk:"device"`
	Id                              types.String                             `tfsdk:"id"`
	PolicyMapName                   types.String                             `tfsdk:"policy_map_name"`
	ClassName                       types.String                             `tfsdk:"class_name"`
	ClassType                       types.String                             `tfsdk:"class_type"`
	ClassSetMplsExperimentalTopmost types.Int64                              `tfsdk:"class_set_mpls_experimental_topmost"`
	ClassSetDscp                    types.String                             `tfsdk:"class_set_dscp"`
	ClassPriorityLevel              types.Int64                              `tfsdk:"class_priority_level"`
	ClassQueueLimitsQueueLimit      []QOSPolicyMapClassQueueLimitsQueueLimit `tfsdk:"class_queue_limits_queue_limit"`
	ClassServicePolicyName          types.String                             `tfsdk:"class_service_policy_name"`
	ClassPoliceRateValue            types.String                             `tfsdk:"class_police_rate_value"`
	ClassPoliceRateUnit             types.String                             `tfsdk:"class_police_rate_unit"`
	ClassShapeAverageRateValue      types.String                             `tfsdk:"class_shape_average_rate_value"`
	ClassShapeAverageRateUnit       types.String                             `tfsdk:"class_shape_average_rate_unit"`
	ClassBandwidthRemainingUnit     types.String                             `tfsdk:"class_bandwidth_remaining_unit"`
	ClassBandwidthRemainingValue    types.String                             `tfsdk:"class_bandwidth_remaining_value"`
}
type QOSPolicyMapClassQueueLimitsQueueLimit struct {
	Value types.String `tfsdk:"value"`
	Unit  types.String `tfsdk:"unit"`
}

func (data QOSPolicyMap) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-policymap-classmap-cfg:/policy-map/type/qos[policy-map-name=%s]", data.PolicyMapName.ValueString())
}

func (data QOSPolicyMap) toBody(ctx context.Context) string {
	body := "{}"
	if !data.PolicyMapName.IsNull() && !data.PolicyMapName.IsUnknown() {
		body, _ = sjson.Set(body, "policy-map-name", data.PolicyMapName.ValueString())
	}
	if !data.ClassName.IsNull() && !data.ClassName.IsUnknown() {
		body, _ = sjson.Set(body, "class.name", data.ClassName.ValueString())
	}
	if !data.ClassType.IsNull() && !data.ClassType.IsUnknown() {
		body, _ = sjson.Set(body, "class.type", data.ClassType.ValueString())
	}
	if !data.ClassSetMplsExperimentalTopmost.IsNull() && !data.ClassSetMplsExperimentalTopmost.IsUnknown() {
		body, _ = sjson.Set(body, "class.set.mpls.experimental.topmost", strconv.FormatInt(data.ClassSetMplsExperimentalTopmost.ValueInt64(), 10))
	}
	if !data.ClassSetDscp.IsNull() && !data.ClassSetDscp.IsUnknown() {
		body, _ = sjson.Set(body, "class.set.dscp", data.ClassSetDscp.ValueString())
	}
	if !data.ClassPriorityLevel.IsNull() && !data.ClassPriorityLevel.IsUnknown() {
		body, _ = sjson.Set(body, "class.priority.level", strconv.FormatInt(data.ClassPriorityLevel.ValueInt64(), 10))
	}
	if !data.ClassServicePolicyName.IsNull() && !data.ClassServicePolicyName.IsUnknown() {
		body, _ = sjson.Set(body, "class.service-policy.name", data.ClassServicePolicyName.ValueString())
	}
	if !data.ClassPoliceRateValue.IsNull() && !data.ClassPoliceRateValue.IsUnknown() {
		body, _ = sjson.Set(body, "class.police.rate.value", data.ClassPoliceRateValue.ValueString())
	}
	if !data.ClassPoliceRateUnit.IsNull() && !data.ClassPoliceRateUnit.IsUnknown() {
		body, _ = sjson.Set(body, "class.police.rate.unit", data.ClassPoliceRateUnit.ValueString())
	}
	if !data.ClassShapeAverageRateValue.IsNull() && !data.ClassShapeAverageRateValue.IsUnknown() {
		body, _ = sjson.Set(body, "class.shape.average.rate.value", data.ClassShapeAverageRateValue.ValueString())
	}
	if !data.ClassShapeAverageRateUnit.IsNull() && !data.ClassShapeAverageRateUnit.IsUnknown() {
		body, _ = sjson.Set(body, "class.shape.average.rate.unit", data.ClassShapeAverageRateUnit.ValueString())
	}
	if !data.ClassBandwidthRemainingUnit.IsNull() && !data.ClassBandwidthRemainingUnit.IsUnknown() {
		body, _ = sjson.Set(body, "class.bandwidth-remaining.unit", data.ClassBandwidthRemainingUnit.ValueString())
	}
	if !data.ClassBandwidthRemainingValue.IsNull() && !data.ClassBandwidthRemainingValue.IsUnknown() {
		body, _ = sjson.Set(body, "class.bandwidth-remaining.value", data.ClassBandwidthRemainingValue.ValueString())
	}
	if len(data.ClassQueueLimitsQueueLimit) > 0 {
		body, _ = sjson.Set(body, "class.queue-limits.queue-limit", []interface{}{})
		for index, item := range data.ClassQueueLimitsQueueLimit {
			if !item.Value.IsNull() && !item.Value.IsUnknown() {
				body, _ = sjson.Set(body, "class.queue-limits.queue-limit"+"."+strconv.Itoa(index)+"."+"value", item.Value.ValueString())
			}
			if !item.Unit.IsNull() && !item.Unit.IsUnknown() {
				body, _ = sjson.Set(body, "class.queue-limits.queue-limit"+"."+strconv.Itoa(index)+"."+"unit", item.Unit.ValueString())
			}
		}
	}
	return body
}

func (data *QOSPolicyMap) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "class.name"); value.Exists() && !data.ClassName.IsNull() {
		data.ClassName = types.StringValue(value.String())
	} else {
		data.ClassName = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.type"); value.Exists() && !data.ClassType.IsNull() {
		data.ClassType = types.StringValue(value.String())
	} else {
		data.ClassType = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.set.mpls.experimental.topmost"); value.Exists() && !data.ClassSetMplsExperimentalTopmost.IsNull() {
		data.ClassSetMplsExperimentalTopmost = types.Int64Value(value.Int())
	} else {
		data.ClassSetMplsExperimentalTopmost = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "class.set.dscp"); value.Exists() && !data.ClassSetDscp.IsNull() {
		data.ClassSetDscp = types.StringValue(value.String())
	} else {
		data.ClassSetDscp = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.priority.level"); value.Exists() && !data.ClassPriorityLevel.IsNull() {
		data.ClassPriorityLevel = types.Int64Value(value.Int())
	} else {
		data.ClassPriorityLevel = types.Int64Null()
	}
	for i := range data.ClassQueueLimitsQueueLimit {
		keys := [...]string{"value", "unit"}
		keyValues := [...]string{data.ClassQueueLimitsQueueLimit[i].Value.ValueString(), data.ClassQueueLimitsQueueLimit[i].Unit.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "class.queue-limits.queue-limit").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("value"); value.Exists() && !data.ClassQueueLimitsQueueLimit[i].Value.IsNull() {
			data.ClassQueueLimitsQueueLimit[i].Value = types.StringValue(value.String())
		} else {
			data.ClassQueueLimitsQueueLimit[i].Value = types.StringNull()
		}
		if value := r.Get("unit"); value.Exists() && !data.ClassQueueLimitsQueueLimit[i].Unit.IsNull() {
			data.ClassQueueLimitsQueueLimit[i].Unit = types.StringValue(value.String())
		} else {
			data.ClassQueueLimitsQueueLimit[i].Unit = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "class.service-policy.name"); value.Exists() && !data.ClassServicePolicyName.IsNull() {
		data.ClassServicePolicyName = types.StringValue(value.String())
	} else {
		data.ClassServicePolicyName = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.police.rate.value"); value.Exists() && !data.ClassPoliceRateValue.IsNull() {
		data.ClassPoliceRateValue = types.StringValue(value.String())
	} else {
		data.ClassPoliceRateValue = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.police.rate.unit"); value.Exists() && !data.ClassPoliceRateUnit.IsNull() {
		data.ClassPoliceRateUnit = types.StringValue(value.String())
	} else {
		data.ClassPoliceRateUnit = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.shape.average.rate.value"); value.Exists() && !data.ClassShapeAverageRateValue.IsNull() {
		data.ClassShapeAverageRateValue = types.StringValue(value.String())
	} else {
		data.ClassShapeAverageRateValue = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.shape.average.rate.unit"); value.Exists() && !data.ClassShapeAverageRateUnit.IsNull() {
		data.ClassShapeAverageRateUnit = types.StringValue(value.String())
	} else {
		data.ClassShapeAverageRateUnit = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.bandwidth-remaining.unit"); value.Exists() && !data.ClassBandwidthRemainingUnit.IsNull() {
		data.ClassBandwidthRemainingUnit = types.StringValue(value.String())
	} else {
		data.ClassBandwidthRemainingUnit = types.StringNull()
	}
	if value := gjson.GetBytes(res, "class.bandwidth-remaining.value"); value.Exists() && !data.ClassBandwidthRemainingValue.IsNull() {
		data.ClassBandwidthRemainingValue = types.StringValue(value.String())
	} else {
		data.ClassBandwidthRemainingValue = types.StringNull()
	}
}

func (data *QOSPolicyMap) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "class.name"); value.Exists() {
		data.ClassName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.type"); value.Exists() {
		data.ClassType = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.set.mpls.experimental.topmost"); value.Exists() {
		data.ClassSetMplsExperimentalTopmost = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "class.set.dscp"); value.Exists() {
		data.ClassSetDscp = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.priority.level"); value.Exists() {
		data.ClassPriorityLevel = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "class.queue-limits.queue-limit"); value.Exists() {
		data.ClassQueueLimitsQueueLimit = make([]QOSPolicyMapClassQueueLimitsQueueLimit, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := QOSPolicyMapClassQueueLimitsQueueLimit{}
			if cValue := v.Get("value"); cValue.Exists() {
				item.Value = types.StringValue(cValue.String())
			}
			if cValue := v.Get("unit"); cValue.Exists() {
				item.Unit = types.StringValue(cValue.String())
			}
			data.ClassQueueLimitsQueueLimit = append(data.ClassQueueLimitsQueueLimit, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "class.service-policy.name"); value.Exists() {
		data.ClassServicePolicyName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.police.rate.value"); value.Exists() {
		data.ClassPoliceRateValue = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.police.rate.unit"); value.Exists() {
		data.ClassPoliceRateUnit = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.shape.average.rate.value"); value.Exists() {
		data.ClassShapeAverageRateValue = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.shape.average.rate.unit"); value.Exists() {
		data.ClassShapeAverageRateUnit = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.bandwidth-remaining.unit"); value.Exists() {
		data.ClassBandwidthRemainingUnit = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "class.bandwidth-remaining.value"); value.Exists() {
		data.ClassBandwidthRemainingValue = types.StringValue(value.String())
	}
}

func (data *QOSPolicyMap) getDeletedListItems(ctx context.Context, state QOSPolicyMap) []string {
	deletedListItems := make([]string, 0)
	for i := range state.ClassQueueLimitsQueueLimit {
		keys := [...]string{"value", "unit"}
		stateKeyValues := [...]string{state.ClassQueueLimitsQueueLimit[i].Value.ValueString(), state.ClassQueueLimitsQueueLimit[i].Unit.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.ClassQueueLimitsQueueLimit[i].Value.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.ClassQueueLimitsQueueLimit[i].Unit.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.ClassQueueLimitsQueueLimit {
			found = true
			if state.ClassQueueLimitsQueueLimit[i].Value.ValueString() != data.ClassQueueLimitsQueueLimit[j].Value.ValueString() {
				found = false
			}
			if state.ClassQueueLimitsQueueLimit[i].Unit.ValueString() != data.ClassQueueLimitsQueueLimit[j].Unit.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/class/queue-limits/queue-limit%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *QOSPolicyMap) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
