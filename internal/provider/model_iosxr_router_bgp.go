// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterBGP struct {
	Device                      types.String `tfsdk:"device"`
	Id                          types.String `tfsdk:"id"`
	AsNumber                    types.String `tfsdk:"as_number"`
	DefaultInformationOriginate types.Bool   `tfsdk:"default_information_originate"`
	DefaultMetric               types.Int64  `tfsdk:"default_metric"`
	TimersBgpKeepaliveInterval  types.Int64  `tfsdk:"timers_bgp_keepalive_interval"`
	TimersBgpHoldtime           types.String `tfsdk:"timers_bgp_holdtime"`
	BfdMinimumInterval          types.Int64  `tfsdk:"bfd_minimum_interval"`
	BfdMultiplier               types.Int64  `tfsdk:"bfd_multiplier"`
}

func (data RouterBGP) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=%s]", data.AsNumber.Value)
}

func (data RouterBGP) toBody() string {
	body := "{}"
	if !data.DefaultInformationOriginate.Null && !data.DefaultInformationOriginate.Unknown {
		if data.DefaultInformationOriginate.Value {
			body, _ = sjson.Set(body, "default-information.originate", map[string]string{})
		}
	}
	if !data.DefaultMetric.Null && !data.DefaultMetric.Unknown {
		body, _ = sjson.Set(body, "default-metric", strconv.FormatInt(data.DefaultMetric.Value, 10))
	}
	if !data.TimersBgpKeepaliveInterval.Null && !data.TimersBgpKeepaliveInterval.Unknown {
		body, _ = sjson.Set(body, "timers.bgp.keepalive-interval", strconv.FormatInt(data.TimersBgpKeepaliveInterval.Value, 10))
	}
	if !data.TimersBgpHoldtime.Null && !data.TimersBgpHoldtime.Unknown {
		body, _ = sjson.Set(body, "timers.bgp.holdtime", data.TimersBgpHoldtime.Value)
	}
	if !data.BfdMinimumInterval.Null && !data.BfdMinimumInterval.Unknown {
		body, _ = sjson.Set(body, "bfd.minimum-interval", strconv.FormatInt(data.BfdMinimumInterval.Value, 10))
	}
	if !data.BfdMultiplier.Null && !data.BfdMultiplier.Unknown {
		body, _ = sjson.Set(body, "bfd.multiplier", strconv.FormatInt(data.BfdMultiplier.Value, 10))
	}
	return body
}

func (data *RouterBGP) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
	} else {
		data.DefaultInformationOriginate.Value = false
	}
	if value := gjson.GetBytes(res, "default-metric"); value.Exists() {
		data.DefaultMetric.Value = value.Int()
	} else {
		data.DefaultMetric.Null = true
	}
	if value := gjson.GetBytes(res, "timers.bgp.keepalive-interval"); value.Exists() {
		data.TimersBgpKeepaliveInterval.Value = value.Int()
	} else {
		data.TimersBgpKeepaliveInterval.Null = true
	}
	if value := gjson.GetBytes(res, "timers.bgp.holdtime"); value.Exists() {
		data.TimersBgpHoldtime.Value = value.String()
	} else {
		data.TimersBgpHoldtime.Null = true
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() {
		data.BfdMinimumInterval.Value = value.Int()
	} else {
		data.BfdMinimumInterval.Null = true
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() {
		data.BfdMultiplier.Value = value.Int()
	} else {
		data.BfdMultiplier.Null = true
	}
}

func (data *RouterBGP) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
		data.DefaultInformationOriginate.Null = false
	} else {
		data.DefaultInformationOriginate.Value = false
		data.DefaultInformationOriginate.Null = false
	}
	if value := gjson.GetBytes(res, "default-metric"); value.Exists() {
		data.DefaultMetric.Value = value.Int()
		data.DefaultMetric.Null = false
	}
	if value := gjson.GetBytes(res, "timers.bgp.keepalive-interval"); value.Exists() {
		data.TimersBgpKeepaliveInterval.Value = value.Int()
		data.TimersBgpKeepaliveInterval.Null = false
	}
	if value := gjson.GetBytes(res, "timers.bgp.holdtime"); value.Exists() {
		data.TimersBgpHoldtime.Value = value.String()
		data.TimersBgpHoldtime.Null = false
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() {
		data.BfdMinimumInterval.Value = value.Int()
		data.BfdMinimumInterval.Null = false
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() {
		data.BfdMultiplier.Value = value.Int()
		data.BfdMultiplier.Null = false
	}
}

func (data *RouterBGP) fromPlan(plan RouterBGP) {
	data.Device = plan.Device
	data.AsNumber.Value = plan.AsNumber.Value
}

func (data *RouterBGP) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.AsNumber.Unknown {
		data.AsNumber.Unknown = false
		data.AsNumber.Null = true
	}
	if data.DefaultInformationOriginate.Unknown {
		data.DefaultInformationOriginate.Unknown = false
		data.DefaultInformationOriginate.Null = true
	}
	if data.DefaultMetric.Unknown {
		data.DefaultMetric.Unknown = false
		data.DefaultMetric.Null = true
	}
	if data.TimersBgpKeepaliveInterval.Unknown {
		data.TimersBgpKeepaliveInterval.Unknown = false
		data.TimersBgpKeepaliveInterval.Null = true
	}
	if data.TimersBgpHoldtime.Unknown {
		data.TimersBgpHoldtime.Unknown = false
		data.TimersBgpHoldtime.Null = true
	}
	if data.BfdMinimumInterval.Unknown {
		data.BfdMinimumInterval.Unknown = false
		data.BfdMinimumInterval.Null = true
	}
	if data.BfdMultiplier.Unknown {
		data.BfdMultiplier.Unknown = false
		data.BfdMultiplier.Null = true
	}
}

func (data *RouterBGP) getDeletedListItems(state RouterBGP) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *RouterBGP) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
