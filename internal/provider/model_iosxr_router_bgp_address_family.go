// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterBGPAddressFamily struct {
	Device                      types.String                               `tfsdk:"device"`
	Id                          types.String                               `tfsdk:"id"`
	AsNumber                    types.String                               `tfsdk:"as_number"`
	AfName                      types.String                               `tfsdk:"af_name"`
	MaximumPathsEbgpMultipath   types.Int64                                `tfsdk:"maximum_paths_ebgp_multipath"`
	MaximumPathsEibgpMultipath  types.Int64                                `tfsdk:"maximum_paths_eibgp_multipath"`
	MaximumPathsIbgpMultipath   types.Int64                                `tfsdk:"maximum_paths_ibgp_multipath"`
	LabelModePerCe              types.Bool                                 `tfsdk:"label_mode_per_ce"`
	LabelModePerVrf             types.Bool                                 `tfsdk:"label_mode_per_vrf"`
	RedistributeConnected       types.Bool                                 `tfsdk:"redistribute_connected"`
	RedistributeConnectedMetric types.Int64                                `tfsdk:"redistribute_connected_metric"`
	RedistributeStatic          types.Bool                                 `tfsdk:"redistribute_static"`
	RedistributeStaticMetric    types.Int64                                `tfsdk:"redistribute_static_metric"`
	AggregateAddresses          []RouterBGPAddressFamilyAggregateAddresses `tfsdk:"aggregate_addresses"`
	Networks                    []RouterBGPAddressFamilyNetworks           `tfsdk:"networks"`
	RedistributeIsis            []RouterBGPAddressFamilyRedistributeIsis   `tfsdk:"redistribute_isis"`
	RedistributeOspf            []RouterBGPAddressFamilyRedistributeOspf   `tfsdk:"redistribute_ospf"`
}
type RouterBGPAddressFamilyAggregateAddresses struct {
	Address     types.String `tfsdk:"address"`
	Masklength  types.Int64  `tfsdk:"masklength"`
	AsSet       types.Bool   `tfsdk:"as_set"`
	AsConfedSet types.Bool   `tfsdk:"as_confed_set"`
	SummaryOnly types.Bool   `tfsdk:"summary_only"`
}
type RouterBGPAddressFamilyNetworks struct {
	Address    types.String `tfsdk:"address"`
	Masklength types.Int64  `tfsdk:"masklength"`
}
type RouterBGPAddressFamilyRedistributeIsis struct {
	InstanceName            types.String `tfsdk:"instance_name"`
	LevelOne                types.Bool   `tfsdk:"level_one"`
	LevelOneTwo             types.Bool   `tfsdk:"level_one_two"`
	LevelOneTwoOneInterArea types.Bool   `tfsdk:"level_one_two_one_inter_area"`
	LevelOneOneInterArea    types.Bool   `tfsdk:"level_one_one_inter_area"`
	LevelTwo                types.Bool   `tfsdk:"level_two"`
	LevelTwoOneInterArea    types.Bool   `tfsdk:"level_two_one_inter_area"`
	LevelOneInterArea       types.Bool   `tfsdk:"level_one_inter_area"`
	Metric                  types.Int64  `tfsdk:"metric"`
}
type RouterBGPAddressFamilyRedistributeOspf struct {
	RouterTag                 types.String `tfsdk:"router_tag"`
	MatchInternal             types.Bool   `tfsdk:"match_internal"`
	MatchInternalExternal     types.Bool   `tfsdk:"match_internal_external"`
	MatchInternalNssaExternal types.Bool   `tfsdk:"match_internal_nssa_external"`
	MatchExternal             types.Bool   `tfsdk:"match_external"`
	MatchExternalNssaExternal types.Bool   `tfsdk:"match_external_nssa_external"`
	MatchNssaExternal         types.Bool   `tfsdk:"match_nssa_external"`
	Metric                    types.Int64  `tfsdk:"metric"`
}

func (data RouterBGPAddressFamily) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=%s]/address-families/address-family[af-name=%s]", data.AsNumber.Value, data.AfName.Value)
}

func (data RouterBGPAddressFamily) toBody() string {
	body := "{}"
	if !data.MaximumPathsEbgpMultipath.Null && !data.MaximumPathsEbgpMultipath.Unknown {
		body, _ = sjson.Set(body, "maximum-paths.ebgp.multipath", strconv.FormatInt(data.MaximumPathsEbgpMultipath.Value, 10))
	}
	if !data.MaximumPathsEibgpMultipath.Null && !data.MaximumPathsEibgpMultipath.Unknown {
		body, _ = sjson.Set(body, "maximum-paths.eibgp.multipath", strconv.FormatInt(data.MaximumPathsEibgpMultipath.Value, 10))
	}
	if !data.MaximumPathsIbgpMultipath.Null && !data.MaximumPathsIbgpMultipath.Unknown {
		body, _ = sjson.Set(body, "maximum-paths.ibgp.multipath", strconv.FormatInt(data.MaximumPathsIbgpMultipath.Value, 10))
	}
	if !data.LabelModePerCe.Null && !data.LabelModePerCe.Unknown {
		if data.LabelModePerCe.Value {
			body, _ = sjson.Set(body, "label.mode.per-ce", map[string]string{})
		}
	}
	if !data.LabelModePerVrf.Null && !data.LabelModePerVrf.Unknown {
		if data.LabelModePerVrf.Value {
			body, _ = sjson.Set(body, "label.mode.per-vrf", map[string]string{})
		}
	}
	if !data.RedistributeConnected.Null && !data.RedistributeConnected.Unknown {
		if data.RedistributeConnected.Value {
			body, _ = sjson.Set(body, "redistribute.connected", map[string]string{})
		}
	}
	if !data.RedistributeConnectedMetric.Null && !data.RedistributeConnectedMetric.Unknown {
		body, _ = sjson.Set(body, "redistribute.connected.metric", strconv.FormatInt(data.RedistributeConnectedMetric.Value, 10))
	}
	if !data.RedistributeStatic.Null && !data.RedistributeStatic.Unknown {
		if data.RedistributeStatic.Value {
			body, _ = sjson.Set(body, "redistribute.static", map[string]string{})
		}
	}
	if !data.RedistributeStaticMetric.Null && !data.RedistributeStaticMetric.Unknown {
		body, _ = sjson.Set(body, "redistribute.static.metric", strconv.FormatInt(data.RedistributeStaticMetric.Value, 10))
	}
	if len(data.AggregateAddresses) > 0 {
		body, _ = sjson.Set(body, "aggregate-addresses.aggregate-address", []interface{}{})
		for index, item := range data.AggregateAddresses {
			if !item.Address.Null && !item.Address.Unknown {
				body, _ = sjson.Set(body, "aggregate-addresses.aggregate-address"+"."+strconv.Itoa(index)+"."+"address", item.Address.Value)
			}
			if !item.Masklength.Null && !item.Masklength.Unknown {
				body, _ = sjson.Set(body, "aggregate-addresses.aggregate-address"+"."+strconv.Itoa(index)+"."+"masklength", strconv.FormatInt(item.Masklength.Value, 10))
			}
			if !item.AsSet.Null && !item.AsSet.Unknown {
				if item.AsSet.Value {
					body, _ = sjson.Set(body, "aggregate-addresses.aggregate-address"+"."+strconv.Itoa(index)+"."+"as-set", map[string]string{})
				}
			}
			if !item.AsConfedSet.Null && !item.AsConfedSet.Unknown {
				if item.AsConfedSet.Value {
					body, _ = sjson.Set(body, "aggregate-addresses.aggregate-address"+"."+strconv.Itoa(index)+"."+"as-confed-set", map[string]string{})
				}
			}
			if !item.SummaryOnly.Null && !item.SummaryOnly.Unknown {
				if item.SummaryOnly.Value {
					body, _ = sjson.Set(body, "aggregate-addresses.aggregate-address"+"."+strconv.Itoa(index)+"."+"summary-only", map[string]string{})
				}
			}
		}
	}
	if len(data.Networks) > 0 {
		body, _ = sjson.Set(body, "networks.network", []interface{}{})
		for index, item := range data.Networks {
			if !item.Address.Null && !item.Address.Unknown {
				body, _ = sjson.Set(body, "networks.network"+"."+strconv.Itoa(index)+"."+"address", item.Address.Value)
			}
			if !item.Masklength.Null && !item.Masklength.Unknown {
				body, _ = sjson.Set(body, "networks.network"+"."+strconv.Itoa(index)+"."+"masklength", strconv.FormatInt(item.Masklength.Value, 10))
			}
		}
	}
	if len(data.RedistributeIsis) > 0 {
		body, _ = sjson.Set(body, "redistribute.isis", []interface{}{})
		for index, item := range data.RedistributeIsis {
			if !item.InstanceName.Null && !item.InstanceName.Unknown {
				body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"instance-name", item.InstanceName.Value)
			}
			if !item.LevelOne.Null && !item.LevelOne.Unknown {
				if item.LevelOne.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level.one", map[string]string{})
				}
			}
			if !item.LevelOneTwo.Null && !item.LevelOneTwo.Unknown {
				if item.LevelOneTwo.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level.one.two", map[string]string{})
				}
			}
			if !item.LevelOneTwoOneInterArea.Null && !item.LevelOneTwoOneInterArea.Unknown {
				if item.LevelOneTwoOneInterArea.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level.one.two.one-inter-area", map[string]string{})
				}
			}
			if !item.LevelOneOneInterArea.Null && !item.LevelOneOneInterArea.Unknown {
				if item.LevelOneOneInterArea.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level.one.one-inter-area", map[string]string{})
				}
			}
			if !item.LevelTwo.Null && !item.LevelTwo.Unknown {
				if item.LevelTwo.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level.two", map[string]string{})
				}
			}
			if !item.LevelTwoOneInterArea.Null && !item.LevelTwoOneInterArea.Unknown {
				if item.LevelTwoOneInterArea.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level.two.one-inter-area", map[string]string{})
				}
			}
			if !item.LevelOneInterArea.Null && !item.LevelOneInterArea.Unknown {
				if item.LevelOneInterArea.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level.one-inter-area", map[string]string{})
				}
			}
			if !item.Metric.Null && !item.Metric.Unknown {
				body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"metric", strconv.FormatInt(item.Metric.Value, 10))
			}
		}
	}
	if len(data.RedistributeOspf) > 0 {
		body, _ = sjson.Set(body, "redistribute.ospf", []interface{}{})
		for index, item := range data.RedistributeOspf {
			if !item.RouterTag.Null && !item.RouterTag.Unknown {
				body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"router-tag", item.RouterTag.Value)
			}
			if !item.MatchInternal.Null && !item.MatchInternal.Unknown {
				if item.MatchInternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.internal", map[string]string{})
				}
			}
			if !item.MatchInternalExternal.Null && !item.MatchInternalExternal.Unknown {
				if item.MatchInternalExternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.internal.external", map[string]string{})
				}
			}
			if !item.MatchInternalNssaExternal.Null && !item.MatchInternalNssaExternal.Unknown {
				if item.MatchInternalNssaExternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.internal.nssa-external", map[string]string{})
				}
			}
			if !item.MatchExternal.Null && !item.MatchExternal.Unknown {
				if item.MatchExternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.external", map[string]string{})
				}
			}
			if !item.MatchExternalNssaExternal.Null && !item.MatchExternalNssaExternal.Unknown {
				if item.MatchExternalNssaExternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.external.nssa-external", map[string]string{})
				}
			}
			if !item.MatchNssaExternal.Null && !item.MatchNssaExternal.Unknown {
				if item.MatchNssaExternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.nssa-external", map[string]string{})
				}
			}
			if !item.Metric.Null && !item.Metric.Unknown {
				body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"metric", strconv.FormatInt(item.Metric.Value, 10))
			}
		}
	}
	return body
}

func (data *RouterBGPAddressFamily) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "maximum-paths.ebgp.multipath"); value.Exists() {
		data.MaximumPathsEbgpMultipath.Value = value.Int()
	} else {
		data.MaximumPathsEbgpMultipath.Null = true
	}
	if value := gjson.GetBytes(res, "maximum-paths.eibgp.multipath"); value.Exists() {
		data.MaximumPathsEibgpMultipath.Value = value.Int()
	} else {
		data.MaximumPathsEibgpMultipath.Null = true
	}
	if value := gjson.GetBytes(res, "maximum-paths.ibgp.multipath"); value.Exists() {
		data.MaximumPathsIbgpMultipath.Value = value.Int()
	} else {
		data.MaximumPathsIbgpMultipath.Null = true
	}
	if value := gjson.GetBytes(res, "label.mode.per-ce"); value.Exists() {
		data.LabelModePerCe.Value = true
	} else {
		data.LabelModePerCe.Value = false
	}
	if value := gjson.GetBytes(res, "label.mode.per-vrf"); value.Exists() {
		data.LabelModePerVrf.Value = true
	} else {
		data.LabelModePerVrf.Value = false
	}
	if value := gjson.GetBytes(res, "redistribute.connected"); value.Exists() {
		data.RedistributeConnected.Value = true
	} else {
		data.RedistributeConnected.Value = false
	}
	if value := gjson.GetBytes(res, "redistribute.connected.metric"); value.Exists() {
		data.RedistributeConnectedMetric.Value = value.Int()
	} else {
		data.RedistributeConnectedMetric.Null = true
	}
	if value := gjson.GetBytes(res, "redistribute.static"); value.Exists() {
		data.RedistributeStatic.Value = true
	} else {
		data.RedistributeStatic.Value = false
	}
	if value := gjson.GetBytes(res, "redistribute.static.metric"); value.Exists() {
		data.RedistributeStaticMetric.Value = value.Int()
	} else {
		data.RedistributeStaticMetric.Null = true
	}
	for i := range data.AggregateAddresses {
		keys := [...]string{"address", "masklength"}
		keyValues := [...]string{data.AggregateAddresses[i].Address.Value, strconv.FormatInt(data.AggregateAddresses[i].Masklength.Value, 10)}

		var r gjson.Result
		gjson.GetBytes(res, "aggregate-addresses.aggregate-address").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("address"); value.Exists() {
			data.AggregateAddresses[i].Address.Value = value.String()
		} else {
			data.AggregateAddresses[i].Address.Null = true
		}
		if value := r.Get("masklength"); value.Exists() {
			data.AggregateAddresses[i].Masklength.Value = value.Int()
		} else {
			data.AggregateAddresses[i].Masklength.Null = true
		}
		if value := r.Get("as-set"); value.Exists() {
			data.AggregateAddresses[i].AsSet.Value = true
		} else {
			data.AggregateAddresses[i].AsSet.Value = false
		}
		if value := r.Get("as-confed-set"); value.Exists() {
			data.AggregateAddresses[i].AsConfedSet.Value = true
		} else {
			data.AggregateAddresses[i].AsConfedSet.Value = false
		}
		if value := r.Get("summary-only"); value.Exists() {
			data.AggregateAddresses[i].SummaryOnly.Value = true
		} else {
			data.AggregateAddresses[i].SummaryOnly.Value = false
		}
	}
	for i := range data.Networks {
		keys := [...]string{"address", "masklength"}
		keyValues := [...]string{data.Networks[i].Address.Value, strconv.FormatInt(data.Networks[i].Masklength.Value, 10)}

		var r gjson.Result
		gjson.GetBytes(res, "networks.network").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("address"); value.Exists() {
			data.Networks[i].Address.Value = value.String()
		} else {
			data.Networks[i].Address.Null = true
		}
		if value := r.Get("masklength"); value.Exists() {
			data.Networks[i].Masklength.Value = value.Int()
		} else {
			data.Networks[i].Masklength.Null = true
		}
	}
	for i := range data.RedistributeIsis {
		keys := [...]string{"instance-name"}
		keyValues := [...]string{data.RedistributeIsis[i].InstanceName.Value}

		var r gjson.Result
		gjson.GetBytes(res, "redistribute.isis").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("instance-name"); value.Exists() {
			data.RedistributeIsis[i].InstanceName.Value = value.String()
		} else {
			data.RedistributeIsis[i].InstanceName.Null = true
		}
		if value := r.Get("level.one"); value.Exists() {
			data.RedistributeIsis[i].LevelOne.Value = true
		} else {
			data.RedistributeIsis[i].LevelOne.Value = false
		}
		if value := r.Get("level.one.two"); value.Exists() {
			data.RedistributeIsis[i].LevelOneTwo.Value = true
		} else {
			data.RedistributeIsis[i].LevelOneTwo.Value = false
		}
		if value := r.Get("level.one.two.one-inter-area"); value.Exists() {
			data.RedistributeIsis[i].LevelOneTwoOneInterArea.Value = true
		} else {
			data.RedistributeIsis[i].LevelOneTwoOneInterArea.Value = false
		}
		if value := r.Get("level.one.one-inter-area"); value.Exists() {
			data.RedistributeIsis[i].LevelOneOneInterArea.Value = true
		} else {
			data.RedistributeIsis[i].LevelOneOneInterArea.Value = false
		}
		if value := r.Get("level.two"); value.Exists() {
			data.RedistributeIsis[i].LevelTwo.Value = true
		} else {
			data.RedistributeIsis[i].LevelTwo.Value = false
		}
		if value := r.Get("level.two.one-inter-area"); value.Exists() {
			data.RedistributeIsis[i].LevelTwoOneInterArea.Value = true
		} else {
			data.RedistributeIsis[i].LevelTwoOneInterArea.Value = false
		}
		if value := r.Get("level.one-inter-area"); value.Exists() {
			data.RedistributeIsis[i].LevelOneInterArea.Value = true
		} else {
			data.RedistributeIsis[i].LevelOneInterArea.Value = false
		}
		if value := r.Get("metric"); value.Exists() {
			data.RedistributeIsis[i].Metric.Value = value.Int()
		} else {
			data.RedistributeIsis[i].Metric.Null = true
		}
	}
	for i := range data.RedistributeOspf {
		keys := [...]string{"router-tag"}
		keyValues := [...]string{data.RedistributeOspf[i].RouterTag.Value}

		var r gjson.Result
		gjson.GetBytes(res, "redistribute.ospf").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("router-tag"); value.Exists() {
			data.RedistributeOspf[i].RouterTag.Value = value.String()
		} else {
			data.RedistributeOspf[i].RouterTag.Null = true
		}
		if value := r.Get("match.internal"); value.Exists() {
			data.RedistributeOspf[i].MatchInternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchInternal.Value = false
		}
		if value := r.Get("match.internal.external"); value.Exists() {
			data.RedistributeOspf[i].MatchInternalExternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchInternalExternal.Value = false
		}
		if value := r.Get("match.internal.nssa-external"); value.Exists() {
			data.RedistributeOspf[i].MatchInternalNssaExternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchInternalNssaExternal.Value = false
		}
		if value := r.Get("match.external"); value.Exists() {
			data.RedistributeOspf[i].MatchExternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchExternal.Value = false
		}
		if value := r.Get("match.external.nssa-external"); value.Exists() {
			data.RedistributeOspf[i].MatchExternalNssaExternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchExternalNssaExternal.Value = false
		}
		if value := r.Get("match.nssa-external"); value.Exists() {
			data.RedistributeOspf[i].MatchNssaExternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchNssaExternal.Value = false
		}
		if value := r.Get("metric"); value.Exists() {
			data.RedistributeOspf[i].Metric.Value = value.Int()
		} else {
			data.RedistributeOspf[i].Metric.Null = true
		}
	}
}

func (data *RouterBGPAddressFamily) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "maximum-paths.ebgp.multipath"); value.Exists() {
		data.MaximumPathsEbgpMultipath.Value = value.Int()
		data.MaximumPathsEbgpMultipath.Null = false
	}
	if value := gjson.GetBytes(res, "maximum-paths.eibgp.multipath"); value.Exists() {
		data.MaximumPathsEibgpMultipath.Value = value.Int()
		data.MaximumPathsEibgpMultipath.Null = false
	}
	if value := gjson.GetBytes(res, "maximum-paths.ibgp.multipath"); value.Exists() {
		data.MaximumPathsIbgpMultipath.Value = value.Int()
		data.MaximumPathsIbgpMultipath.Null = false
	}
	if value := gjson.GetBytes(res, "label.mode.per-ce"); value.Exists() {
		data.LabelModePerCe.Value = true
		data.LabelModePerCe.Null = false
	} else {
		data.LabelModePerCe.Value = false
		data.LabelModePerCe.Null = false
	}
	if value := gjson.GetBytes(res, "label.mode.per-vrf"); value.Exists() {
		data.LabelModePerVrf.Value = true
		data.LabelModePerVrf.Null = false
	} else {
		data.LabelModePerVrf.Value = false
		data.LabelModePerVrf.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.connected"); value.Exists() {
		data.RedistributeConnected.Value = true
		data.RedistributeConnected.Null = false
	} else {
		data.RedistributeConnected.Value = false
		data.RedistributeConnected.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.connected.metric"); value.Exists() {
		data.RedistributeConnectedMetric.Value = value.Int()
		data.RedistributeConnectedMetric.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.static"); value.Exists() {
		data.RedistributeStatic.Value = true
		data.RedistributeStatic.Null = false
	} else {
		data.RedistributeStatic.Value = false
		data.RedistributeStatic.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.static.metric"); value.Exists() {
		data.RedistributeStaticMetric.Value = value.Int()
		data.RedistributeStaticMetric.Null = false
	}
	if value := gjson.GetBytes(res, "aggregate-addresses.aggregate-address"); value.Exists() {
		data.AggregateAddresses = make([]RouterBGPAddressFamilyAggregateAddresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterBGPAddressFamilyAggregateAddresses{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address.Value = cValue.String()
				item.Address.Null = false
			}
			if cValue := v.Get("masklength"); cValue.Exists() {
				item.Masklength.Value = cValue.Int()
				item.Masklength.Null = false
			}
			if cValue := v.Get("as-set"); cValue.Exists() {
				item.AsSet.Value = true
				item.AsSet.Null = false
			}
			if cValue := v.Get("as-confed-set"); cValue.Exists() {
				item.AsConfedSet.Value = true
				item.AsConfedSet.Null = false
			}
			if cValue := v.Get("summary-only"); cValue.Exists() {
				item.SummaryOnly.Value = true
				item.SummaryOnly.Null = false
			}
			data.AggregateAddresses = append(data.AggregateAddresses, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "networks.network"); value.Exists() {
		data.Networks = make([]RouterBGPAddressFamilyNetworks, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterBGPAddressFamilyNetworks{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address.Value = cValue.String()
				item.Address.Null = false
			}
			if cValue := v.Get("masklength"); cValue.Exists() {
				item.Masklength.Value = cValue.Int()
				item.Masklength.Null = false
			}
			data.Networks = append(data.Networks, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "redistribute.isis"); value.Exists() {
		data.RedistributeIsis = make([]RouterBGPAddressFamilyRedistributeIsis, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterBGPAddressFamilyRedistributeIsis{}
			if cValue := v.Get("instance-name"); cValue.Exists() {
				item.InstanceName.Value = cValue.String()
				item.InstanceName.Null = false
			}
			if cValue := v.Get("level.one"); cValue.Exists() {
				item.LevelOne.Value = true
				item.LevelOne.Null = false
			}
			if cValue := v.Get("level.one.two"); cValue.Exists() {
				item.LevelOneTwo.Value = true
				item.LevelOneTwo.Null = false
			}
			if cValue := v.Get("level.one.two.one-inter-area"); cValue.Exists() {
				item.LevelOneTwoOneInterArea.Value = true
				item.LevelOneTwoOneInterArea.Null = false
			}
			if cValue := v.Get("level.one.one-inter-area"); cValue.Exists() {
				item.LevelOneOneInterArea.Value = true
				item.LevelOneOneInterArea.Null = false
			}
			if cValue := v.Get("level.two"); cValue.Exists() {
				item.LevelTwo.Value = true
				item.LevelTwo.Null = false
			}
			if cValue := v.Get("level.two.one-inter-area"); cValue.Exists() {
				item.LevelTwoOneInterArea.Value = true
				item.LevelTwoOneInterArea.Null = false
			}
			if cValue := v.Get("level.one-inter-area"); cValue.Exists() {
				item.LevelOneInterArea.Value = true
				item.LevelOneInterArea.Null = false
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric.Value = cValue.Int()
				item.Metric.Null = false
			}
			data.RedistributeIsis = append(data.RedistributeIsis, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "redistribute.ospf"); value.Exists() {
		data.RedistributeOspf = make([]RouterBGPAddressFamilyRedistributeOspf, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterBGPAddressFamilyRedistributeOspf{}
			if cValue := v.Get("router-tag"); cValue.Exists() {
				item.RouterTag.Value = cValue.String()
				item.RouterTag.Null = false
			}
			if cValue := v.Get("match.internal"); cValue.Exists() {
				item.MatchInternal.Value = true
				item.MatchInternal.Null = false
			}
			if cValue := v.Get("match.internal.external"); cValue.Exists() {
				item.MatchInternalExternal.Value = true
				item.MatchInternalExternal.Null = false
			}
			if cValue := v.Get("match.internal.nssa-external"); cValue.Exists() {
				item.MatchInternalNssaExternal.Value = true
				item.MatchInternalNssaExternal.Null = false
			}
			if cValue := v.Get("match.external"); cValue.Exists() {
				item.MatchExternal.Value = true
				item.MatchExternal.Null = false
			}
			if cValue := v.Get("match.external.nssa-external"); cValue.Exists() {
				item.MatchExternalNssaExternal.Value = true
				item.MatchExternalNssaExternal.Null = false
			}
			if cValue := v.Get("match.nssa-external"); cValue.Exists() {
				item.MatchNssaExternal.Value = true
				item.MatchNssaExternal.Null = false
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric.Value = cValue.Int()
				item.Metric.Null = false
			}
			data.RedistributeOspf = append(data.RedistributeOspf, item)
			return true
		})
	}
}

func (data *RouterBGPAddressFamily) fromPlan(plan RouterBGPAddressFamily) {
	data.Device = plan.Device
	data.AsNumber.Value = plan.AsNumber.Value
	data.AfName.Value = plan.AfName.Value
}

func (data *RouterBGPAddressFamily) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.AsNumber.Unknown {
		data.AsNumber.Unknown = false
		data.AsNumber.Null = true
	}
	if data.AfName.Unknown {
		data.AfName.Unknown = false
		data.AfName.Null = true
	}
	if data.MaximumPathsEbgpMultipath.Unknown {
		data.MaximumPathsEbgpMultipath.Unknown = false
		data.MaximumPathsEbgpMultipath.Null = true
	}
	if data.MaximumPathsEibgpMultipath.Unknown {
		data.MaximumPathsEibgpMultipath.Unknown = false
		data.MaximumPathsEibgpMultipath.Null = true
	}
	if data.MaximumPathsIbgpMultipath.Unknown {
		data.MaximumPathsIbgpMultipath.Unknown = false
		data.MaximumPathsIbgpMultipath.Null = true
	}
	if data.LabelModePerCe.Unknown {
		data.LabelModePerCe.Unknown = false
		data.LabelModePerCe.Null = true
	}
	if data.LabelModePerVrf.Unknown {
		data.LabelModePerVrf.Unknown = false
		data.LabelModePerVrf.Null = true
	}
	if data.RedistributeConnected.Unknown {
		data.RedistributeConnected.Unknown = false
		data.RedistributeConnected.Null = true
	}
	if data.RedistributeConnectedMetric.Unknown {
		data.RedistributeConnectedMetric.Unknown = false
		data.RedistributeConnectedMetric.Null = true
	}
	if data.RedistributeStatic.Unknown {
		data.RedistributeStatic.Unknown = false
		data.RedistributeStatic.Null = true
	}
	if data.RedistributeStaticMetric.Unknown {
		data.RedistributeStaticMetric.Unknown = false
		data.RedistributeStaticMetric.Null = true
	}
	for i := range data.AggregateAddresses {
		if data.AggregateAddresses[i].Address.Unknown {
			data.AggregateAddresses[i].Address.Unknown = false
			data.AggregateAddresses[i].Address.Null = true
		}
		if data.AggregateAddresses[i].Masklength.Unknown {
			data.AggregateAddresses[i].Masklength.Unknown = false
			data.AggregateAddresses[i].Masklength.Null = true
		}
		if data.AggregateAddresses[i].AsSet.Unknown {
			data.AggregateAddresses[i].AsSet.Unknown = false
			data.AggregateAddresses[i].AsSet.Null = true
		}
		if data.AggregateAddresses[i].AsConfedSet.Unknown {
			data.AggregateAddresses[i].AsConfedSet.Unknown = false
			data.AggregateAddresses[i].AsConfedSet.Null = true
		}
		if data.AggregateAddresses[i].SummaryOnly.Unknown {
			data.AggregateAddresses[i].SummaryOnly.Unknown = false
			data.AggregateAddresses[i].SummaryOnly.Null = true
		}
	}
	for i := range data.Networks {
		if data.Networks[i].Address.Unknown {
			data.Networks[i].Address.Unknown = false
			data.Networks[i].Address.Null = true
		}
		if data.Networks[i].Masklength.Unknown {
			data.Networks[i].Masklength.Unknown = false
			data.Networks[i].Masklength.Null = true
		}
	}
	for i := range data.RedistributeIsis {
		if data.RedistributeIsis[i].InstanceName.Unknown {
			data.RedistributeIsis[i].InstanceName.Unknown = false
			data.RedistributeIsis[i].InstanceName.Null = true
		}
		if data.RedistributeIsis[i].LevelOne.Unknown {
			data.RedistributeIsis[i].LevelOne.Unknown = false
			data.RedistributeIsis[i].LevelOne.Null = true
		}
		if data.RedistributeIsis[i].LevelOneTwo.Unknown {
			data.RedistributeIsis[i].LevelOneTwo.Unknown = false
			data.RedistributeIsis[i].LevelOneTwo.Null = true
		}
		if data.RedistributeIsis[i].LevelOneTwoOneInterArea.Unknown {
			data.RedistributeIsis[i].LevelOneTwoOneInterArea.Unknown = false
			data.RedistributeIsis[i].LevelOneTwoOneInterArea.Null = true
		}
		if data.RedistributeIsis[i].LevelOneOneInterArea.Unknown {
			data.RedistributeIsis[i].LevelOneOneInterArea.Unknown = false
			data.RedistributeIsis[i].LevelOneOneInterArea.Null = true
		}
		if data.RedistributeIsis[i].LevelTwo.Unknown {
			data.RedistributeIsis[i].LevelTwo.Unknown = false
			data.RedistributeIsis[i].LevelTwo.Null = true
		}
		if data.RedistributeIsis[i].LevelTwoOneInterArea.Unknown {
			data.RedistributeIsis[i].LevelTwoOneInterArea.Unknown = false
			data.RedistributeIsis[i].LevelTwoOneInterArea.Null = true
		}
		if data.RedistributeIsis[i].LevelOneInterArea.Unknown {
			data.RedistributeIsis[i].LevelOneInterArea.Unknown = false
			data.RedistributeIsis[i].LevelOneInterArea.Null = true
		}
		if data.RedistributeIsis[i].Metric.Unknown {
			data.RedistributeIsis[i].Metric.Unknown = false
			data.RedistributeIsis[i].Metric.Null = true
		}
	}
	for i := range data.RedistributeOspf {
		if data.RedistributeOspf[i].RouterTag.Unknown {
			data.RedistributeOspf[i].RouterTag.Unknown = false
			data.RedistributeOspf[i].RouterTag.Null = true
		}
		if data.RedistributeOspf[i].MatchInternal.Unknown {
			data.RedistributeOspf[i].MatchInternal.Unknown = false
			data.RedistributeOspf[i].MatchInternal.Null = true
		}
		if data.RedistributeOspf[i].MatchInternalExternal.Unknown {
			data.RedistributeOspf[i].MatchInternalExternal.Unknown = false
			data.RedistributeOspf[i].MatchInternalExternal.Null = true
		}
		if data.RedistributeOspf[i].MatchInternalNssaExternal.Unknown {
			data.RedistributeOspf[i].MatchInternalNssaExternal.Unknown = false
			data.RedistributeOspf[i].MatchInternalNssaExternal.Null = true
		}
		if data.RedistributeOspf[i].MatchExternal.Unknown {
			data.RedistributeOspf[i].MatchExternal.Unknown = false
			data.RedistributeOspf[i].MatchExternal.Null = true
		}
		if data.RedistributeOspf[i].MatchExternalNssaExternal.Unknown {
			data.RedistributeOspf[i].MatchExternalNssaExternal.Unknown = false
			data.RedistributeOspf[i].MatchExternalNssaExternal.Null = true
		}
		if data.RedistributeOspf[i].MatchNssaExternal.Unknown {
			data.RedistributeOspf[i].MatchNssaExternal.Unknown = false
			data.RedistributeOspf[i].MatchNssaExternal.Null = true
		}
		if data.RedistributeOspf[i].Metric.Unknown {
			data.RedistributeOspf[i].Metric.Unknown = false
			data.RedistributeOspf[i].Metric.Null = true
		}
	}
}

func (data *RouterBGPAddressFamily) getDeletedListItems(state RouterBGPAddressFamily) []string {
	deletedListItems := make([]string, 0)
	for i := range state.AggregateAddresses {
		keys := [...]string{"address", "masklength"}
		stateKeyValues := [...]string{state.AggregateAddresses[i].Address.Value, strconv.FormatInt(state.AggregateAddresses[i].Masklength.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.AggregateAddresses[i].Address.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AggregateAddresses[i].Masklength.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AggregateAddresses {
			found = true
			if state.AggregateAddresses[i].Address.Value != data.AggregateAddresses[j].Address.Value {
				found = false
			}
			if state.AggregateAddresses[i].Masklength.Value != data.AggregateAddresses[j].Masklength.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/aggregate-addresses/aggregate-address%v", state.getPath(), keyString))
		}
	}
	for i := range state.Networks {
		keys := [...]string{"address", "masklength"}
		stateKeyValues := [...]string{state.Networks[i].Address.Value, strconv.FormatInt(state.Networks[i].Masklength.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.Networks[i].Address.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Networks[i].Masklength.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Networks {
			found = true
			if state.Networks[i].Address.Value != data.Networks[j].Address.Value {
				found = false
			}
			if state.Networks[i].Masklength.Value != data.Networks[j].Masklength.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/networks/network%v", state.getPath(), keyString))
		}
	}
	for i := range state.RedistributeIsis {
		keys := [...]string{"instance-name"}
		stateKeyValues := [...]string{state.RedistributeIsis[i].InstanceName.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.RedistributeIsis[i].InstanceName.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.RedistributeIsis {
			found = true
			if state.RedistributeIsis[i].InstanceName.Value != data.RedistributeIsis[j].InstanceName.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/redistribute/isis%v", state.getPath(), keyString))
		}
	}
	for i := range state.RedistributeOspf {
		keys := [...]string{"router-tag"}
		stateKeyValues := [...]string{state.RedistributeOspf[i].RouterTag.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.RedistributeOspf[i].RouterTag.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.RedistributeOspf {
			found = true
			if state.RedistributeOspf[i].RouterTag.Value != data.RedistributeOspf[j].RouterTag.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/redistribute/ospf%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *RouterBGPAddressFamily) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
