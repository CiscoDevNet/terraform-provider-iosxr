// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
)

type RouterBGPAddressFamilyNetwork struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	AsNumber   types.String `tfsdk:"as_number"`
	AfName     types.String `tfsdk:"af_name"`
	Address    types.String `tfsdk:"address"`
	Masklength types.Int64  `tfsdk:"masklength"`
}

func (data RouterBGPAddressFamilyNetwork) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=%s]/address-families/address-family[af-name=%s]/networks/network[address=%s][masklength=%v]", data.AsNumber.Value, data.AfName.Value, data.Address.Value, data.Masklength.Value)
}

func (data RouterBGPAddressFamilyNetwork) toBody() string {
	body := "{}"
	return body
}

func (data *RouterBGPAddressFamilyNetwork) fromBody(res []byte) {
}

func (data *RouterBGPAddressFamilyNetwork) fromPlan(plan RouterBGPAddressFamilyNetwork) {
	data.Device = plan.Device
	data.AsNumber.Value = plan.AsNumber.Value
	data.AfName.Value = plan.AfName.Value
	data.Address.Value = plan.Address.Value
	data.Masklength.Value = plan.Masklength.Value
}

func (data *RouterBGPAddressFamilyNetwork) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.AsNumber.Unknown {
		data.AsNumber.Unknown = false
		data.AsNumber.Null = true
	}
	if data.AfName.Unknown {
		data.AfName.Unknown = false
		data.AfName.Null = true
	}
	if data.Address.Unknown {
		data.Address.Unknown = false
		data.Address.Null = true
	}
	if data.Masklength.Unknown {
		data.Masklength.Unknown = false
		data.Masklength.Null = true
	}
}

func (data *RouterBGPAddressFamilyNetwork) getDeletedListItems(state RouterBGPAddressFamilyNetwork) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *RouterBGPAddressFamilyNetwork) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
