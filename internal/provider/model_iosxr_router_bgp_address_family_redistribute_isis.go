// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/tidwall/sjson"

	"github.com/tidwall/gjson"
)

type RouterBGPAddressFamilyRedistributeISIS struct {
	Device                  types.String `tfsdk:"device"`
	Id                      types.String `tfsdk:"id"`
	AsNumber                types.String `tfsdk:"as_number"`
	AfName                  types.String `tfsdk:"af_name"`
	InstanceName            types.String `tfsdk:"instance_name"`
	LevelOne                types.Bool   `tfsdk:"level_one"`
	LevelOneTwo             types.Bool   `tfsdk:"level_one_two"`
	LevelOneTwoOneInterArea types.Bool   `tfsdk:"level_one_two_one_inter_area"`
	LevelOneOneInterArea    types.Bool   `tfsdk:"level_one_one_inter_area"`
	LevelTwo                types.Bool   `tfsdk:"level_two"`
	LevelTwoOneInterArea    types.Bool   `tfsdk:"level_two_one_inter_area"`
	LevelOneInterArea       types.Bool   `tfsdk:"level_one_inter_area"`
	Metric                  types.Int64  `tfsdk:"metric"`
}

func (data RouterBGPAddressFamilyRedistributeISIS) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=%s]/address-families/address-family[af-name=%s]/redistribute/isis[instance-name=%s]", data.AsNumber.Value, data.AfName.Value, data.InstanceName.Value)
}

func (data RouterBGPAddressFamilyRedistributeISIS) toBody() string {
	body := "{}"

	if !data.LevelOne.Null && !data.LevelOne.Unknown {
		if data.LevelOne.Value {
			body, _ = sjson.Set(body, "level.one", map[string]string{})
		}
	}
	if !data.LevelOneTwo.Null && !data.LevelOneTwo.Unknown {
		if data.LevelOneTwo.Value {
			body, _ = sjson.Set(body, "level.one.two", map[string]string{})
		}
	}
	if !data.LevelOneTwoOneInterArea.Null && !data.LevelOneTwoOneInterArea.Unknown {
		if data.LevelOneTwoOneInterArea.Value {
			body, _ = sjson.Set(body, "level.one.two.one-inter-area", map[string]string{})
		}
	}
	if !data.LevelOneOneInterArea.Null && !data.LevelOneOneInterArea.Unknown {
		if data.LevelOneOneInterArea.Value {
			body, _ = sjson.Set(body, "level.one.one-inter-area", map[string]string{})
		}
	}
	if !data.LevelTwo.Null && !data.LevelTwo.Unknown {
		if data.LevelTwo.Value {
			body, _ = sjson.Set(body, "level.two", map[string]string{})
		}
	}
	if !data.LevelTwoOneInterArea.Null && !data.LevelTwoOneInterArea.Unknown {
		if data.LevelTwoOneInterArea.Value {
			body, _ = sjson.Set(body, "level.two.one-inter-area", map[string]string{})
		}
	}
	if !data.LevelOneInterArea.Null && !data.LevelOneInterArea.Unknown {
		if data.LevelOneInterArea.Value {
			body, _ = sjson.Set(body, "level.one-inter-area", map[string]string{})
		}
	}
	if !data.Metric.Null && !data.Metric.Unknown {
		body, _ = sjson.Set(body, "metric", strconv.FormatInt(data.Metric.Value, 10))
	}

	return body
}

func (data *RouterBGPAddressFamilyRedistributeISIS) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "level.one"); value.Exists() {
		data.LevelOne.Value = true
	}
	if value := gjson.GetBytes(res, "level.one.two"); value.Exists() {
		data.LevelOneTwo.Value = true
	}
	if value := gjson.GetBytes(res, "level.one.two.one-inter-area"); value.Exists() {
		data.LevelOneTwoOneInterArea.Value = true
	}
	if value := gjson.GetBytes(res, "level.one.one-inter-area"); value.Exists() {
		data.LevelOneOneInterArea.Value = true
	}
	if value := gjson.GetBytes(res, "level.two"); value.Exists() {
		data.LevelTwo.Value = true
	}
	if value := gjson.GetBytes(res, "level.two.one-inter-area"); value.Exists() {
		data.LevelTwoOneInterArea.Value = true
	}
	if value := gjson.GetBytes(res, "level.one-inter-area"); value.Exists() {
		data.LevelOneInterArea.Value = true
	}
	if value := gjson.GetBytes(res, "metric"); value.Exists() {
		data.Metric.Value = value.Int()
	}
}

func (data *RouterBGPAddressFamilyRedistributeISIS) fromPlan(plan RouterBGPAddressFamilyRedistributeISIS) {
	data.Device = plan.Device
	data.AsNumber.Value = plan.AsNumber.Value
	data.AfName.Value = plan.AfName.Value
	data.InstanceName.Value = plan.InstanceName.Value
}
