// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterBGPNeighborGroup struct {
	Device                    types.String                            `tfsdk:"device"`
	Id                        types.String                            `tfsdk:"id"`
	AsNumber                  types.String                            `tfsdk:"as_number"`
	Name                      types.String                            `tfsdk:"name"`
	RemoteAs                  types.String                            `tfsdk:"remote_as"`
	UpdateSource              types.String                            `tfsdk:"update_source"`
	AoKeyChainName            types.String                            `tfsdk:"ao_key_chain_name"`
	AoIncludeTcpOptionsEnable types.Bool                              `tfsdk:"ao_include_tcp_options_enable"`
	AddressFamilies           []RouterBGPNeighborGroupAddressFamilies `tfsdk:"address_families"`
}
type RouterBGPNeighborGroupAddressFamilies struct {
	AfName                           types.String `tfsdk:"af_name"`
	SoftReconfigurationInboundAlways types.Bool   `tfsdk:"soft_reconfiguration_inbound_always"`
}

func (data RouterBGPNeighborGroup) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=%s]/neighbor-groups/neighbor-group[neighbor-group-name=%s]", data.AsNumber.ValueString(), data.Name.ValueString())
}

func (data RouterBGPNeighborGroup) toBody(ctx context.Context) string {
	body := "{}"
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, "neighbor-group-name", data.Name.ValueString())
	}
	if !data.RemoteAs.IsNull() && !data.RemoteAs.IsUnknown() {
		body, _ = sjson.Set(body, "remote-as", data.RemoteAs.ValueString())
	}
	if !data.UpdateSource.IsNull() && !data.UpdateSource.IsUnknown() {
		body, _ = sjson.Set(body, "update-source", data.UpdateSource.ValueString())
	}
	if !data.AoKeyChainName.IsNull() && !data.AoKeyChainName.IsUnknown() {
		body, _ = sjson.Set(body, "ao.key-chain-name", data.AoKeyChainName.ValueString())
	}
	if !data.AoIncludeTcpOptionsEnable.IsNull() && !data.AoIncludeTcpOptionsEnable.IsUnknown() {
		if data.AoIncludeTcpOptionsEnable.ValueBool() {
			body, _ = sjson.Set(body, "ao.include-tcp-options.enable", map[string]string{})
		}
	}
	if len(data.AddressFamilies) > 0 {
		body, _ = sjson.Set(body, "address-families.address-family", []interface{}{})
		for index, item := range data.AddressFamilies {
			if !item.AfName.IsNull() && !item.AfName.IsUnknown() {
				body, _ = sjson.Set(body, "address-families.address-family"+"."+strconv.Itoa(index)+"."+"af-name", item.AfName.ValueString())
			}
			if !item.SoftReconfigurationInboundAlways.IsNull() && !item.SoftReconfigurationInboundAlways.IsUnknown() {
				if item.SoftReconfigurationInboundAlways.ValueBool() {
					body, _ = sjson.Set(body, "address-families.address-family"+"."+strconv.Itoa(index)+"."+"soft-reconfiguration.inbound.always", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *RouterBGPNeighborGroup) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "remote-as"); value.Exists() && !data.RemoteAs.IsNull() {
		data.RemoteAs = types.StringValue(value.String())
	} else {
		data.RemoteAs = types.StringNull()
	}
	if value := gjson.GetBytes(res, "update-source"); value.Exists() && !data.UpdateSource.IsNull() {
		data.UpdateSource = types.StringValue(value.String())
	} else {
		data.UpdateSource = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ao.key-chain-name"); value.Exists() && !data.AoKeyChainName.IsNull() {
		data.AoKeyChainName = types.StringValue(value.String())
	} else {
		data.AoKeyChainName = types.StringNull()
	}
	if value := gjson.GetBytes(res, "ao.include-tcp-options.enable"); !data.AoIncludeTcpOptionsEnable.IsNull() {
		if value.Exists() {
			data.AoIncludeTcpOptionsEnable = types.BoolValue(true)
		} else {
			data.AoIncludeTcpOptionsEnable = types.BoolValue(false)
		}
	} else {
		data.AoIncludeTcpOptionsEnable = types.BoolNull()
	}
	for i := range data.AddressFamilies {
		keys := [...]string{"af-name"}
		keyValues := [...]string{data.AddressFamilies[i].AfName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-families.address-family").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("af-name"); value.Exists() && !data.AddressFamilies[i].AfName.IsNull() {
			data.AddressFamilies[i].AfName = types.StringValue(value.String())
		} else {
			data.AddressFamilies[i].AfName = types.StringNull()
		}
		if value := r.Get("soft-reconfiguration.inbound.always"); !data.AddressFamilies[i].SoftReconfigurationInboundAlways.IsNull() {
			if value.Exists() {
				data.AddressFamilies[i].SoftReconfigurationInboundAlways = types.BoolValue(true)
			} else {
				data.AddressFamilies[i].SoftReconfigurationInboundAlways = types.BoolValue(false)
			}
		} else {
			data.AddressFamilies[i].SoftReconfigurationInboundAlways = types.BoolNull()
		}
	}
}

func (data *RouterBGPNeighborGroup) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "remote-as"); value.Exists() {
		data.RemoteAs = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "update-source"); value.Exists() {
		data.UpdateSource = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ao.key-chain-name"); value.Exists() {
		data.AoKeyChainName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "ao.include-tcp-options.enable"); value.Exists() {
		data.AoIncludeTcpOptionsEnable = types.BoolValue(true)
	} else {
		data.AoIncludeTcpOptionsEnable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-families.address-family"); value.Exists() {
		data.AddressFamilies = make([]RouterBGPNeighborGroupAddressFamilies, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterBGPNeighborGroupAddressFamilies{}
			if cValue := v.Get("af-name"); cValue.Exists() {
				item.AfName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("soft-reconfiguration.inbound.always"); cValue.Exists() {
				item.SoftReconfigurationInboundAlways = types.BoolValue(true)
			} else {
				item.SoftReconfigurationInboundAlways = types.BoolValue(false)
			}
			data.AddressFamilies = append(data.AddressFamilies, item)
			return true
		})
	}
}

func (data *RouterBGPNeighborGroup) fromPlan(ctx context.Context, plan RouterBGPNeighborGroup) {
	data.Device = plan.Device
	data.AsNumber = types.StringValue(plan.AsNumber.ValueString())
	data.Name = types.StringValue(plan.Name.ValueString())
}

func (data *RouterBGPNeighborGroup) getDeletedListItems(ctx context.Context, state RouterBGPNeighborGroup) []string {
	deletedListItems := make([]string, 0)
	for i := range state.AddressFamilies {
		keys := [...]string{"af-name"}
		stateKeyValues := [...]string{state.AddressFamilies[i].AfName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilies[i].AfName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilies {
			found = true
			if state.AddressFamilies[i].AfName.ValueString() != data.AddressFamilies[j].AfName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-families/address-family%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *RouterBGPNeighborGroup) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
