// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterBGPNeighborGroupAddressFamily struct {
	Device                           types.String `tfsdk:"device"`
	Id                               types.String `tfsdk:"id"`
	AsNumber                         types.String `tfsdk:"as_number"`
	NeighborGroupName                types.String `tfsdk:"neighbor_group_name"`
	AfName                           types.String `tfsdk:"af_name"`
	SoftReconfigurationInboundAlways types.Bool   `tfsdk:"soft_reconfiguration_inbound_always"`
}

func (data RouterBGPNeighborGroupAddressFamily) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=%s]/neighbor-groups/neighbor-group[neighbor-group-name=%s]/address-families/address-family[af-name=%s]", data.AsNumber.ValueString(), data.NeighborGroupName.ValueString(), data.AfName.ValueString())
}

func (data RouterBGPNeighborGroupAddressFamily) toBody(ctx context.Context) string {
	body := "{}"
	if !data.AfName.IsNull() && !data.AfName.IsUnknown() {
		body, _ = sjson.Set(body, "af-name", data.AfName.ValueString())
	}
	if !data.SoftReconfigurationInboundAlways.IsNull() && !data.SoftReconfigurationInboundAlways.IsUnknown() {
		if data.SoftReconfigurationInboundAlways.ValueBool() {
			body, _ = sjson.Set(body, "soft-reconfiguration.inbound.always", map[string]string{})
		}
	}
	return body
}

func (data *RouterBGPNeighborGroupAddressFamily) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "soft-reconfiguration.inbound.always"); !data.SoftReconfigurationInboundAlways.IsNull() {
		if value.Exists() {
			data.SoftReconfigurationInboundAlways = types.BoolValue(true)
		} else {
			data.SoftReconfigurationInboundAlways = types.BoolValue(false)
		}
	} else {
		data.SoftReconfigurationInboundAlways = types.BoolNull()
	}
}

func (data *RouterBGPNeighborGroupAddressFamily) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "soft-reconfiguration.inbound.always"); value.Exists() {
		data.SoftReconfigurationInboundAlways = types.BoolValue(true)
	} else {
		data.SoftReconfigurationInboundAlways = types.BoolValue(false)
	}
}

func (data *RouterBGPNeighborGroupAddressFamily) fromPlan(ctx context.Context, plan RouterBGPNeighborGroupAddressFamily) {
	data.Device = plan.Device
	data.AsNumber = types.StringValue(plan.AsNumber.ValueString())
	data.NeighborGroupName = types.StringValue(plan.NeighborGroupName.ValueString())
	data.AfName = types.StringValue(plan.AfName.ValueString())
}

func (data *RouterBGPNeighborGroupAddressFamily) getDeletedListItems(ctx context.Context, state RouterBGPNeighborGroupAddressFamily) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *RouterBGPNeighborGroupAddressFamily) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
