// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterBGPVRF struct {
	Device                      types.String            `tfsdk:"device"`
	Id                          types.String            `tfsdk:"id"`
	AsNumber                    types.String            `tfsdk:"as_number"`
	VrfName                     types.String            `tfsdk:"vrf_name"`
	DefaultInformationOriginate types.Bool              `tfsdk:"default_information_originate"`
	DefaultMetric               types.Int64             `tfsdk:"default_metric"`
	TimersBgpKeepaliveInterval  types.Int64             `tfsdk:"timers_bgp_keepalive_interval"`
	TimersBgpHoldtime           types.String            `tfsdk:"timers_bgp_holdtime"`
	BfdMinimumInterval          types.Int64             `tfsdk:"bfd_minimum_interval"`
	BfdMultiplier               types.Int64             `tfsdk:"bfd_multiplier"`
	Neighbors                   []RouterBGPVRFNeighbors `tfsdk:"neighbors"`
}
type RouterBGPVRFNeighbors struct {
	NeighborAddress             types.String `tfsdk:"neighbor_address"`
	RemoteAs                    types.String `tfsdk:"remote_as"`
	Description                 types.String `tfsdk:"description"`
	IgnoreConnectedCheck        types.Bool   `tfsdk:"ignore_connected_check"`
	EbgpMultihopMaximumHopCount types.Int64  `tfsdk:"ebgp_multihop_maximum_hop_count"`
	BfdMinimumInterval          types.Int64  `tfsdk:"bfd_minimum_interval"`
	BfdMultiplier               types.Int64  `tfsdk:"bfd_multiplier"`
	LocalAs                     types.String `tfsdk:"local_as"`
	LocalAsNoPrepend            types.Bool   `tfsdk:"local_as_no_prepend"`
	LocalAsReplaceAs            types.Bool   `tfsdk:"local_as_replace_as"`
	LocalAsDualAs               types.Bool   `tfsdk:"local_as_dual_as"`
	Password                    types.String `tfsdk:"password"`
	Shutdown                    types.Bool   `tfsdk:"shutdown"`
	TimersKeepaliveInterval     types.Int64  `tfsdk:"timers_keepalive_interval"`
	TimersHoldtime              types.String `tfsdk:"timers_holdtime"`
	UpdateSource                types.String `tfsdk:"update_source"`
	TtlSecurity                 types.Bool   `tfsdk:"ttl_security"`
}

func (data RouterBGPVRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=%s]/vrfs/vrf[vrf-name=%s]", data.AsNumber.Value, data.VrfName.Value)
}

func (data RouterBGPVRF) toBody() string {
	body := "{}"
	if !data.DefaultInformationOriginate.Null && !data.DefaultInformationOriginate.Unknown {
		if data.DefaultInformationOriginate.Value {
			body, _ = sjson.Set(body, "default-information.originate", map[string]string{})
		}
	}
	if !data.DefaultMetric.Null && !data.DefaultMetric.Unknown {
		body, _ = sjson.Set(body, "default-metric", strconv.FormatInt(data.DefaultMetric.Value, 10))
	}
	if !data.TimersBgpKeepaliveInterval.Null && !data.TimersBgpKeepaliveInterval.Unknown {
		body, _ = sjson.Set(body, "timers.bgp.keepalive-interval", strconv.FormatInt(data.TimersBgpKeepaliveInterval.Value, 10))
	}
	if !data.TimersBgpHoldtime.Null && !data.TimersBgpHoldtime.Unknown {
		body, _ = sjson.Set(body, "timers.bgp.holdtime", data.TimersBgpHoldtime.Value)
	}
	if !data.BfdMinimumInterval.Null && !data.BfdMinimumInterval.Unknown {
		body, _ = sjson.Set(body, "bfd.minimum-interval", strconv.FormatInt(data.BfdMinimumInterval.Value, 10))
	}
	if !data.BfdMultiplier.Null && !data.BfdMultiplier.Unknown {
		body, _ = sjson.Set(body, "bfd.multiplier", strconv.FormatInt(data.BfdMultiplier.Value, 10))
	}
	if len(data.Neighbors) > 0 {
		body, _ = sjson.Set(body, "neighbors.neighbor", []interface{}{})
		for index, item := range data.Neighbors {
			if !item.NeighborAddress.Null && !item.NeighborAddress.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"neighbor-address", item.NeighborAddress.Value)
			}
			if !item.RemoteAs.Null && !item.RemoteAs.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"remote-as", item.RemoteAs.Value)
			}
			if !item.Description.Null && !item.Description.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"description", item.Description.Value)
			}
			if !item.IgnoreConnectedCheck.Null && !item.IgnoreConnectedCheck.Unknown {
				if item.IgnoreConnectedCheck.Value {
					body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"ignore-connected-check", map[string]string{})
				}
			}
			if !item.EbgpMultihopMaximumHopCount.Null && !item.EbgpMultihopMaximumHopCount.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"ebgp-multihop.maximum-hop-count", strconv.FormatInt(item.EbgpMultihopMaximumHopCount.Value, 10))
			}
			if !item.BfdMinimumInterval.Null && !item.BfdMinimumInterval.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"bfd.minimum-interval", strconv.FormatInt(item.BfdMinimumInterval.Value, 10))
			}
			if !item.BfdMultiplier.Null && !item.BfdMultiplier.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"bfd.multiplier", strconv.FormatInt(item.BfdMultiplier.Value, 10))
			}
			if !item.LocalAs.Null && !item.LocalAs.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"local-as.as-number", item.LocalAs.Value)
			}
			if !item.LocalAsNoPrepend.Null && !item.LocalAsNoPrepend.Unknown {
				if item.LocalAsNoPrepend.Value {
					body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"local-as.no-prepend", map[string]string{})
				}
			}
			if !item.LocalAsReplaceAs.Null && !item.LocalAsReplaceAs.Unknown {
				if item.LocalAsReplaceAs.Value {
					body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"local-as.no-prepend.replace-as", map[string]string{})
				}
			}
			if !item.LocalAsDualAs.Null && !item.LocalAsDualAs.Unknown {
				if item.LocalAsDualAs.Value {
					body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"local-as.no-prepend.replace-as.dual-as", map[string]string{})
				}
			}
			if !item.Password.Null && !item.Password.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"password.encrypted", item.Password.Value)
			}
			if !item.Shutdown.Null && !item.Shutdown.Unknown {
				if item.Shutdown.Value {
					body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"shutdown", map[string]string{})
				}
			}
			if !item.TimersKeepaliveInterval.Null && !item.TimersKeepaliveInterval.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"timers.keepalive-interval", strconv.FormatInt(item.TimersKeepaliveInterval.Value, 10))
			}
			if !item.TimersHoldtime.Null && !item.TimersHoldtime.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"timers.holdtime", item.TimersHoldtime.Value)
			}
			if !item.UpdateSource.Null && !item.UpdateSource.Unknown {
				body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"update-source", item.UpdateSource.Value)
			}
			if !item.TtlSecurity.Null && !item.TtlSecurity.Unknown {
				if item.TtlSecurity.Value {
					body, _ = sjson.Set(body, "neighbors.neighbor"+"."+strconv.Itoa(index)+"."+"ttl-security", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *RouterBGPVRF) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
	} else {
		data.DefaultInformationOriginate.Value = false
	}
	if value := gjson.GetBytes(res, "default-metric"); value.Exists() {
		data.DefaultMetric.Value = value.Int()
	} else {
		data.DefaultMetric.Null = true
	}
	if value := gjson.GetBytes(res, "timers.bgp.keepalive-interval"); value.Exists() {
		data.TimersBgpKeepaliveInterval.Value = value.Int()
	} else {
		data.TimersBgpKeepaliveInterval.Null = true
	}
	if value := gjson.GetBytes(res, "timers.bgp.holdtime"); value.Exists() {
		data.TimersBgpHoldtime.Value = value.String()
	} else {
		data.TimersBgpHoldtime.Null = true
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() {
		data.BfdMinimumInterval.Value = value.Int()
	} else {
		data.BfdMinimumInterval.Null = true
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() {
		data.BfdMultiplier.Value = value.Int()
	} else {
		data.BfdMultiplier.Null = true
	}
	for i := range data.Neighbors {
		keys := [...]string{"neighbor-address"}
		keyValues := [...]string{data.Neighbors[i].NeighborAddress.Value}

		var r gjson.Result
		gjson.GetBytes(res, "neighbors.neighbor").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("neighbor-address"); value.Exists() {
			data.Neighbors[i].NeighborAddress.Value = value.String()
		} else {
			data.Neighbors[i].NeighborAddress.Null = true
		}
		if value := r.Get("remote-as"); value.Exists() {
			data.Neighbors[i].RemoteAs.Value = value.String()
		} else {
			data.Neighbors[i].RemoteAs.Null = true
		}
		if value := r.Get("description"); value.Exists() {
			data.Neighbors[i].Description.Value = value.String()
		} else {
			data.Neighbors[i].Description.Null = true
		}
		if value := r.Get("ignore-connected-check"); value.Exists() {
			data.Neighbors[i].IgnoreConnectedCheck.Value = true
		} else {
			data.Neighbors[i].IgnoreConnectedCheck.Value = false
		}
		if value := r.Get("ebgp-multihop.maximum-hop-count"); value.Exists() {
			data.Neighbors[i].EbgpMultihopMaximumHopCount.Value = value.Int()
		} else {
			data.Neighbors[i].EbgpMultihopMaximumHopCount.Null = true
		}
		if value := r.Get("bfd.minimum-interval"); value.Exists() {
			data.Neighbors[i].BfdMinimumInterval.Value = value.Int()
		} else {
			data.Neighbors[i].BfdMinimumInterval.Null = true
		}
		if value := r.Get("bfd.multiplier"); value.Exists() {
			data.Neighbors[i].BfdMultiplier.Value = value.Int()
		} else {
			data.Neighbors[i].BfdMultiplier.Null = true
		}
		if value := r.Get("local-as.as-number"); value.Exists() {
			data.Neighbors[i].LocalAs.Value = value.String()
		} else {
			data.Neighbors[i].LocalAs.Null = true
		}
		if value := r.Get("local-as.no-prepend"); value.Exists() {
			data.Neighbors[i].LocalAsNoPrepend.Value = true
		} else {
			data.Neighbors[i].LocalAsNoPrepend.Value = false
		}
		if value := r.Get("local-as.no-prepend.replace-as"); value.Exists() {
			data.Neighbors[i].LocalAsReplaceAs.Value = true
		} else {
			data.Neighbors[i].LocalAsReplaceAs.Value = false
		}
		if value := r.Get("local-as.no-prepend.replace-as.dual-as"); value.Exists() {
			data.Neighbors[i].LocalAsDualAs.Value = true
		} else {
			data.Neighbors[i].LocalAsDualAs.Value = false
		}
		if value := r.Get("password.encrypted"); value.Exists() {
			data.Neighbors[i].Password.Value = value.String()
		} else {
			data.Neighbors[i].Password.Null = true
		}
		if value := r.Get("shutdown"); value.Exists() {
			data.Neighbors[i].Shutdown.Value = true
		} else {
			data.Neighbors[i].Shutdown.Value = false
		}
		if value := r.Get("timers.keepalive-interval"); value.Exists() {
			data.Neighbors[i].TimersKeepaliveInterval.Value = value.Int()
		} else {
			data.Neighbors[i].TimersKeepaliveInterval.Null = true
		}
		if value := r.Get("timers.holdtime"); value.Exists() {
			data.Neighbors[i].TimersHoldtime.Value = value.String()
		} else {
			data.Neighbors[i].TimersHoldtime.Null = true
		}
		if value := r.Get("update-source"); value.Exists() {
			data.Neighbors[i].UpdateSource.Value = value.String()
		} else {
			data.Neighbors[i].UpdateSource.Null = true
		}
		if value := r.Get("ttl-security"); value.Exists() {
			data.Neighbors[i].TtlSecurity.Value = true
		} else {
			data.Neighbors[i].TtlSecurity.Value = false
		}
	}
}

func (data *RouterBGPVRF) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
		data.DefaultInformationOriginate.Null = false
	} else {
		data.DefaultInformationOriginate.Value = false
		data.DefaultInformationOriginate.Null = false
	}
	if value := gjson.GetBytes(res, "default-metric"); value.Exists() {
		data.DefaultMetric.Value = value.Int()
		data.DefaultMetric.Null = false
	}
	if value := gjson.GetBytes(res, "timers.bgp.keepalive-interval"); value.Exists() {
		data.TimersBgpKeepaliveInterval.Value = value.Int()
		data.TimersBgpKeepaliveInterval.Null = false
	}
	if value := gjson.GetBytes(res, "timers.bgp.holdtime"); value.Exists() {
		data.TimersBgpHoldtime.Value = value.String()
		data.TimersBgpHoldtime.Null = false
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() {
		data.BfdMinimumInterval.Value = value.Int()
		data.BfdMinimumInterval.Null = false
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() {
		data.BfdMultiplier.Value = value.Int()
		data.BfdMultiplier.Null = false
	}
	if value := gjson.GetBytes(res, "neighbors.neighbor"); value.Exists() {
		data.Neighbors = make([]RouterBGPVRFNeighbors, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterBGPVRFNeighbors{}
			if cValue := v.Get("neighbor-address"); cValue.Exists() {
				item.NeighborAddress.Value = cValue.String()
				item.NeighborAddress.Null = false
			}
			if cValue := v.Get("remote-as"); cValue.Exists() {
				item.RemoteAs.Value = cValue.String()
				item.RemoteAs.Null = false
			}
			if cValue := v.Get("description"); cValue.Exists() {
				item.Description.Value = cValue.String()
				item.Description.Null = false
			}
			if cValue := v.Get("ignore-connected-check"); cValue.Exists() {
				item.IgnoreConnectedCheck.Value = true
				item.IgnoreConnectedCheck.Null = false
			}
			if cValue := v.Get("ebgp-multihop.maximum-hop-count"); cValue.Exists() {
				item.EbgpMultihopMaximumHopCount.Value = cValue.Int()
				item.EbgpMultihopMaximumHopCount.Null = false
			}
			if cValue := v.Get("bfd.minimum-interval"); cValue.Exists() {
				item.BfdMinimumInterval.Value = cValue.Int()
				item.BfdMinimumInterval.Null = false
			}
			if cValue := v.Get("bfd.multiplier"); cValue.Exists() {
				item.BfdMultiplier.Value = cValue.Int()
				item.BfdMultiplier.Null = false
			}
			if cValue := v.Get("local-as.as-number"); cValue.Exists() {
				item.LocalAs.Value = cValue.String()
				item.LocalAs.Null = false
			}
			if cValue := v.Get("local-as.no-prepend"); cValue.Exists() {
				item.LocalAsNoPrepend.Value = true
				item.LocalAsNoPrepend.Null = false
			}
			if cValue := v.Get("local-as.no-prepend.replace-as"); cValue.Exists() {
				item.LocalAsReplaceAs.Value = true
				item.LocalAsReplaceAs.Null = false
			}
			if cValue := v.Get("local-as.no-prepend.replace-as.dual-as"); cValue.Exists() {
				item.LocalAsDualAs.Value = true
				item.LocalAsDualAs.Null = false
			}
			if cValue := v.Get("password.encrypted"); cValue.Exists() {
				item.Password.Value = cValue.String()
				item.Password.Null = false
			}
			if cValue := v.Get("shutdown"); cValue.Exists() {
				item.Shutdown.Value = true
				item.Shutdown.Null = false
			}
			if cValue := v.Get("timers.keepalive-interval"); cValue.Exists() {
				item.TimersKeepaliveInterval.Value = cValue.Int()
				item.TimersKeepaliveInterval.Null = false
			}
			if cValue := v.Get("timers.holdtime"); cValue.Exists() {
				item.TimersHoldtime.Value = cValue.String()
				item.TimersHoldtime.Null = false
			}
			if cValue := v.Get("update-source"); cValue.Exists() {
				item.UpdateSource.Value = cValue.String()
				item.UpdateSource.Null = false
			}
			if cValue := v.Get("ttl-security"); cValue.Exists() {
				item.TtlSecurity.Value = true
				item.TtlSecurity.Null = false
			}
			data.Neighbors = append(data.Neighbors, item)
			return true
		})
	}
}

func (data *RouterBGPVRF) fromPlan(plan RouterBGPVRF) {
	data.Device = plan.Device
	data.AsNumber.Value = plan.AsNumber.Value
	data.VrfName.Value = plan.VrfName.Value
}

func (data *RouterBGPVRF) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.AsNumber.Unknown {
		data.AsNumber.Unknown = false
		data.AsNumber.Null = true
	}
	if data.VrfName.Unknown {
		data.VrfName.Unknown = false
		data.VrfName.Null = true
	}
	if data.DefaultInformationOriginate.Unknown {
		data.DefaultInformationOriginate.Unknown = false
		data.DefaultInformationOriginate.Null = true
	}
	if data.DefaultMetric.Unknown {
		data.DefaultMetric.Unknown = false
		data.DefaultMetric.Null = true
	}
	if data.TimersBgpKeepaliveInterval.Unknown {
		data.TimersBgpKeepaliveInterval.Unknown = false
		data.TimersBgpKeepaliveInterval.Null = true
	}
	if data.TimersBgpHoldtime.Unknown {
		data.TimersBgpHoldtime.Unknown = false
		data.TimersBgpHoldtime.Null = true
	}
	if data.BfdMinimumInterval.Unknown {
		data.BfdMinimumInterval.Unknown = false
		data.BfdMinimumInterval.Null = true
	}
	if data.BfdMultiplier.Unknown {
		data.BfdMultiplier.Unknown = false
		data.BfdMultiplier.Null = true
	}
	for i := range data.Neighbors {
		if data.Neighbors[i].NeighborAddress.Unknown {
			data.Neighbors[i].NeighborAddress.Unknown = false
			data.Neighbors[i].NeighborAddress.Null = true
		}
		if data.Neighbors[i].RemoteAs.Unknown {
			data.Neighbors[i].RemoteAs.Unknown = false
			data.Neighbors[i].RemoteAs.Null = true
		}
		if data.Neighbors[i].Description.Unknown {
			data.Neighbors[i].Description.Unknown = false
			data.Neighbors[i].Description.Null = true
		}
		if data.Neighbors[i].IgnoreConnectedCheck.Unknown {
			data.Neighbors[i].IgnoreConnectedCheck.Unknown = false
			data.Neighbors[i].IgnoreConnectedCheck.Null = true
		}
		if data.Neighbors[i].EbgpMultihopMaximumHopCount.Unknown {
			data.Neighbors[i].EbgpMultihopMaximumHopCount.Unknown = false
			data.Neighbors[i].EbgpMultihopMaximumHopCount.Null = true
		}
		if data.Neighbors[i].BfdMinimumInterval.Unknown {
			data.Neighbors[i].BfdMinimumInterval.Unknown = false
			data.Neighbors[i].BfdMinimumInterval.Null = true
		}
		if data.Neighbors[i].BfdMultiplier.Unknown {
			data.Neighbors[i].BfdMultiplier.Unknown = false
			data.Neighbors[i].BfdMultiplier.Null = true
		}
		if data.Neighbors[i].LocalAs.Unknown {
			data.Neighbors[i].LocalAs.Unknown = false
			data.Neighbors[i].LocalAs.Null = true
		}
		if data.Neighbors[i].LocalAsNoPrepend.Unknown {
			data.Neighbors[i].LocalAsNoPrepend.Unknown = false
			data.Neighbors[i].LocalAsNoPrepend.Null = true
		}
		if data.Neighbors[i].LocalAsReplaceAs.Unknown {
			data.Neighbors[i].LocalAsReplaceAs.Unknown = false
			data.Neighbors[i].LocalAsReplaceAs.Null = true
		}
		if data.Neighbors[i].LocalAsDualAs.Unknown {
			data.Neighbors[i].LocalAsDualAs.Unknown = false
			data.Neighbors[i].LocalAsDualAs.Null = true
		}
		if data.Neighbors[i].Password.Unknown {
			data.Neighbors[i].Password.Unknown = false
			data.Neighbors[i].Password.Null = true
		}
		if data.Neighbors[i].Shutdown.Unknown {
			data.Neighbors[i].Shutdown.Unknown = false
			data.Neighbors[i].Shutdown.Null = true
		}
		if data.Neighbors[i].TimersKeepaliveInterval.Unknown {
			data.Neighbors[i].TimersKeepaliveInterval.Unknown = false
			data.Neighbors[i].TimersKeepaliveInterval.Null = true
		}
		if data.Neighbors[i].TimersHoldtime.Unknown {
			data.Neighbors[i].TimersHoldtime.Unknown = false
			data.Neighbors[i].TimersHoldtime.Null = true
		}
		if data.Neighbors[i].UpdateSource.Unknown {
			data.Neighbors[i].UpdateSource.Unknown = false
			data.Neighbors[i].UpdateSource.Null = true
		}
		if data.Neighbors[i].TtlSecurity.Unknown {
			data.Neighbors[i].TtlSecurity.Unknown = false
			data.Neighbors[i].TtlSecurity.Null = true
		}
	}
}

func (data *RouterBGPVRF) getDeletedListItems(state RouterBGPVRF) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Neighbors {
		keys := [...]string{"neighbor-address"}
		stateKeyValues := [...]string{state.Neighbors[i].NeighborAddress.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Neighbors[i].NeighborAddress.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Neighbors {
			found = true
			if state.Neighbors[i].NeighborAddress.Value != data.Neighbors[j].NeighborAddress.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/neighbors/neighbor%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *RouterBGPVRF) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
