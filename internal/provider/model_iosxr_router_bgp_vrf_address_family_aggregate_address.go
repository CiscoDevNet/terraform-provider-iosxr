// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/tidwall/sjson"

	"github.com/tidwall/gjson"
)

type RouterBGPVRFAddressFamilyAggregateAddress struct {
	Device      types.String `tfsdk:"device"`
	Id          types.String `tfsdk:"id"`
	AsNumber    types.String `tfsdk:"as_number"`
	VrfName     types.String `tfsdk:"vrf_name"`
	AfName      types.String `tfsdk:"af_name"`
	Address     types.String `tfsdk:"address"`
	Masklength  types.Int64  `tfsdk:"masklength"`
	AsSet       types.Bool   `tfsdk:"as_set"`
	AsConfedSet types.Bool   `tfsdk:"as_confed_set"`
	SummaryOnly types.Bool   `tfsdk:"summary_only"`
}

func (data RouterBGPVRFAddressFamilyAggregateAddress) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=%s]/vrfs/vrf[vrf-name=%s]/address-families/address-family[af-name=%s]/aggregate-addresses/aggregate-address[address=%s][masklength=%v]", data.AsNumber.Value, data.VrfName.Value, data.AfName.Value, data.Address.Value, data.Masklength.Value)
}

func (data RouterBGPVRFAddressFamilyAggregateAddress) toBody() string {
	body := "{}"
	if !data.AsSet.Null && !data.AsSet.Unknown {
		if data.AsSet.Value {
			body, _ = sjson.Set(body, "as-set", map[string]string{})
		}
	}
	if !data.AsConfedSet.Null && !data.AsConfedSet.Unknown {
		if data.AsConfedSet.Value {
			body, _ = sjson.Set(body, "as-confed-set", map[string]string{})
		}
	}
	if !data.SummaryOnly.Null && !data.SummaryOnly.Unknown {
		if data.SummaryOnly.Value {
			body, _ = sjson.Set(body, "summary-only", map[string]string{})
		}
	}
	return body
}

func (data *RouterBGPVRFAddressFamilyAggregateAddress) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "as-set"); value.Exists() {
		data.AsSet.Value = true
	}
	if value := gjson.GetBytes(res, "as-confed-set"); value.Exists() {
		data.AsConfedSet.Value = true
	}
	if value := gjson.GetBytes(res, "summary-only"); value.Exists() {
		data.SummaryOnly.Value = true
	}
}

func (data *RouterBGPVRFAddressFamilyAggregateAddress) fromPlan(plan RouterBGPVRFAddressFamilyAggregateAddress) {
	data.Device = plan.Device
	data.AsNumber.Value = plan.AsNumber.Value
	data.VrfName.Value = plan.VrfName.Value
	data.AfName.Value = plan.AfName.Value
	data.Address.Value = plan.Address.Value
	data.Masklength.Value = plan.Masklength.Value
}
