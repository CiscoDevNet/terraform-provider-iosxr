// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterHSRPInterfaceAddressFamilyIPv4 struct {
	Device               types.String                                               `tfsdk:"device"`
	Id                   types.String                                               `tfsdk:"id"`
	InterfaceName        types.String                                               `tfsdk:"interface_name"`
	GroupNumberVersion1s []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1s `tfsdk:"group_number_version_1s"`
	GroupNumberVersion2s []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2s `tfsdk:"group_number_version_2s"`
}

type RouterHSRPInterfaceAddressFamilyIPv4Data struct {
	Device               types.String                                               `tfsdk:"device"`
	Id                   types.String                                               `tfsdk:"id"`
	InterfaceName        types.String                                               `tfsdk:"interface_name"`
	GroupNumberVersion1s []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1s `tfsdk:"group_number_version_1s"`
	GroupNumberVersion2s []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2s `tfsdk:"group_number_version_2s"`
}
type RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1s struct {
	GroupNumberVersion1Id      types.Int64                                                                      `tfsdk:"group_number_version_1_id"`
	AddressIpv4Address         types.String                                                                     `tfsdk:"address_ipv4_address"`
	AddressLearn               types.Bool                                                                       `tfsdk:"address_learn"`
	Priority                   types.Int64                                                                      `tfsdk:"priority"`
	MacAddress                 types.String                                                                     `tfsdk:"mac_address"`
	Name                       types.String                                                                     `tfsdk:"name"`
	PreemptDelay               types.Int64                                                                      `tfsdk:"preempt_delay"`
	TimersMsec                 types.Int64                                                                      `tfsdk:"timers_msec"`
	TimersMsec2                types.Int64                                                                      `tfsdk:"timers_msec2"`
	TimersHoldTime             types.Int64                                                                      `tfsdk:"timers_hold_time"`
	TimersHoldTime2            types.Int64                                                                      `tfsdk:"timers_hold_time2"`
	BfdFastDetectPeerIpv4      types.String                                                                     `tfsdk:"bfd_fast_detect_peer_ipv4"`
	BfdFastDetectPeerInterface types.String                                                                     `tfsdk:"bfd_fast_detect_peer_interface"`
	SecondaryIpv4Addresses     []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sSecondaryIpv4Addresses `tfsdk:"secondary_ipv4_addresses"`
	TrackInterfaces            []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sTrackInterfaces        `tfsdk:"track_interfaces"`
	TrackObjects               []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sTrackObjects           `tfsdk:"track_objects"`
}
type RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2s struct {
	GroupNumberVersion2Id      types.Int64                                                                      `tfsdk:"group_number_version_2_id"`
	AddressIpv4Address         types.String                                                                     `tfsdk:"address_ipv4_address"`
	AddressLearn               types.Bool                                                                       `tfsdk:"address_learn"`
	Priority                   types.Int64                                                                      `tfsdk:"priority"`
	MacAddress                 types.String                                                                     `tfsdk:"mac_address"`
	Name                       types.String                                                                     `tfsdk:"name"`
	PreemptDelay               types.Int64                                                                      `tfsdk:"preempt_delay"`
	TimersMsec                 types.Int64                                                                      `tfsdk:"timers_msec"`
	TimersMsec2                types.Int64                                                                      `tfsdk:"timers_msec2"`
	TimersHoldTime             types.Int64                                                                      `tfsdk:"timers_hold_time"`
	TimersHoldTime2            types.Int64                                                                      `tfsdk:"timers_hold_time2"`
	BfdFastDetectPeerIpv4      types.String                                                                     `tfsdk:"bfd_fast_detect_peer_ipv4"`
	BfdFastDetectPeerInterface types.String                                                                     `tfsdk:"bfd_fast_detect_peer_interface"`
	SecondaryIpv4Addresses     []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sSecondaryIpv4Addresses `tfsdk:"secondary_ipv4_addresses"`
	TrackInterfaces            []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sTrackInterfaces        `tfsdk:"track_interfaces"`
	TrackObjects               []RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sTrackObjects           `tfsdk:"track_objects"`
}
type RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sSecondaryIpv4Addresses struct {
	Address types.String `tfsdk:"address"`
}
type RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sTrackInterfaces struct {
	TrackName         types.String `tfsdk:"track_name"`
	PriorityDecrement types.Int64  `tfsdk:"priority_decrement"`
}
type RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sTrackObjects struct {
	ObjectName        types.String `tfsdk:"object_name"`
	PriorityDecrement types.Int64  `tfsdk:"priority_decrement"`
}
type RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sSecondaryIpv4Addresses struct {
	Address types.String `tfsdk:"address"`
}
type RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sTrackInterfaces struct {
	TrackName         types.String `tfsdk:"track_name"`
	PriorityDecrement types.Int64  `tfsdk:"priority_decrement"`
}
type RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sTrackObjects struct {
	ObjectName        types.String `tfsdk:"object_name"`
	PriorityDecrement types.Int64  `tfsdk:"priority_decrement"`
}

func (data RouterHSRPInterfaceAddressFamilyIPv4) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-hsrp-cfg:router/hsrp/interfaces/interface[interface-name=%s]/address-family/ipv4/hsrp", data.InterfaceName.ValueString())
}

func (data RouterHSRPInterfaceAddressFamilyIPv4Data) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-hsrp-cfg:router/hsrp/interfaces/interface[interface-name=%s]/address-family/ipv4/hsrp", data.InterfaceName.ValueString())
}

func (data RouterHSRPInterfaceAddressFamilyIPv4) toBody(ctx context.Context) string {
	body := "{}"
	if len(data.GroupNumberVersion1s) > 0 {
		body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1", []interface{}{})
		for index, item := range data.GroupNumberVersion1s {
			if !item.GroupNumberVersion1Id.IsNull() && !item.GroupNumberVersion1Id.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"group-number-version-1-id", strconv.FormatInt(item.GroupNumberVersion1Id.ValueInt64(), 10))
			}
			if !item.AddressIpv4Address.IsNull() && !item.AddressIpv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"address.ipv4-address", item.AddressIpv4Address.ValueString())
			}
			if !item.AddressLearn.IsNull() && !item.AddressLearn.IsUnknown() {
				if item.AddressLearn.ValueBool() {
					body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"address.learn", map[string]string{})
				}
			}
			if !item.Priority.IsNull() && !item.Priority.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"priority", strconv.FormatInt(item.Priority.ValueInt64(), 10))
			}
			if !item.MacAddress.IsNull() && !item.MacAddress.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"mac-address", item.MacAddress.ValueString())
			}
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.PreemptDelay.IsNull() && !item.PreemptDelay.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"preempt.delay", strconv.FormatInt(item.PreemptDelay.ValueInt64(), 10))
			}
			if !item.TimersMsec.IsNull() && !item.TimersMsec.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"timers.msec", strconv.FormatInt(item.TimersMsec.ValueInt64(), 10))
			}
			if !item.TimersMsec2.IsNull() && !item.TimersMsec2.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"timers.msec2", strconv.FormatInt(item.TimersMsec2.ValueInt64(), 10))
			}
			if !item.TimersHoldTime.IsNull() && !item.TimersHoldTime.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"timers.hold-time", strconv.FormatInt(item.TimersHoldTime.ValueInt64(), 10))
			}
			if !item.TimersHoldTime2.IsNull() && !item.TimersHoldTime2.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"timers.hold-time2", strconv.FormatInt(item.TimersHoldTime2.ValueInt64(), 10))
			}
			if !item.BfdFastDetectPeerIpv4.IsNull() && !item.BfdFastDetectPeerIpv4.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"bfd.fast-detect.peer.ipv4", item.BfdFastDetectPeerIpv4.ValueString())
			}
			if !item.BfdFastDetectPeerInterface.IsNull() && !item.BfdFastDetectPeerInterface.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"bfd.fast-detect.peer.interface", item.BfdFastDetectPeerInterface.ValueString())
			}
			if len(item.SecondaryIpv4Addresses) > 0 {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"address.secondary-ipv4-addresses.secondary-ipv4-address", []interface{}{})
				for cindex, citem := range item.SecondaryIpv4Addresses {
					if !citem.Address.IsNull() && !citem.Address.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"address.secondary-ipv4-addresses.secondary-ipv4-address"+"."+strconv.Itoa(cindex)+"."+"address", citem.Address.ValueString())
					}
				}
			}
			if len(item.TrackInterfaces) > 0 {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"track-interfaces.track-interface", []interface{}{})
				for cindex, citem := range item.TrackInterfaces {
					if !citem.TrackName.IsNull() && !citem.TrackName.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"track-interfaces.track-interface"+"."+strconv.Itoa(cindex)+"."+"track-name", citem.TrackName.ValueString())
					}
					if !citem.PriorityDecrement.IsNull() && !citem.PriorityDecrement.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"track-interfaces.track-interface"+"."+strconv.Itoa(cindex)+"."+"priority-decrement", strconv.FormatInt(citem.PriorityDecrement.ValueInt64(), 10))
					}
				}
			}
			if len(item.TrackObjects) > 0 {
				body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"track-objects.track-object", []interface{}{})
				for cindex, citem := range item.TrackObjects {
					if !citem.ObjectName.IsNull() && !citem.ObjectName.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"track-objects.track-object"+"."+strconv.Itoa(cindex)+"."+"object-name", citem.ObjectName.ValueString())
					}
					if !citem.PriorityDecrement.IsNull() && !citem.PriorityDecrement.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-1s.group-number-version-1"+"."+strconv.Itoa(index)+"."+"track-objects.track-object"+"."+strconv.Itoa(cindex)+"."+"priority-decrement", strconv.FormatInt(citem.PriorityDecrement.ValueInt64(), 10))
					}
				}
			}
		}
	}
	if len(data.GroupNumberVersion2s) > 0 {
		body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2", []interface{}{})
		for index, item := range data.GroupNumberVersion2s {
			if !item.GroupNumberVersion2Id.IsNull() && !item.GroupNumberVersion2Id.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"group-number-version-2-id", strconv.FormatInt(item.GroupNumberVersion2Id.ValueInt64(), 10))
			}
			if !item.AddressIpv4Address.IsNull() && !item.AddressIpv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"address.ipv4-address", item.AddressIpv4Address.ValueString())
			}
			if !item.AddressLearn.IsNull() && !item.AddressLearn.IsUnknown() {
				if item.AddressLearn.ValueBool() {
					body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"address.learn", map[string]string{})
				}
			}
			if !item.Priority.IsNull() && !item.Priority.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"priority", strconv.FormatInt(item.Priority.ValueInt64(), 10))
			}
			if !item.MacAddress.IsNull() && !item.MacAddress.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"mac-address", item.MacAddress.ValueString())
			}
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.PreemptDelay.IsNull() && !item.PreemptDelay.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"preempt.delay", strconv.FormatInt(item.PreemptDelay.ValueInt64(), 10))
			}
			if !item.TimersMsec.IsNull() && !item.TimersMsec.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"timers.msec", strconv.FormatInt(item.TimersMsec.ValueInt64(), 10))
			}
			if !item.TimersMsec2.IsNull() && !item.TimersMsec2.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"timers.msec2", strconv.FormatInt(item.TimersMsec2.ValueInt64(), 10))
			}
			if !item.TimersHoldTime.IsNull() && !item.TimersHoldTime.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"timers.hold-time", strconv.FormatInt(item.TimersHoldTime.ValueInt64(), 10))
			}
			if !item.TimersHoldTime2.IsNull() && !item.TimersHoldTime2.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"timers.hold-time2", strconv.FormatInt(item.TimersHoldTime2.ValueInt64(), 10))
			}
			if !item.BfdFastDetectPeerIpv4.IsNull() && !item.BfdFastDetectPeerIpv4.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"bfd.fast-detect.peer.ipv4", item.BfdFastDetectPeerIpv4.ValueString())
			}
			if !item.BfdFastDetectPeerInterface.IsNull() && !item.BfdFastDetectPeerInterface.IsUnknown() {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"bfd.fast-detect.peer.interface", item.BfdFastDetectPeerInterface.ValueString())
			}
			if len(item.SecondaryIpv4Addresses) > 0 {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"address.secondary-ipv4-addresses.secondary-ipv4-address", []interface{}{})
				for cindex, citem := range item.SecondaryIpv4Addresses {
					if !citem.Address.IsNull() && !citem.Address.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"address.secondary-ipv4-addresses.secondary-ipv4-address"+"."+strconv.Itoa(cindex)+"."+"address", citem.Address.ValueString())
					}
				}
			}
			if len(item.TrackInterfaces) > 0 {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"track-interfaces.track-interface", []interface{}{})
				for cindex, citem := range item.TrackInterfaces {
					if !citem.TrackName.IsNull() && !citem.TrackName.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"track-interfaces.track-interface"+"."+strconv.Itoa(cindex)+"."+"track-name", citem.TrackName.ValueString())
					}
					if !citem.PriorityDecrement.IsNull() && !citem.PriorityDecrement.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"track-interfaces.track-interface"+"."+strconv.Itoa(cindex)+"."+"priority-decrement", strconv.FormatInt(citem.PriorityDecrement.ValueInt64(), 10))
					}
				}
			}
			if len(item.TrackObjects) > 0 {
				body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"track-objects.track-object", []interface{}{})
				for cindex, citem := range item.TrackObjects {
					if !citem.ObjectName.IsNull() && !citem.ObjectName.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"track-objects.track-object"+"."+strconv.Itoa(cindex)+"."+"object-name", citem.ObjectName.ValueString())
					}
					if !citem.PriorityDecrement.IsNull() && !citem.PriorityDecrement.IsUnknown() {
						body, _ = sjson.Set(body, "group-number-version-2s.group-number-version-2"+"."+strconv.Itoa(index)+"."+"track-objects.track-object"+"."+strconv.Itoa(cindex)+"."+"priority-decrement", strconv.FormatInt(citem.PriorityDecrement.ValueInt64(), 10))
					}
				}
			}
		}
	}
	return body
}

func (data *RouterHSRPInterfaceAddressFamilyIPv4) updateFromBody(ctx context.Context, res []byte) {
	for i := range data.GroupNumberVersion1s {
		keys := [...]string{"group-number-version-1-id"}
		keyValues := [...]string{strconv.FormatInt(data.GroupNumberVersion1s[i].GroupNumberVersion1Id.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "group-number-version-1s.group-number-version-1").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("group-number-version-1-id"); value.Exists() && !data.GroupNumberVersion1s[i].GroupNumberVersion1Id.IsNull() {
			data.GroupNumberVersion1s[i].GroupNumberVersion1Id = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion1s[i].GroupNumberVersion1Id = types.Int64Null()
		}
		if value := r.Get("address.ipv4-address"); value.Exists() && !data.GroupNumberVersion1s[i].AddressIpv4Address.IsNull() {
			data.GroupNumberVersion1s[i].AddressIpv4Address = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion1s[i].AddressIpv4Address = types.StringNull()
		}
		if value := r.Get("address.learn"); !data.GroupNumberVersion1s[i].AddressLearn.IsNull() {
			if value.Exists() {
				data.GroupNumberVersion1s[i].AddressLearn = types.BoolValue(true)
			} else {
				data.GroupNumberVersion1s[i].AddressLearn = types.BoolValue(false)
			}
		} else {
			data.GroupNumberVersion1s[i].AddressLearn = types.BoolNull()
		}
		if value := r.Get("priority"); value.Exists() && !data.GroupNumberVersion1s[i].Priority.IsNull() {
			data.GroupNumberVersion1s[i].Priority = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion1s[i].Priority = types.Int64Null()
		}
		if value := r.Get("mac-address"); value.Exists() && !data.GroupNumberVersion1s[i].MacAddress.IsNull() {
			data.GroupNumberVersion1s[i].MacAddress = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion1s[i].MacAddress = types.StringNull()
		}
		if value := r.Get("name"); value.Exists() && !data.GroupNumberVersion1s[i].Name.IsNull() {
			data.GroupNumberVersion1s[i].Name = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion1s[i].Name = types.StringNull()
		}
		if value := r.Get("preempt.delay"); value.Exists() && !data.GroupNumberVersion1s[i].PreemptDelay.IsNull() {
			data.GroupNumberVersion1s[i].PreemptDelay = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion1s[i].PreemptDelay = types.Int64Null()
		}
		if value := r.Get("timers.msec"); value.Exists() && !data.GroupNumberVersion1s[i].TimersMsec.IsNull() {
			data.GroupNumberVersion1s[i].TimersMsec = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion1s[i].TimersMsec = types.Int64Null()
		}
		if value := r.Get("timers.msec2"); value.Exists() && !data.GroupNumberVersion1s[i].TimersMsec2.IsNull() {
			data.GroupNumberVersion1s[i].TimersMsec2 = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion1s[i].TimersMsec2 = types.Int64Null()
		}
		if value := r.Get("timers.hold-time"); value.Exists() && !data.GroupNumberVersion1s[i].TimersHoldTime.IsNull() {
			data.GroupNumberVersion1s[i].TimersHoldTime = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion1s[i].TimersHoldTime = types.Int64Null()
		}
		if value := r.Get("timers.hold-time2"); value.Exists() && !data.GroupNumberVersion1s[i].TimersHoldTime2.IsNull() {
			data.GroupNumberVersion1s[i].TimersHoldTime2 = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion1s[i].TimersHoldTime2 = types.Int64Null()
		}
		if value := r.Get("bfd.fast-detect.peer.ipv4"); value.Exists() && !data.GroupNumberVersion1s[i].BfdFastDetectPeerIpv4.IsNull() {
			data.GroupNumberVersion1s[i].BfdFastDetectPeerIpv4 = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion1s[i].BfdFastDetectPeerIpv4 = types.StringNull()
		}
		if value := r.Get("bfd.fast-detect.peer.interface"); value.Exists() && !data.GroupNumberVersion1s[i].BfdFastDetectPeerInterface.IsNull() {
			data.GroupNumberVersion1s[i].BfdFastDetectPeerInterface = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion1s[i].BfdFastDetectPeerInterface = types.StringNull()
		}
		for ci := range data.GroupNumberVersion1s[i].SecondaryIpv4Addresses {
			keys := [...]string{"address"}
			keyValues := [...]string{data.GroupNumberVersion1s[i].SecondaryIpv4Addresses[ci].Address.ValueString()}

			var cr gjson.Result
			r.Get("address.secondary-ipv4-addresses.secondary-ipv4-address").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("address"); value.Exists() && !data.GroupNumberVersion1s[i].SecondaryIpv4Addresses[ci].Address.IsNull() {
				data.GroupNumberVersion1s[i].SecondaryIpv4Addresses[ci].Address = types.StringValue(value.String())
			} else {
				data.GroupNumberVersion1s[i].SecondaryIpv4Addresses[ci].Address = types.StringNull()
			}
		}
		for ci := range data.GroupNumberVersion1s[i].TrackInterfaces {
			keys := [...]string{"track-name"}
			keyValues := [...]string{data.GroupNumberVersion1s[i].TrackInterfaces[ci].TrackName.ValueString()}

			var cr gjson.Result
			r.Get("track-interfaces.track-interface").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("track-name"); value.Exists() && !data.GroupNumberVersion1s[i].TrackInterfaces[ci].TrackName.IsNull() {
				data.GroupNumberVersion1s[i].TrackInterfaces[ci].TrackName = types.StringValue(value.String())
			} else {
				data.GroupNumberVersion1s[i].TrackInterfaces[ci].TrackName = types.StringNull()
			}
			if value := cr.Get("priority-decrement"); value.Exists() && !data.GroupNumberVersion1s[i].TrackInterfaces[ci].PriorityDecrement.IsNull() {
				data.GroupNumberVersion1s[i].TrackInterfaces[ci].PriorityDecrement = types.Int64Value(value.Int())
			} else {
				data.GroupNumberVersion1s[i].TrackInterfaces[ci].PriorityDecrement = types.Int64Null()
			}
		}
		for ci := range data.GroupNumberVersion1s[i].TrackObjects {
			keys := [...]string{"object-name"}
			keyValues := [...]string{data.GroupNumberVersion1s[i].TrackObjects[ci].ObjectName.ValueString()}

			var cr gjson.Result
			r.Get("track-objects.track-object").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("object-name"); value.Exists() && !data.GroupNumberVersion1s[i].TrackObjects[ci].ObjectName.IsNull() {
				data.GroupNumberVersion1s[i].TrackObjects[ci].ObjectName = types.StringValue(value.String())
			} else {
				data.GroupNumberVersion1s[i].TrackObjects[ci].ObjectName = types.StringNull()
			}
			if value := cr.Get("priority-decrement"); value.Exists() && !data.GroupNumberVersion1s[i].TrackObjects[ci].PriorityDecrement.IsNull() {
				data.GroupNumberVersion1s[i].TrackObjects[ci].PriorityDecrement = types.Int64Value(value.Int())
			} else {
				data.GroupNumberVersion1s[i].TrackObjects[ci].PriorityDecrement = types.Int64Null()
			}
		}
	}
	for i := range data.GroupNumberVersion2s {
		keys := [...]string{"group-number-version-2-id"}
		keyValues := [...]string{strconv.FormatInt(data.GroupNumberVersion2s[i].GroupNumberVersion2Id.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "group-number-version-2s.group-number-version-2").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("group-number-version-2-id"); value.Exists() && !data.GroupNumberVersion2s[i].GroupNumberVersion2Id.IsNull() {
			data.GroupNumberVersion2s[i].GroupNumberVersion2Id = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion2s[i].GroupNumberVersion2Id = types.Int64Null()
		}
		if value := r.Get("address.ipv4-address"); value.Exists() && !data.GroupNumberVersion2s[i].AddressIpv4Address.IsNull() {
			data.GroupNumberVersion2s[i].AddressIpv4Address = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion2s[i].AddressIpv4Address = types.StringNull()
		}
		if value := r.Get("address.learn"); !data.GroupNumberVersion2s[i].AddressLearn.IsNull() {
			if value.Exists() {
				data.GroupNumberVersion2s[i].AddressLearn = types.BoolValue(true)
			} else {
				data.GroupNumberVersion2s[i].AddressLearn = types.BoolValue(false)
			}
		} else {
			data.GroupNumberVersion2s[i].AddressLearn = types.BoolNull()
		}
		if value := r.Get("priority"); value.Exists() && !data.GroupNumberVersion2s[i].Priority.IsNull() {
			data.GroupNumberVersion2s[i].Priority = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion2s[i].Priority = types.Int64Null()
		}
		if value := r.Get("mac-address"); value.Exists() && !data.GroupNumberVersion2s[i].MacAddress.IsNull() {
			data.GroupNumberVersion2s[i].MacAddress = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion2s[i].MacAddress = types.StringNull()
		}
		if value := r.Get("name"); value.Exists() && !data.GroupNumberVersion2s[i].Name.IsNull() {
			data.GroupNumberVersion2s[i].Name = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion2s[i].Name = types.StringNull()
		}
		if value := r.Get("preempt.delay"); value.Exists() && !data.GroupNumberVersion2s[i].PreemptDelay.IsNull() {
			data.GroupNumberVersion2s[i].PreemptDelay = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion2s[i].PreemptDelay = types.Int64Null()
		}
		if value := r.Get("timers.msec"); value.Exists() && !data.GroupNumberVersion2s[i].TimersMsec.IsNull() {
			data.GroupNumberVersion2s[i].TimersMsec = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion2s[i].TimersMsec = types.Int64Null()
		}
		if value := r.Get("timers.msec2"); value.Exists() && !data.GroupNumberVersion2s[i].TimersMsec2.IsNull() {
			data.GroupNumberVersion2s[i].TimersMsec2 = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion2s[i].TimersMsec2 = types.Int64Null()
		}
		if value := r.Get("timers.hold-time"); value.Exists() && !data.GroupNumberVersion2s[i].TimersHoldTime.IsNull() {
			data.GroupNumberVersion2s[i].TimersHoldTime = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion2s[i].TimersHoldTime = types.Int64Null()
		}
		if value := r.Get("timers.hold-time2"); value.Exists() && !data.GroupNumberVersion2s[i].TimersHoldTime2.IsNull() {
			data.GroupNumberVersion2s[i].TimersHoldTime2 = types.Int64Value(value.Int())
		} else {
			data.GroupNumberVersion2s[i].TimersHoldTime2 = types.Int64Null()
		}
		if value := r.Get("bfd.fast-detect.peer.ipv4"); value.Exists() && !data.GroupNumberVersion2s[i].BfdFastDetectPeerIpv4.IsNull() {
			data.GroupNumberVersion2s[i].BfdFastDetectPeerIpv4 = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion2s[i].BfdFastDetectPeerIpv4 = types.StringNull()
		}
		if value := r.Get("bfd.fast-detect.peer.interface"); value.Exists() && !data.GroupNumberVersion2s[i].BfdFastDetectPeerInterface.IsNull() {
			data.GroupNumberVersion2s[i].BfdFastDetectPeerInterface = types.StringValue(value.String())
		} else {
			data.GroupNumberVersion2s[i].BfdFastDetectPeerInterface = types.StringNull()
		}
		for ci := range data.GroupNumberVersion2s[i].SecondaryIpv4Addresses {
			keys := [...]string{"address"}
			keyValues := [...]string{data.GroupNumberVersion2s[i].SecondaryIpv4Addresses[ci].Address.ValueString()}

			var cr gjson.Result
			r.Get("address.secondary-ipv4-addresses.secondary-ipv4-address").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("address"); value.Exists() && !data.GroupNumberVersion2s[i].SecondaryIpv4Addresses[ci].Address.IsNull() {
				data.GroupNumberVersion2s[i].SecondaryIpv4Addresses[ci].Address = types.StringValue(value.String())
			} else {
				data.GroupNumberVersion2s[i].SecondaryIpv4Addresses[ci].Address = types.StringNull()
			}
		}
		for ci := range data.GroupNumberVersion2s[i].TrackInterfaces {
			keys := [...]string{"track-name"}
			keyValues := [...]string{data.GroupNumberVersion2s[i].TrackInterfaces[ci].TrackName.ValueString()}

			var cr gjson.Result
			r.Get("track-interfaces.track-interface").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("track-name"); value.Exists() && !data.GroupNumberVersion2s[i].TrackInterfaces[ci].TrackName.IsNull() {
				data.GroupNumberVersion2s[i].TrackInterfaces[ci].TrackName = types.StringValue(value.String())
			} else {
				data.GroupNumberVersion2s[i].TrackInterfaces[ci].TrackName = types.StringNull()
			}
			if value := cr.Get("priority-decrement"); value.Exists() && !data.GroupNumberVersion2s[i].TrackInterfaces[ci].PriorityDecrement.IsNull() {
				data.GroupNumberVersion2s[i].TrackInterfaces[ci].PriorityDecrement = types.Int64Value(value.Int())
			} else {
				data.GroupNumberVersion2s[i].TrackInterfaces[ci].PriorityDecrement = types.Int64Null()
			}
		}
		for ci := range data.GroupNumberVersion2s[i].TrackObjects {
			keys := [...]string{"object-name"}
			keyValues := [...]string{data.GroupNumberVersion2s[i].TrackObjects[ci].ObjectName.ValueString()}

			var cr gjson.Result
			r.Get("track-objects.track-object").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("object-name"); value.Exists() && !data.GroupNumberVersion2s[i].TrackObjects[ci].ObjectName.IsNull() {
				data.GroupNumberVersion2s[i].TrackObjects[ci].ObjectName = types.StringValue(value.String())
			} else {
				data.GroupNumberVersion2s[i].TrackObjects[ci].ObjectName = types.StringNull()
			}
			if value := cr.Get("priority-decrement"); value.Exists() && !data.GroupNumberVersion2s[i].TrackObjects[ci].PriorityDecrement.IsNull() {
				data.GroupNumberVersion2s[i].TrackObjects[ci].PriorityDecrement = types.Int64Value(value.Int())
			} else {
				data.GroupNumberVersion2s[i].TrackObjects[ci].PriorityDecrement = types.Int64Null()
			}
		}
	}
}

func (data *RouterHSRPInterfaceAddressFamilyIPv4Data) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "group-number-version-1s.group-number-version-1"); value.Exists() {
		data.GroupNumberVersion1s = make([]RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1s, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1s{}
			if cValue := v.Get("group-number-version-1-id"); cValue.Exists() {
				item.GroupNumberVersion1Id = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("address.ipv4-address"); cValue.Exists() {
				item.AddressIpv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("address.learn"); cValue.Exists() {
				item.AddressLearn = types.BoolValue(true)
			} else {
				item.AddressLearn = types.BoolValue(false)
			}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("mac-address"); cValue.Exists() {
				item.MacAddress = types.StringValue(cValue.String())
			}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("preempt.delay"); cValue.Exists() {
				item.PreemptDelay = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("timers.msec"); cValue.Exists() {
				item.TimersMsec = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("timers.msec2"); cValue.Exists() {
				item.TimersMsec2 = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("timers.hold-time"); cValue.Exists() {
				item.TimersHoldTime = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("timers.hold-time2"); cValue.Exists() {
				item.TimersHoldTime2 = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("bfd.fast-detect.peer.ipv4"); cValue.Exists() {
				item.BfdFastDetectPeerIpv4 = types.StringValue(cValue.String())
			}
			if cValue := v.Get("bfd.fast-detect.peer.interface"); cValue.Exists() {
				item.BfdFastDetectPeerInterface = types.StringValue(cValue.String())
			}
			if cValue := v.Get("address.secondary-ipv4-addresses.secondary-ipv4-address"); cValue.Exists() {
				item.SecondaryIpv4Addresses = make([]RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sSecondaryIpv4Addresses, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sSecondaryIpv4Addresses{}
					if ccValue := cv.Get("address"); ccValue.Exists() {
						cItem.Address = types.StringValue(ccValue.String())
					}
					item.SecondaryIpv4Addresses = append(item.SecondaryIpv4Addresses, cItem)
					return true
				})
			}
			if cValue := v.Get("track-interfaces.track-interface"); cValue.Exists() {
				item.TrackInterfaces = make([]RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sTrackInterfaces, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sTrackInterfaces{}
					if ccValue := cv.Get("track-name"); ccValue.Exists() {
						cItem.TrackName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("priority-decrement"); ccValue.Exists() {
						cItem.PriorityDecrement = types.Int64Value(ccValue.Int())
					}
					item.TrackInterfaces = append(item.TrackInterfaces, cItem)
					return true
				})
			}
			if cValue := v.Get("track-objects.track-object"); cValue.Exists() {
				item.TrackObjects = make([]RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sTrackObjects, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion1sTrackObjects{}
					if ccValue := cv.Get("object-name"); ccValue.Exists() {
						cItem.ObjectName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("priority-decrement"); ccValue.Exists() {
						cItem.PriorityDecrement = types.Int64Value(ccValue.Int())
					}
					item.TrackObjects = append(item.TrackObjects, cItem)
					return true
				})
			}
			data.GroupNumberVersion1s = append(data.GroupNumberVersion1s, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "group-number-version-2s.group-number-version-2"); value.Exists() {
		data.GroupNumberVersion2s = make([]RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2s, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2s{}
			if cValue := v.Get("group-number-version-2-id"); cValue.Exists() {
				item.GroupNumberVersion2Id = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("address.ipv4-address"); cValue.Exists() {
				item.AddressIpv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("address.learn"); cValue.Exists() {
				item.AddressLearn = types.BoolValue(true)
			} else {
				item.AddressLearn = types.BoolValue(false)
			}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("mac-address"); cValue.Exists() {
				item.MacAddress = types.StringValue(cValue.String())
			}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("preempt.delay"); cValue.Exists() {
				item.PreemptDelay = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("timers.msec"); cValue.Exists() {
				item.TimersMsec = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("timers.msec2"); cValue.Exists() {
				item.TimersMsec2 = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("timers.hold-time"); cValue.Exists() {
				item.TimersHoldTime = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("timers.hold-time2"); cValue.Exists() {
				item.TimersHoldTime2 = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("bfd.fast-detect.peer.ipv4"); cValue.Exists() {
				item.BfdFastDetectPeerIpv4 = types.StringValue(cValue.String())
			}
			if cValue := v.Get("bfd.fast-detect.peer.interface"); cValue.Exists() {
				item.BfdFastDetectPeerInterface = types.StringValue(cValue.String())
			}
			if cValue := v.Get("address.secondary-ipv4-addresses.secondary-ipv4-address"); cValue.Exists() {
				item.SecondaryIpv4Addresses = make([]RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sSecondaryIpv4Addresses, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sSecondaryIpv4Addresses{}
					if ccValue := cv.Get("address"); ccValue.Exists() {
						cItem.Address = types.StringValue(ccValue.String())
					}
					item.SecondaryIpv4Addresses = append(item.SecondaryIpv4Addresses, cItem)
					return true
				})
			}
			if cValue := v.Get("track-interfaces.track-interface"); cValue.Exists() {
				item.TrackInterfaces = make([]RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sTrackInterfaces, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sTrackInterfaces{}
					if ccValue := cv.Get("track-name"); ccValue.Exists() {
						cItem.TrackName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("priority-decrement"); ccValue.Exists() {
						cItem.PriorityDecrement = types.Int64Value(ccValue.Int())
					}
					item.TrackInterfaces = append(item.TrackInterfaces, cItem)
					return true
				})
			}
			if cValue := v.Get("track-objects.track-object"); cValue.Exists() {
				item.TrackObjects = make([]RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sTrackObjects, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterHSRPInterfaceAddressFamilyIPv4GroupNumberVersion2sTrackObjects{}
					if ccValue := cv.Get("object-name"); ccValue.Exists() {
						cItem.ObjectName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("priority-decrement"); ccValue.Exists() {
						cItem.PriorityDecrement = types.Int64Value(ccValue.Int())
					}
					item.TrackObjects = append(item.TrackObjects, cItem)
					return true
				})
			}
			data.GroupNumberVersion2s = append(data.GroupNumberVersion2s, item)
			return true
		})
	}
}

func (data *RouterHSRPInterfaceAddressFamilyIPv4) getDeletedListItems(ctx context.Context, state RouterHSRPInterfaceAddressFamilyIPv4) []string {
	deletedListItems := make([]string, 0)
	for i := range state.GroupNumberVersion1s {
		keys := [...]string{"group-number-version-1-id"}
		stateKeyValues := [...]string{strconv.FormatInt(state.GroupNumberVersion1s[i].GroupNumberVersion1Id.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.GroupNumberVersion1s[i].GroupNumberVersion1Id.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.GroupNumberVersion1s {
			found = true
			if state.GroupNumberVersion1s[i].GroupNumberVersion1Id.ValueInt64() != data.GroupNumberVersion1s[j].GroupNumberVersion1Id.ValueInt64() {
				found = false
			}
			if found {
				for ci := range state.GroupNumberVersion1s[i].SecondaryIpv4Addresses {
					ckeys := [...]string{"address"}
					cstateKeyValues := [...]string{state.GroupNumberVersion1s[i].SecondaryIpv4Addresses[ci].Address.ValueString()}

					cemptyKeys := true
					if !reflect.ValueOf(state.GroupNumberVersion1s[i].SecondaryIpv4Addresses[ci].Address.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.GroupNumberVersion1s[j].SecondaryIpv4Addresses {
						found = true
						if state.GroupNumberVersion1s[i].SecondaryIpv4Addresses[ci].Address.ValueString() != data.GroupNumberVersion1s[j].SecondaryIpv4Addresses[cj].Address.ValueString() {
							found = false
						}
						if found {
							break
						}
					}
					if !found {
						keyString := ""
						for ki := range keys {
							keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
						}
						ckeyString := ""
						for cki := range ckeys {
							ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
						}
						deletedListItems = append(deletedListItems, fmt.Sprintf("%v/group-number-version-1s/group-number-version-1%v/address/secondary-ipv4-addresses/secondary-ipv4-address%v", state.getPath(), keyString, ckeyString))
					}
				}
				for ci := range state.GroupNumberVersion1s[i].TrackInterfaces {
					ckeys := [...]string{"track-name"}
					cstateKeyValues := [...]string{state.GroupNumberVersion1s[i].TrackInterfaces[ci].TrackName.ValueString()}

					cemptyKeys := true
					if !reflect.ValueOf(state.GroupNumberVersion1s[i].TrackInterfaces[ci].TrackName.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.GroupNumberVersion1s[j].TrackInterfaces {
						found = true
						if state.GroupNumberVersion1s[i].TrackInterfaces[ci].TrackName.ValueString() != data.GroupNumberVersion1s[j].TrackInterfaces[cj].TrackName.ValueString() {
							found = false
						}
						if found {
							break
						}
					}
					if !found {
						keyString := ""
						for ki := range keys {
							keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
						}
						ckeyString := ""
						for cki := range ckeys {
							ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
						}
						deletedListItems = append(deletedListItems, fmt.Sprintf("%v/group-number-version-1s/group-number-version-1%v/track-interfaces/track-interface%v", state.getPath(), keyString, ckeyString))
					}
				}
				for ci := range state.GroupNumberVersion1s[i].TrackObjects {
					ckeys := [...]string{"object-name"}
					cstateKeyValues := [...]string{state.GroupNumberVersion1s[i].TrackObjects[ci].ObjectName.ValueString()}

					cemptyKeys := true
					if !reflect.ValueOf(state.GroupNumberVersion1s[i].TrackObjects[ci].ObjectName.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.GroupNumberVersion1s[j].TrackObjects {
						found = true
						if state.GroupNumberVersion1s[i].TrackObjects[ci].ObjectName.ValueString() != data.GroupNumberVersion1s[j].TrackObjects[cj].ObjectName.ValueString() {
							found = false
						}
						if found {
							break
						}
					}
					if !found {
						keyString := ""
						for ki := range keys {
							keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
						}
						ckeyString := ""
						for cki := range ckeys {
							ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
						}
						deletedListItems = append(deletedListItems, fmt.Sprintf("%v/group-number-version-1s/group-number-version-1%v/track-objects/track-object%v", state.getPath(), keyString, ckeyString))
					}
				}
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/group-number-version-1s/group-number-version-1%v", state.getPath(), keyString))
		}
	}
	for i := range state.GroupNumberVersion2s {
		keys := [...]string{"group-number-version-2-id"}
		stateKeyValues := [...]string{strconv.FormatInt(state.GroupNumberVersion2s[i].GroupNumberVersion2Id.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.GroupNumberVersion2s[i].GroupNumberVersion2Id.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.GroupNumberVersion2s {
			found = true
			if state.GroupNumberVersion2s[i].GroupNumberVersion2Id.ValueInt64() != data.GroupNumberVersion2s[j].GroupNumberVersion2Id.ValueInt64() {
				found = false
			}
			if found {
				for ci := range state.GroupNumberVersion2s[i].SecondaryIpv4Addresses {
					ckeys := [...]string{"address"}
					cstateKeyValues := [...]string{state.GroupNumberVersion2s[i].SecondaryIpv4Addresses[ci].Address.ValueString()}

					cemptyKeys := true
					if !reflect.ValueOf(state.GroupNumberVersion2s[i].SecondaryIpv4Addresses[ci].Address.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.GroupNumberVersion2s[j].SecondaryIpv4Addresses {
						found = true
						if state.GroupNumberVersion2s[i].SecondaryIpv4Addresses[ci].Address.ValueString() != data.GroupNumberVersion2s[j].SecondaryIpv4Addresses[cj].Address.ValueString() {
							found = false
						}
						if found {
							break
						}
					}
					if !found {
						keyString := ""
						for ki := range keys {
							keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
						}
						ckeyString := ""
						for cki := range ckeys {
							ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
						}
						deletedListItems = append(deletedListItems, fmt.Sprintf("%v/group-number-version-2s/group-number-version-2%v/address/secondary-ipv4-addresses/secondary-ipv4-address%v", state.getPath(), keyString, ckeyString))
					}
				}
				for ci := range state.GroupNumberVersion2s[i].TrackInterfaces {
					ckeys := [...]string{"track-name"}
					cstateKeyValues := [...]string{state.GroupNumberVersion2s[i].TrackInterfaces[ci].TrackName.ValueString()}

					cemptyKeys := true
					if !reflect.ValueOf(state.GroupNumberVersion2s[i].TrackInterfaces[ci].TrackName.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.GroupNumberVersion2s[j].TrackInterfaces {
						found = true
						if state.GroupNumberVersion2s[i].TrackInterfaces[ci].TrackName.ValueString() != data.GroupNumberVersion2s[j].TrackInterfaces[cj].TrackName.ValueString() {
							found = false
						}
						if found {
							break
						}
					}
					if !found {
						keyString := ""
						for ki := range keys {
							keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
						}
						ckeyString := ""
						for cki := range ckeys {
							ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
						}
						deletedListItems = append(deletedListItems, fmt.Sprintf("%v/group-number-version-2s/group-number-version-2%v/track-interfaces/track-interface%v", state.getPath(), keyString, ckeyString))
					}
				}
				for ci := range state.GroupNumberVersion2s[i].TrackObjects {
					ckeys := [...]string{"object-name"}
					cstateKeyValues := [...]string{state.GroupNumberVersion2s[i].TrackObjects[ci].ObjectName.ValueString()}

					cemptyKeys := true
					if !reflect.ValueOf(state.GroupNumberVersion2s[i].TrackObjects[ci].ObjectName.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.GroupNumberVersion2s[j].TrackObjects {
						found = true
						if state.GroupNumberVersion2s[i].TrackObjects[ci].ObjectName.ValueString() != data.GroupNumberVersion2s[j].TrackObjects[cj].ObjectName.ValueString() {
							found = false
						}
						if found {
							break
						}
					}
					if !found {
						keyString := ""
						for ki := range keys {
							keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
						}
						ckeyString := ""
						for cki := range ckeys {
							ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
						}
						deletedListItems = append(deletedListItems, fmt.Sprintf("%v/group-number-version-2s/group-number-version-2%v/track-objects/track-object%v", state.getPath(), keyString, ckeyString))
					}
				}
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/group-number-version-2s/group-number-version-2%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *RouterHSRPInterfaceAddressFamilyIPv4) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.GroupNumberVersion1s {
		keys := [...]string{"group-number-version-1-id"}
		keyValues := [...]string{strconv.FormatInt(data.GroupNumberVersion1s[i].GroupNumberVersion1Id.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.GroupNumberVersion1s[i].AddressLearn.IsNull() && !data.GroupNumberVersion1s[i].AddressLearn.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/group-number-version-1s/group-number-version-1%v/address/learn", data.getPath(), keyString))
		}
		for ci := range data.GroupNumberVersion1s[i].SecondaryIpv4Addresses {
			ckeys := [...]string{"address"}
			ckeyValues := [...]string{data.GroupNumberVersion1s[i].SecondaryIpv4Addresses[ci].Address.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
		}
		for ci := range data.GroupNumberVersion1s[i].TrackInterfaces {
			ckeys := [...]string{"track-name"}
			ckeyValues := [...]string{data.GroupNumberVersion1s[i].TrackInterfaces[ci].TrackName.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
		}
		for ci := range data.GroupNumberVersion1s[i].TrackObjects {
			ckeys := [...]string{"object-name"}
			ckeyValues := [...]string{data.GroupNumberVersion1s[i].TrackObjects[ci].ObjectName.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
		}
	}
	for i := range data.GroupNumberVersion2s {
		keys := [...]string{"group-number-version-2-id"}
		keyValues := [...]string{strconv.FormatInt(data.GroupNumberVersion2s[i].GroupNumberVersion2Id.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.GroupNumberVersion2s[i].AddressLearn.IsNull() && !data.GroupNumberVersion2s[i].AddressLearn.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/group-number-version-2s/group-number-version-2%v/address/learn", data.getPath(), keyString))
		}
		for ci := range data.GroupNumberVersion2s[i].SecondaryIpv4Addresses {
			ckeys := [...]string{"address"}
			ckeyValues := [...]string{data.GroupNumberVersion2s[i].SecondaryIpv4Addresses[ci].Address.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
		}
		for ci := range data.GroupNumberVersion2s[i].TrackInterfaces {
			ckeys := [...]string{"track-name"}
			ckeyValues := [...]string{data.GroupNumberVersion2s[i].TrackInterfaces[ci].TrackName.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
		}
		for ci := range data.GroupNumberVersion2s[i].TrackObjects {
			ckeys := [...]string{"object-name"}
			ckeyValues := [...]string{data.GroupNumberVersion2s[i].TrackObjects[ci].ObjectName.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
		}
	}
	return emptyLeafsDelete
}

func (data *RouterHSRPInterfaceAddressFamilyIPv4) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.GroupNumberVersion1s {
		keys := [...]string{"group-number-version-1-id"}
		keyValues := [...]string{strconv.FormatInt(data.GroupNumberVersion1s[i].GroupNumberVersion1Id.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/group-number-version-1s/group-number-version-1%v", data.getPath(), keyString))
	}
	for i := range data.GroupNumberVersion2s {
		keys := [...]string{"group-number-version-2-id"}
		keyValues := [...]string{strconv.FormatInt(data.GroupNumberVersion2s[i].GroupNumberVersion2Id.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/group-number-version-2s/group-number-version-2%v", data.getPath(), keyString))
	}
	return deletePaths
}
