// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterISISAddressFamily struct {
	Device                      types.String `tfsdk:"device"`
	Id                          types.String `tfsdk:"id"`
	ProcessId                   types.String `tfsdk:"process_id"`
	AfName                      types.String `tfsdk:"af_name"`
	SafName                     types.String `tfsdk:"saf_name"`
	MplsLdpAutoConfig           types.Bool   `tfsdk:"mpls_ldp_auto_config"`
	MetricStyleNarrow           types.Bool   `tfsdk:"metric_style_narrow"`
	MetricStyleWide             types.Bool   `tfsdk:"metric_style_wide"`
	MetricStyleTransition       types.Bool   `tfsdk:"metric_style_transition"`
	RouterIdInterfaceName       types.String `tfsdk:"router_id_interface_name"`
	RouterIdIpAddress           types.String `tfsdk:"router_id_ip_address"`
	DefaultInformationOriginate types.Bool   `tfsdk:"default_information_originate"`
}

func (data RouterISISAddressFamily) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=%s]/address-families/address-family[af-name=%s][saf-name=%s]", data.ProcessId.Value, data.AfName.Value, data.SafName.Value)
}

func (data RouterISISAddressFamily) toBody() string {
	body := "{}"
	if !data.MplsLdpAutoConfig.Null && !data.MplsLdpAutoConfig.Unknown {
		if data.MplsLdpAutoConfig.Value {
			body, _ = sjson.Set(body, "mpls.ldp.auto-config", map[string]string{})
		}
	}
	if !data.MetricStyleNarrow.Null && !data.MetricStyleNarrow.Unknown {
		if data.MetricStyleNarrow.Value {
			body, _ = sjson.Set(body, "metric-style.narrow", map[string]string{})
		}
	}
	if !data.MetricStyleWide.Null && !data.MetricStyleWide.Unknown {
		if data.MetricStyleWide.Value {
			body, _ = sjson.Set(body, "metric-style.wide", map[string]string{})
		}
	}
	if !data.MetricStyleTransition.Null && !data.MetricStyleTransition.Unknown {
		if data.MetricStyleTransition.Value {
			body, _ = sjson.Set(body, "metric-style.transition", map[string]string{})
		}
	}
	if !data.RouterIdInterfaceName.Null && !data.RouterIdInterfaceName.Unknown {
		body, _ = sjson.Set(body, "router-id.interface-name", data.RouterIdInterfaceName.Value)
	}
	if !data.RouterIdIpAddress.Null && !data.RouterIdIpAddress.Unknown {
		body, _ = sjson.Set(body, "router-id.ip-address", data.RouterIdIpAddress.Value)
	}
	if !data.DefaultInformationOriginate.Null && !data.DefaultInformationOriginate.Unknown {
		if data.DefaultInformationOriginate.Value {
			body, _ = sjson.Set(body, "default-information.originate", map[string]string{})
		}
	}
	return body
}

func (data *RouterISISAddressFamily) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "mpls.ldp.auto-config"); value.Exists() {
		data.MplsLdpAutoConfig.Value = true
	} else {
		data.MplsLdpAutoConfig.Value = false
	}
	if value := gjson.GetBytes(res, "metric-style.narrow"); value.Exists() {
		data.MetricStyleNarrow.Value = true
	} else {
		data.MetricStyleNarrow.Value = false
	}
	if value := gjson.GetBytes(res, "metric-style.wide"); value.Exists() {
		data.MetricStyleWide.Value = true
	} else {
		data.MetricStyleWide.Value = false
	}
	if value := gjson.GetBytes(res, "metric-style.transition"); value.Exists() {
		data.MetricStyleTransition.Value = true
	} else {
		data.MetricStyleTransition.Value = false
	}
	if value := gjson.GetBytes(res, "router-id.interface-name"); value.Exists() {
		data.RouterIdInterfaceName.Value = value.String()
	} else {
		data.RouterIdInterfaceName.Null = true
	}
	if value := gjson.GetBytes(res, "router-id.ip-address"); value.Exists() {
		data.RouterIdIpAddress.Value = value.String()
	} else {
		data.RouterIdIpAddress.Null = true
	}
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
	} else {
		data.DefaultInformationOriginate.Value = false
	}
}

func (data *RouterISISAddressFamily) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "mpls.ldp.auto-config"); value.Exists() {
		data.MplsLdpAutoConfig.Value = true
		data.MplsLdpAutoConfig.Null = false
	} else {
		data.MplsLdpAutoConfig.Value = false
		data.MplsLdpAutoConfig.Null = false
	}
	if value := gjson.GetBytes(res, "metric-style.narrow"); value.Exists() {
		data.MetricStyleNarrow.Value = true
		data.MetricStyleNarrow.Null = false
	} else {
		data.MetricStyleNarrow.Value = false
		data.MetricStyleNarrow.Null = false
	}
	if value := gjson.GetBytes(res, "metric-style.wide"); value.Exists() {
		data.MetricStyleWide.Value = true
		data.MetricStyleWide.Null = false
	} else {
		data.MetricStyleWide.Value = false
		data.MetricStyleWide.Null = false
	}
	if value := gjson.GetBytes(res, "metric-style.transition"); value.Exists() {
		data.MetricStyleTransition.Value = true
		data.MetricStyleTransition.Null = false
	} else {
		data.MetricStyleTransition.Value = false
		data.MetricStyleTransition.Null = false
	}
	if value := gjson.GetBytes(res, "router-id.interface-name"); value.Exists() {
		data.RouterIdInterfaceName.Value = value.String()
		data.RouterIdInterfaceName.Null = false
	}
	if value := gjson.GetBytes(res, "router-id.ip-address"); value.Exists() {
		data.RouterIdIpAddress.Value = value.String()
		data.RouterIdIpAddress.Null = false
	}
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
		data.DefaultInformationOriginate.Null = false
	} else {
		data.DefaultInformationOriginate.Value = false
		data.DefaultInformationOriginate.Null = false
	}
}

func (data *RouterISISAddressFamily) fromPlan(plan RouterISISAddressFamily) {
	data.Device = plan.Device
	data.ProcessId.Value = plan.ProcessId.Value
	data.AfName.Value = plan.AfName.Value
	data.SafName.Value = plan.SafName.Value
}

func (data *RouterISISAddressFamily) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.ProcessId.Unknown {
		data.ProcessId.Unknown = false
		data.ProcessId.Null = true
	}
	if data.AfName.Unknown {
		data.AfName.Unknown = false
		data.AfName.Null = true
	}
	if data.SafName.Unknown {
		data.SafName.Unknown = false
		data.SafName.Null = true
	}
	if data.MplsLdpAutoConfig.Unknown {
		data.MplsLdpAutoConfig.Unknown = false
		data.MplsLdpAutoConfig.Null = true
	}
	if data.MetricStyleNarrow.Unknown {
		data.MetricStyleNarrow.Unknown = false
		data.MetricStyleNarrow.Null = true
	}
	if data.MetricStyleWide.Unknown {
		data.MetricStyleWide.Unknown = false
		data.MetricStyleWide.Null = true
	}
	if data.MetricStyleTransition.Unknown {
		data.MetricStyleTransition.Unknown = false
		data.MetricStyleTransition.Null = true
	}
	if data.RouterIdInterfaceName.Unknown {
		data.RouterIdInterfaceName.Unknown = false
		data.RouterIdInterfaceName.Null = true
	}
	if data.RouterIdIpAddress.Unknown {
		data.RouterIdIpAddress.Unknown = false
		data.RouterIdIpAddress.Null = true
	}
	if data.DefaultInformationOriginate.Unknown {
		data.DefaultInformationOriginate.Unknown = false
		data.DefaultInformationOriginate.Null = true
	}
}

func (data *RouterISISAddressFamily) getDeletedListItems(state RouterISISAddressFamily) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *RouterISISAddressFamily) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
