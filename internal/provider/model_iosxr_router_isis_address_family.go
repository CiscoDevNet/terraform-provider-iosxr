// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterISISAddressFamily struct {
	Device                                    types.String                                                `tfsdk:"device"`
	Id                                        types.String                                                `tfsdk:"id"`
	DeleteMode                                types.String                                                `tfsdk:"delete_mode"`
	ProcessId                                 types.String                                                `tfsdk:"process_id"`
	AfName                                    types.String                                                `tfsdk:"af_name"`
	SafName                                   types.String                                                `tfsdk:"saf_name"`
	MetricStyleNarrow                         types.Bool                                                  `tfsdk:"metric_style_narrow"`
	MetricStyleWide                           types.Bool                                                  `tfsdk:"metric_style_wide"`
	MetricStyleTransition                     types.Bool                                                  `tfsdk:"metric_style_transition"`
	MetricStyleLevels                         []RouterISISAddressFamilyMetricStyleLevels                  `tfsdk:"metric_style_levels"`
	RouterIdInterfaceName                     types.String                                                `tfsdk:"router_id_interface_name"`
	RouterIdIpAddress                         types.String                                                `tfsdk:"router_id_ip_address"`
	DefaultInformationOriginate               types.Bool                                                  `tfsdk:"default_information_originate"`
	FastRerouteDelayInterval                  types.Int64                                                 `tfsdk:"fast_reroute_delay_interval"`
	FastReroutePerLinkPriorityLimitCritical   types.Bool                                                  `tfsdk:"fast_reroute_per_link_priority_limit_critical"`
	FastReroutePerLinkPriorityLimitHigh       types.Bool                                                  `tfsdk:"fast_reroute_per_link_priority_limit_high"`
	FastReroutePerLinkPriorityLimitMedium     types.Bool                                                  `tfsdk:"fast_reroute_per_link_priority_limit_medium"`
	FastReroutePerPrefixPriorityLimitCritical types.Bool                                                  `tfsdk:"fast_reroute_per_prefix_priority_limit_critical"`
	FastReroutePerPrefixPriorityLimitHigh     types.Bool                                                  `tfsdk:"fast_reroute_per_prefix_priority_limit_high"`
	FastReroutePerPrefixPriorityLimitMedium   types.Bool                                                  `tfsdk:"fast_reroute_per_prefix_priority_limit_medium"`
	MicroloopAvoidanceProtected               types.Bool                                                  `tfsdk:"microloop_avoidance_protected"`
	MicroloopAvoidanceSegmentRouting          types.Bool                                                  `tfsdk:"microloop_avoidance_segment_routing"`
	AdvertisePassiveOnly                      types.Bool                                                  `tfsdk:"advertise_passive_only"`
	AdvertiseLinkAttributes                   types.Bool                                                  `tfsdk:"advertise_link_attributes"`
	MplsLdpAutoConfig                         types.Bool                                                  `tfsdk:"mpls_ldp_auto_config"`
	MplsTrafficEngRouterIdIpAddress           types.String                                                `tfsdk:"mpls_traffic_eng_router_id_ip_address"`
	MplsTrafficEngRouterIdInterface           types.String                                                `tfsdk:"mpls_traffic_eng_router_id_interface"`
	MplsTrafficEngLevel12                     types.Bool                                                  `tfsdk:"mpls_traffic_eng_level_1_2"`
	MplsTrafficEngLevel1                      types.Bool                                                  `tfsdk:"mpls_traffic_eng_level_1"`
	MplsTrafficEngLevel2Only                  types.Bool                                                  `tfsdk:"mpls_traffic_eng_level_2_only"`
	SpfIntervalMaximumWait                    types.Int64                                                 `tfsdk:"spf_interval_maximum_wait"`
	SpfIntervalInitialWait                    types.Int64                                                 `tfsdk:"spf_interval_initial_wait"`
	SpfIntervalSecondaryWait                  types.Int64                                                 `tfsdk:"spf_interval_secondary_wait"`
	SpfPrefixPriorities                       []RouterISISAddressFamilySpfPrefixPriorities                `tfsdk:"spf_prefix_priorities"`
	SegmentRoutingMplsSrPrefer                types.Bool                                                  `tfsdk:"segment_routing_mpls_sr_prefer"`
	MaximumRedistributedPrefixes              types.Int64                                                 `tfsdk:"maximum_redistributed_prefixes"`
	MaximumRedistributedPrefixesLevels        []RouterISISAddressFamilyMaximumRedistributedPrefixesLevels `tfsdk:"maximum_redistributed_prefixes_levels"`
	RedistributeIsis                          []RouterISISAddressFamilyRedistributeIsis                   `tfsdk:"redistribute_isis"`
	SegmentRoutingSrv6Locators                []RouterISISAddressFamilySegmentRoutingSrv6Locators         `tfsdk:"segment_routing_srv6_locators"`
}

type RouterISISAddressFamilyData struct {
	Device                                    types.String                                                `tfsdk:"device"`
	Id                                        types.String                                                `tfsdk:"id"`
	ProcessId                                 types.String                                                `tfsdk:"process_id"`
	AfName                                    types.String                                                `tfsdk:"af_name"`
	SafName                                   types.String                                                `tfsdk:"saf_name"`
	MetricStyleNarrow                         types.Bool                                                  `tfsdk:"metric_style_narrow"`
	MetricStyleWide                           types.Bool                                                  `tfsdk:"metric_style_wide"`
	MetricStyleTransition                     types.Bool                                                  `tfsdk:"metric_style_transition"`
	MetricStyleLevels                         []RouterISISAddressFamilyMetricStyleLevels                  `tfsdk:"metric_style_levels"`
	RouterIdInterfaceName                     types.String                                                `tfsdk:"router_id_interface_name"`
	RouterIdIpAddress                         types.String                                                `tfsdk:"router_id_ip_address"`
	DefaultInformationOriginate               types.Bool                                                  `tfsdk:"default_information_originate"`
	FastRerouteDelayInterval                  types.Int64                                                 `tfsdk:"fast_reroute_delay_interval"`
	FastReroutePerLinkPriorityLimitCritical   types.Bool                                                  `tfsdk:"fast_reroute_per_link_priority_limit_critical"`
	FastReroutePerLinkPriorityLimitHigh       types.Bool                                                  `tfsdk:"fast_reroute_per_link_priority_limit_high"`
	FastReroutePerLinkPriorityLimitMedium     types.Bool                                                  `tfsdk:"fast_reroute_per_link_priority_limit_medium"`
	FastReroutePerPrefixPriorityLimitCritical types.Bool                                                  `tfsdk:"fast_reroute_per_prefix_priority_limit_critical"`
	FastReroutePerPrefixPriorityLimitHigh     types.Bool                                                  `tfsdk:"fast_reroute_per_prefix_priority_limit_high"`
	FastReroutePerPrefixPriorityLimitMedium   types.Bool                                                  `tfsdk:"fast_reroute_per_prefix_priority_limit_medium"`
	MicroloopAvoidanceProtected               types.Bool                                                  `tfsdk:"microloop_avoidance_protected"`
	MicroloopAvoidanceSegmentRouting          types.Bool                                                  `tfsdk:"microloop_avoidance_segment_routing"`
	AdvertisePassiveOnly                      types.Bool                                                  `tfsdk:"advertise_passive_only"`
	AdvertiseLinkAttributes                   types.Bool                                                  `tfsdk:"advertise_link_attributes"`
	MplsLdpAutoConfig                         types.Bool                                                  `tfsdk:"mpls_ldp_auto_config"`
	MplsTrafficEngRouterIdIpAddress           types.String                                                `tfsdk:"mpls_traffic_eng_router_id_ip_address"`
	MplsTrafficEngRouterIdInterface           types.String                                                `tfsdk:"mpls_traffic_eng_router_id_interface"`
	MplsTrafficEngLevel12                     types.Bool                                                  `tfsdk:"mpls_traffic_eng_level_1_2"`
	MplsTrafficEngLevel1                      types.Bool                                                  `tfsdk:"mpls_traffic_eng_level_1"`
	MplsTrafficEngLevel2Only                  types.Bool                                                  `tfsdk:"mpls_traffic_eng_level_2_only"`
	SpfIntervalMaximumWait                    types.Int64                                                 `tfsdk:"spf_interval_maximum_wait"`
	SpfIntervalInitialWait                    types.Int64                                                 `tfsdk:"spf_interval_initial_wait"`
	SpfIntervalSecondaryWait                  types.Int64                                                 `tfsdk:"spf_interval_secondary_wait"`
	SpfPrefixPriorities                       []RouterISISAddressFamilySpfPrefixPriorities                `tfsdk:"spf_prefix_priorities"`
	SegmentRoutingMplsSrPrefer                types.Bool                                                  `tfsdk:"segment_routing_mpls_sr_prefer"`
	MaximumRedistributedPrefixes              types.Int64                                                 `tfsdk:"maximum_redistributed_prefixes"`
	MaximumRedistributedPrefixesLevels        []RouterISISAddressFamilyMaximumRedistributedPrefixesLevels `tfsdk:"maximum_redistributed_prefixes_levels"`
	RedistributeIsis                          []RouterISISAddressFamilyRedistributeIsis                   `tfsdk:"redistribute_isis"`
	SegmentRoutingSrv6Locators                []RouterISISAddressFamilySegmentRoutingSrv6Locators         `tfsdk:"segment_routing_srv6_locators"`
}
type RouterISISAddressFamilyMetricStyleLevels struct {
	LevelId    types.Int64 `tfsdk:"level_id"`
	Narrow     types.Bool  `tfsdk:"narrow"`
	Wide       types.Bool  `tfsdk:"wide"`
	Transition types.Bool  `tfsdk:"transition"`
}
type RouterISISAddressFamilySpfPrefixPriorities struct {
	Priority       types.String `tfsdk:"priority"`
	Tag            types.Int64  `tfsdk:"tag"`
	AccessListName types.String `tfsdk:"access_list_name"`
}
type RouterISISAddressFamilyMaximumRedistributedPrefixesLevels struct {
	LevelId         types.Int64 `tfsdk:"level_id"`
	MaximumPrefixes types.Int64 `tfsdk:"maximum_prefixes"`
}
type RouterISISAddressFamilyRedistributeIsis struct {
	InstanceId  types.String `tfsdk:"instance_id"`
	RoutePolicy types.String `tfsdk:"route_policy"`
}
type RouterISISAddressFamilySegmentRoutingSrv6Locators struct {
	LocatorName types.String `tfsdk:"locator_name"`
	Level       types.Int64  `tfsdk:"level"`
}

func (data RouterISISAddressFamily) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=%s]/address-families/address-family[af-name=%s][saf-name=%s]", data.ProcessId.ValueString(), data.AfName.ValueString(), data.SafName.ValueString())
}

func (data RouterISISAddressFamilyData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=%s]/address-families/address-family[af-name=%s][saf-name=%s]", data.ProcessId.ValueString(), data.AfName.ValueString(), data.SafName.ValueString())
}

func (data RouterISISAddressFamily) toBody(ctx context.Context) string {
	body := "{}"
	if !data.AfName.IsNull() && !data.AfName.IsUnknown() {
		body, _ = sjson.Set(body, "af-name", data.AfName.ValueString())
	}
	if !data.SafName.IsNull() && !data.SafName.IsUnknown() {
		body, _ = sjson.Set(body, "saf-name", data.SafName.ValueString())
	}
	if !data.MetricStyleNarrow.IsNull() && !data.MetricStyleNarrow.IsUnknown() {
		if data.MetricStyleNarrow.ValueBool() {
			body, _ = sjson.Set(body, "metric-style.narrow", map[string]string{})
		}
	}
	if !data.MetricStyleWide.IsNull() && !data.MetricStyleWide.IsUnknown() {
		if data.MetricStyleWide.ValueBool() {
			body, _ = sjson.Set(body, "metric-style.wide", map[string]string{})
		}
	}
	if !data.MetricStyleTransition.IsNull() && !data.MetricStyleTransition.IsUnknown() {
		if data.MetricStyleTransition.ValueBool() {
			body, _ = sjson.Set(body, "metric-style.transition", map[string]string{})
		}
	}
	if !data.RouterIdInterfaceName.IsNull() && !data.RouterIdInterfaceName.IsUnknown() {
		body, _ = sjson.Set(body, "router-id.interface-name", data.RouterIdInterfaceName.ValueString())
	}
	if !data.RouterIdIpAddress.IsNull() && !data.RouterIdIpAddress.IsUnknown() {
		body, _ = sjson.Set(body, "router-id.ip-address", data.RouterIdIpAddress.ValueString())
	}
	if !data.DefaultInformationOriginate.IsNull() && !data.DefaultInformationOriginate.IsUnknown() {
		if data.DefaultInformationOriginate.ValueBool() {
			body, _ = sjson.Set(body, "default-information.originate", map[string]string{})
		}
	}
	if !data.FastRerouteDelayInterval.IsNull() && !data.FastRerouteDelayInterval.IsUnknown() {
		body, _ = sjson.Set(body, "fast-reroute.delay-interval", strconv.FormatInt(data.FastRerouteDelayInterval.ValueInt64(), 10))
	}
	if !data.FastReroutePerLinkPriorityLimitCritical.IsNull() && !data.FastReroutePerLinkPriorityLimitCritical.IsUnknown() {
		if data.FastReroutePerLinkPriorityLimitCritical.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.per-link.priority-limit.critical", map[string]string{})
		}
	}
	if !data.FastReroutePerLinkPriorityLimitHigh.IsNull() && !data.FastReroutePerLinkPriorityLimitHigh.IsUnknown() {
		if data.FastReroutePerLinkPriorityLimitHigh.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.per-link.priority-limit.high", map[string]string{})
		}
	}
	if !data.FastReroutePerLinkPriorityLimitMedium.IsNull() && !data.FastReroutePerLinkPriorityLimitMedium.IsUnknown() {
		if data.FastReroutePerLinkPriorityLimitMedium.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.per-link.priority-limit.medium", map[string]string{})
		}
	}
	if !data.FastReroutePerPrefixPriorityLimitCritical.IsNull() && !data.FastReroutePerPrefixPriorityLimitCritical.IsUnknown() {
		if data.FastReroutePerPrefixPriorityLimitCritical.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.per-prefix.priority-limit.critical", map[string]string{})
		}
	}
	if !data.FastReroutePerPrefixPriorityLimitHigh.IsNull() && !data.FastReroutePerPrefixPriorityLimitHigh.IsUnknown() {
		if data.FastReroutePerPrefixPriorityLimitHigh.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.per-prefix.priority-limit.high", map[string]string{})
		}
	}
	if !data.FastReroutePerPrefixPriorityLimitMedium.IsNull() && !data.FastReroutePerPrefixPriorityLimitMedium.IsUnknown() {
		if data.FastReroutePerPrefixPriorityLimitMedium.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.per-prefix.priority-limit.medium", map[string]string{})
		}
	}
	if !data.MicroloopAvoidanceProtected.IsNull() && !data.MicroloopAvoidanceProtected.IsUnknown() {
		if data.MicroloopAvoidanceProtected.ValueBool() {
			body, _ = sjson.Set(body, "microloop.avoidance.protected", map[string]string{})
		}
	}
	if !data.MicroloopAvoidanceSegmentRouting.IsNull() && !data.MicroloopAvoidanceSegmentRouting.IsUnknown() {
		if data.MicroloopAvoidanceSegmentRouting.ValueBool() {
			body, _ = sjson.Set(body, "microloop.avoidance.segment-routing", map[string]string{})
		}
	}
	if !data.AdvertisePassiveOnly.IsNull() && !data.AdvertisePassiveOnly.IsUnknown() {
		if data.AdvertisePassiveOnly.ValueBool() {
			body, _ = sjson.Set(body, "advertise.passive-only", map[string]string{})
		}
	}
	if !data.AdvertiseLinkAttributes.IsNull() && !data.AdvertiseLinkAttributes.IsUnknown() {
		if data.AdvertiseLinkAttributes.ValueBool() {
			body, _ = sjson.Set(body, "advertise.link.attributes", map[string]string{})
		}
	}
	if !data.MplsLdpAutoConfig.IsNull() && !data.MplsLdpAutoConfig.IsUnknown() {
		if data.MplsLdpAutoConfig.ValueBool() {
			body, _ = sjson.Set(body, "mpls.ldp.auto-config", map[string]string{})
		}
	}
	if !data.MplsTrafficEngRouterIdIpAddress.IsNull() && !data.MplsTrafficEngRouterIdIpAddress.IsUnknown() {
		body, _ = sjson.Set(body, "mpls.traffic-eng.router-id.ip-address", data.MplsTrafficEngRouterIdIpAddress.ValueString())
	}
	if !data.MplsTrafficEngRouterIdInterface.IsNull() && !data.MplsTrafficEngRouterIdInterface.IsUnknown() {
		body, _ = sjson.Set(body, "mpls.traffic-eng.router-id.interface", data.MplsTrafficEngRouterIdInterface.ValueString())
	}
	if !data.MplsTrafficEngLevel12.IsNull() && !data.MplsTrafficEngLevel12.IsUnknown() {
		if data.MplsTrafficEngLevel12.ValueBool() {
			body, _ = sjson.Set(body, "mpls.traffic-eng.level-1-2", map[string]string{})
		}
	}
	if !data.MplsTrafficEngLevel1.IsNull() && !data.MplsTrafficEngLevel1.IsUnknown() {
		if data.MplsTrafficEngLevel1.ValueBool() {
			body, _ = sjson.Set(body, "mpls.traffic-eng.level-1", map[string]string{})
		}
	}
	if !data.MplsTrafficEngLevel2Only.IsNull() && !data.MplsTrafficEngLevel2Only.IsUnknown() {
		if data.MplsTrafficEngLevel2Only.ValueBool() {
			body, _ = sjson.Set(body, "mpls.traffic-eng.level-2-only", map[string]string{})
		}
	}
	if !data.SpfIntervalMaximumWait.IsNull() && !data.SpfIntervalMaximumWait.IsUnknown() {
		body, _ = sjson.Set(body, "spf-interval.maximum-wait.maximum-wait-time", strconv.FormatInt(data.SpfIntervalMaximumWait.ValueInt64(), 10))
	}
	if !data.SpfIntervalInitialWait.IsNull() && !data.SpfIntervalInitialWait.IsUnknown() {
		body, _ = sjson.Set(body, "spf-interval.initial-wait.initial-wait-time", strconv.FormatInt(data.SpfIntervalInitialWait.ValueInt64(), 10))
	}
	if !data.SpfIntervalSecondaryWait.IsNull() && !data.SpfIntervalSecondaryWait.IsUnknown() {
		body, _ = sjson.Set(body, "spf-interval.secondary-wait.secondary-wait-time", strconv.FormatInt(data.SpfIntervalSecondaryWait.ValueInt64(), 10))
	}
	if !data.SegmentRoutingMplsSrPrefer.IsNull() && !data.SegmentRoutingMplsSrPrefer.IsUnknown() {
		body, _ = sjson.Set(body, "segment-routing.mpls.sr-prefer", data.SegmentRoutingMplsSrPrefer.ValueBool())
	}
	if !data.MaximumRedistributedPrefixes.IsNull() && !data.MaximumRedistributedPrefixes.IsUnknown() {
		body, _ = sjson.Set(body, "maximum-redistributed-prefixes.maximum-prefixes", strconv.FormatInt(data.MaximumRedistributedPrefixes.ValueInt64(), 10))
	}
	if len(data.MetricStyleLevels) > 0 {
		body, _ = sjson.Set(body, "metric-style.levels.level", []interface{}{})
		for index, item := range data.MetricStyleLevels {
			if !item.LevelId.IsNull() && !item.LevelId.IsUnknown() {
				body, _ = sjson.Set(body, "metric-style.levels.level"+"."+strconv.Itoa(index)+"."+"level-id", strconv.FormatInt(item.LevelId.ValueInt64(), 10))
			}
			if !item.Narrow.IsNull() && !item.Narrow.IsUnknown() {
				if item.Narrow.ValueBool() {
					body, _ = sjson.Set(body, "metric-style.levels.level"+"."+strconv.Itoa(index)+"."+"narrow", map[string]string{})
				}
			}
			if !item.Wide.IsNull() && !item.Wide.IsUnknown() {
				if item.Wide.ValueBool() {
					body, _ = sjson.Set(body, "metric-style.levels.level"+"."+strconv.Itoa(index)+"."+"wide", map[string]string{})
				}
			}
			if !item.Transition.IsNull() && !item.Transition.IsUnknown() {
				if item.Transition.ValueBool() {
					body, _ = sjson.Set(body, "metric-style.levels.level"+"."+strconv.Itoa(index)+"."+"transition", map[string]string{})
				}
			}
		}
	}
	if len(data.SpfPrefixPriorities) > 0 {
		body, _ = sjson.Set(body, "spf.prefix-priority.prefix-priority", []interface{}{})
		for index, item := range data.SpfPrefixPriorities {
			if !item.Priority.IsNull() && !item.Priority.IsUnknown() {
				body, _ = sjson.Set(body, "spf.prefix-priority.prefix-priority"+"."+strconv.Itoa(index)+"."+"priority", item.Priority.ValueString())
			}
			if !item.Tag.IsNull() && !item.Tag.IsUnknown() {
				body, _ = sjson.Set(body, "spf.prefix-priority.prefix-priority"+"."+strconv.Itoa(index)+"."+"tag", strconv.FormatInt(item.Tag.ValueInt64(), 10))
			}
			if !item.AccessListName.IsNull() && !item.AccessListName.IsUnknown() {
				body, _ = sjson.Set(body, "spf.prefix-priority.prefix-priority"+"."+strconv.Itoa(index)+"."+"access-list-name", item.AccessListName.ValueString())
			}
		}
	}
	if len(data.MaximumRedistributedPrefixesLevels) > 0 {
		body, _ = sjson.Set(body, "maximum-redistributed-prefixes.levels.level", []interface{}{})
		for index, item := range data.MaximumRedistributedPrefixesLevels {
			if !item.LevelId.IsNull() && !item.LevelId.IsUnknown() {
				body, _ = sjson.Set(body, "maximum-redistributed-prefixes.levels.level"+"."+strconv.Itoa(index)+"."+"level-id", strconv.FormatInt(item.LevelId.ValueInt64(), 10))
			}
			if !item.MaximumPrefixes.IsNull() && !item.MaximumPrefixes.IsUnknown() {
				body, _ = sjson.Set(body, "maximum-redistributed-prefixes.levels.level"+"."+strconv.Itoa(index)+"."+"maximum-prefixes", strconv.FormatInt(item.MaximumPrefixes.ValueInt64(), 10))
			}
		}
	}
	if len(data.RedistributeIsis) > 0 {
		body, _ = sjson.Set(body, "redistribute.isis", []interface{}{})
		for index, item := range data.RedistributeIsis {
			if !item.InstanceId.IsNull() && !item.InstanceId.IsUnknown() {
				body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"instance-id", item.InstanceId.ValueString())
			}
			if !item.RoutePolicy.IsNull() && !item.RoutePolicy.IsUnknown() {
				body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"route-policy", item.RoutePolicy.ValueString())
			}
		}
	}
	if len(data.SegmentRoutingSrv6Locators) > 0 {
		body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator", []interface{}{})
		for index, item := range data.SegmentRoutingSrv6Locators {
			if !item.LocatorName.IsNull() && !item.LocatorName.IsUnknown() {
				body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator"+"."+strconv.Itoa(index)+"."+"locator-name", item.LocatorName.ValueString())
			}
			if !item.Level.IsNull() && !item.Level.IsUnknown() {
				body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator"+"."+strconv.Itoa(index)+"."+"level", strconv.FormatInt(item.Level.ValueInt64(), 10))
			}
		}
	}
	return body
}

func (data *RouterISISAddressFamily) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "metric-style.narrow"); !data.MetricStyleNarrow.IsNull() {
		if value.Exists() {
			data.MetricStyleNarrow = types.BoolValue(true)
		} else {
			data.MetricStyleNarrow = types.BoolValue(false)
		}
	} else {
		data.MetricStyleNarrow = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "metric-style.wide"); !data.MetricStyleWide.IsNull() {
		if value.Exists() {
			data.MetricStyleWide = types.BoolValue(true)
		} else {
			data.MetricStyleWide = types.BoolValue(false)
		}
	} else {
		data.MetricStyleWide = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "metric-style.transition"); !data.MetricStyleTransition.IsNull() {
		if value.Exists() {
			data.MetricStyleTransition = types.BoolValue(true)
		} else {
			data.MetricStyleTransition = types.BoolValue(false)
		}
	} else {
		data.MetricStyleTransition = types.BoolNull()
	}
	for i := range data.MetricStyleLevels {
		keys := [...]string{"level-id"}
		keyValues := [...]string{strconv.FormatInt(data.MetricStyleLevels[i].LevelId.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "metric-style.levels.level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-id"); value.Exists() && !data.MetricStyleLevels[i].LevelId.IsNull() {
			data.MetricStyleLevels[i].LevelId = types.Int64Value(value.Int())
		} else {
			data.MetricStyleLevels[i].LevelId = types.Int64Null()
		}
		if value := r.Get("narrow"); !data.MetricStyleLevels[i].Narrow.IsNull() {
			if value.Exists() {
				data.MetricStyleLevels[i].Narrow = types.BoolValue(true)
			} else {
				data.MetricStyleLevels[i].Narrow = types.BoolValue(false)
			}
		} else {
			data.MetricStyleLevels[i].Narrow = types.BoolNull()
		}
		if value := r.Get("wide"); !data.MetricStyleLevels[i].Wide.IsNull() {
			if value.Exists() {
				data.MetricStyleLevels[i].Wide = types.BoolValue(true)
			} else {
				data.MetricStyleLevels[i].Wide = types.BoolValue(false)
			}
		} else {
			data.MetricStyleLevels[i].Wide = types.BoolNull()
		}
		if value := r.Get("transition"); !data.MetricStyleLevels[i].Transition.IsNull() {
			if value.Exists() {
				data.MetricStyleLevels[i].Transition = types.BoolValue(true)
			} else {
				data.MetricStyleLevels[i].Transition = types.BoolValue(false)
			}
		} else {
			data.MetricStyleLevels[i].Transition = types.BoolNull()
		}
	}
	if value := gjson.GetBytes(res, "router-id.interface-name"); value.Exists() && !data.RouterIdInterfaceName.IsNull() {
		data.RouterIdInterfaceName = types.StringValue(value.String())
	} else {
		data.RouterIdInterfaceName = types.StringNull()
	}
	if value := gjson.GetBytes(res, "router-id.ip-address"); value.Exists() && !data.RouterIdIpAddress.IsNull() {
		data.RouterIdIpAddress = types.StringValue(value.String())
	} else {
		data.RouterIdIpAddress = types.StringNull()
	}
	if value := gjson.GetBytes(res, "default-information.originate"); !data.DefaultInformationOriginate.IsNull() {
		if value.Exists() {
			data.DefaultInformationOriginate = types.BoolValue(true)
		} else {
			data.DefaultInformationOriginate = types.BoolValue(false)
		}
	} else {
		data.DefaultInformationOriginate = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.delay-interval"); value.Exists() && !data.FastRerouteDelayInterval.IsNull() {
		data.FastRerouteDelayInterval = types.Int64Value(value.Int())
	} else {
		data.FastRerouteDelayInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.critical"); !data.FastReroutePerLinkPriorityLimitCritical.IsNull() {
		if value.Exists() {
			data.FastReroutePerLinkPriorityLimitCritical = types.BoolValue(true)
		} else {
			data.FastReroutePerLinkPriorityLimitCritical = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerLinkPriorityLimitCritical = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.high"); !data.FastReroutePerLinkPriorityLimitHigh.IsNull() {
		if value.Exists() {
			data.FastReroutePerLinkPriorityLimitHigh = types.BoolValue(true)
		} else {
			data.FastReroutePerLinkPriorityLimitHigh = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerLinkPriorityLimitHigh = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.medium"); !data.FastReroutePerLinkPriorityLimitMedium.IsNull() {
		if value.Exists() {
			data.FastReroutePerLinkPriorityLimitMedium = types.BoolValue(true)
		} else {
			data.FastReroutePerLinkPriorityLimitMedium = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerLinkPriorityLimitMedium = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.critical"); !data.FastReroutePerPrefixPriorityLimitCritical.IsNull() {
		if value.Exists() {
			data.FastReroutePerPrefixPriorityLimitCritical = types.BoolValue(true)
		} else {
			data.FastReroutePerPrefixPriorityLimitCritical = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerPrefixPriorityLimitCritical = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.high"); !data.FastReroutePerPrefixPriorityLimitHigh.IsNull() {
		if value.Exists() {
			data.FastReroutePerPrefixPriorityLimitHigh = types.BoolValue(true)
		} else {
			data.FastReroutePerPrefixPriorityLimitHigh = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerPrefixPriorityLimitHigh = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.medium"); !data.FastReroutePerPrefixPriorityLimitMedium.IsNull() {
		if value.Exists() {
			data.FastReroutePerPrefixPriorityLimitMedium = types.BoolValue(true)
		} else {
			data.FastReroutePerPrefixPriorityLimitMedium = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerPrefixPriorityLimitMedium = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "microloop.avoidance.protected"); !data.MicroloopAvoidanceProtected.IsNull() {
		if value.Exists() {
			data.MicroloopAvoidanceProtected = types.BoolValue(true)
		} else {
			data.MicroloopAvoidanceProtected = types.BoolValue(false)
		}
	} else {
		data.MicroloopAvoidanceProtected = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "microloop.avoidance.segment-routing"); !data.MicroloopAvoidanceSegmentRouting.IsNull() {
		if value.Exists() {
			data.MicroloopAvoidanceSegmentRouting = types.BoolValue(true)
		} else {
			data.MicroloopAvoidanceSegmentRouting = types.BoolValue(false)
		}
	} else {
		data.MicroloopAvoidanceSegmentRouting = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "advertise.passive-only"); !data.AdvertisePassiveOnly.IsNull() {
		if value.Exists() {
			data.AdvertisePassiveOnly = types.BoolValue(true)
		} else {
			data.AdvertisePassiveOnly = types.BoolValue(false)
		}
	} else {
		data.AdvertisePassiveOnly = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "advertise.link.attributes"); !data.AdvertiseLinkAttributes.IsNull() {
		if value.Exists() {
			data.AdvertiseLinkAttributes = types.BoolValue(true)
		} else {
			data.AdvertiseLinkAttributes = types.BoolValue(false)
		}
	} else {
		data.AdvertiseLinkAttributes = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "mpls.ldp.auto-config"); !data.MplsLdpAutoConfig.IsNull() {
		if value.Exists() {
			data.MplsLdpAutoConfig = types.BoolValue(true)
		} else {
			data.MplsLdpAutoConfig = types.BoolValue(false)
		}
	} else {
		data.MplsLdpAutoConfig = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.router-id.ip-address"); value.Exists() && !data.MplsTrafficEngRouterIdIpAddress.IsNull() {
		data.MplsTrafficEngRouterIdIpAddress = types.StringValue(value.String())
	} else {
		data.MplsTrafficEngRouterIdIpAddress = types.StringNull()
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.router-id.interface"); value.Exists() && !data.MplsTrafficEngRouterIdInterface.IsNull() {
		data.MplsTrafficEngRouterIdInterface = types.StringValue(value.String())
	} else {
		data.MplsTrafficEngRouterIdInterface = types.StringNull()
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-1-2"); !data.MplsTrafficEngLevel12.IsNull() {
		if value.Exists() {
			data.MplsTrafficEngLevel12 = types.BoolValue(true)
		} else {
			data.MplsTrafficEngLevel12 = types.BoolValue(false)
		}
	} else {
		data.MplsTrafficEngLevel12 = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-1"); !data.MplsTrafficEngLevel1.IsNull() {
		if value.Exists() {
			data.MplsTrafficEngLevel1 = types.BoolValue(true)
		} else {
			data.MplsTrafficEngLevel1 = types.BoolValue(false)
		}
	} else {
		data.MplsTrafficEngLevel1 = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-2-only"); !data.MplsTrafficEngLevel2Only.IsNull() {
		if value.Exists() {
			data.MplsTrafficEngLevel2Only = types.BoolValue(true)
		} else {
			data.MplsTrafficEngLevel2Only = types.BoolValue(false)
		}
	} else {
		data.MplsTrafficEngLevel2Only = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "spf-interval.maximum-wait.maximum-wait-time"); value.Exists() && !data.SpfIntervalMaximumWait.IsNull() {
		data.SpfIntervalMaximumWait = types.Int64Value(value.Int())
	} else {
		data.SpfIntervalMaximumWait = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "spf-interval.initial-wait.initial-wait-time"); value.Exists() && !data.SpfIntervalInitialWait.IsNull() {
		data.SpfIntervalInitialWait = types.Int64Value(value.Int())
	} else {
		data.SpfIntervalInitialWait = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "spf-interval.secondary-wait.secondary-wait-time"); value.Exists() && !data.SpfIntervalSecondaryWait.IsNull() {
		data.SpfIntervalSecondaryWait = types.Int64Value(value.Int())
	} else {
		data.SpfIntervalSecondaryWait = types.Int64Null()
	}
	for i := range data.SpfPrefixPriorities {
		keys := [...]string{"priority"}
		keyValues := [...]string{data.SpfPrefixPriorities[i].Priority.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "spf.prefix-priority.prefix-priority").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("priority"); value.Exists() && !data.SpfPrefixPriorities[i].Priority.IsNull() {
			data.SpfPrefixPriorities[i].Priority = types.StringValue(value.String())
		} else {
			data.SpfPrefixPriorities[i].Priority = types.StringNull()
		}
		if value := r.Get("tag"); value.Exists() && !data.SpfPrefixPriorities[i].Tag.IsNull() {
			data.SpfPrefixPriorities[i].Tag = types.Int64Value(value.Int())
		} else {
			data.SpfPrefixPriorities[i].Tag = types.Int64Null()
		}
		if value := r.Get("access-list-name"); value.Exists() && !data.SpfPrefixPriorities[i].AccessListName.IsNull() {
			data.SpfPrefixPriorities[i].AccessListName = types.StringValue(value.String())
		} else {
			data.SpfPrefixPriorities[i].AccessListName = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "segment-routing.mpls.sr-prefer"); !data.SegmentRoutingMplsSrPrefer.IsNull() {
		if value.Exists() {
			data.SegmentRoutingMplsSrPrefer = types.BoolValue(value.Bool())
		}
	} else {
		data.SegmentRoutingMplsSrPrefer = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "maximum-redistributed-prefixes.maximum-prefixes"); value.Exists() && !data.MaximumRedistributedPrefixes.IsNull() {
		data.MaximumRedistributedPrefixes = types.Int64Value(value.Int())
	} else {
		data.MaximumRedistributedPrefixes = types.Int64Null()
	}
	for i := range data.MaximumRedistributedPrefixesLevels {
		keys := [...]string{"level-id"}
		keyValues := [...]string{strconv.FormatInt(data.MaximumRedistributedPrefixesLevels[i].LevelId.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "maximum-redistributed-prefixes.levels.level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-id"); value.Exists() && !data.MaximumRedistributedPrefixesLevels[i].LevelId.IsNull() {
			data.MaximumRedistributedPrefixesLevels[i].LevelId = types.Int64Value(value.Int())
		} else {
			data.MaximumRedistributedPrefixesLevels[i].LevelId = types.Int64Null()
		}
		if value := r.Get("maximum-prefixes"); value.Exists() && !data.MaximumRedistributedPrefixesLevels[i].MaximumPrefixes.IsNull() {
			data.MaximumRedistributedPrefixesLevels[i].MaximumPrefixes = types.Int64Value(value.Int())
		} else {
			data.MaximumRedistributedPrefixesLevels[i].MaximumPrefixes = types.Int64Null()
		}
	}
	for i := range data.RedistributeIsis {
		keys := [...]string{"instance-id"}
		keyValues := [...]string{data.RedistributeIsis[i].InstanceId.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "redistribute.isis").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("instance-id"); value.Exists() && !data.RedistributeIsis[i].InstanceId.IsNull() {
			data.RedistributeIsis[i].InstanceId = types.StringValue(value.String())
		} else {
			data.RedistributeIsis[i].InstanceId = types.StringNull()
		}
		if value := r.Get("route-policy"); value.Exists() && !data.RedistributeIsis[i].RoutePolicy.IsNull() {
			data.RedistributeIsis[i].RoutePolicy = types.StringValue(value.String())
		} else {
			data.RedistributeIsis[i].RoutePolicy = types.StringNull()
		}
	}
	for i := range data.SegmentRoutingSrv6Locators {
		keys := [...]string{"locator-name"}
		keyValues := [...]string{data.SegmentRoutingSrv6Locators[i].LocatorName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "segment-routing.srv6.locators.locator").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("locator-name"); value.Exists() && !data.SegmentRoutingSrv6Locators[i].LocatorName.IsNull() {
			data.SegmentRoutingSrv6Locators[i].LocatorName = types.StringValue(value.String())
		} else {
			data.SegmentRoutingSrv6Locators[i].LocatorName = types.StringNull()
		}
		if value := r.Get("level"); value.Exists() && !data.SegmentRoutingSrv6Locators[i].Level.IsNull() {
			data.SegmentRoutingSrv6Locators[i].Level = types.Int64Value(value.Int())
		} else {
			data.SegmentRoutingSrv6Locators[i].Level = types.Int64Null()
		}
	}
}

func (data *RouterISISAddressFamily) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "metric-style.narrow"); value.Exists() {
		data.MetricStyleNarrow = types.BoolValue(true)
	} else {
		data.MetricStyleNarrow = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "metric-style.wide"); value.Exists() {
		data.MetricStyleWide = types.BoolValue(true)
	} else {
		data.MetricStyleWide = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "metric-style.transition"); value.Exists() {
		data.MetricStyleTransition = types.BoolValue(true)
	} else {
		data.MetricStyleTransition = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "metric-style.levels.level"); value.Exists() {
		data.MetricStyleLevels = make([]RouterISISAddressFamilyMetricStyleLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilyMetricStyleLevels{}
			if cValue := v.Get("level-id"); cValue.Exists() {
				item.LevelId = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("narrow"); cValue.Exists() {
				item.Narrow = types.BoolValue(true)
			} else {
				item.Narrow = types.BoolValue(false)
			}
			if cValue := v.Get("wide"); cValue.Exists() {
				item.Wide = types.BoolValue(true)
			} else {
				item.Wide = types.BoolValue(false)
			}
			if cValue := v.Get("transition"); cValue.Exists() {
				item.Transition = types.BoolValue(true)
			} else {
				item.Transition = types.BoolValue(false)
			}
			data.MetricStyleLevels = append(data.MetricStyleLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "router-id.interface-name"); value.Exists() {
		data.RouterIdInterfaceName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "router-id.ip-address"); value.Exists() {
		data.RouterIdIpAddress = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate = types.BoolValue(true)
	} else {
		data.DefaultInformationOriginate = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.delay-interval"); value.Exists() {
		data.FastRerouteDelayInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.critical"); value.Exists() {
		data.FastReroutePerLinkPriorityLimitCritical = types.BoolValue(true)
	} else {
		data.FastReroutePerLinkPriorityLimitCritical = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.high"); value.Exists() {
		data.FastReroutePerLinkPriorityLimitHigh = types.BoolValue(true)
	} else {
		data.FastReroutePerLinkPriorityLimitHigh = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.medium"); value.Exists() {
		data.FastReroutePerLinkPriorityLimitMedium = types.BoolValue(true)
	} else {
		data.FastReroutePerLinkPriorityLimitMedium = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.critical"); value.Exists() {
		data.FastReroutePerPrefixPriorityLimitCritical = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefixPriorityLimitCritical = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.high"); value.Exists() {
		data.FastReroutePerPrefixPriorityLimitHigh = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefixPriorityLimitHigh = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.medium"); value.Exists() {
		data.FastReroutePerPrefixPriorityLimitMedium = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefixPriorityLimitMedium = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "microloop.avoidance.protected"); value.Exists() {
		data.MicroloopAvoidanceProtected = types.BoolValue(true)
	} else {
		data.MicroloopAvoidanceProtected = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "microloop.avoidance.segment-routing"); value.Exists() {
		data.MicroloopAvoidanceSegmentRouting = types.BoolValue(true)
	} else {
		data.MicroloopAvoidanceSegmentRouting = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "advertise.passive-only"); value.Exists() {
		data.AdvertisePassiveOnly = types.BoolValue(true)
	} else {
		data.AdvertisePassiveOnly = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "advertise.link.attributes"); value.Exists() {
		data.AdvertiseLinkAttributes = types.BoolValue(true)
	} else {
		data.AdvertiseLinkAttributes = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mpls.ldp.auto-config"); value.Exists() {
		data.MplsLdpAutoConfig = types.BoolValue(true)
	} else {
		data.MplsLdpAutoConfig = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.router-id.ip-address"); value.Exists() {
		data.MplsTrafficEngRouterIdIpAddress = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.router-id.interface"); value.Exists() {
		data.MplsTrafficEngRouterIdInterface = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-1-2"); value.Exists() {
		data.MplsTrafficEngLevel12 = types.BoolValue(true)
	} else {
		data.MplsTrafficEngLevel12 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-1"); value.Exists() {
		data.MplsTrafficEngLevel1 = types.BoolValue(true)
	} else {
		data.MplsTrafficEngLevel1 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-2-only"); value.Exists() {
		data.MplsTrafficEngLevel2Only = types.BoolValue(true)
	} else {
		data.MplsTrafficEngLevel2Only = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "spf-interval.maximum-wait.maximum-wait-time"); value.Exists() {
		data.SpfIntervalMaximumWait = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "spf-interval.initial-wait.initial-wait-time"); value.Exists() {
		data.SpfIntervalInitialWait = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "spf-interval.secondary-wait.secondary-wait-time"); value.Exists() {
		data.SpfIntervalSecondaryWait = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "spf.prefix-priority.prefix-priority"); value.Exists() {
		data.SpfPrefixPriorities = make([]RouterISISAddressFamilySpfPrefixPriorities, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilySpfPrefixPriorities{}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority = types.StringValue(cValue.String())
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("access-list-name"); cValue.Exists() {
				item.AccessListName = types.StringValue(cValue.String())
			}
			data.SpfPrefixPriorities = append(data.SpfPrefixPriorities, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "segment-routing.mpls.sr-prefer"); value.Exists() {
		data.SegmentRoutingMplsSrPrefer = types.BoolValue(value.Bool())
	} else {
		data.SegmentRoutingMplsSrPrefer = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "maximum-redistributed-prefixes.maximum-prefixes"); value.Exists() {
		data.MaximumRedistributedPrefixes = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "maximum-redistributed-prefixes.levels.level"); value.Exists() {
		data.MaximumRedistributedPrefixesLevels = make([]RouterISISAddressFamilyMaximumRedistributedPrefixesLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilyMaximumRedistributedPrefixesLevels{}
			if cValue := v.Get("level-id"); cValue.Exists() {
				item.LevelId = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("maximum-prefixes"); cValue.Exists() {
				item.MaximumPrefixes = types.Int64Value(cValue.Int())
			}
			data.MaximumRedistributedPrefixesLevels = append(data.MaximumRedistributedPrefixesLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "redistribute.isis"); value.Exists() {
		data.RedistributeIsis = make([]RouterISISAddressFamilyRedistributeIsis, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilyRedistributeIsis{}
			if cValue := v.Get("instance-id"); cValue.Exists() {
				item.InstanceId = types.StringValue(cValue.String())
			}
			if cValue := v.Get("route-policy"); cValue.Exists() {
				item.RoutePolicy = types.StringValue(cValue.String())
			}
			data.RedistributeIsis = append(data.RedistributeIsis, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6.locators.locator"); value.Exists() {
		data.SegmentRoutingSrv6Locators = make([]RouterISISAddressFamilySegmentRoutingSrv6Locators, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilySegmentRoutingSrv6Locators{}
			if cValue := v.Get("locator-name"); cValue.Exists() {
				item.LocatorName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("level"); cValue.Exists() {
				item.Level = types.Int64Value(cValue.Int())
			}
			data.SegmentRoutingSrv6Locators = append(data.SegmentRoutingSrv6Locators, item)
			return true
		})
	}
}

func (data *RouterISISAddressFamilyData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "metric-style.narrow"); value.Exists() {
		data.MetricStyleNarrow = types.BoolValue(true)
	} else {
		data.MetricStyleNarrow = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "metric-style.wide"); value.Exists() {
		data.MetricStyleWide = types.BoolValue(true)
	} else {
		data.MetricStyleWide = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "metric-style.transition"); value.Exists() {
		data.MetricStyleTransition = types.BoolValue(true)
	} else {
		data.MetricStyleTransition = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "metric-style.levels.level"); value.Exists() {
		data.MetricStyleLevels = make([]RouterISISAddressFamilyMetricStyleLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilyMetricStyleLevels{}
			if cValue := v.Get("level-id"); cValue.Exists() {
				item.LevelId = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("narrow"); cValue.Exists() {
				item.Narrow = types.BoolValue(true)
			} else {
				item.Narrow = types.BoolValue(false)
			}
			if cValue := v.Get("wide"); cValue.Exists() {
				item.Wide = types.BoolValue(true)
			} else {
				item.Wide = types.BoolValue(false)
			}
			if cValue := v.Get("transition"); cValue.Exists() {
				item.Transition = types.BoolValue(true)
			} else {
				item.Transition = types.BoolValue(false)
			}
			data.MetricStyleLevels = append(data.MetricStyleLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "router-id.interface-name"); value.Exists() {
		data.RouterIdInterfaceName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "router-id.ip-address"); value.Exists() {
		data.RouterIdIpAddress = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate = types.BoolValue(true)
	} else {
		data.DefaultInformationOriginate = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.delay-interval"); value.Exists() {
		data.FastRerouteDelayInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.critical"); value.Exists() {
		data.FastReroutePerLinkPriorityLimitCritical = types.BoolValue(true)
	} else {
		data.FastReroutePerLinkPriorityLimitCritical = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.high"); value.Exists() {
		data.FastReroutePerLinkPriorityLimitHigh = types.BoolValue(true)
	} else {
		data.FastReroutePerLinkPriorityLimitHigh = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-link.priority-limit.medium"); value.Exists() {
		data.FastReroutePerLinkPriorityLimitMedium = types.BoolValue(true)
	} else {
		data.FastReroutePerLinkPriorityLimitMedium = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.critical"); value.Exists() {
		data.FastReroutePerPrefixPriorityLimitCritical = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefixPriorityLimitCritical = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.high"); value.Exists() {
		data.FastReroutePerPrefixPriorityLimitHigh = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefixPriorityLimitHigh = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.priority-limit.medium"); value.Exists() {
		data.FastReroutePerPrefixPriorityLimitMedium = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefixPriorityLimitMedium = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "microloop.avoidance.protected"); value.Exists() {
		data.MicroloopAvoidanceProtected = types.BoolValue(true)
	} else {
		data.MicroloopAvoidanceProtected = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "microloop.avoidance.segment-routing"); value.Exists() {
		data.MicroloopAvoidanceSegmentRouting = types.BoolValue(true)
	} else {
		data.MicroloopAvoidanceSegmentRouting = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "advertise.passive-only"); value.Exists() {
		data.AdvertisePassiveOnly = types.BoolValue(true)
	} else {
		data.AdvertisePassiveOnly = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "advertise.link.attributes"); value.Exists() {
		data.AdvertiseLinkAttributes = types.BoolValue(true)
	} else {
		data.AdvertiseLinkAttributes = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mpls.ldp.auto-config"); value.Exists() {
		data.MplsLdpAutoConfig = types.BoolValue(true)
	} else {
		data.MplsLdpAutoConfig = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.router-id.ip-address"); value.Exists() {
		data.MplsTrafficEngRouterIdIpAddress = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.router-id.interface"); value.Exists() {
		data.MplsTrafficEngRouterIdInterface = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-1-2"); value.Exists() {
		data.MplsTrafficEngLevel12 = types.BoolValue(true)
	} else {
		data.MplsTrafficEngLevel12 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-1"); value.Exists() {
		data.MplsTrafficEngLevel1 = types.BoolValue(true)
	} else {
		data.MplsTrafficEngLevel1 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "mpls.traffic-eng.level-2-only"); value.Exists() {
		data.MplsTrafficEngLevel2Only = types.BoolValue(true)
	} else {
		data.MplsTrafficEngLevel2Only = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "spf-interval.maximum-wait.maximum-wait-time"); value.Exists() {
		data.SpfIntervalMaximumWait = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "spf-interval.initial-wait.initial-wait-time"); value.Exists() {
		data.SpfIntervalInitialWait = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "spf-interval.secondary-wait.secondary-wait-time"); value.Exists() {
		data.SpfIntervalSecondaryWait = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "spf.prefix-priority.prefix-priority"); value.Exists() {
		data.SpfPrefixPriorities = make([]RouterISISAddressFamilySpfPrefixPriorities, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilySpfPrefixPriorities{}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority = types.StringValue(cValue.String())
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("access-list-name"); cValue.Exists() {
				item.AccessListName = types.StringValue(cValue.String())
			}
			data.SpfPrefixPriorities = append(data.SpfPrefixPriorities, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "segment-routing.mpls.sr-prefer"); value.Exists() {
		data.SegmentRoutingMplsSrPrefer = types.BoolValue(value.Bool())
	} else {
		data.SegmentRoutingMplsSrPrefer = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "maximum-redistributed-prefixes.maximum-prefixes"); value.Exists() {
		data.MaximumRedistributedPrefixes = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "maximum-redistributed-prefixes.levels.level"); value.Exists() {
		data.MaximumRedistributedPrefixesLevels = make([]RouterISISAddressFamilyMaximumRedistributedPrefixesLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilyMaximumRedistributedPrefixesLevels{}
			if cValue := v.Get("level-id"); cValue.Exists() {
				item.LevelId = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("maximum-prefixes"); cValue.Exists() {
				item.MaximumPrefixes = types.Int64Value(cValue.Int())
			}
			data.MaximumRedistributedPrefixesLevels = append(data.MaximumRedistributedPrefixesLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "redistribute.isis"); value.Exists() {
		data.RedistributeIsis = make([]RouterISISAddressFamilyRedistributeIsis, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilyRedistributeIsis{}
			if cValue := v.Get("instance-id"); cValue.Exists() {
				item.InstanceId = types.StringValue(cValue.String())
			}
			if cValue := v.Get("route-policy"); cValue.Exists() {
				item.RoutePolicy = types.StringValue(cValue.String())
			}
			data.RedistributeIsis = append(data.RedistributeIsis, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6.locators.locator"); value.Exists() {
		data.SegmentRoutingSrv6Locators = make([]RouterISISAddressFamilySegmentRoutingSrv6Locators, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISAddressFamilySegmentRoutingSrv6Locators{}
			if cValue := v.Get("locator-name"); cValue.Exists() {
				item.LocatorName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("level"); cValue.Exists() {
				item.Level = types.Int64Value(cValue.Int())
			}
			data.SegmentRoutingSrv6Locators = append(data.SegmentRoutingSrv6Locators, item)
			return true
		})
	}
}

func (data *RouterISISAddressFamily) getDeletedItems(ctx context.Context, state RouterISISAddressFamily) []string {
	deletedItems := make([]string, 0)
	if !state.MetricStyleNarrow.IsNull() && data.MetricStyleNarrow.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-style/narrow", state.getPath()))
	}
	if !state.MetricStyleWide.IsNull() && data.MetricStyleWide.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-style/wide", state.getPath()))
	}
	if !state.MetricStyleTransition.IsNull() && data.MetricStyleTransition.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-style/transition", state.getPath()))
	}
	for i := range state.MetricStyleLevels {
		keys := [...]string{"level-id"}
		stateKeyValues := [...]string{strconv.FormatInt(state.MetricStyleLevels[i].LevelId.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.MetricStyleLevels[i].LevelId.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.MetricStyleLevels {
			found = true
			if state.MetricStyleLevels[i].LevelId.ValueInt64() != data.MetricStyleLevels[j].LevelId.ValueInt64() {
				found = false
			}
			if found {
				if !state.MetricStyleLevels[i].Narrow.IsNull() && data.MetricStyleLevels[j].Narrow.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-style/levels/level%v/narrow", state.getPath(), keyString))
				}
				if !state.MetricStyleLevels[i].Wide.IsNull() && data.MetricStyleLevels[j].Wide.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-style/levels/level%v/wide", state.getPath(), keyString))
				}
				if !state.MetricStyleLevels[i].Transition.IsNull() && data.MetricStyleLevels[j].Transition.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-style/levels/level%v/transition", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-style/levels/level%v", state.getPath(), keyString))
		}
	}
	if !state.RouterIdInterfaceName.IsNull() && data.RouterIdInterfaceName.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/router-id/interface-name", state.getPath()))
	}
	if !state.RouterIdIpAddress.IsNull() && data.RouterIdIpAddress.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/router-id/ip-address", state.getPath()))
	}
	if !state.DefaultInformationOriginate.IsNull() && data.DefaultInformationOriginate.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/default-information/originate", state.getPath()))
	}
	if !state.FastRerouteDelayInterval.IsNull() && data.FastRerouteDelayInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/delay-interval", state.getPath()))
	}
	if !state.FastReroutePerLinkPriorityLimitCritical.IsNull() && data.FastReroutePerLinkPriorityLimitCritical.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/critical", state.getPath()))
	}
	if !state.FastReroutePerLinkPriorityLimitHigh.IsNull() && data.FastReroutePerLinkPriorityLimitHigh.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/high", state.getPath()))
	}
	if !state.FastReroutePerLinkPriorityLimitMedium.IsNull() && data.FastReroutePerLinkPriorityLimitMedium.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/medium", state.getPath()))
	}
	if !state.FastReroutePerPrefixPriorityLimitCritical.IsNull() && data.FastReroutePerPrefixPriorityLimitCritical.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/critical", state.getPath()))
	}
	if !state.FastReroutePerPrefixPriorityLimitHigh.IsNull() && data.FastReroutePerPrefixPriorityLimitHigh.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/high", state.getPath()))
	}
	if !state.FastReroutePerPrefixPriorityLimitMedium.IsNull() && data.FastReroutePerPrefixPriorityLimitMedium.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/medium", state.getPath()))
	}
	if !state.MicroloopAvoidanceProtected.IsNull() && data.MicroloopAvoidanceProtected.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/microloop/avoidance/protected", state.getPath()))
	}
	if !state.MicroloopAvoidanceSegmentRouting.IsNull() && data.MicroloopAvoidanceSegmentRouting.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/microloop/avoidance/segment-routing", state.getPath()))
	}
	if !state.AdvertisePassiveOnly.IsNull() && data.AdvertisePassiveOnly.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/advertise/passive-only", state.getPath()))
	}
	if !state.AdvertiseLinkAttributes.IsNull() && data.AdvertiseLinkAttributes.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/advertise/link/attributes", state.getPath()))
	}
	if !state.MplsLdpAutoConfig.IsNull() && data.MplsLdpAutoConfig.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mpls/ldp/auto-config", state.getPath()))
	}
	if !state.MplsTrafficEngRouterIdIpAddress.IsNull() && data.MplsTrafficEngRouterIdIpAddress.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mpls/traffic-eng/router-id/ip-address", state.getPath()))
	}
	if !state.MplsTrafficEngRouterIdInterface.IsNull() && data.MplsTrafficEngRouterIdInterface.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mpls/traffic-eng/router-id/interface", state.getPath()))
	}
	if !state.MplsTrafficEngLevel12.IsNull() && data.MplsTrafficEngLevel12.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mpls/traffic-eng/level-1-2", state.getPath()))
	}
	if !state.MplsTrafficEngLevel1.IsNull() && data.MplsTrafficEngLevel1.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mpls/traffic-eng/level-1", state.getPath()))
	}
	if !state.MplsTrafficEngLevel2Only.IsNull() && data.MplsTrafficEngLevel2Only.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mpls/traffic-eng/level-2-only", state.getPath()))
	}
	if !state.SpfIntervalMaximumWait.IsNull() && data.SpfIntervalMaximumWait.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/spf-interval/maximum-wait/maximum-wait-time", state.getPath()))
	}
	if !state.SpfIntervalInitialWait.IsNull() && data.SpfIntervalInitialWait.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/spf-interval/initial-wait/initial-wait-time", state.getPath()))
	}
	if !state.SpfIntervalSecondaryWait.IsNull() && data.SpfIntervalSecondaryWait.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/spf-interval/secondary-wait/secondary-wait-time", state.getPath()))
	}
	for i := range state.SpfPrefixPriorities {
		keys := [...]string{"priority"}
		stateKeyValues := [...]string{state.SpfPrefixPriorities[i].Priority.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.SpfPrefixPriorities[i].Priority.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.SpfPrefixPriorities {
			found = true
			if state.SpfPrefixPriorities[i].Priority.ValueString() != data.SpfPrefixPriorities[j].Priority.ValueString() {
				found = false
			}
			if found {
				if !state.SpfPrefixPriorities[i].Tag.IsNull() && data.SpfPrefixPriorities[j].Tag.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/spf/prefix-priority/prefix-priority%v/tag", state.getPath(), keyString))
				}
				if !state.SpfPrefixPriorities[i].AccessListName.IsNull() && data.SpfPrefixPriorities[j].AccessListName.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/spf/prefix-priority/prefix-priority%v/access-list-name", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/spf/prefix-priority/prefix-priority%v", state.getPath(), keyString))
		}
	}
	if !state.SegmentRoutingMplsSrPrefer.IsNull() && data.SegmentRoutingMplsSrPrefer.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/segment-routing/mpls/sr-prefer", state.getPath()))
	}
	if !state.MaximumRedistributedPrefixes.IsNull() && data.MaximumRedistributedPrefixes.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/maximum-redistributed-prefixes/maximum-prefixes", state.getPath()))
	}
	for i := range state.MaximumRedistributedPrefixesLevels {
		keys := [...]string{"level-id"}
		stateKeyValues := [...]string{strconv.FormatInt(state.MaximumRedistributedPrefixesLevels[i].LevelId.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.MaximumRedistributedPrefixesLevels[i].LevelId.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.MaximumRedistributedPrefixesLevels {
			found = true
			if state.MaximumRedistributedPrefixesLevels[i].LevelId.ValueInt64() != data.MaximumRedistributedPrefixesLevels[j].LevelId.ValueInt64() {
				found = false
			}
			if found {
				if !state.MaximumRedistributedPrefixesLevels[i].MaximumPrefixes.IsNull() && data.MaximumRedistributedPrefixesLevels[j].MaximumPrefixes.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/maximum-redistributed-prefixes/levels/level%v/maximum-prefixes", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/maximum-redistributed-prefixes/levels/level%v", state.getPath(), keyString))
		}
	}
	for i := range state.RedistributeIsis {
		keys := [...]string{"instance-id"}
		stateKeyValues := [...]string{state.RedistributeIsis[i].InstanceId.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.RedistributeIsis[i].InstanceId.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.RedistributeIsis {
			found = true
			if state.RedistributeIsis[i].InstanceId.ValueString() != data.RedistributeIsis[j].InstanceId.ValueString() {
				found = false
			}
			if found {
				if !state.RedistributeIsis[i].RoutePolicy.IsNull() && data.RedistributeIsis[j].RoutePolicy.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/redistribute/isis%v/route-policy", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/redistribute/isis%v", state.getPath(), keyString))
		}
	}
	for i := range state.SegmentRoutingSrv6Locators {
		keys := [...]string{"locator-name"}
		stateKeyValues := [...]string{state.SegmentRoutingSrv6Locators[i].LocatorName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.SegmentRoutingSrv6Locators[i].LocatorName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.SegmentRoutingSrv6Locators {
			found = true
			if state.SegmentRoutingSrv6Locators[i].LocatorName.ValueString() != data.SegmentRoutingSrv6Locators[j].LocatorName.ValueString() {
				found = false
			}
			if found {
				if !state.SegmentRoutingSrv6Locators[i].Level.IsNull() && data.SegmentRoutingSrv6Locators[j].Level.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/segment-routing/srv6/locators/locator%v/level", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/segment-routing/srv6/locators/locator%v", state.getPath(), keyString))
		}
	}
	return deletedItems
}

func (data *RouterISISAddressFamily) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.MetricStyleNarrow.IsNull() && !data.MetricStyleNarrow.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric-style/narrow", data.getPath()))
	}
	if !data.MetricStyleWide.IsNull() && !data.MetricStyleWide.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric-style/wide", data.getPath()))
	}
	if !data.MetricStyleTransition.IsNull() && !data.MetricStyleTransition.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric-style/transition", data.getPath()))
	}
	for i := range data.MetricStyleLevels {
		keys := [...]string{"level-id"}
		keyValues := [...]string{strconv.FormatInt(data.MetricStyleLevels[i].LevelId.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.MetricStyleLevels[i].Narrow.IsNull() && !data.MetricStyleLevels[i].Narrow.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric-style/levels/level%v/narrow", data.getPath(), keyString))
		}
		if !data.MetricStyleLevels[i].Wide.IsNull() && !data.MetricStyleLevels[i].Wide.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric-style/levels/level%v/wide", data.getPath(), keyString))
		}
		if !data.MetricStyleLevels[i].Transition.IsNull() && !data.MetricStyleLevels[i].Transition.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric-style/levels/level%v/transition", data.getPath(), keyString))
		}
	}
	if !data.DefaultInformationOriginate.IsNull() && !data.DefaultInformationOriginate.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/default-information/originate", data.getPath()))
	}
	if !data.FastReroutePerLinkPriorityLimitCritical.IsNull() && !data.FastReroutePerLinkPriorityLimitCritical.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/critical", data.getPath()))
	}
	if !data.FastReroutePerLinkPriorityLimitHigh.IsNull() && !data.FastReroutePerLinkPriorityLimitHigh.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/high", data.getPath()))
	}
	if !data.FastReroutePerLinkPriorityLimitMedium.IsNull() && !data.FastReroutePerLinkPriorityLimitMedium.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/medium", data.getPath()))
	}
	if !data.FastReroutePerPrefixPriorityLimitCritical.IsNull() && !data.FastReroutePerPrefixPriorityLimitCritical.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/critical", data.getPath()))
	}
	if !data.FastReroutePerPrefixPriorityLimitHigh.IsNull() && !data.FastReroutePerPrefixPriorityLimitHigh.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/high", data.getPath()))
	}
	if !data.FastReroutePerPrefixPriorityLimitMedium.IsNull() && !data.FastReroutePerPrefixPriorityLimitMedium.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/medium", data.getPath()))
	}
	if !data.MicroloopAvoidanceProtected.IsNull() && !data.MicroloopAvoidanceProtected.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/microloop/avoidance/protected", data.getPath()))
	}
	if !data.MicroloopAvoidanceSegmentRouting.IsNull() && !data.MicroloopAvoidanceSegmentRouting.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/microloop/avoidance/segment-routing", data.getPath()))
	}
	if !data.AdvertisePassiveOnly.IsNull() && !data.AdvertisePassiveOnly.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/advertise/passive-only", data.getPath()))
	}
	if !data.AdvertiseLinkAttributes.IsNull() && !data.AdvertiseLinkAttributes.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/advertise/link/attributes", data.getPath()))
	}
	if !data.MplsLdpAutoConfig.IsNull() && !data.MplsLdpAutoConfig.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mpls/ldp/auto-config", data.getPath()))
	}
	if !data.MplsTrafficEngLevel12.IsNull() && !data.MplsTrafficEngLevel12.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mpls/traffic-eng/level-1-2", data.getPath()))
	}
	if !data.MplsTrafficEngLevel1.IsNull() && !data.MplsTrafficEngLevel1.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mpls/traffic-eng/level-1", data.getPath()))
	}
	if !data.MplsTrafficEngLevel2Only.IsNull() && !data.MplsTrafficEngLevel2Only.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mpls/traffic-eng/level-2-only", data.getPath()))
	}
	for i := range data.SpfPrefixPriorities {
		keys := [...]string{"priority"}
		keyValues := [...]string{data.SpfPrefixPriorities[i].Priority.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.MaximumRedistributedPrefixesLevels {
		keys := [...]string{"level-id"}
		keyValues := [...]string{strconv.FormatInt(data.MaximumRedistributedPrefixesLevels[i].LevelId.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.RedistributeIsis {
		keys := [...]string{"instance-id"}
		keyValues := [...]string{data.RedistributeIsis[i].InstanceId.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.SegmentRoutingSrv6Locators {
		keys := [...]string{"locator-name"}
		keyValues := [...]string{data.SegmentRoutingSrv6Locators[i].LocatorName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	return emptyLeafsDelete
}

func (data *RouterISISAddressFamily) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.MetricStyleNarrow.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/metric-style/narrow", data.getPath()))
	}
	if !data.MetricStyleWide.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/metric-style/wide", data.getPath()))
	}
	if !data.MetricStyleTransition.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/metric-style/transition", data.getPath()))
	}
	for i := range data.MetricStyleLevels {
		keys := [...]string{"level-id"}
		keyValues := [...]string{strconv.FormatInt(data.MetricStyleLevels[i].LevelId.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/metric-style/levels/level%v", data.getPath(), keyString))
	}
	if !data.RouterIdInterfaceName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/router-id/interface-name", data.getPath()))
	}
	if !data.RouterIdIpAddress.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/router-id/ip-address", data.getPath()))
	}
	if !data.DefaultInformationOriginate.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/default-information/originate", data.getPath()))
	}
	if !data.FastRerouteDelayInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/delay-interval", data.getPath()))
	}
	if !data.FastReroutePerLinkPriorityLimitCritical.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/critical", data.getPath()))
	}
	if !data.FastReroutePerLinkPriorityLimitHigh.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/high", data.getPath()))
	}
	if !data.FastReroutePerLinkPriorityLimitMedium.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-link/priority-limit/medium", data.getPath()))
	}
	if !data.FastReroutePerPrefixPriorityLimitCritical.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/critical", data.getPath()))
	}
	if !data.FastReroutePerPrefixPriorityLimitHigh.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/high", data.getPath()))
	}
	if !data.FastReroutePerPrefixPriorityLimitMedium.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-prefix/priority-limit/medium", data.getPath()))
	}
	if !data.MicroloopAvoidanceProtected.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/microloop/avoidance/protected", data.getPath()))
	}
	if !data.MicroloopAvoidanceSegmentRouting.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/microloop/avoidance/segment-routing", data.getPath()))
	}
	if !data.AdvertisePassiveOnly.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/advertise/passive-only", data.getPath()))
	}
	if !data.AdvertiseLinkAttributes.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/advertise/link/attributes", data.getPath()))
	}
	if !data.MplsLdpAutoConfig.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mpls/ldp/auto-config", data.getPath()))
	}
	if !data.MplsTrafficEngRouterIdIpAddress.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mpls/traffic-eng/router-id/ip-address", data.getPath()))
	}
	if !data.MplsTrafficEngRouterIdInterface.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mpls/traffic-eng/router-id/interface", data.getPath()))
	}
	if !data.MplsTrafficEngLevel12.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mpls/traffic-eng/level-1-2", data.getPath()))
	}
	if !data.MplsTrafficEngLevel1.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mpls/traffic-eng/level-1", data.getPath()))
	}
	if !data.MplsTrafficEngLevel2Only.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mpls/traffic-eng/level-2-only", data.getPath()))
	}
	if !data.SpfIntervalMaximumWait.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/spf-interval/maximum-wait/maximum-wait-time", data.getPath()))
	}
	if !data.SpfIntervalInitialWait.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/spf-interval/initial-wait/initial-wait-time", data.getPath()))
	}
	if !data.SpfIntervalSecondaryWait.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/spf-interval/secondary-wait/secondary-wait-time", data.getPath()))
	}
	for i := range data.SpfPrefixPriorities {
		keys := [...]string{"priority"}
		keyValues := [...]string{data.SpfPrefixPriorities[i].Priority.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/spf/prefix-priority/prefix-priority%v", data.getPath(), keyString))
	}
	if !data.SegmentRoutingMplsSrPrefer.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/segment-routing/mpls/sr-prefer", data.getPath()))
	}
	if !data.MaximumRedistributedPrefixes.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/maximum-redistributed-prefixes/maximum-prefixes", data.getPath()))
	}
	for i := range data.MaximumRedistributedPrefixesLevels {
		keys := [...]string{"level-id"}
		keyValues := [...]string{strconv.FormatInt(data.MaximumRedistributedPrefixesLevels[i].LevelId.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/maximum-redistributed-prefixes/levels/level%v", data.getPath(), keyString))
	}
	for i := range data.RedistributeIsis {
		keys := [...]string{"instance-id"}
		keyValues := [...]string{data.RedistributeIsis[i].InstanceId.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/redistribute/isis%v", data.getPath(), keyString))
	}
	for i := range data.SegmentRoutingSrv6Locators {
		keys := [...]string{"locator-name"}
		keyValues := [...]string{data.SegmentRoutingSrv6Locators[i].LocatorName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/segment-routing/srv6/locators/locator%v", data.getPath(), keyString))
	}
	return deletePaths
}
