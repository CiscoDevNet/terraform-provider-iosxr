// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type RouterISISInterface struct {
	Device                        types.String                                    `tfsdk:"device"`
	Id                            types.String                                    `tfsdk:"id"`
	DeleteMode                    types.String                                    `tfsdk:"delete_mode"`
	ProcessId                     types.String                                    `tfsdk:"process_id"`
	InterfaceName                 types.String                                    `tfsdk:"interface_name"`
	CircuitType                   types.String                                    `tfsdk:"circuit_type"`
	HelloPadding                  types.String                                    `tfsdk:"hello_padding"`
	HelloPaddingLevels            []RouterISISInterfaceHelloPaddingLevels         `tfsdk:"hello_padding_levels"`
	Priority                      types.Int64                                     `tfsdk:"priority"`
	PriorityLevels                []RouterISISInterfacePriorityLevels             `tfsdk:"priority_levels"`
	PointToPoint                  types.Bool                                      `tfsdk:"point_to_point"`
	State                         types.String                                    `tfsdk:"state"`
	HelloPasswordAcceptEncrypted  types.String                                    `tfsdk:"hello_password_accept_encrypted"`
	HelloPasswordAcceptsLevels    []RouterISISInterfaceHelloPasswordAcceptsLevels `tfsdk:"hello_password_accepts_levels"`
	HelloPasswordTextEncrypted    types.String                                    `tfsdk:"hello_password_text_encrypted"`
	HelloPasswordTextSendOnly     types.Bool                                      `tfsdk:"hello_password_text_send_only"`
	HelloPasswordHmacMd5Encrypted types.String                                    `tfsdk:"hello_password_hmac_md5_encrypted"`
	HelloPasswordHmacMd5SendOnly  types.Bool                                      `tfsdk:"hello_password_hmac_md5_send_only"`
	HelloPasswordKeychainName     types.String                                    `tfsdk:"hello_password_keychain_name"`
	HelloPasswordKeychainSendOnly types.Bool                                      `tfsdk:"hello_password_keychain_send_only"`
	HelloPasswordLevels           []RouterISISInterfaceHelloPasswordLevels        `tfsdk:"hello_password_levels"`
	BfdFastDetectIpv4             types.Bool                                      `tfsdk:"bfd_fast_detect_ipv4"`
	BfdFastDetectIpv6             types.Bool                                      `tfsdk:"bfd_fast_detect_ipv6"`
	BfdMinimumInterval            types.Int64                                     `tfsdk:"bfd_minimum_interval"`
	BfdMultiplier                 types.Int64                                     `tfsdk:"bfd_multiplier"`
}

type RouterISISInterfaceData struct {
	Device                        types.String                                    `tfsdk:"device"`
	Id                            types.String                                    `tfsdk:"id"`
	ProcessId                     types.String                                    `tfsdk:"process_id"`
	InterfaceName                 types.String                                    `tfsdk:"interface_name"`
	CircuitType                   types.String                                    `tfsdk:"circuit_type"`
	HelloPadding                  types.String                                    `tfsdk:"hello_padding"`
	HelloPaddingLevels            []RouterISISInterfaceHelloPaddingLevels         `tfsdk:"hello_padding_levels"`
	Priority                      types.Int64                                     `tfsdk:"priority"`
	PriorityLevels                []RouterISISInterfacePriorityLevels             `tfsdk:"priority_levels"`
	PointToPoint                  types.Bool                                      `tfsdk:"point_to_point"`
	State                         types.String                                    `tfsdk:"state"`
	HelloPasswordAcceptEncrypted  types.String                                    `tfsdk:"hello_password_accept_encrypted"`
	HelloPasswordAcceptsLevels    []RouterISISInterfaceHelloPasswordAcceptsLevels `tfsdk:"hello_password_accepts_levels"`
	HelloPasswordTextEncrypted    types.String                                    `tfsdk:"hello_password_text_encrypted"`
	HelloPasswordTextSendOnly     types.Bool                                      `tfsdk:"hello_password_text_send_only"`
	HelloPasswordHmacMd5Encrypted types.String                                    `tfsdk:"hello_password_hmac_md5_encrypted"`
	HelloPasswordHmacMd5SendOnly  types.Bool                                      `tfsdk:"hello_password_hmac_md5_send_only"`
	HelloPasswordKeychainName     types.String                                    `tfsdk:"hello_password_keychain_name"`
	HelloPasswordKeychainSendOnly types.Bool                                      `tfsdk:"hello_password_keychain_send_only"`
	HelloPasswordLevels           []RouterISISInterfaceHelloPasswordLevels        `tfsdk:"hello_password_levels"`
	BfdFastDetectIpv4             types.Bool                                      `tfsdk:"bfd_fast_detect_ipv4"`
	BfdFastDetectIpv6             types.Bool                                      `tfsdk:"bfd_fast_detect_ipv6"`
	BfdMinimumInterval            types.Int64                                     `tfsdk:"bfd_minimum_interval"`
	BfdMultiplier                 types.Int64                                     `tfsdk:"bfd_multiplier"`
}
type RouterISISInterfaceHelloPaddingLevels struct {
	LevelNumber  types.Int64  `tfsdk:"level_number"`
	HelloPadding types.String `tfsdk:"hello_padding"`
}
type RouterISISInterfacePriorityLevels struct {
	LevelNumber types.Int64 `tfsdk:"level_number"`
	Priority    types.Int64 `tfsdk:"priority"`
}
type RouterISISInterfaceHelloPasswordAcceptsLevels struct {
	LevelNumber types.Int64  `tfsdk:"level_number"`
	Encrypted   types.String `tfsdk:"encrypted"`
}
type RouterISISInterfaceHelloPasswordLevels struct {
	LevelNumber                        types.Int64  `tfsdk:"level_number"`
	LevelHelloPasswordTextEncrypted    types.String `tfsdk:"level_hello_password_text_encrypted"`
	LevelHelloPasswordTextSendOnly     types.Bool   `tfsdk:"level_hello_password_text_send_only"`
	LevelHelloPasswordHmacMd5Encrypted types.String `tfsdk:"level_hello_password_hmac_md5_encrypted"`
	LevelHelloPasswordHmacMd5SendOnly  types.Bool   `tfsdk:"level_hello_password_hmac_md5_send_only"`
	LevelHelloKeychainName             types.String `tfsdk:"level_hello_keychain_name"`
	LevelHelloKeychainSendOnly         types.Bool   `tfsdk:"level_hello_keychain_send_only"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data RouterISISInterface) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=%s]/interfaces/interface[interface-name=%s]", data.ProcessId.ValueString(), data.InterfaceName.ValueString())
}

func (data RouterISISInterfaceData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=%s]/interfaces/interface[interface-name=%s]", data.ProcessId.ValueString(), data.InterfaceName.ValueString())
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data RouterISISInterface) toBody(ctx context.Context) string {
	body := "{}"
	if !data.InterfaceName.IsNull() && !data.InterfaceName.IsUnknown() {
		body, _ = sjson.Set(body, "interface-name", data.InterfaceName.ValueString())
	}
	if !data.CircuitType.IsNull() && !data.CircuitType.IsUnknown() {
		body, _ = sjson.Set(body, "circuit-type", data.CircuitType.ValueString())
	}
	if !data.HelloPadding.IsNull() && !data.HelloPadding.IsUnknown() {
		body, _ = sjson.Set(body, "hello-padding", data.HelloPadding.ValueString())
	}
	if !data.Priority.IsNull() && !data.Priority.IsUnknown() {
		body, _ = sjson.Set(body, "priority", strconv.FormatInt(data.Priority.ValueInt64(), 10))
	}
	if !data.PointToPoint.IsNull() && !data.PointToPoint.IsUnknown() {
		if data.PointToPoint.ValueBool() {
			body, _ = sjson.Set(body, "point-to-point", map[string]string{})
		}
	}
	if !data.State.IsNull() && !data.State.IsUnknown() {
		body, _ = sjson.Set(body, "state", data.State.ValueString())
	}
	if !data.HelloPasswordAcceptEncrypted.IsNull() && !data.HelloPasswordAcceptEncrypted.IsUnknown() {
		body, _ = sjson.Set(body, "hello-password.accepts.encrypted", data.HelloPasswordAcceptEncrypted.ValueString())
	}
	if !data.HelloPasswordTextEncrypted.IsNull() && !data.HelloPasswordTextEncrypted.IsUnknown() {
		body, _ = sjson.Set(body, "hello-password.hello-password-options.text.hello-password-options.encrypted", data.HelloPasswordTextEncrypted.ValueString())
	}
	if !data.HelloPasswordTextSendOnly.IsNull() && !data.HelloPasswordTextSendOnly.IsUnknown() {
		if data.HelloPasswordTextSendOnly.ValueBool() {
			body, _ = sjson.Set(body, "hello-password.hello-password-options.text.hello-password-options.send-only", map[string]string{})
		}
	}
	if !data.HelloPasswordHmacMd5Encrypted.IsNull() && !data.HelloPasswordHmacMd5Encrypted.IsUnknown() {
		body, _ = sjson.Set(body, "hello-password.hello-password-options.hmac-md5.hello-password-options.encrypted", data.HelloPasswordHmacMd5Encrypted.ValueString())
	}
	if !data.HelloPasswordHmacMd5SendOnly.IsNull() && !data.HelloPasswordHmacMd5SendOnly.IsUnknown() {
		if data.HelloPasswordHmacMd5SendOnly.ValueBool() {
			body, _ = sjson.Set(body, "hello-password.hello-password-options.hmac-md5.hello-password-options.send-only", map[string]string{})
		}
	}
	if !data.HelloPasswordKeychainName.IsNull() && !data.HelloPasswordKeychainName.IsUnknown() {
		body, _ = sjson.Set(body, "hello-password.hello-password-options.keychain.keychain-name", data.HelloPasswordKeychainName.ValueString())
	}
	if !data.HelloPasswordKeychainSendOnly.IsNull() && !data.HelloPasswordKeychainSendOnly.IsUnknown() {
		if data.HelloPasswordKeychainSendOnly.ValueBool() {
			body, _ = sjson.Set(body, "hello-password.hello-password-options.keychain.send-only", map[string]string{})
		}
	}
	if !data.BfdFastDetectIpv4.IsNull() && !data.BfdFastDetectIpv4.IsUnknown() {
		if data.BfdFastDetectIpv4.ValueBool() {
			body, _ = sjson.Set(body, "bfd.fast-detect.ipv4", map[string]string{})
		}
	}
	if !data.BfdFastDetectIpv6.IsNull() && !data.BfdFastDetectIpv6.IsUnknown() {
		if data.BfdFastDetectIpv6.ValueBool() {
			body, _ = sjson.Set(body, "bfd.fast-detect.ipv6", map[string]string{})
		}
	}
	if !data.BfdMinimumInterval.IsNull() && !data.BfdMinimumInterval.IsUnknown() {
		body, _ = sjson.Set(body, "bfd.minimum-interval", strconv.FormatInt(data.BfdMinimumInterval.ValueInt64(), 10))
	}
	if !data.BfdMultiplier.IsNull() && !data.BfdMultiplier.IsUnknown() {
		body, _ = sjson.Set(body, "bfd.multiplier", strconv.FormatInt(data.BfdMultiplier.ValueInt64(), 10))
	}
	if len(data.HelloPaddingLevels) > 0 {
		body, _ = sjson.Set(body, "hello-padding-levels.hello-padding-level", []interface{}{})
		for index, item := range data.HelloPaddingLevels {
			if !item.LevelNumber.IsNull() && !item.LevelNumber.IsUnknown() {
				body, _ = sjson.Set(body, "hello-padding-levels.hello-padding-level"+"."+strconv.Itoa(index)+"."+"level-number", strconv.FormatInt(item.LevelNumber.ValueInt64(), 10))
			}
			if !item.HelloPadding.IsNull() && !item.HelloPadding.IsUnknown() {
				body, _ = sjson.Set(body, "hello-padding-levels.hello-padding-level"+"."+strconv.Itoa(index)+"."+"hello-padding", item.HelloPadding.ValueString())
			}
		}
	}
	if len(data.PriorityLevels) > 0 {
		body, _ = sjson.Set(body, "priority-levels.priority-level", []interface{}{})
		for index, item := range data.PriorityLevels {
			if !item.LevelNumber.IsNull() && !item.LevelNumber.IsUnknown() {
				body, _ = sjson.Set(body, "priority-levels.priority-level"+"."+strconv.Itoa(index)+"."+"level-number", strconv.FormatInt(item.LevelNumber.ValueInt64(), 10))
			}
			if !item.Priority.IsNull() && !item.Priority.IsUnknown() {
				body, _ = sjson.Set(body, "priority-levels.priority-level"+"."+strconv.Itoa(index)+"."+"priority", strconv.FormatInt(item.Priority.ValueInt64(), 10))
			}
		}
	}
	if len(data.HelloPasswordAcceptsLevels) > 0 {
		body, _ = sjson.Set(body, "hello-password.accepts-levels.accepts-level", []interface{}{})
		for index, item := range data.HelloPasswordAcceptsLevels {
			if !item.LevelNumber.IsNull() && !item.LevelNumber.IsUnknown() {
				body, _ = sjson.Set(body, "hello-password.accepts-levels.accepts-level"+"."+strconv.Itoa(index)+"."+"level-number", strconv.FormatInt(item.LevelNumber.ValueInt64(), 10))
			}
			if !item.Encrypted.IsNull() && !item.Encrypted.IsUnknown() {
				body, _ = sjson.Set(body, "hello-password.accepts-levels.accepts-level"+"."+strconv.Itoa(index)+"."+"encrypted", item.Encrypted.ValueString())
			}
		}
	}
	if len(data.HelloPasswordLevels) > 0 {
		body, _ = sjson.Set(body, "hello-password-levels.hello-password-level", []interface{}{})
		for index, item := range data.HelloPasswordLevels {
			if !item.LevelNumber.IsNull() && !item.LevelNumber.IsUnknown() {
				body, _ = sjson.Set(body, "hello-password-levels.hello-password-level"+"."+strconv.Itoa(index)+"."+"level-number", strconv.FormatInt(item.LevelNumber.ValueInt64(), 10))
			}
			if !item.LevelHelloPasswordTextEncrypted.IsNull() && !item.LevelHelloPasswordTextEncrypted.IsUnknown() {
				body, _ = sjson.Set(body, "hello-password-levels.hello-password-level"+"."+strconv.Itoa(index)+"."+"text.hello-password-options.encrypted", item.LevelHelloPasswordTextEncrypted.ValueString())
			}
			if !item.LevelHelloPasswordTextSendOnly.IsNull() && !item.LevelHelloPasswordTextSendOnly.IsUnknown() {
				if item.LevelHelloPasswordTextSendOnly.ValueBool() {
					body, _ = sjson.Set(body, "hello-password-levels.hello-password-level"+"."+strconv.Itoa(index)+"."+"text.hello-password-options.send-only", map[string]string{})
				}
			}
			if !item.LevelHelloPasswordHmacMd5Encrypted.IsNull() && !item.LevelHelloPasswordHmacMd5Encrypted.IsUnknown() {
				body, _ = sjson.Set(body, "hello-password-levels.hello-password-level"+"."+strconv.Itoa(index)+"."+"hmac-md5.hello-password-options.encrypted", item.LevelHelloPasswordHmacMd5Encrypted.ValueString())
			}
			if !item.LevelHelloPasswordHmacMd5SendOnly.IsNull() && !item.LevelHelloPasswordHmacMd5SendOnly.IsUnknown() {
				if item.LevelHelloPasswordHmacMd5SendOnly.ValueBool() {
					body, _ = sjson.Set(body, "hello-password-levels.hello-password-level"+"."+strconv.Itoa(index)+"."+"hmac-md5.hello-password-options.send-only", map[string]string{})
				}
			}
			if !item.LevelHelloKeychainName.IsNull() && !item.LevelHelloKeychainName.IsUnknown() {
				body, _ = sjson.Set(body, "hello-password-levels.hello-password-level"+"."+strconv.Itoa(index)+"."+"keychain.keychain-name", item.LevelHelloKeychainName.ValueString())
			}
			if !item.LevelHelloKeychainSendOnly.IsNull() && !item.LevelHelloKeychainSendOnly.IsUnknown() {
				if item.LevelHelloKeychainSendOnly.ValueBool() {
					body, _ = sjson.Set(body, "hello-password-levels.hello-password-level"+"."+strconv.Itoa(index)+"."+"keychain.send-only", map[string]string{})
				}
			}
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *RouterISISInterface) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "circuit-type"); value.Exists() && !data.CircuitType.IsNull() {
		data.CircuitType = types.StringValue(value.String())
	} else {
		data.CircuitType = types.StringNull()
	}
	if value := gjson.GetBytes(res, "hello-padding"); value.Exists() && !data.HelloPadding.IsNull() {
		data.HelloPadding = types.StringValue(value.String())
	} else {
		data.HelloPadding = types.StringNull()
	}
	for i := range data.HelloPaddingLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPaddingLevels[i].LevelNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "hello-padding-levels.hello-padding-level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-number"); value.Exists() && !data.HelloPaddingLevels[i].LevelNumber.IsNull() {
			data.HelloPaddingLevels[i].LevelNumber = types.Int64Value(value.Int())
		} else {
			data.HelloPaddingLevels[i].LevelNumber = types.Int64Null()
		}
		if value := r.Get("hello-padding"); value.Exists() && !data.HelloPaddingLevels[i].HelloPadding.IsNull() {
			data.HelloPaddingLevels[i].HelloPadding = types.StringValue(value.String())
		} else {
			data.HelloPaddingLevels[i].HelloPadding = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() && !data.Priority.IsNull() {
		data.Priority = types.Int64Value(value.Int())
	} else {
		data.Priority = types.Int64Null()
	}
	for i := range data.PriorityLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.PriorityLevels[i].LevelNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "priority-levels.priority-level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-number"); value.Exists() && !data.PriorityLevels[i].LevelNumber.IsNull() {
			data.PriorityLevels[i].LevelNumber = types.Int64Value(value.Int())
		} else {
			data.PriorityLevels[i].LevelNumber = types.Int64Null()
		}
		if value := r.Get("priority"); value.Exists() && !data.PriorityLevels[i].Priority.IsNull() {
			data.PriorityLevels[i].Priority = types.Int64Value(value.Int())
		} else {
			data.PriorityLevels[i].Priority = types.Int64Null()
		}
	}
	if value := gjson.GetBytes(res, "point-to-point"); !data.PointToPoint.IsNull() {
		if value.Exists() {
			data.PointToPoint = types.BoolValue(true)
		} else {
			data.PointToPoint = types.BoolValue(false)
		}
	} else {
		data.PointToPoint = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "state"); value.Exists() && !data.State.IsNull() {
		data.State = types.StringValue(value.String())
	} else {
		data.State = types.StringNull()
	}
	if value := gjson.GetBytes(res, "hello-password.accepts.encrypted"); value.Exists() && !data.HelloPasswordAcceptEncrypted.IsNull() {
		data.HelloPasswordAcceptEncrypted = types.StringValue(value.String())
	} else {
		data.HelloPasswordAcceptEncrypted = types.StringNull()
	}
	for i := range data.HelloPasswordAcceptsLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPasswordAcceptsLevels[i].LevelNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "hello-password.accepts-levels.accepts-level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-number"); value.Exists() && !data.HelloPasswordAcceptsLevels[i].LevelNumber.IsNull() {
			data.HelloPasswordAcceptsLevels[i].LevelNumber = types.Int64Value(value.Int())
		} else {
			data.HelloPasswordAcceptsLevels[i].LevelNumber = types.Int64Null()
		}
		if value := r.Get("encrypted"); value.Exists() && !data.HelloPasswordAcceptsLevels[i].Encrypted.IsNull() {
			data.HelloPasswordAcceptsLevels[i].Encrypted = types.StringValue(value.String())
		} else {
			data.HelloPasswordAcceptsLevels[i].Encrypted = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.text.hello-password-options.encrypted"); value.Exists() && !data.HelloPasswordTextEncrypted.IsNull() {
		data.HelloPasswordTextEncrypted = types.StringValue(value.String())
	} else {
		data.HelloPasswordTextEncrypted = types.StringNull()
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.text.hello-password-options.send-only"); !data.HelloPasswordTextSendOnly.IsNull() {
		if value.Exists() {
			data.HelloPasswordTextSendOnly = types.BoolValue(true)
		} else {
			data.HelloPasswordTextSendOnly = types.BoolValue(false)
		}
	} else {
		data.HelloPasswordTextSendOnly = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.hmac-md5.hello-password-options.encrypted"); value.Exists() && !data.HelloPasswordHmacMd5Encrypted.IsNull() {
		data.HelloPasswordHmacMd5Encrypted = types.StringValue(value.String())
	} else {
		data.HelloPasswordHmacMd5Encrypted = types.StringNull()
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.hmac-md5.hello-password-options.send-only"); !data.HelloPasswordHmacMd5SendOnly.IsNull() {
		if value.Exists() {
			data.HelloPasswordHmacMd5SendOnly = types.BoolValue(true)
		} else {
			data.HelloPasswordHmacMd5SendOnly = types.BoolValue(false)
		}
	} else {
		data.HelloPasswordHmacMd5SendOnly = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.keychain.keychain-name"); value.Exists() && !data.HelloPasswordKeychainName.IsNull() {
		data.HelloPasswordKeychainName = types.StringValue(value.String())
	} else {
		data.HelloPasswordKeychainName = types.StringNull()
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.keychain.send-only"); !data.HelloPasswordKeychainSendOnly.IsNull() {
		if value.Exists() {
			data.HelloPasswordKeychainSendOnly = types.BoolValue(true)
		} else {
			data.HelloPasswordKeychainSendOnly = types.BoolValue(false)
		}
	} else {
		data.HelloPasswordKeychainSendOnly = types.BoolNull()
	}
	for i := range data.HelloPasswordLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPasswordLevels[i].LevelNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "hello-password-levels.hello-password-level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-number"); value.Exists() && !data.HelloPasswordLevels[i].LevelNumber.IsNull() {
			data.HelloPasswordLevels[i].LevelNumber = types.Int64Value(value.Int())
		} else {
			data.HelloPasswordLevels[i].LevelNumber = types.Int64Null()
		}
		if value := r.Get("text.hello-password-options.encrypted"); value.Exists() && !data.HelloPasswordLevels[i].LevelHelloPasswordTextEncrypted.IsNull() {
			data.HelloPasswordLevels[i].LevelHelloPasswordTextEncrypted = types.StringValue(value.String())
		} else {
			data.HelloPasswordLevels[i].LevelHelloPasswordTextEncrypted = types.StringNull()
		}
		if value := r.Get("text.hello-password-options.send-only"); !data.HelloPasswordLevels[i].LevelHelloPasswordTextSendOnly.IsNull() {
			if value.Exists() {
				data.HelloPasswordLevels[i].LevelHelloPasswordTextSendOnly = types.BoolValue(true)
			} else {
				data.HelloPasswordLevels[i].LevelHelloPasswordTextSendOnly = types.BoolValue(false)
			}
		} else {
			data.HelloPasswordLevels[i].LevelHelloPasswordTextSendOnly = types.BoolNull()
		}
		if value := r.Get("hmac-md5.hello-password-options.encrypted"); value.Exists() && !data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5Encrypted.IsNull() {
			data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5Encrypted = types.StringValue(value.String())
		} else {
			data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5Encrypted = types.StringNull()
		}
		if value := r.Get("hmac-md5.hello-password-options.send-only"); !data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5SendOnly.IsNull() {
			if value.Exists() {
				data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5SendOnly = types.BoolValue(true)
			} else {
				data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5SendOnly = types.BoolValue(false)
			}
		} else {
			data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5SendOnly = types.BoolNull()
		}
		if value := r.Get("keychain.keychain-name"); value.Exists() && !data.HelloPasswordLevels[i].LevelHelloKeychainName.IsNull() {
			data.HelloPasswordLevels[i].LevelHelloKeychainName = types.StringValue(value.String())
		} else {
			data.HelloPasswordLevels[i].LevelHelloKeychainName = types.StringNull()
		}
		if value := r.Get("keychain.send-only"); !data.HelloPasswordLevels[i].LevelHelloKeychainSendOnly.IsNull() {
			if value.Exists() {
				data.HelloPasswordLevels[i].LevelHelloKeychainSendOnly = types.BoolValue(true)
			} else {
				data.HelloPasswordLevels[i].LevelHelloKeychainSendOnly = types.BoolValue(false)
			}
		} else {
			data.HelloPasswordLevels[i].LevelHelloKeychainSendOnly = types.BoolNull()
		}
	}
	if value := gjson.GetBytes(res, "bfd.fast-detect.ipv4"); !data.BfdFastDetectIpv4.IsNull() {
		if value.Exists() {
			data.BfdFastDetectIpv4 = types.BoolValue(true)
		} else {
			data.BfdFastDetectIpv4 = types.BoolValue(false)
		}
	} else {
		data.BfdFastDetectIpv4 = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "bfd.fast-detect.ipv6"); !data.BfdFastDetectIpv6.IsNull() {
		if value.Exists() {
			data.BfdFastDetectIpv6 = types.BoolValue(true)
		} else {
			data.BfdFastDetectIpv6 = types.BoolValue(false)
		}
	} else {
		data.BfdFastDetectIpv6 = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() && !data.BfdMinimumInterval.IsNull() {
		data.BfdMinimumInterval = types.Int64Value(value.Int())
	} else {
		data.BfdMinimumInterval = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() && !data.BfdMultiplier.IsNull() {
		data.BfdMultiplier = types.Int64Value(value.Int())
	} else {
		data.BfdMultiplier = types.Int64Null()
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *RouterISISInterface) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "circuit-type"); value.Exists() {
		data.CircuitType = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-padding"); value.Exists() {
		data.HelloPadding = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-padding-levels.hello-padding-level"); value.Exists() {
		data.HelloPaddingLevels = make([]RouterISISInterfaceHelloPaddingLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceHelloPaddingLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("hello-padding"); cValue.Exists() {
				item.HelloPadding = types.StringValue(cValue.String())
			}
			data.HelloPaddingLevels = append(data.HelloPaddingLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() {
		data.Priority = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "priority-levels.priority-level"); value.Exists() {
		data.PriorityLevels = make([]RouterISISInterfacePriorityLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfacePriorityLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority = types.Int64Value(cValue.Int())
			}
			data.PriorityLevels = append(data.PriorityLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "point-to-point"); value.Exists() {
		data.PointToPoint = types.BoolValue(true)
	} else {
		data.PointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "state"); value.Exists() {
		data.State = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.accepts.encrypted"); value.Exists() {
		data.HelloPasswordAcceptEncrypted = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.accepts-levels.accepts-level"); value.Exists() {
		data.HelloPasswordAcceptsLevels = make([]RouterISISInterfaceHelloPasswordAcceptsLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceHelloPasswordAcceptsLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("encrypted"); cValue.Exists() {
				item.Encrypted = types.StringValue(cValue.String())
			}
			data.HelloPasswordAcceptsLevels = append(data.HelloPasswordAcceptsLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.text.hello-password-options.encrypted"); value.Exists() {
		data.HelloPasswordTextEncrypted = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.text.hello-password-options.send-only"); value.Exists() {
		data.HelloPasswordTextSendOnly = types.BoolValue(true)
	} else {
		data.HelloPasswordTextSendOnly = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.hmac-md5.hello-password-options.encrypted"); value.Exists() {
		data.HelloPasswordHmacMd5Encrypted = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.hmac-md5.hello-password-options.send-only"); value.Exists() {
		data.HelloPasswordHmacMd5SendOnly = types.BoolValue(true)
	} else {
		data.HelloPasswordHmacMd5SendOnly = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.keychain.keychain-name"); value.Exists() {
		data.HelloPasswordKeychainName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.keychain.send-only"); value.Exists() {
		data.HelloPasswordKeychainSendOnly = types.BoolValue(true)
	} else {
		data.HelloPasswordKeychainSendOnly = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "hello-password-levels.hello-password-level"); value.Exists() {
		data.HelloPasswordLevels = make([]RouterISISInterfaceHelloPasswordLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceHelloPasswordLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("text.hello-password-options.encrypted"); cValue.Exists() {
				item.LevelHelloPasswordTextEncrypted = types.StringValue(cValue.String())
			}
			if cValue := v.Get("text.hello-password-options.send-only"); cValue.Exists() {
				item.LevelHelloPasswordTextSendOnly = types.BoolValue(true)
			} else {
				item.LevelHelloPasswordTextSendOnly = types.BoolValue(false)
			}
			if cValue := v.Get("hmac-md5.hello-password-options.encrypted"); cValue.Exists() {
				item.LevelHelloPasswordHmacMd5Encrypted = types.StringValue(cValue.String())
			}
			if cValue := v.Get("hmac-md5.hello-password-options.send-only"); cValue.Exists() {
				item.LevelHelloPasswordHmacMd5SendOnly = types.BoolValue(true)
			} else {
				item.LevelHelloPasswordHmacMd5SendOnly = types.BoolValue(false)
			}
			if cValue := v.Get("keychain.keychain-name"); cValue.Exists() {
				item.LevelHelloKeychainName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("keychain.send-only"); cValue.Exists() {
				item.LevelHelloKeychainSendOnly = types.BoolValue(true)
			} else {
				item.LevelHelloKeychainSendOnly = types.BoolValue(false)
			}
			data.HelloPasswordLevels = append(data.HelloPasswordLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bfd.fast-detect.ipv4"); value.Exists() {
		data.BfdFastDetectIpv4 = types.BoolValue(true)
	} else {
		data.BfdFastDetectIpv4 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "bfd.fast-detect.ipv6"); value.Exists() {
		data.BfdFastDetectIpv6 = types.BoolValue(true)
	} else {
		data.BfdFastDetectIpv6 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() {
		data.BfdMinimumInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() {
		data.BfdMultiplier = types.Int64Value(value.Int())
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *RouterISISInterfaceData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "circuit-type"); value.Exists() {
		data.CircuitType = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-padding"); value.Exists() {
		data.HelloPadding = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-padding-levels.hello-padding-level"); value.Exists() {
		data.HelloPaddingLevels = make([]RouterISISInterfaceHelloPaddingLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceHelloPaddingLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("hello-padding"); cValue.Exists() {
				item.HelloPadding = types.StringValue(cValue.String())
			}
			data.HelloPaddingLevels = append(data.HelloPaddingLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() {
		data.Priority = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "priority-levels.priority-level"); value.Exists() {
		data.PriorityLevels = make([]RouterISISInterfacePriorityLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfacePriorityLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority = types.Int64Value(cValue.Int())
			}
			data.PriorityLevels = append(data.PriorityLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "point-to-point"); value.Exists() {
		data.PointToPoint = types.BoolValue(true)
	} else {
		data.PointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "state"); value.Exists() {
		data.State = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.accepts.encrypted"); value.Exists() {
		data.HelloPasswordAcceptEncrypted = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.accepts-levels.accepts-level"); value.Exists() {
		data.HelloPasswordAcceptsLevels = make([]RouterISISInterfaceHelloPasswordAcceptsLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceHelloPasswordAcceptsLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("encrypted"); cValue.Exists() {
				item.Encrypted = types.StringValue(cValue.String())
			}
			data.HelloPasswordAcceptsLevels = append(data.HelloPasswordAcceptsLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.text.hello-password-options.encrypted"); value.Exists() {
		data.HelloPasswordTextEncrypted = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.text.hello-password-options.send-only"); value.Exists() {
		data.HelloPasswordTextSendOnly = types.BoolValue(true)
	} else {
		data.HelloPasswordTextSendOnly = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.hmac-md5.hello-password-options.encrypted"); value.Exists() {
		data.HelloPasswordHmacMd5Encrypted = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.hmac-md5.hello-password-options.send-only"); value.Exists() {
		data.HelloPasswordHmacMd5SendOnly = types.BoolValue(true)
	} else {
		data.HelloPasswordHmacMd5SendOnly = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.keychain.keychain-name"); value.Exists() {
		data.HelloPasswordKeychainName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "hello-password.hello-password-options.keychain.send-only"); value.Exists() {
		data.HelloPasswordKeychainSendOnly = types.BoolValue(true)
	} else {
		data.HelloPasswordKeychainSendOnly = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "hello-password-levels.hello-password-level"); value.Exists() {
		data.HelloPasswordLevels = make([]RouterISISInterfaceHelloPasswordLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceHelloPasswordLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("text.hello-password-options.encrypted"); cValue.Exists() {
				item.LevelHelloPasswordTextEncrypted = types.StringValue(cValue.String())
			}
			if cValue := v.Get("text.hello-password-options.send-only"); cValue.Exists() {
				item.LevelHelloPasswordTextSendOnly = types.BoolValue(true)
			} else {
				item.LevelHelloPasswordTextSendOnly = types.BoolValue(false)
			}
			if cValue := v.Get("hmac-md5.hello-password-options.encrypted"); cValue.Exists() {
				item.LevelHelloPasswordHmacMd5Encrypted = types.StringValue(cValue.String())
			}
			if cValue := v.Get("hmac-md5.hello-password-options.send-only"); cValue.Exists() {
				item.LevelHelloPasswordHmacMd5SendOnly = types.BoolValue(true)
			} else {
				item.LevelHelloPasswordHmacMd5SendOnly = types.BoolValue(false)
			}
			if cValue := v.Get("keychain.keychain-name"); cValue.Exists() {
				item.LevelHelloKeychainName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("keychain.send-only"); cValue.Exists() {
				item.LevelHelloKeychainSendOnly = types.BoolValue(true)
			} else {
				item.LevelHelloKeychainSendOnly = types.BoolValue(false)
			}
			data.HelloPasswordLevels = append(data.HelloPasswordLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "bfd.fast-detect.ipv4"); value.Exists() {
		data.BfdFastDetectIpv4 = types.BoolValue(true)
	} else {
		data.BfdFastDetectIpv4 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "bfd.fast-detect.ipv6"); value.Exists() {
		data.BfdFastDetectIpv6 = types.BoolValue(true)
	} else {
		data.BfdFastDetectIpv6 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() {
		data.BfdMinimumInterval = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() {
		data.BfdMultiplier = types.Int64Value(value.Int())
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *RouterISISInterface) getDeletedItems(ctx context.Context, state RouterISISInterface) []string {
	deletedItems := make([]string, 0)
	if !state.BfdMultiplier.IsNull() && data.BfdMultiplier.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bfd/multiplier", state.getPath()))
	}
	if !state.BfdMinimumInterval.IsNull() && data.BfdMinimumInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bfd/minimum-interval", state.getPath()))
	}
	if !state.BfdFastDetectIpv6.IsNull() && data.BfdFastDetectIpv6.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bfd/fast-detect/ipv6", state.getPath()))
	}
	if !state.BfdFastDetectIpv4.IsNull() && data.BfdFastDetectIpv4.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/bfd/fast-detect/ipv4", state.getPath()))
	}
	for i := range state.HelloPasswordLevels {
		keys := [...]string{"level-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.HelloPasswordLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.HelloPasswordLevels[i].LevelNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.HelloPasswordLevels {
			found = true
			if state.HelloPasswordLevels[i].LevelNumber.ValueInt64() != data.HelloPasswordLevels[j].LevelNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.HelloPasswordLevels[i].LevelHelloKeychainSendOnly.IsNull() && data.HelloPasswordLevels[j].LevelHelloKeychainSendOnly.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/keychain", state.getPath(), keyString))
				}
				if !state.HelloPasswordLevels[i].LevelHelloKeychainName.IsNull() && data.HelloPasswordLevels[j].LevelHelloKeychainName.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/keychain", state.getPath(), keyString))
				}
				if !state.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5SendOnly.IsNull() && data.HelloPasswordLevels[j].LevelHelloPasswordHmacMd5SendOnly.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/hmac-md5/hello-password-options", state.getPath(), keyString))
				}
				if !state.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5Encrypted.IsNull() && data.HelloPasswordLevels[j].LevelHelloPasswordHmacMd5Encrypted.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/hmac-md5/hello-password-options", state.getPath(), keyString))
				}
				if !state.HelloPasswordLevels[i].LevelHelloPasswordTextSendOnly.IsNull() && data.HelloPasswordLevels[j].LevelHelloPasswordTextSendOnly.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/text/hello-password-options", state.getPath(), keyString))
				}
				if !state.HelloPasswordLevels[i].LevelHelloPasswordTextEncrypted.IsNull() && data.HelloPasswordLevels[j].LevelHelloPasswordTextEncrypted.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/text/hello-password-options", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v", state.getPath(), keyString))
		}
	}
	if !state.HelloPasswordKeychainSendOnly.IsNull() && data.HelloPasswordKeychainSendOnly.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/hello-password-options/keychain", state.getPath()))
	}
	if !state.HelloPasswordKeychainName.IsNull() && data.HelloPasswordKeychainName.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/hello-password-options/keychain", state.getPath()))
	}
	if !state.HelloPasswordHmacMd5SendOnly.IsNull() && data.HelloPasswordHmacMd5SendOnly.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/hello-password-options/hmac-md5/hello-password-options", state.getPath()))
	}
	if !state.HelloPasswordHmacMd5Encrypted.IsNull() && data.HelloPasswordHmacMd5Encrypted.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/hello-password-options/hmac-md5/hello-password-options", state.getPath()))
	}
	if !state.HelloPasswordTextSendOnly.IsNull() && data.HelloPasswordTextSendOnly.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/hello-password-options/text/hello-password-options", state.getPath()))
	}
	if !state.HelloPasswordTextEncrypted.IsNull() && data.HelloPasswordTextEncrypted.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/hello-password-options/text/hello-password-options", state.getPath()))
	}
	for i := range state.HelloPasswordAcceptsLevels {
		keys := [...]string{"level-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.HelloPasswordAcceptsLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.HelloPasswordAcceptsLevels[i].LevelNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.HelloPasswordAcceptsLevels {
			found = true
			if state.HelloPasswordAcceptsLevels[i].LevelNumber.ValueInt64() != data.HelloPasswordAcceptsLevels[j].LevelNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.HelloPasswordAcceptsLevels[i].Encrypted.IsNull() && data.HelloPasswordAcceptsLevels[j].Encrypted.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/accepts-levels/accepts-level%v/encrypted", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/accepts-levels/accepts-level%v", state.getPath(), keyString))
		}
	}
	if !state.HelloPasswordAcceptEncrypted.IsNull() && data.HelloPasswordAcceptEncrypted.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-password/accepts/encrypted", state.getPath()))
	}
	if !state.State.IsNull() && data.State.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/state", state.getPath()))
	}
	if !state.PointToPoint.IsNull() && data.PointToPoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/point-to-point", state.getPath()))
	}
	for i := range state.PriorityLevels {
		keys := [...]string{"level-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.PriorityLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.PriorityLevels[i].LevelNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.PriorityLevels {
			found = true
			if state.PriorityLevels[i].LevelNumber.ValueInt64() != data.PriorityLevels[j].LevelNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.PriorityLevels[i].Priority.IsNull() && data.PriorityLevels[j].Priority.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/priority-levels/priority-level%v/priority", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/priority-levels/priority-level%v", state.getPath(), keyString))
		}
	}
	if !state.Priority.IsNull() && data.Priority.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/priority", state.getPath()))
	}
	for i := range state.HelloPaddingLevels {
		keys := [...]string{"level-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.HelloPaddingLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.HelloPaddingLevels[i].LevelNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.HelloPaddingLevels {
			found = true
			if state.HelloPaddingLevels[i].LevelNumber.ValueInt64() != data.HelloPaddingLevels[j].LevelNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.HelloPaddingLevels[i].HelloPadding.IsNull() && data.HelloPaddingLevels[j].HelloPadding.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-padding-levels/hello-padding-level%v/hello-padding", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-padding-levels/hello-padding-level%v", state.getPath(), keyString))
		}
	}
	if !state.HelloPadding.IsNull() && data.HelloPadding.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hello-padding", state.getPath()))
	}
	if !state.CircuitType.IsNull() && data.CircuitType.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/circuit-type", state.getPath()))
	}
	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *RouterISISInterface) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.BfdFastDetectIpv6.IsNull() && !data.BfdFastDetectIpv6.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/bfd/fast-detect/ipv6", data.getPath()))
	}
	if !data.BfdFastDetectIpv4.IsNull() && !data.BfdFastDetectIpv4.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/bfd/fast-detect/ipv4", data.getPath()))
	}
	for i := range data.HelloPasswordLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPasswordLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.HelloPasswordLevels[i].LevelHelloKeychainSendOnly.IsNull() && !data.HelloPasswordLevels[i].LevelHelloKeychainSendOnly.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/keychain", data.getPath(), keyString))
		}
		if !data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5SendOnly.IsNull() && !data.HelloPasswordLevels[i].LevelHelloPasswordHmacMd5SendOnly.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/hmac-md5/hello-password-options", data.getPath(), keyString))
		}
		if !data.HelloPasswordLevels[i].LevelHelloPasswordTextSendOnly.IsNull() && !data.HelloPasswordLevels[i].LevelHelloPasswordTextSendOnly.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v/text/hello-password-options", data.getPath(), keyString))
		}
	}
	if !data.HelloPasswordKeychainSendOnly.IsNull() && !data.HelloPasswordKeychainSendOnly.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/hello-password/hello-password-options/keychain", data.getPath()))
	}
	if !data.HelloPasswordHmacMd5SendOnly.IsNull() && !data.HelloPasswordHmacMd5SendOnly.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/hello-password/hello-password-options/hmac-md5/hello-password-options", data.getPath()))
	}
	if !data.HelloPasswordTextSendOnly.IsNull() && !data.HelloPasswordTextSendOnly.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/hello-password/hello-password-options/text/hello-password-options", data.getPath()))
	}
	for i := range data.HelloPasswordAcceptsLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPasswordAcceptsLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.PointToPoint.IsNull() && !data.PointToPoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/point-to-point", data.getPath()))
	}
	for i := range data.PriorityLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.PriorityLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.HelloPaddingLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPaddingLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *RouterISISInterface) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.BfdMultiplier.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bfd/multiplier", data.getPath()))
	}
	if !data.BfdMinimumInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bfd/minimum-interval", data.getPath()))
	}
	if !data.BfdFastDetectIpv6.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bfd/fast-detect/ipv6", data.getPath()))
	}
	if !data.BfdFastDetectIpv4.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/bfd/fast-detect/ipv4", data.getPath()))
	}
	for i := range data.HelloPasswordLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPasswordLevels[i].LevelNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password-levels/hello-password-level%v", data.getPath(), keyString))
	}
	if !data.HelloPasswordKeychainSendOnly.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password/hello-password-options/keychain", data.getPath()))
	}
	if !data.HelloPasswordKeychainName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password/hello-password-options/keychain", data.getPath()))
	}
	if !data.HelloPasswordHmacMd5SendOnly.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password/hello-password-options/hmac-md5/hello-password-options", data.getPath()))
	}
	if !data.HelloPasswordHmacMd5Encrypted.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password/hello-password-options/hmac-md5/hello-password-options", data.getPath()))
	}
	if !data.HelloPasswordTextSendOnly.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password/hello-password-options/text/hello-password-options", data.getPath()))
	}
	if !data.HelloPasswordTextEncrypted.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password/hello-password-options/text/hello-password-options", data.getPath()))
	}
	for i := range data.HelloPasswordAcceptsLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPasswordAcceptsLevels[i].LevelNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password/accepts-levels/accepts-level%v", data.getPath(), keyString))
	}
	if !data.HelloPasswordAcceptEncrypted.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-password/accepts/encrypted", data.getPath()))
	}
	if !data.State.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/state", data.getPath()))
	}
	if !data.PointToPoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/point-to-point", data.getPath()))
	}
	for i := range data.PriorityLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.PriorityLevels[i].LevelNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/priority-levels/priority-level%v", data.getPath(), keyString))
	}
	if !data.Priority.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/priority", data.getPath()))
	}
	for i := range data.HelloPaddingLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.HelloPaddingLevels[i].LevelNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-padding-levels/hello-padding-level%v", data.getPath(), keyString))
	}
	if !data.HelloPadding.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-padding", data.getPath()))
	}
	if !data.CircuitType.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/circuit-type", data.getPath()))
	}
	return deletePaths
}

// End of section. //template:end getDeletePaths
