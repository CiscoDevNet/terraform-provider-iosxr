// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type RouterISISInterfaceAddressFamily struct {
	Device                           types.String                                                       `tfsdk:"device"`
	Id                               types.String                                                       `tfsdk:"id"`
	DeleteMode                       types.String                                                       `tfsdk:"delete_mode"`
	ProcessId                        types.String                                                       `tfsdk:"process_id"`
	InterfaceName                    types.String                                                       `tfsdk:"interface_name"`
	AfName                           types.String                                                       `tfsdk:"af_name"`
	SafName                          types.String                                                       `tfsdk:"saf_name"`
	FastReroutePerPrefix             types.Bool                                                         `tfsdk:"fast_reroute_per_prefix"`
	FastReroutePerLink               types.Bool                                                         `tfsdk:"fast_reroute_per_link"`
	FastRerouteLevels                []RouterISISInterfaceAddressFamilyFastRerouteLevels                `tfsdk:"fast_reroute_levels"`
	Tag                              types.Int64                                                        `tfsdk:"tag"`
	AdjacencySidIndices              []RouterISISInterfaceAddressFamilyAdjacencySidIndices              `tfsdk:"adjacency_sid_indices"`
	AdjacencySidAbsolutes            []RouterISISInterfaceAddressFamilyAdjacencySidAbsolutes            `tfsdk:"adjacency_sid_absolutes"`
	AdvertisePrefixRoutePolicy       types.String                                                       `tfsdk:"advertise_prefix_route_policy"`
	AdvertisePrefixRoutePolicyLevels []RouterISISInterfaceAddressFamilyAdvertisePrefixRoutePolicyLevels `tfsdk:"advertise_prefix_route_policy_levels"`
	MetricDefault                    types.Int64                                                        `tfsdk:"metric_default"`
	MetricMaximum                    types.Bool                                                         `tfsdk:"metric_maximum"`
	MetricLevels                     []RouterISISInterfaceAddressFamilyMetricLevels                     `tfsdk:"metric_levels"`
}

type RouterISISInterfaceAddressFamilyData struct {
	Device                           types.String                                                       `tfsdk:"device"`
	Id                               types.String                                                       `tfsdk:"id"`
	ProcessId                        types.String                                                       `tfsdk:"process_id"`
	InterfaceName                    types.String                                                       `tfsdk:"interface_name"`
	AfName                           types.String                                                       `tfsdk:"af_name"`
	SafName                          types.String                                                       `tfsdk:"saf_name"`
	FastReroutePerPrefix             types.Bool                                                         `tfsdk:"fast_reroute_per_prefix"`
	FastReroutePerLink               types.Bool                                                         `tfsdk:"fast_reroute_per_link"`
	FastRerouteLevels                []RouterISISInterfaceAddressFamilyFastRerouteLevels                `tfsdk:"fast_reroute_levels"`
	Tag                              types.Int64                                                        `tfsdk:"tag"`
	AdjacencySidIndices              []RouterISISInterfaceAddressFamilyAdjacencySidIndices              `tfsdk:"adjacency_sid_indices"`
	AdjacencySidAbsolutes            []RouterISISInterfaceAddressFamilyAdjacencySidAbsolutes            `tfsdk:"adjacency_sid_absolutes"`
	AdvertisePrefixRoutePolicy       types.String                                                       `tfsdk:"advertise_prefix_route_policy"`
	AdvertisePrefixRoutePolicyLevels []RouterISISInterfaceAddressFamilyAdvertisePrefixRoutePolicyLevels `tfsdk:"advertise_prefix_route_policy_levels"`
	MetricDefault                    types.Int64                                                        `tfsdk:"metric_default"`
	MetricMaximum                    types.Bool                                                         `tfsdk:"metric_maximum"`
	MetricLevels                     []RouterISISInterfaceAddressFamilyMetricLevels                     `tfsdk:"metric_levels"`
}
type RouterISISInterfaceAddressFamilyFastRerouteLevels struct {
	LevelNumber types.Int64 `tfsdk:"level_number"`
	PerPrefix   types.Bool  `tfsdk:"per_prefix"`
	PerLink     types.Bool  `tfsdk:"per_link"`
}
type RouterISISInterfaceAddressFamilyAdjacencySidIndices struct {
	IndexNumber types.Int64 `tfsdk:"index_number"`
	Protected   types.Bool  `tfsdk:"protected"`
}
type RouterISISInterfaceAddressFamilyAdjacencySidAbsolutes struct {
	AbsoluteNumber types.Int64 `tfsdk:"absolute_number"`
	Protected      types.Bool  `tfsdk:"protected"`
}
type RouterISISInterfaceAddressFamilyAdvertisePrefixRoutePolicyLevels struct {
	LevelNumber types.Int64  `tfsdk:"level_number"`
	RoutePolicy types.String `tfsdk:"route_policy"`
}
type RouterISISInterfaceAddressFamilyMetricLevels struct {
	LevelNumber   types.Int64 `tfsdk:"level_number"`
	MetricDefault types.Int64 `tfsdk:"metric_default"`
	MetricMaximum types.Bool  `tfsdk:"metric_maximum"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data RouterISISInterfaceAddressFamily) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=%s]/interfaces/interface[interface-name=%s]/address-families/address-family[af-name=%s][saf-name=%s]", data.ProcessId.ValueString(), data.InterfaceName.ValueString(), data.AfName.ValueString(), data.SafName.ValueString())
}

func (data RouterISISInterfaceAddressFamilyData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=%s]/interfaces/interface[interface-name=%s]/address-families/address-family[af-name=%s][saf-name=%s]", data.ProcessId.ValueString(), data.InterfaceName.ValueString(), data.AfName.ValueString(), data.SafName.ValueString())
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data RouterISISInterfaceAddressFamily) toBody(ctx context.Context) string {
	body := "{}"
	if !data.AfName.IsNull() && !data.AfName.IsUnknown() {
		body, _ = sjson.Set(body, "af-name", data.AfName.ValueString())
	}
	if !data.SafName.IsNull() && !data.SafName.IsUnknown() {
		body, _ = sjson.Set(body, "saf-name", data.SafName.ValueString())
	}
	if !data.FastReroutePerPrefix.IsNull() && !data.FastReroutePerPrefix.IsUnknown() {
		if data.FastReroutePerPrefix.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.enable.per-prefix", map[string]string{})
		}
	}
	if !data.FastReroutePerLink.IsNull() && !data.FastReroutePerLink.IsUnknown() {
		if data.FastReroutePerLink.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.enable.per-link", map[string]string{})
		}
	}
	if !data.Tag.IsNull() && !data.Tag.IsUnknown() {
		body, _ = sjson.Set(body, "tag", strconv.FormatInt(data.Tag.ValueInt64(), 10))
	}
	if !data.AdvertisePrefixRoutePolicy.IsNull() && !data.AdvertisePrefixRoutePolicy.IsUnknown() {
		body, _ = sjson.Set(body, "advertise.prefix-advertisement.route-policy", data.AdvertisePrefixRoutePolicy.ValueString())
	}
	if !data.MetricDefault.IsNull() && !data.MetricDefault.IsUnknown() {
		body, _ = sjson.Set(body, "metric.default-metric", strconv.FormatInt(data.MetricDefault.ValueInt64(), 10))
	}
	if !data.MetricMaximum.IsNull() && !data.MetricMaximum.IsUnknown() {
		if data.MetricMaximum.ValueBool() {
			body, _ = sjson.Set(body, "metric.maximum", map[string]string{})
		}
	}
	if len(data.FastRerouteLevels) > 0 {
		body, _ = sjson.Set(body, "fast-reroute.enable-levels.enable-level", []interface{}{})
		for index, item := range data.FastRerouteLevels {
			if !item.LevelNumber.IsNull() && !item.LevelNumber.IsUnknown() {
				body, _ = sjson.Set(body, "fast-reroute.enable-levels.enable-level"+"."+strconv.Itoa(index)+"."+"level-number", strconv.FormatInt(item.LevelNumber.ValueInt64(), 10))
			}
			if !item.PerPrefix.IsNull() && !item.PerPrefix.IsUnknown() {
				if item.PerPrefix.ValueBool() {
					body, _ = sjson.Set(body, "fast-reroute.enable-levels.enable-level"+"."+strconv.Itoa(index)+"."+"per-prefix", map[string]string{})
				}
			}
			if !item.PerLink.IsNull() && !item.PerLink.IsUnknown() {
				if item.PerLink.ValueBool() {
					body, _ = sjson.Set(body, "fast-reroute.enable-levels.enable-level"+"."+strconv.Itoa(index)+"."+"per-link", map[string]string{})
				}
			}
		}
	}
	if len(data.AdjacencySidIndices) > 0 {
		body, _ = sjson.Set(body, "adjacency-sid.indices.index", []interface{}{})
		for index, item := range data.AdjacencySidIndices {
			if !item.IndexNumber.IsNull() && !item.IndexNumber.IsUnknown() {
				body, _ = sjson.Set(body, "adjacency-sid.indices.index"+"."+strconv.Itoa(index)+"."+"index-number", strconv.FormatInt(item.IndexNumber.ValueInt64(), 10))
			}
			if !item.Protected.IsNull() && !item.Protected.IsUnknown() {
				if item.Protected.ValueBool() {
					body, _ = sjson.Set(body, "adjacency-sid.indices.index"+"."+strconv.Itoa(index)+"."+"protected", map[string]string{})
				}
			}
		}
	}
	if len(data.AdjacencySidAbsolutes) > 0 {
		body, _ = sjson.Set(body, "adjacency-sid.absolutes.absolute", []interface{}{})
		for index, item := range data.AdjacencySidAbsolutes {
			if !item.AbsoluteNumber.IsNull() && !item.AbsoluteNumber.IsUnknown() {
				body, _ = sjson.Set(body, "adjacency-sid.absolutes.absolute"+"."+strconv.Itoa(index)+"."+"absolute-number", strconv.FormatInt(item.AbsoluteNumber.ValueInt64(), 10))
			}
			if !item.Protected.IsNull() && !item.Protected.IsUnknown() {
				if item.Protected.ValueBool() {
					body, _ = sjson.Set(body, "adjacency-sid.absolutes.absolute"+"."+strconv.Itoa(index)+"."+"protected", map[string]string{})
				}
			}
		}
	}
	if len(data.AdvertisePrefixRoutePolicyLevels) > 0 {
		body, _ = sjson.Set(body, "advertise.prefix-advertisement.route-policy-levels.route-policy-level", []interface{}{})
		for index, item := range data.AdvertisePrefixRoutePolicyLevels {
			if !item.LevelNumber.IsNull() && !item.LevelNumber.IsUnknown() {
				body, _ = sjson.Set(body, "advertise.prefix-advertisement.route-policy-levels.route-policy-level"+"."+strconv.Itoa(index)+"."+"level-number", strconv.FormatInt(item.LevelNumber.ValueInt64(), 10))
			}
			if !item.RoutePolicy.IsNull() && !item.RoutePolicy.IsUnknown() {
				body, _ = sjson.Set(body, "advertise.prefix-advertisement.route-policy-levels.route-policy-level"+"."+strconv.Itoa(index)+"."+"route-policy", item.RoutePolicy.ValueString())
			}
		}
	}
	if len(data.MetricLevels) > 0 {
		body, _ = sjson.Set(body, "metric-levels.metric-level", []interface{}{})
		for index, item := range data.MetricLevels {
			if !item.LevelNumber.IsNull() && !item.LevelNumber.IsUnknown() {
				body, _ = sjson.Set(body, "metric-levels.metric-level"+"."+strconv.Itoa(index)+"."+"level-number", strconv.FormatInt(item.LevelNumber.ValueInt64(), 10))
			}
			if !item.MetricDefault.IsNull() && !item.MetricDefault.IsUnknown() {
				body, _ = sjson.Set(body, "metric-levels.metric-level"+"."+strconv.Itoa(index)+"."+"metric-levels.metric-level.default-metric", strconv.FormatInt(item.MetricDefault.ValueInt64(), 10))
			}
			if !item.MetricMaximum.IsNull() && !item.MetricMaximum.IsUnknown() {
				if item.MetricMaximum.ValueBool() {
					body, _ = sjson.Set(body, "metric-levels.metric-level"+"."+strconv.Itoa(index)+"."+"metric-levels.metric-level.maximum", map[string]string{})
				}
			}
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *RouterISISInterfaceAddressFamily) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "fast-reroute.enable.per-prefix"); !data.FastReroutePerPrefix.IsNull() {
		if value.Exists() {
			data.FastReroutePerPrefix = types.BoolValue(true)
		} else {
			data.FastReroutePerPrefix = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerPrefix = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.enable.per-link"); !data.FastReroutePerLink.IsNull() {
		if value.Exists() {
			data.FastReroutePerLink = types.BoolValue(true)
		} else {
			data.FastReroutePerLink = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerLink = types.BoolNull()
	}
	for i := range data.FastRerouteLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.FastRerouteLevels[i].LevelNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "fast-reroute.enable-levels.enable-level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-number"); value.Exists() && !data.FastRerouteLevels[i].LevelNumber.IsNull() {
			data.FastRerouteLevels[i].LevelNumber = types.Int64Value(value.Int())
		} else {
			data.FastRerouteLevels[i].LevelNumber = types.Int64Null()
		}
		if value := r.Get("per-prefix"); !data.FastRerouteLevels[i].PerPrefix.IsNull() {
			if value.Exists() {
				data.FastRerouteLevels[i].PerPrefix = types.BoolValue(true)
			} else {
				data.FastRerouteLevels[i].PerPrefix = types.BoolValue(false)
			}
		} else {
			data.FastRerouteLevels[i].PerPrefix = types.BoolNull()
		}
		if value := r.Get("per-link"); !data.FastRerouteLevels[i].PerLink.IsNull() {
			if value.Exists() {
				data.FastRerouteLevels[i].PerLink = types.BoolValue(true)
			} else {
				data.FastRerouteLevels[i].PerLink = types.BoolValue(false)
			}
		} else {
			data.FastRerouteLevels[i].PerLink = types.BoolNull()
		}
	}
	if value := gjson.GetBytes(res, "tag"); value.Exists() && !data.Tag.IsNull() {
		data.Tag = types.Int64Value(value.Int())
	} else {
		data.Tag = types.Int64Null()
	}
	for i := range data.AdjacencySidIndices {
		keys := [...]string{"index-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdjacencySidIndices[i].IndexNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "adjacency-sid.indices.index").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("index-number"); value.Exists() && !data.AdjacencySidIndices[i].IndexNumber.IsNull() {
			data.AdjacencySidIndices[i].IndexNumber = types.Int64Value(value.Int())
		} else {
			data.AdjacencySidIndices[i].IndexNumber = types.Int64Null()
		}
		if value := r.Get("protected"); !data.AdjacencySidIndices[i].Protected.IsNull() {
			if value.Exists() {
				data.AdjacencySidIndices[i].Protected = types.BoolValue(true)
			} else {
				data.AdjacencySidIndices[i].Protected = types.BoolValue(false)
			}
		} else {
			data.AdjacencySidIndices[i].Protected = types.BoolNull()
		}
	}
	for i := range data.AdjacencySidAbsolutes {
		keys := [...]string{"absolute-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdjacencySidAbsolutes[i].AbsoluteNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "adjacency-sid.absolutes.absolute").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("absolute-number"); value.Exists() && !data.AdjacencySidAbsolutes[i].AbsoluteNumber.IsNull() {
			data.AdjacencySidAbsolutes[i].AbsoluteNumber = types.Int64Value(value.Int())
		} else {
			data.AdjacencySidAbsolutes[i].AbsoluteNumber = types.Int64Null()
		}
		if value := r.Get("protected"); !data.AdjacencySidAbsolutes[i].Protected.IsNull() {
			if value.Exists() {
				data.AdjacencySidAbsolutes[i].Protected = types.BoolValue(true)
			} else {
				data.AdjacencySidAbsolutes[i].Protected = types.BoolValue(false)
			}
		} else {
			data.AdjacencySidAbsolutes[i].Protected = types.BoolNull()
		}
	}
	if value := gjson.GetBytes(res, "advertise.prefix-advertisement.route-policy"); value.Exists() && !data.AdvertisePrefixRoutePolicy.IsNull() {
		data.AdvertisePrefixRoutePolicy = types.StringValue(value.String())
	} else {
		data.AdvertisePrefixRoutePolicy = types.StringNull()
	}
	for i := range data.AdvertisePrefixRoutePolicyLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdvertisePrefixRoutePolicyLevels[i].LevelNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "advertise.prefix-advertisement.route-policy-levels.route-policy-level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-number"); value.Exists() && !data.AdvertisePrefixRoutePolicyLevels[i].LevelNumber.IsNull() {
			data.AdvertisePrefixRoutePolicyLevels[i].LevelNumber = types.Int64Value(value.Int())
		} else {
			data.AdvertisePrefixRoutePolicyLevels[i].LevelNumber = types.Int64Null()
		}
		if value := r.Get("route-policy"); value.Exists() && !data.AdvertisePrefixRoutePolicyLevels[i].RoutePolicy.IsNull() {
			data.AdvertisePrefixRoutePolicyLevels[i].RoutePolicy = types.StringValue(value.String())
		} else {
			data.AdvertisePrefixRoutePolicyLevels[i].RoutePolicy = types.StringNull()
		}
	}
	if value := gjson.GetBytes(res, "metric.default-metric"); value.Exists() && !data.MetricDefault.IsNull() {
		data.MetricDefault = types.Int64Value(value.Int())
	} else {
		data.MetricDefault = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "metric.maximum"); !data.MetricMaximum.IsNull() {
		if value.Exists() {
			data.MetricMaximum = types.BoolValue(true)
		} else {
			data.MetricMaximum = types.BoolValue(false)
		}
	} else {
		data.MetricMaximum = types.BoolNull()
	}
	for i := range data.MetricLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.MetricLevels[i].LevelNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "metric-levels.metric-level").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level-number"); value.Exists() && !data.MetricLevels[i].LevelNumber.IsNull() {
			data.MetricLevels[i].LevelNumber = types.Int64Value(value.Int())
		} else {
			data.MetricLevels[i].LevelNumber = types.Int64Null()
		}
		if value := r.Get("metric-levels.metric-level.default-metric"); value.Exists() && !data.MetricLevels[i].MetricDefault.IsNull() {
			data.MetricLevels[i].MetricDefault = types.Int64Value(value.Int())
		} else {
			data.MetricLevels[i].MetricDefault = types.Int64Null()
		}
		if value := r.Get("metric-levels.metric-level.maximum"); !data.MetricLevels[i].MetricMaximum.IsNull() {
			if value.Exists() {
				data.MetricLevels[i].MetricMaximum = types.BoolValue(true)
			} else {
				data.MetricLevels[i].MetricMaximum = types.BoolValue(false)
			}
		} else {
			data.MetricLevels[i].MetricMaximum = types.BoolNull()
		}
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *RouterISISInterfaceAddressFamily) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "fast-reroute.enable.per-prefix"); value.Exists() {
		data.FastReroutePerPrefix = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefix = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.enable.per-link"); value.Exists() {
		data.FastReroutePerLink = types.BoolValue(true)
	} else {
		data.FastReroutePerLink = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.enable-levels.enable-level"); value.Exists() {
		data.FastRerouteLevels = make([]RouterISISInterfaceAddressFamilyFastRerouteLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyFastRerouteLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("per-prefix"); cValue.Exists() {
				item.PerPrefix = types.BoolValue(true)
			} else {
				item.PerPrefix = types.BoolValue(false)
			}
			if cValue := v.Get("per-link"); cValue.Exists() {
				item.PerLink = types.BoolValue(true)
			} else {
				item.PerLink = types.BoolValue(false)
			}
			data.FastRerouteLevels = append(data.FastRerouteLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "tag"); value.Exists() {
		data.Tag = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "adjacency-sid.indices.index"); value.Exists() {
		data.AdjacencySidIndices = make([]RouterISISInterfaceAddressFamilyAdjacencySidIndices, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyAdjacencySidIndices{}
			if cValue := v.Get("index-number"); cValue.Exists() {
				item.IndexNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("protected"); cValue.Exists() {
				item.Protected = types.BoolValue(true)
			} else {
				item.Protected = types.BoolValue(false)
			}
			data.AdjacencySidIndices = append(data.AdjacencySidIndices, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "adjacency-sid.absolutes.absolute"); value.Exists() {
		data.AdjacencySidAbsolutes = make([]RouterISISInterfaceAddressFamilyAdjacencySidAbsolutes, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyAdjacencySidAbsolutes{}
			if cValue := v.Get("absolute-number"); cValue.Exists() {
				item.AbsoluteNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("protected"); cValue.Exists() {
				item.Protected = types.BoolValue(true)
			} else {
				item.Protected = types.BoolValue(false)
			}
			data.AdjacencySidAbsolutes = append(data.AdjacencySidAbsolutes, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "advertise.prefix-advertisement.route-policy"); value.Exists() {
		data.AdvertisePrefixRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "advertise.prefix-advertisement.route-policy-levels.route-policy-level"); value.Exists() {
		data.AdvertisePrefixRoutePolicyLevels = make([]RouterISISInterfaceAddressFamilyAdvertisePrefixRoutePolicyLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyAdvertisePrefixRoutePolicyLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("route-policy"); cValue.Exists() {
				item.RoutePolicy = types.StringValue(cValue.String())
			}
			data.AdvertisePrefixRoutePolicyLevels = append(data.AdvertisePrefixRoutePolicyLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "metric.default-metric"); value.Exists() {
		data.MetricDefault = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "metric.maximum"); value.Exists() {
		data.MetricMaximum = types.BoolValue(true)
	} else {
		data.MetricMaximum = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "metric-levels.metric-level"); value.Exists() {
		data.MetricLevels = make([]RouterISISInterfaceAddressFamilyMetricLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyMetricLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("metric-levels.metric-level.default-metric"); cValue.Exists() {
				item.MetricDefault = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("metric-levels.metric-level.maximum"); cValue.Exists() {
				item.MetricMaximum = types.BoolValue(true)
			} else {
				item.MetricMaximum = types.BoolValue(false)
			}
			data.MetricLevels = append(data.MetricLevels, item)
			return true
		})
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *RouterISISInterfaceAddressFamilyData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "fast-reroute.enable.per-prefix"); value.Exists() {
		data.FastReroutePerPrefix = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefix = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.enable.per-link"); value.Exists() {
		data.FastReroutePerLink = types.BoolValue(true)
	} else {
		data.FastReroutePerLink = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.enable-levels.enable-level"); value.Exists() {
		data.FastRerouteLevels = make([]RouterISISInterfaceAddressFamilyFastRerouteLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyFastRerouteLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("per-prefix"); cValue.Exists() {
				item.PerPrefix = types.BoolValue(true)
			} else {
				item.PerPrefix = types.BoolValue(false)
			}
			if cValue := v.Get("per-link"); cValue.Exists() {
				item.PerLink = types.BoolValue(true)
			} else {
				item.PerLink = types.BoolValue(false)
			}
			data.FastRerouteLevels = append(data.FastRerouteLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "tag"); value.Exists() {
		data.Tag = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "adjacency-sid.indices.index"); value.Exists() {
		data.AdjacencySidIndices = make([]RouterISISInterfaceAddressFamilyAdjacencySidIndices, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyAdjacencySidIndices{}
			if cValue := v.Get("index-number"); cValue.Exists() {
				item.IndexNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("protected"); cValue.Exists() {
				item.Protected = types.BoolValue(true)
			} else {
				item.Protected = types.BoolValue(false)
			}
			data.AdjacencySidIndices = append(data.AdjacencySidIndices, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "adjacency-sid.absolutes.absolute"); value.Exists() {
		data.AdjacencySidAbsolutes = make([]RouterISISInterfaceAddressFamilyAdjacencySidAbsolutes, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyAdjacencySidAbsolutes{}
			if cValue := v.Get("absolute-number"); cValue.Exists() {
				item.AbsoluteNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("protected"); cValue.Exists() {
				item.Protected = types.BoolValue(true)
			} else {
				item.Protected = types.BoolValue(false)
			}
			data.AdjacencySidAbsolutes = append(data.AdjacencySidAbsolutes, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "advertise.prefix-advertisement.route-policy"); value.Exists() {
		data.AdvertisePrefixRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "advertise.prefix-advertisement.route-policy-levels.route-policy-level"); value.Exists() {
		data.AdvertisePrefixRoutePolicyLevels = make([]RouterISISInterfaceAddressFamilyAdvertisePrefixRoutePolicyLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyAdvertisePrefixRoutePolicyLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("route-policy"); cValue.Exists() {
				item.RoutePolicy = types.StringValue(cValue.String())
			}
			data.AdvertisePrefixRoutePolicyLevels = append(data.AdvertisePrefixRoutePolicyLevels, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "metric.default-metric"); value.Exists() {
		data.MetricDefault = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "metric.maximum"); value.Exists() {
		data.MetricMaximum = types.BoolValue(true)
	} else {
		data.MetricMaximum = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "metric-levels.metric-level"); value.Exists() {
		data.MetricLevels = make([]RouterISISInterfaceAddressFamilyMetricLevels, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterISISInterfaceAddressFamilyMetricLevels{}
			if cValue := v.Get("level-number"); cValue.Exists() {
				item.LevelNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("metric-levels.metric-level.default-metric"); cValue.Exists() {
				item.MetricDefault = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("metric-levels.metric-level.maximum"); cValue.Exists() {
				item.MetricMaximum = types.BoolValue(true)
			} else {
				item.MetricMaximum = types.BoolValue(false)
			}
			data.MetricLevels = append(data.MetricLevels, item)
			return true
		})
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *RouterISISInterfaceAddressFamily) getDeletedItems(ctx context.Context, state RouterISISInterfaceAddressFamily) []string {
	deletedItems := make([]string, 0)
	if !state.FastReroutePerPrefix.IsNull() && data.FastReroutePerPrefix.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/enable/per-prefix", state.getPath()))
	}
	if !state.FastReroutePerLink.IsNull() && data.FastReroutePerLink.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/enable/per-link", state.getPath()))
	}
	for i := range state.FastRerouteLevels {
		keys := [...]string{"level-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.FastRerouteLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.FastRerouteLevels[i].LevelNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.FastRerouteLevels {
			found = true
			if state.FastRerouteLevels[i].LevelNumber.ValueInt64() != data.FastRerouteLevels[j].LevelNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.FastRerouteLevels[i].PerPrefix.IsNull() && data.FastRerouteLevels[j].PerPrefix.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/enable-levels/enable-level%v/per-prefix", state.getPath(), keyString))
				}
				if !state.FastRerouteLevels[i].PerLink.IsNull() && data.FastRerouteLevels[j].PerLink.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/enable-levels/enable-level%v/per-link", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/enable-levels/enable-level%v", state.getPath(), keyString))
		}
	}
	if !state.Tag.IsNull() && data.Tag.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/tag", state.getPath()))
	}
	for i := range state.AdjacencySidIndices {
		keys := [...]string{"index-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AdjacencySidIndices[i].IndexNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.AdjacencySidIndices[i].IndexNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AdjacencySidIndices {
			found = true
			if state.AdjacencySidIndices[i].IndexNumber.ValueInt64() != data.AdjacencySidIndices[j].IndexNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.AdjacencySidIndices[i].Protected.IsNull() && data.AdjacencySidIndices[j].Protected.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/adjacency-sid/indices/index%v/protected", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/adjacency-sid/indices/index%v", state.getPath(), keyString))
		}
	}
	for i := range state.AdjacencySidAbsolutes {
		keys := [...]string{"absolute-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AdjacencySidAbsolutes[i].AbsoluteNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.AdjacencySidAbsolutes[i].AbsoluteNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AdjacencySidAbsolutes {
			found = true
			if state.AdjacencySidAbsolutes[i].AbsoluteNumber.ValueInt64() != data.AdjacencySidAbsolutes[j].AbsoluteNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.AdjacencySidAbsolutes[i].Protected.IsNull() && data.AdjacencySidAbsolutes[j].Protected.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/adjacency-sid/absolutes/absolute%v/protected", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/adjacency-sid/absolutes/absolute%v", state.getPath(), keyString))
		}
	}
	if !state.AdvertisePrefixRoutePolicy.IsNull() && data.AdvertisePrefixRoutePolicy.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/advertise/prefix-advertisement/route-policy", state.getPath()))
	}
	for i := range state.AdvertisePrefixRoutePolicyLevels {
		keys := [...]string{"level-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AdvertisePrefixRoutePolicyLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.AdvertisePrefixRoutePolicyLevels[i].LevelNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AdvertisePrefixRoutePolicyLevels {
			found = true
			if state.AdvertisePrefixRoutePolicyLevels[i].LevelNumber.ValueInt64() != data.AdvertisePrefixRoutePolicyLevels[j].LevelNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.AdvertisePrefixRoutePolicyLevels[i].RoutePolicy.IsNull() && data.AdvertisePrefixRoutePolicyLevels[j].RoutePolicy.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/advertise/prefix-advertisement/route-policy-levels/route-policy-level%v/route-policy", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/advertise/prefix-advertisement/route-policy-levels/route-policy-level%v", state.getPath(), keyString))
		}
	}
	if !state.MetricDefault.IsNull() && data.MetricDefault.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/metric", state.getPath()))
	}
	if !state.MetricMaximum.IsNull() && data.MetricMaximum.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/metric", state.getPath()))
	}
	for i := range state.MetricLevels {
		keys := [...]string{"level-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.MetricLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.MetricLevels[i].LevelNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.MetricLevels {
			found = true
			if state.MetricLevels[i].LevelNumber.ValueInt64() != data.MetricLevels[j].LevelNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.MetricLevels[i].MetricDefault.IsNull() && data.MetricLevels[j].MetricDefault.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-levels/metric-level%v/metric-levels/metric-level", state.getPath(), keyString))
				}
				if !state.MetricLevels[i].MetricMaximum.IsNull() && data.MetricLevels[j].MetricMaximum.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-levels/metric-level%v/metric-levels/metric-level", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/metric-levels/metric-level%v", state.getPath(), keyString))
		}
	}
	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *RouterISISInterfaceAddressFamily) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.FastReroutePerPrefix.IsNull() && !data.FastReroutePerPrefix.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/enable/per-prefix", data.getPath()))
	}
	if !data.FastReroutePerLink.IsNull() && !data.FastReroutePerLink.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/enable/per-link", data.getPath()))
	}
	for i := range data.FastRerouteLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.FastRerouteLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.FastRerouteLevels[i].PerPrefix.IsNull() && !data.FastRerouteLevels[i].PerPrefix.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/enable-levels/enable-level%v/per-prefix", data.getPath(), keyString))
		}
		if !data.FastRerouteLevels[i].PerLink.IsNull() && !data.FastRerouteLevels[i].PerLink.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/enable-levels/enable-level%v/per-link", data.getPath(), keyString))
		}
	}
	for i := range data.AdjacencySidIndices {
		keys := [...]string{"index-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdjacencySidIndices[i].IndexNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.AdjacencySidIndices[i].Protected.IsNull() && !data.AdjacencySidIndices[i].Protected.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/adjacency-sid/indices/index%v/protected", data.getPath(), keyString))
		}
	}
	for i := range data.AdjacencySidAbsolutes {
		keys := [...]string{"absolute-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdjacencySidAbsolutes[i].AbsoluteNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.AdjacencySidAbsolutes[i].Protected.IsNull() && !data.AdjacencySidAbsolutes[i].Protected.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/adjacency-sid/absolutes/absolute%v/protected", data.getPath(), keyString))
		}
	}
	for i := range data.AdvertisePrefixRoutePolicyLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdvertisePrefixRoutePolicyLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	if !data.MetricMaximum.IsNull() && !data.MetricMaximum.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric", data.getPath()))
	}
	for i := range data.MetricLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.MetricLevels[i].LevelNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.MetricLevels[i].MetricMaximum.IsNull() && !data.MetricLevels[i].MetricMaximum.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric-levels/metric-level%v/metric-levels/metric-level", data.getPath(), keyString))
		}
	}
	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *RouterISISInterfaceAddressFamily) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.FastReroutePerPrefix.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/enable/per-prefix", data.getPath()))
	}
	if !data.FastReroutePerLink.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/enable/per-link", data.getPath()))
	}
	for i := range data.FastRerouteLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.FastRerouteLevels[i].LevelNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/enable-levels/enable-level%v", data.getPath(), keyString))
	}
	if !data.Tag.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/tag", data.getPath()))
	}
	for i := range data.AdjacencySidIndices {
		keys := [...]string{"index-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdjacencySidIndices[i].IndexNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/adjacency-sid/indices/index%v", data.getPath(), keyString))
	}
	for i := range data.AdjacencySidAbsolutes {
		keys := [...]string{"absolute-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdjacencySidAbsolutes[i].AbsoluteNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/adjacency-sid/absolutes/absolute%v", data.getPath(), keyString))
	}
	if !data.AdvertisePrefixRoutePolicy.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/advertise/prefix-advertisement/route-policy", data.getPath()))
	}
	for i := range data.AdvertisePrefixRoutePolicyLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.AdvertisePrefixRoutePolicyLevels[i].LevelNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/advertise/prefix-advertisement/route-policy-levels/route-policy-level%v", data.getPath(), keyString))
	}
	if !data.MetricDefault.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/metric", data.getPath()))
	}
	if !data.MetricMaximum.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/metric", data.getPath()))
	}
	for i := range data.MetricLevels {
		keys := [...]string{"level-number"}
		keyValues := [...]string{strconv.FormatInt(data.MetricLevels[i].LevelNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/metric-levels/metric-level%v", data.getPath(), keyString))
	}
	return deletePaths
}

// End of section. //template:end getDeletePaths
