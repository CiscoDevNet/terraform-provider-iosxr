// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterOSPFAreaInterface struct {
	Device                   types.String `tfsdk:"device"`
	Id                       types.String `tfsdk:"id"`
	ProcessName              types.String `tfsdk:"process_name"`
	AreaId                   types.String `tfsdk:"area_id"`
	InterfaceName            types.String `tfsdk:"interface_name"`
	NetworkBroadcast         types.Bool   `tfsdk:"network_broadcast"`
	NetworkNonBroadcast      types.Bool   `tfsdk:"network_non_broadcast"`
	NetworkPointToPoint      types.Bool   `tfsdk:"network_point_to_point"`
	NetworkPointToMultipoint types.Bool   `tfsdk:"network_point_to_multipoint"`
	Cost                     types.Int64  `tfsdk:"cost"`
	Priority                 types.Int64  `tfsdk:"priority"`
	PassiveEnable            types.Bool   `tfsdk:"passive_enable"`
	PassiveDisable           types.Bool   `tfsdk:"passive_disable"`
}

func (data RouterOSPFAreaInterface) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-ospf-cfg:/router/ospf/processes/process[process-name=%s]/areas/area[area-id=%s]/interfaces/interface[interface-name=%s]", data.ProcessName.Value, data.AreaId.Value, data.InterfaceName.Value)
}

func (data RouterOSPFAreaInterface) toBody() string {
	body := "{}"
	if !data.NetworkBroadcast.Null && !data.NetworkBroadcast.Unknown {
		if data.NetworkBroadcast.Value {
			body, _ = sjson.Set(body, "network.broadcast", map[string]string{})
		}
	}
	if !data.NetworkNonBroadcast.Null && !data.NetworkNonBroadcast.Unknown {
		if data.NetworkNonBroadcast.Value {
			body, _ = sjson.Set(body, "network.non-broadcast", map[string]string{})
		}
	}
	if !data.NetworkPointToPoint.Null && !data.NetworkPointToPoint.Unknown {
		if data.NetworkPointToPoint.Value {
			body, _ = sjson.Set(body, "network.point-to-point", map[string]string{})
		}
	}
	if !data.NetworkPointToMultipoint.Null && !data.NetworkPointToMultipoint.Unknown {
		if data.NetworkPointToMultipoint.Value {
			body, _ = sjson.Set(body, "network.point-to-multipoint", map[string]string{})
		}
	}
	if !data.Cost.Null && !data.Cost.Unknown {
		body, _ = sjson.Set(body, "cost", strconv.FormatInt(data.Cost.Value, 10))
	}
	if !data.Priority.Null && !data.Priority.Unknown {
		body, _ = sjson.Set(body, "priority", strconv.FormatInt(data.Priority.Value, 10))
	}
	if !data.PassiveEnable.Null && !data.PassiveEnable.Unknown {
		if data.PassiveEnable.Value {
			body, _ = sjson.Set(body, "passive.enable", map[string]string{})
		}
	}
	if !data.PassiveDisable.Null && !data.PassiveDisable.Unknown {
		if data.PassiveDisable.Value {
			body, _ = sjson.Set(body, "passive.disable", map[string]string{})
		}
	}
	return body
}

func (data *RouterOSPFAreaInterface) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "network.broadcast"); value.Exists() {
		data.NetworkBroadcast.Value = true
	} else {
		data.NetworkBroadcast.Value = false
	}
	if value := gjson.GetBytes(res, "network.non-broadcast"); value.Exists() {
		data.NetworkNonBroadcast.Value = true
	} else {
		data.NetworkNonBroadcast.Value = false
	}
	if value := gjson.GetBytes(res, "network.point-to-point"); value.Exists() {
		data.NetworkPointToPoint.Value = true
	} else {
		data.NetworkPointToPoint.Value = false
	}
	if value := gjson.GetBytes(res, "network.point-to-multipoint"); value.Exists() {
		data.NetworkPointToMultipoint.Value = true
	} else {
		data.NetworkPointToMultipoint.Value = false
	}
	if value := gjson.GetBytes(res, "cost"); value.Exists() {
		data.Cost.Value = value.Int()
	} else {
		data.Cost.Null = true
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() {
		data.Priority.Value = value.Int()
	} else {
		data.Priority.Null = true
	}
	if value := gjson.GetBytes(res, "passive.enable"); value.Exists() {
		data.PassiveEnable.Value = true
	} else {
		data.PassiveEnable.Value = false
	}
	if value := gjson.GetBytes(res, "passive.disable"); value.Exists() {
		data.PassiveDisable.Value = true
	} else {
		data.PassiveDisable.Value = false
	}
}

func (data *RouterOSPFAreaInterface) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "network.broadcast"); value.Exists() {
		data.NetworkBroadcast.Value = true
		data.NetworkBroadcast.Null = false
	} else {
		data.NetworkBroadcast.Value = false
		data.NetworkBroadcast.Null = false
	}
	if value := gjson.GetBytes(res, "network.non-broadcast"); value.Exists() {
		data.NetworkNonBroadcast.Value = true
		data.NetworkNonBroadcast.Null = false
	} else {
		data.NetworkNonBroadcast.Value = false
		data.NetworkNonBroadcast.Null = false
	}
	if value := gjson.GetBytes(res, "network.point-to-point"); value.Exists() {
		data.NetworkPointToPoint.Value = true
		data.NetworkPointToPoint.Null = false
	} else {
		data.NetworkPointToPoint.Value = false
		data.NetworkPointToPoint.Null = false
	}
	if value := gjson.GetBytes(res, "network.point-to-multipoint"); value.Exists() {
		data.NetworkPointToMultipoint.Value = true
		data.NetworkPointToMultipoint.Null = false
	} else {
		data.NetworkPointToMultipoint.Value = false
		data.NetworkPointToMultipoint.Null = false
	}
	if value := gjson.GetBytes(res, "cost"); value.Exists() {
		data.Cost.Value = value.Int()
		data.Cost.Null = false
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() {
		data.Priority.Value = value.Int()
		data.Priority.Null = false
	}
	if value := gjson.GetBytes(res, "passive.enable"); value.Exists() {
		data.PassiveEnable.Value = true
		data.PassiveEnable.Null = false
	} else {
		data.PassiveEnable.Value = false
		data.PassiveEnable.Null = false
	}
	if value := gjson.GetBytes(res, "passive.disable"); value.Exists() {
		data.PassiveDisable.Value = true
		data.PassiveDisable.Null = false
	} else {
		data.PassiveDisable.Value = false
		data.PassiveDisable.Null = false
	}
}

func (data *RouterOSPFAreaInterface) fromPlan(plan RouterOSPFAreaInterface) {
	data.Device = plan.Device
	data.ProcessName.Value = plan.ProcessName.Value
	data.AreaId.Value = plan.AreaId.Value
	data.InterfaceName.Value = plan.InterfaceName.Value
}

func (data *RouterOSPFAreaInterface) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.ProcessName.Unknown {
		data.ProcessName.Unknown = false
		data.ProcessName.Null = true
	}
	if data.AreaId.Unknown {
		data.AreaId.Unknown = false
		data.AreaId.Null = true
	}
	if data.InterfaceName.Unknown {
		data.InterfaceName.Unknown = false
		data.InterfaceName.Null = true
	}
	if data.NetworkBroadcast.Unknown {
		data.NetworkBroadcast.Unknown = false
		data.NetworkBroadcast.Null = true
	}
	if data.NetworkNonBroadcast.Unknown {
		data.NetworkNonBroadcast.Unknown = false
		data.NetworkNonBroadcast.Null = true
	}
	if data.NetworkPointToPoint.Unknown {
		data.NetworkPointToPoint.Unknown = false
		data.NetworkPointToPoint.Null = true
	}
	if data.NetworkPointToMultipoint.Unknown {
		data.NetworkPointToMultipoint.Unknown = false
		data.NetworkPointToMultipoint.Null = true
	}
	if data.Cost.Unknown {
		data.Cost.Unknown = false
		data.Cost.Null = true
	}
	if data.Priority.Unknown {
		data.Priority.Unknown = false
		data.Priority.Null = true
	}
	if data.PassiveEnable.Unknown {
		data.PassiveEnable.Unknown = false
		data.PassiveEnable.Null = true
	}
	if data.PassiveDisable.Unknown {
		data.PassiveDisable.Unknown = false
		data.PassiveDisable.Null = true
	}
}

func (data *RouterOSPFAreaInterface) getDeletedListItems(state RouterOSPFAreaInterface) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *RouterOSPFAreaInterface) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
