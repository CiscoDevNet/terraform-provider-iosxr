// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterOSPFAreaInterface struct {
	Device                                       types.String                                 `tfsdk:"device"`
	Id                                           types.String                                 `tfsdk:"id"`
	DeleteMode                                   types.String                                 `tfsdk:"delete_mode"`
	ProcessName                                  types.String                                 `tfsdk:"process_name"`
	AreaId                                       types.String                                 `tfsdk:"area_id"`
	InterfaceName                                types.String                                 `tfsdk:"interface_name"`
	NetworkBroadcast                             types.Bool                                   `tfsdk:"network_broadcast"`
	NetworkNonBroadcast                          types.Bool                                   `tfsdk:"network_non_broadcast"`
	NetworkPointToPoint                          types.Bool                                   `tfsdk:"network_point_to_point"`
	NetworkPointToMultipoint                     types.Bool                                   `tfsdk:"network_point_to_multipoint"`
	Cost                                         types.Int64                                  `tfsdk:"cost"`
	Priority                                     types.Int64                                  `tfsdk:"priority"`
	PassiveEnable                                types.Bool                                   `tfsdk:"passive_enable"`
	PassiveDisable                               types.Bool                                   `tfsdk:"passive_disable"`
	FastReroutePerPrefixTiLfa                    types.Bool                                   `tfsdk:"fast_reroute_per_prefix_ti_lfa"`
	FastReroutePerPrefixTiebreakerSrlgDisjoint   types.Int64                                  `tfsdk:"fast_reroute_per_prefix_tiebreaker_srlg_disjoint"`
	FastReroutePerPrefixTiebreakerNodeProtecting types.Int64                                  `tfsdk:"fast_reroute_per_prefix_tiebreaker_node_protecting"`
	PrefixSidStrictSpfIndex                      types.Int64                                  `tfsdk:"prefix_sid_strict_spf_index"`
	PrefixSidAlgorithms                          []RouterOSPFAreaInterfacePrefixSidAlgorithms `tfsdk:"prefix_sid_algorithms"`
}

type RouterOSPFAreaInterfaceData struct {
	Device                                       types.String                                 `tfsdk:"device"`
	Id                                           types.String                                 `tfsdk:"id"`
	ProcessName                                  types.String                                 `tfsdk:"process_name"`
	AreaId                                       types.String                                 `tfsdk:"area_id"`
	InterfaceName                                types.String                                 `tfsdk:"interface_name"`
	NetworkBroadcast                             types.Bool                                   `tfsdk:"network_broadcast"`
	NetworkNonBroadcast                          types.Bool                                   `tfsdk:"network_non_broadcast"`
	NetworkPointToPoint                          types.Bool                                   `tfsdk:"network_point_to_point"`
	NetworkPointToMultipoint                     types.Bool                                   `tfsdk:"network_point_to_multipoint"`
	Cost                                         types.Int64                                  `tfsdk:"cost"`
	Priority                                     types.Int64                                  `tfsdk:"priority"`
	PassiveEnable                                types.Bool                                   `tfsdk:"passive_enable"`
	PassiveDisable                               types.Bool                                   `tfsdk:"passive_disable"`
	FastReroutePerPrefixTiLfa                    types.Bool                                   `tfsdk:"fast_reroute_per_prefix_ti_lfa"`
	FastReroutePerPrefixTiebreakerSrlgDisjoint   types.Int64                                  `tfsdk:"fast_reroute_per_prefix_tiebreaker_srlg_disjoint"`
	FastReroutePerPrefixTiebreakerNodeProtecting types.Int64                                  `tfsdk:"fast_reroute_per_prefix_tiebreaker_node_protecting"`
	PrefixSidStrictSpfIndex                      types.Int64                                  `tfsdk:"prefix_sid_strict_spf_index"`
	PrefixSidAlgorithms                          []RouterOSPFAreaInterfacePrefixSidAlgorithms `tfsdk:"prefix_sid_algorithms"`
}
type RouterOSPFAreaInterfacePrefixSidAlgorithms struct {
	AlgorithmNumber      types.Int64 `tfsdk:"algorithm_number"`
	IndexSidIndex        types.Int64 `tfsdk:"index_sid_index"`
	IndexExplicitNull    types.Bool  `tfsdk:"index_explicit_null"`
	IndexNFlagClear      types.Bool  `tfsdk:"index_n_flag_clear"`
	AbsoluteSidLabel     types.Int64 `tfsdk:"absolute_sid_label"`
	AbsoluteExplicitNull types.Bool  `tfsdk:"absolute_explicit_null"`
	AbsoluteNFlagClear   types.Bool  `tfsdk:"absolute_n_flag_clear"`
}

func (data RouterOSPFAreaInterface) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-ospf-cfg:/router/ospf/processes/process[process-name=%s]/areas/area[area-id=%s]/interfaces/interface[interface-name=%s]", data.ProcessName.ValueString(), data.AreaId.ValueString(), data.InterfaceName.ValueString())
}

func (data RouterOSPFAreaInterfaceData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-ospf-cfg:/router/ospf/processes/process[process-name=%s]/areas/area[area-id=%s]/interfaces/interface[interface-name=%s]", data.ProcessName.ValueString(), data.AreaId.ValueString(), data.InterfaceName.ValueString())
}

func (data RouterOSPFAreaInterface) toBody(ctx context.Context) string {
	body := "{}"
	if !data.InterfaceName.IsNull() && !data.InterfaceName.IsUnknown() {
		body, _ = sjson.Set(body, "interface-name", data.InterfaceName.ValueString())
	}
	if !data.NetworkBroadcast.IsNull() && !data.NetworkBroadcast.IsUnknown() {
		if data.NetworkBroadcast.ValueBool() {
			body, _ = sjson.Set(body, "network.broadcast", map[string]string{})
		}
	}
	if !data.NetworkNonBroadcast.IsNull() && !data.NetworkNonBroadcast.IsUnknown() {
		if data.NetworkNonBroadcast.ValueBool() {
			body, _ = sjson.Set(body, "network.non-broadcast", map[string]string{})
		}
	}
	if !data.NetworkPointToPoint.IsNull() && !data.NetworkPointToPoint.IsUnknown() {
		if data.NetworkPointToPoint.ValueBool() {
			body, _ = sjson.Set(body, "network.point-to-point", map[string]string{})
		}
	}
	if !data.NetworkPointToMultipoint.IsNull() && !data.NetworkPointToMultipoint.IsUnknown() {
		if data.NetworkPointToMultipoint.ValueBool() {
			body, _ = sjson.Set(body, "network.point-to-multipoint", map[string]string{})
		}
	}
	if !data.Cost.IsNull() && !data.Cost.IsUnknown() {
		body, _ = sjson.Set(body, "cost", strconv.FormatInt(data.Cost.ValueInt64(), 10))
	}
	if !data.Priority.IsNull() && !data.Priority.IsUnknown() {
		body, _ = sjson.Set(body, "priority", strconv.FormatInt(data.Priority.ValueInt64(), 10))
	}
	if !data.PassiveEnable.IsNull() && !data.PassiveEnable.IsUnknown() {
		if data.PassiveEnable.ValueBool() {
			body, _ = sjson.Set(body, "passive.enable", map[string]string{})
		}
	}
	if !data.PassiveDisable.IsNull() && !data.PassiveDisable.IsUnknown() {
		if data.PassiveDisable.ValueBool() {
			body, _ = sjson.Set(body, "passive.disable", map[string]string{})
		}
	}
	if !data.FastReroutePerPrefixTiLfa.IsNull() && !data.FastReroutePerPrefixTiLfa.IsUnknown() {
		if data.FastReroutePerPrefixTiLfa.ValueBool() {
			body, _ = sjson.Set(body, "fast-reroute.per-prefix.ti-lfa.enable", map[string]string{})
		}
	}
	if !data.FastReroutePerPrefixTiebreakerSrlgDisjoint.IsNull() && !data.FastReroutePerPrefixTiebreakerSrlgDisjoint.IsUnknown() {
		body, _ = sjson.Set(body, "fast-reroute.per-prefix.tiebreaker.srlg-disjoint.index", strconv.FormatInt(data.FastReroutePerPrefixTiebreakerSrlgDisjoint.ValueInt64(), 10))
	}
	if !data.FastReroutePerPrefixTiebreakerNodeProtecting.IsNull() && !data.FastReroutePerPrefixTiebreakerNodeProtecting.IsUnknown() {
		body, _ = sjson.Set(body, "fast-reroute.per-prefix.tiebreaker.node-protecting.index", strconv.FormatInt(data.FastReroutePerPrefixTiebreakerNodeProtecting.ValueInt64(), 10))
	}
	if !data.PrefixSidStrictSpfIndex.IsNull() && !data.PrefixSidStrictSpfIndex.IsUnknown() {
		body, _ = sjson.Set(body, "prefix-sid.strict-spf.index.sid-index", strconv.FormatInt(data.PrefixSidStrictSpfIndex.ValueInt64(), 10))
	}
	if len(data.PrefixSidAlgorithms) > 0 {
		body, _ = sjson.Set(body, "prefix-sid.algorithms.algorithm", []interface{}{})
		for index, item := range data.PrefixSidAlgorithms {
			if !item.AlgorithmNumber.IsNull() && !item.AlgorithmNumber.IsUnknown() {
				body, _ = sjson.Set(body, "prefix-sid.algorithms.algorithm"+"."+strconv.Itoa(index)+"."+"algorithm-number", strconv.FormatInt(item.AlgorithmNumber.ValueInt64(), 10))
			}
			if !item.IndexSidIndex.IsNull() && !item.IndexSidIndex.IsUnknown() {
				body, _ = sjson.Set(body, "prefix-sid.algorithms.algorithm"+"."+strconv.Itoa(index)+"."+"index.sid-index", strconv.FormatInt(item.IndexSidIndex.ValueInt64(), 10))
			}
			if !item.IndexExplicitNull.IsNull() && !item.IndexExplicitNull.IsUnknown() {
				if item.IndexExplicitNull.ValueBool() {
					body, _ = sjson.Set(body, "prefix-sid.algorithms.algorithm"+"."+strconv.Itoa(index)+"."+"index.explicit-null", map[string]string{})
				}
			}
			if !item.IndexNFlagClear.IsNull() && !item.IndexNFlagClear.IsUnknown() {
				if item.IndexNFlagClear.ValueBool() {
					body, _ = sjson.Set(body, "prefix-sid.algorithms.algorithm"+"."+strconv.Itoa(index)+"."+"index.n-flag-clear", map[string]string{})
				}
			}
			if !item.AbsoluteSidLabel.IsNull() && !item.AbsoluteSidLabel.IsUnknown() {
				body, _ = sjson.Set(body, "prefix-sid.algorithms.algorithm"+"."+strconv.Itoa(index)+"."+"absolute.sid-label", strconv.FormatInt(item.AbsoluteSidLabel.ValueInt64(), 10))
			}
			if !item.AbsoluteExplicitNull.IsNull() && !item.AbsoluteExplicitNull.IsUnknown() {
				if item.AbsoluteExplicitNull.ValueBool() {
					body, _ = sjson.Set(body, "prefix-sid.algorithms.algorithm"+"."+strconv.Itoa(index)+"."+"absolute.explicit-null", map[string]string{})
				}
			}
			if !item.AbsoluteNFlagClear.IsNull() && !item.AbsoluteNFlagClear.IsUnknown() {
				if item.AbsoluteNFlagClear.ValueBool() {
					body, _ = sjson.Set(body, "prefix-sid.algorithms.algorithm"+"."+strconv.Itoa(index)+"."+"absolute.n-flag-clear", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *RouterOSPFAreaInterface) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "network.broadcast"); !data.NetworkBroadcast.IsNull() {
		if value.Exists() {
			data.NetworkBroadcast = types.BoolValue(true)
		} else {
			data.NetworkBroadcast = types.BoolValue(false)
		}
	} else {
		data.NetworkBroadcast = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "network.non-broadcast"); !data.NetworkNonBroadcast.IsNull() {
		if value.Exists() {
			data.NetworkNonBroadcast = types.BoolValue(true)
		} else {
			data.NetworkNonBroadcast = types.BoolValue(false)
		}
	} else {
		data.NetworkNonBroadcast = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "network.point-to-point"); !data.NetworkPointToPoint.IsNull() {
		if value.Exists() {
			data.NetworkPointToPoint = types.BoolValue(true)
		} else {
			data.NetworkPointToPoint = types.BoolValue(false)
		}
	} else {
		data.NetworkPointToPoint = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "network.point-to-multipoint"); !data.NetworkPointToMultipoint.IsNull() {
		if value.Exists() {
			data.NetworkPointToMultipoint = types.BoolValue(true)
		} else {
			data.NetworkPointToMultipoint = types.BoolValue(false)
		}
	} else {
		data.NetworkPointToMultipoint = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "cost"); value.Exists() && !data.Cost.IsNull() {
		data.Cost = types.Int64Value(value.Int())
	} else {
		data.Cost = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() && !data.Priority.IsNull() {
		data.Priority = types.Int64Value(value.Int())
	} else {
		data.Priority = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "passive.enable"); !data.PassiveEnable.IsNull() {
		if value.Exists() {
			data.PassiveEnable = types.BoolValue(true)
		} else {
			data.PassiveEnable = types.BoolValue(false)
		}
	} else {
		data.PassiveEnable = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "passive.disable"); !data.PassiveDisable.IsNull() {
		if value.Exists() {
			data.PassiveDisable = types.BoolValue(true)
		} else {
			data.PassiveDisable = types.BoolValue(false)
		}
	} else {
		data.PassiveDisable = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.ti-lfa.enable"); !data.FastReroutePerPrefixTiLfa.IsNull() {
		if value.Exists() {
			data.FastReroutePerPrefixTiLfa = types.BoolValue(true)
		} else {
			data.FastReroutePerPrefixTiLfa = types.BoolValue(false)
		}
	} else {
		data.FastReroutePerPrefixTiLfa = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.tiebreaker.srlg-disjoint.index"); value.Exists() && !data.FastReroutePerPrefixTiebreakerSrlgDisjoint.IsNull() {
		data.FastReroutePerPrefixTiebreakerSrlgDisjoint = types.Int64Value(value.Int())
	} else {
		data.FastReroutePerPrefixTiebreakerSrlgDisjoint = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.tiebreaker.node-protecting.index"); value.Exists() && !data.FastReroutePerPrefixTiebreakerNodeProtecting.IsNull() {
		data.FastReroutePerPrefixTiebreakerNodeProtecting = types.Int64Value(value.Int())
	} else {
		data.FastReroutePerPrefixTiebreakerNodeProtecting = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "prefix-sid.strict-spf.index.sid-index"); value.Exists() && !data.PrefixSidStrictSpfIndex.IsNull() {
		data.PrefixSidStrictSpfIndex = types.Int64Value(value.Int())
	} else {
		data.PrefixSidStrictSpfIndex = types.Int64Null()
	}
	for i := range data.PrefixSidAlgorithms {
		keys := [...]string{"algorithm-number"}
		keyValues := [...]string{strconv.FormatInt(data.PrefixSidAlgorithms[i].AlgorithmNumber.ValueInt64(), 10)}

		var r gjson.Result
		gjson.GetBytes(res, "prefix-sid.algorithms.algorithm").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("algorithm-number"); value.Exists() && !data.PrefixSidAlgorithms[i].AlgorithmNumber.IsNull() {
			data.PrefixSidAlgorithms[i].AlgorithmNumber = types.Int64Value(value.Int())
		} else {
			data.PrefixSidAlgorithms[i].AlgorithmNumber = types.Int64Null()
		}
		if value := r.Get("index.sid-index"); value.Exists() && !data.PrefixSidAlgorithms[i].IndexSidIndex.IsNull() {
			data.PrefixSidAlgorithms[i].IndexSidIndex = types.Int64Value(value.Int())
		} else {
			data.PrefixSidAlgorithms[i].IndexSidIndex = types.Int64Null()
		}
		if value := r.Get("index.explicit-null"); !data.PrefixSidAlgorithms[i].IndexExplicitNull.IsNull() {
			if value.Exists() {
				data.PrefixSidAlgorithms[i].IndexExplicitNull = types.BoolValue(true)
			} else {
				data.PrefixSidAlgorithms[i].IndexExplicitNull = types.BoolValue(false)
			}
		} else {
			data.PrefixSidAlgorithms[i].IndexExplicitNull = types.BoolNull()
		}
		if value := r.Get("index.n-flag-clear"); !data.PrefixSidAlgorithms[i].IndexNFlagClear.IsNull() {
			if value.Exists() {
				data.PrefixSidAlgorithms[i].IndexNFlagClear = types.BoolValue(true)
			} else {
				data.PrefixSidAlgorithms[i].IndexNFlagClear = types.BoolValue(false)
			}
		} else {
			data.PrefixSidAlgorithms[i].IndexNFlagClear = types.BoolNull()
		}
		if value := r.Get("absolute.sid-label"); value.Exists() && !data.PrefixSidAlgorithms[i].AbsoluteSidLabel.IsNull() {
			data.PrefixSidAlgorithms[i].AbsoluteSidLabel = types.Int64Value(value.Int())
		} else {
			data.PrefixSidAlgorithms[i].AbsoluteSidLabel = types.Int64Null()
		}
		if value := r.Get("absolute.explicit-null"); !data.PrefixSidAlgorithms[i].AbsoluteExplicitNull.IsNull() {
			if value.Exists() {
				data.PrefixSidAlgorithms[i].AbsoluteExplicitNull = types.BoolValue(true)
			} else {
				data.PrefixSidAlgorithms[i].AbsoluteExplicitNull = types.BoolValue(false)
			}
		} else {
			data.PrefixSidAlgorithms[i].AbsoluteExplicitNull = types.BoolNull()
		}
		if value := r.Get("absolute.n-flag-clear"); !data.PrefixSidAlgorithms[i].AbsoluteNFlagClear.IsNull() {
			if value.Exists() {
				data.PrefixSidAlgorithms[i].AbsoluteNFlagClear = types.BoolValue(true)
			} else {
				data.PrefixSidAlgorithms[i].AbsoluteNFlagClear = types.BoolValue(false)
			}
		} else {
			data.PrefixSidAlgorithms[i].AbsoluteNFlagClear = types.BoolNull()
		}
	}
}

func (data *RouterOSPFAreaInterface) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "network.broadcast"); value.Exists() {
		data.NetworkBroadcast = types.BoolValue(true)
	} else {
		data.NetworkBroadcast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "network.non-broadcast"); value.Exists() {
		data.NetworkNonBroadcast = types.BoolValue(true)
	} else {
		data.NetworkNonBroadcast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "network.point-to-point"); value.Exists() {
		data.NetworkPointToPoint = types.BoolValue(true)
	} else {
		data.NetworkPointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "network.point-to-multipoint"); value.Exists() {
		data.NetworkPointToMultipoint = types.BoolValue(true)
	} else {
		data.NetworkPointToMultipoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "cost"); value.Exists() {
		data.Cost = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() {
		data.Priority = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "passive.enable"); value.Exists() {
		data.PassiveEnable = types.BoolValue(true)
	} else {
		data.PassiveEnable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "passive.disable"); value.Exists() {
		data.PassiveDisable = types.BoolValue(true)
	} else {
		data.PassiveDisable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.ti-lfa.enable"); value.Exists() {
		data.FastReroutePerPrefixTiLfa = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefixTiLfa = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.tiebreaker.srlg-disjoint.index"); value.Exists() {
		data.FastReroutePerPrefixTiebreakerSrlgDisjoint = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.tiebreaker.node-protecting.index"); value.Exists() {
		data.FastReroutePerPrefixTiebreakerNodeProtecting = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "prefix-sid.strict-spf.index.sid-index"); value.Exists() {
		data.PrefixSidStrictSpfIndex = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "prefix-sid.algorithms.algorithm"); value.Exists() {
		data.PrefixSidAlgorithms = make([]RouterOSPFAreaInterfacePrefixSidAlgorithms, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterOSPFAreaInterfacePrefixSidAlgorithms{}
			if cValue := v.Get("algorithm-number"); cValue.Exists() {
				item.AlgorithmNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("index.sid-index"); cValue.Exists() {
				item.IndexSidIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("index.explicit-null"); cValue.Exists() {
				item.IndexExplicitNull = types.BoolValue(true)
			} else {
				item.IndexExplicitNull = types.BoolValue(false)
			}
			if cValue := v.Get("index.n-flag-clear"); cValue.Exists() {
				item.IndexNFlagClear = types.BoolValue(true)
			} else {
				item.IndexNFlagClear = types.BoolValue(false)
			}
			if cValue := v.Get("absolute.sid-label"); cValue.Exists() {
				item.AbsoluteSidLabel = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("absolute.explicit-null"); cValue.Exists() {
				item.AbsoluteExplicitNull = types.BoolValue(true)
			} else {
				item.AbsoluteExplicitNull = types.BoolValue(false)
			}
			if cValue := v.Get("absolute.n-flag-clear"); cValue.Exists() {
				item.AbsoluteNFlagClear = types.BoolValue(true)
			} else {
				item.AbsoluteNFlagClear = types.BoolValue(false)
			}
			data.PrefixSidAlgorithms = append(data.PrefixSidAlgorithms, item)
			return true
		})
	}
}

func (data *RouterOSPFAreaInterfaceData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "network.broadcast"); value.Exists() {
		data.NetworkBroadcast = types.BoolValue(true)
	} else {
		data.NetworkBroadcast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "network.non-broadcast"); value.Exists() {
		data.NetworkNonBroadcast = types.BoolValue(true)
	} else {
		data.NetworkNonBroadcast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "network.point-to-point"); value.Exists() {
		data.NetworkPointToPoint = types.BoolValue(true)
	} else {
		data.NetworkPointToPoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "network.point-to-multipoint"); value.Exists() {
		data.NetworkPointToMultipoint = types.BoolValue(true)
	} else {
		data.NetworkPointToMultipoint = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "cost"); value.Exists() {
		data.Cost = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() {
		data.Priority = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "passive.enable"); value.Exists() {
		data.PassiveEnable = types.BoolValue(true)
	} else {
		data.PassiveEnable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "passive.disable"); value.Exists() {
		data.PassiveDisable = types.BoolValue(true)
	} else {
		data.PassiveDisable = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.ti-lfa.enable"); value.Exists() {
		data.FastReroutePerPrefixTiLfa = types.BoolValue(true)
	} else {
		data.FastReroutePerPrefixTiLfa = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.tiebreaker.srlg-disjoint.index"); value.Exists() {
		data.FastReroutePerPrefixTiebreakerSrlgDisjoint = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "fast-reroute.per-prefix.tiebreaker.node-protecting.index"); value.Exists() {
		data.FastReroutePerPrefixTiebreakerNodeProtecting = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "prefix-sid.strict-spf.index.sid-index"); value.Exists() {
		data.PrefixSidStrictSpfIndex = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "prefix-sid.algorithms.algorithm"); value.Exists() {
		data.PrefixSidAlgorithms = make([]RouterOSPFAreaInterfacePrefixSidAlgorithms, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterOSPFAreaInterfacePrefixSidAlgorithms{}
			if cValue := v.Get("algorithm-number"); cValue.Exists() {
				item.AlgorithmNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("index.sid-index"); cValue.Exists() {
				item.IndexSidIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("index.explicit-null"); cValue.Exists() {
				item.IndexExplicitNull = types.BoolValue(true)
			} else {
				item.IndexExplicitNull = types.BoolValue(false)
			}
			if cValue := v.Get("index.n-flag-clear"); cValue.Exists() {
				item.IndexNFlagClear = types.BoolValue(true)
			} else {
				item.IndexNFlagClear = types.BoolValue(false)
			}
			if cValue := v.Get("absolute.sid-label"); cValue.Exists() {
				item.AbsoluteSidLabel = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("absolute.explicit-null"); cValue.Exists() {
				item.AbsoluteExplicitNull = types.BoolValue(true)
			} else {
				item.AbsoluteExplicitNull = types.BoolValue(false)
			}
			if cValue := v.Get("absolute.n-flag-clear"); cValue.Exists() {
				item.AbsoluteNFlagClear = types.BoolValue(true)
			} else {
				item.AbsoluteNFlagClear = types.BoolValue(false)
			}
			data.PrefixSidAlgorithms = append(data.PrefixSidAlgorithms, item)
			return true
		})
	}
}

func (data *RouterOSPFAreaInterface) getDeletedItems(ctx context.Context, state RouterOSPFAreaInterface) []string {
	deletedItems := make([]string, 0)
	if !state.NetworkBroadcast.IsNull() && data.NetworkBroadcast.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/network/broadcast", state.getPath()))
	}
	if !state.NetworkNonBroadcast.IsNull() && data.NetworkNonBroadcast.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/network/non-broadcast", state.getPath()))
	}
	if !state.NetworkPointToPoint.IsNull() && data.NetworkPointToPoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/network/point-to-point", state.getPath()))
	}
	if !state.NetworkPointToMultipoint.IsNull() && data.NetworkPointToMultipoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/network/point-to-multipoint", state.getPath()))
	}
	if !state.Cost.IsNull() && data.Cost.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cost", state.getPath()))
	}
	if !state.Priority.IsNull() && data.Priority.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/priority", state.getPath()))
	}
	if !state.PassiveEnable.IsNull() && data.PassiveEnable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/passive/enable", state.getPath()))
	}
	if !state.PassiveDisable.IsNull() && data.PassiveDisable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/passive/disable", state.getPath()))
	}
	if !state.FastReroutePerPrefixTiLfa.IsNull() && data.FastReroutePerPrefixTiLfa.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-prefix/ti-lfa/enable", state.getPath()))
	}
	if !state.FastReroutePerPrefixTiebreakerSrlgDisjoint.IsNull() && data.FastReroutePerPrefixTiebreakerSrlgDisjoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-prefix/tiebreaker/srlg-disjoint/index", state.getPath()))
	}
	if !state.FastReroutePerPrefixTiebreakerNodeProtecting.IsNull() && data.FastReroutePerPrefixTiebreakerNodeProtecting.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fast-reroute/per-prefix/tiebreaker/node-protecting/index", state.getPath()))
	}
	if !state.PrefixSidStrictSpfIndex.IsNull() && data.PrefixSidStrictSpfIndex.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/prefix-sid/strict-spf/index", state.getPath()))
	}
	for i := range state.PrefixSidAlgorithms {
		keys := [...]string{"algorithm-number"}
		stateKeyValues := [...]string{strconv.FormatInt(state.PrefixSidAlgorithms[i].AlgorithmNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.PrefixSidAlgorithms[i].AlgorithmNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.PrefixSidAlgorithms {
			found = true
			if state.PrefixSidAlgorithms[i].AlgorithmNumber.ValueInt64() != data.PrefixSidAlgorithms[j].AlgorithmNumber.ValueInt64() {
				found = false
			}
			if found {
				if !state.PrefixSidAlgorithms[i].IndexSidIndex.IsNull() && data.PrefixSidAlgorithms[j].IndexSidIndex.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/index/sid-index", state.getPath(), keyString))
				}
				if !state.PrefixSidAlgorithms[i].IndexExplicitNull.IsNull() && data.PrefixSidAlgorithms[j].IndexExplicitNull.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/index/explicit-null", state.getPath(), keyString))
				}
				if !state.PrefixSidAlgorithms[i].IndexNFlagClear.IsNull() && data.PrefixSidAlgorithms[j].IndexNFlagClear.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/index/n-flag-clear", state.getPath(), keyString))
				}
				if !state.PrefixSidAlgorithms[i].AbsoluteSidLabel.IsNull() && data.PrefixSidAlgorithms[j].AbsoluteSidLabel.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/absolute/sid-label", state.getPath(), keyString))
				}
				if !state.PrefixSidAlgorithms[i].AbsoluteExplicitNull.IsNull() && data.PrefixSidAlgorithms[j].AbsoluteExplicitNull.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/absolute/explicit-null", state.getPath(), keyString))
				}
				if !state.PrefixSidAlgorithms[i].AbsoluteNFlagClear.IsNull() && data.PrefixSidAlgorithms[j].AbsoluteNFlagClear.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/absolute/n-flag-clear", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v", state.getPath(), keyString))
		}
	}
	return deletedItems
}

func (data *RouterOSPFAreaInterface) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.NetworkBroadcast.IsNull() && !data.NetworkBroadcast.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/broadcast", data.getPath()))
	}
	if !data.NetworkNonBroadcast.IsNull() && !data.NetworkNonBroadcast.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/non-broadcast", data.getPath()))
	}
	if !data.NetworkPointToPoint.IsNull() && !data.NetworkPointToPoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/point-to-point", data.getPath()))
	}
	if !data.NetworkPointToMultipoint.IsNull() && !data.NetworkPointToMultipoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/point-to-multipoint", data.getPath()))
	}
	if !data.PassiveEnable.IsNull() && !data.PassiveEnable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/passive/enable", data.getPath()))
	}
	if !data.PassiveDisable.IsNull() && !data.PassiveDisable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/passive/disable", data.getPath()))
	}
	if !data.FastReroutePerPrefixTiLfa.IsNull() && !data.FastReroutePerPrefixTiLfa.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fast-reroute/per-prefix/ti-lfa/enable", data.getPath()))
	}
	for i := range data.PrefixSidAlgorithms {
		keys := [...]string{"algorithm-number"}
		keyValues := [...]string{strconv.FormatInt(data.PrefixSidAlgorithms[i].AlgorithmNumber.ValueInt64(), 10)}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.PrefixSidAlgorithms[i].IndexExplicitNull.IsNull() && !data.PrefixSidAlgorithms[i].IndexExplicitNull.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/index/explicit-null", data.getPath(), keyString))
		}
		if !data.PrefixSidAlgorithms[i].IndexNFlagClear.IsNull() && !data.PrefixSidAlgorithms[i].IndexNFlagClear.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/index/n-flag-clear", data.getPath(), keyString))
		}
		if !data.PrefixSidAlgorithms[i].AbsoluteExplicitNull.IsNull() && !data.PrefixSidAlgorithms[i].AbsoluteExplicitNull.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/absolute/explicit-null", data.getPath(), keyString))
		}
		if !data.PrefixSidAlgorithms[i].AbsoluteNFlagClear.IsNull() && !data.PrefixSidAlgorithms[i].AbsoluteNFlagClear.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v/absolute/n-flag-clear", data.getPath(), keyString))
		}
	}
	return emptyLeafsDelete
}

func (data *RouterOSPFAreaInterface) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.NetworkBroadcast.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/broadcast", data.getPath()))
	}
	if !data.NetworkNonBroadcast.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/non-broadcast", data.getPath()))
	}
	if !data.NetworkPointToPoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/point-to-point", data.getPath()))
	}
	if !data.NetworkPointToMultipoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/point-to-multipoint", data.getPath()))
	}
	if !data.Cost.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cost", data.getPath()))
	}
	if !data.Priority.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/priority", data.getPath()))
	}
	if !data.PassiveEnable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/passive/enable", data.getPath()))
	}
	if !data.PassiveDisable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/passive/disable", data.getPath()))
	}
	if !data.FastReroutePerPrefixTiLfa.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-prefix/ti-lfa/enable", data.getPath()))
	}
	if !data.FastReroutePerPrefixTiebreakerSrlgDisjoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-prefix/tiebreaker/srlg-disjoint/index", data.getPath()))
	}
	if !data.FastReroutePerPrefixTiebreakerNodeProtecting.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fast-reroute/per-prefix/tiebreaker/node-protecting/index", data.getPath()))
	}
	if !data.PrefixSidStrictSpfIndex.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/prefix-sid/strict-spf/index", data.getPath()))
	}
	for i := range data.PrefixSidAlgorithms {
		keys := [...]string{"algorithm-number"}
		keyValues := [...]string{strconv.FormatInt(data.PrefixSidAlgorithms[i].AlgorithmNumber.ValueInt64(), 10)}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/prefix-sid/algorithms/algorithm%v", data.getPath(), keyString))
	}
	return deletePaths
}
