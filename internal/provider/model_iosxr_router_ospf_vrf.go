// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterOSPFVRF struct {
	Device                                types.String                    `tfsdk:"device"`
	Id                                    types.String                    `tfsdk:"id"`
	ProcessName                           types.String                    `tfsdk:"process_name"`
	VrfName                               types.String                    `tfsdk:"vrf_name"`
	MplsLdpSync                           types.Bool                      `tfsdk:"mpls_ldp_sync"`
	HelloInterval                         types.Int64                     `tfsdk:"hello_interval"`
	DeadInterval                          types.Int64                     `tfsdk:"dead_interval"`
	Priority                              types.Int64                     `tfsdk:"priority"`
	MtuIgnoreEnable                       types.Bool                      `tfsdk:"mtu_ignore_enable"`
	MtuIgnoreDisable                      types.Bool                      `tfsdk:"mtu_ignore_disable"`
	PassiveEnable                         types.Bool                      `tfsdk:"passive_enable"`
	PassiveDisable                        types.Bool                      `tfsdk:"passive_disable"`
	RouterId                              types.String                    `tfsdk:"router_id"`
	RedistributeConnected                 types.Bool                      `tfsdk:"redistribute_connected"`
	RedistributeConnectedTag              types.Int64                     `tfsdk:"redistribute_connected_tag"`
	RedistributeConnectedMetricType       types.String                    `tfsdk:"redistribute_connected_metric_type"`
	RedistributeStatic                    types.Bool                      `tfsdk:"redistribute_static"`
	RedistributeStaticTag                 types.Int64                     `tfsdk:"redistribute_static_tag"`
	RedistributeStaticMetricType          types.String                    `tfsdk:"redistribute_static_metric_type"`
	BfdFastDetect                         types.Bool                      `tfsdk:"bfd_fast_detect"`
	BfdMinimumInterval                    types.Int64                     `tfsdk:"bfd_minimum_interval"`
	BfdMultiplier                         types.Int64                     `tfsdk:"bfd_multiplier"`
	DefaultInformationOriginate           types.Bool                      `tfsdk:"default_information_originate"`
	DefaultInformationOriginateAlways     types.Bool                      `tfsdk:"default_information_originate_always"`
	DefaultInformationOriginateMetricType types.Int64                     `tfsdk:"default_information_originate_metric_type"`
	Areas                                 []RouterOSPFVRFAreas            `tfsdk:"areas"`
	RedistributeBgp                       []RouterOSPFVRFRedistributeBgp  `tfsdk:"redistribute_bgp"`
	RedistributeIsis                      []RouterOSPFVRFRedistributeIsis `tfsdk:"redistribute_isis"`
	RedistributeOspf                      []RouterOSPFVRFRedistributeOspf `tfsdk:"redistribute_ospf"`
}
type RouterOSPFVRFAreas struct {
	AreaId types.String `tfsdk:"area_id"`
}
type RouterOSPFVRFRedistributeBgp struct {
	AsNumber   types.String `tfsdk:"as_number"`
	Tag        types.Int64  `tfsdk:"tag"`
	MetricType types.String `tfsdk:"metric_type"`
}
type RouterOSPFVRFRedistributeIsis struct {
	InstanceName types.String `tfsdk:"instance_name"`
	Level1       types.Bool   `tfsdk:"level_1"`
	Level2       types.Bool   `tfsdk:"level_2"`
	Level12      types.Bool   `tfsdk:"level_1_2"`
	Tag          types.Int64  `tfsdk:"tag"`
	MetricType   types.String `tfsdk:"metric_type"`
}
type RouterOSPFVRFRedistributeOspf struct {
	InstanceName      types.String `tfsdk:"instance_name"`
	MatchInternal     types.Bool   `tfsdk:"match_internal"`
	MatchExternal     types.Bool   `tfsdk:"match_external"`
	MatchNssaExternal types.Bool   `tfsdk:"match_nssa_external"`
	Tag               types.Int64  `tfsdk:"tag"`
	MetricType        types.String `tfsdk:"metric_type"`
}

func (data RouterOSPFVRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-ospf-cfg:/router/ospf/processes/process[process-name=%s]/vrfs/vrf[vrf-name=%s]", data.ProcessName.Value, data.VrfName.Value)
}

func (data RouterOSPFVRF) toBody() string {
	body := "{}"
	if !data.MplsLdpSync.Null && !data.MplsLdpSync.Unknown {
		if data.MplsLdpSync.Value {
			body, _ = sjson.Set(body, "mpls.ldp.sync", map[string]string{})
		}
	}
	if !data.HelloInterval.Null && !data.HelloInterval.Unknown {
		body, _ = sjson.Set(body, "hello-interval", strconv.FormatInt(data.HelloInterval.Value, 10))
	}
	if !data.DeadInterval.Null && !data.DeadInterval.Unknown {
		body, _ = sjson.Set(body, "dead-interval", strconv.FormatInt(data.DeadInterval.Value, 10))
	}
	if !data.Priority.Null && !data.Priority.Unknown {
		body, _ = sjson.Set(body, "priority", strconv.FormatInt(data.Priority.Value, 10))
	}
	if !data.MtuIgnoreEnable.Null && !data.MtuIgnoreEnable.Unknown {
		if data.MtuIgnoreEnable.Value {
			body, _ = sjson.Set(body, "mtu-ignore.enable", map[string]string{})
		}
	}
	if !data.MtuIgnoreDisable.Null && !data.MtuIgnoreDisable.Unknown {
		if data.MtuIgnoreDisable.Value {
			body, _ = sjson.Set(body, "mtu-ignore.disable", map[string]string{})
		}
	}
	if !data.PassiveEnable.Null && !data.PassiveEnable.Unknown {
		if data.PassiveEnable.Value {
			body, _ = sjson.Set(body, "passive.enable", map[string]string{})
		}
	}
	if !data.PassiveDisable.Null && !data.PassiveDisable.Unknown {
		if data.PassiveDisable.Value {
			body, _ = sjson.Set(body, "passive.disable", map[string]string{})
		}
	}
	if !data.RouterId.Null && !data.RouterId.Unknown {
		body, _ = sjson.Set(body, "router-id", data.RouterId.Value)
	}
	if !data.RedistributeConnected.Null && !data.RedistributeConnected.Unknown {
		if data.RedistributeConnected.Value {
			body, _ = sjson.Set(body, "redistribute.connected", map[string]string{})
		}
	}
	if !data.RedistributeConnectedTag.Null && !data.RedistributeConnectedTag.Unknown {
		body, _ = sjson.Set(body, "redistribute.connected.tag", strconv.FormatInt(data.RedistributeConnectedTag.Value, 10))
	}
	if !data.RedistributeConnectedMetricType.Null && !data.RedistributeConnectedMetricType.Unknown {
		body, _ = sjson.Set(body, "redistribute.connected.metric-type", data.RedistributeConnectedMetricType.Value)
	}
	if !data.RedistributeStatic.Null && !data.RedistributeStatic.Unknown {
		if data.RedistributeStatic.Value {
			body, _ = sjson.Set(body, "redistribute.static", map[string]string{})
		}
	}
	if !data.RedistributeStaticTag.Null && !data.RedistributeStaticTag.Unknown {
		body, _ = sjson.Set(body, "redistribute.static.tag", strconv.FormatInt(data.RedistributeStaticTag.Value, 10))
	}
	if !data.RedistributeStaticMetricType.Null && !data.RedistributeStaticMetricType.Unknown {
		body, _ = sjson.Set(body, "redistribute.static.metric-type", data.RedistributeStaticMetricType.Value)
	}
	if !data.BfdFastDetect.Null && !data.BfdFastDetect.Unknown {
		if data.BfdFastDetect.Value {
			body, _ = sjson.Set(body, "bfd.fast-detect", map[string]string{})
		}
	}
	if !data.BfdMinimumInterval.Null && !data.BfdMinimumInterval.Unknown {
		body, _ = sjson.Set(body, "bfd.minimum-interval", strconv.FormatInt(data.BfdMinimumInterval.Value, 10))
	}
	if !data.BfdMultiplier.Null && !data.BfdMultiplier.Unknown {
		body, _ = sjson.Set(body, "bfd.multiplier", strconv.FormatInt(data.BfdMultiplier.Value, 10))
	}
	if !data.DefaultInformationOriginate.Null && !data.DefaultInformationOriginate.Unknown {
		if data.DefaultInformationOriginate.Value {
			body, _ = sjson.Set(body, "default-information.originate", map[string]string{})
		}
	}
	if !data.DefaultInformationOriginateAlways.Null && !data.DefaultInformationOriginateAlways.Unknown {
		if data.DefaultInformationOriginateAlways.Value {
			body, _ = sjson.Set(body, "default-information.originate.always", map[string]string{})
		}
	}
	if !data.DefaultInformationOriginateMetricType.Null && !data.DefaultInformationOriginateMetricType.Unknown {
		body, _ = sjson.Set(body, "default-information.originate.metric-type", strconv.FormatInt(data.DefaultInformationOriginateMetricType.Value, 10))
	}
	if len(data.Areas) > 0 {
		body, _ = sjson.Set(body, "areas.area", []interface{}{})
		for index, item := range data.Areas {
			if !item.AreaId.Null && !item.AreaId.Unknown {
				body, _ = sjson.Set(body, "areas.area"+"."+strconv.Itoa(index)+"."+"area-id", item.AreaId.Value)
			}
		}
	}
	if len(data.RedistributeBgp) > 0 {
		body, _ = sjson.Set(body, "redistribute.bgp.as", []interface{}{})
		for index, item := range data.RedistributeBgp {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "redistribute.bgp.as"+"."+strconv.Itoa(index)+"."+"as-number", item.AsNumber.Value)
			}
			if !item.Tag.Null && !item.Tag.Unknown {
				body, _ = sjson.Set(body, "redistribute.bgp.as"+"."+strconv.Itoa(index)+"."+"tag", strconv.FormatInt(item.Tag.Value, 10))
			}
			if !item.MetricType.Null && !item.MetricType.Unknown {
				body, _ = sjson.Set(body, "redistribute.bgp.as"+"."+strconv.Itoa(index)+"."+"metric-type", item.MetricType.Value)
			}
		}
	}
	if len(data.RedistributeIsis) > 0 {
		body, _ = sjson.Set(body, "redistribute.isis", []interface{}{})
		for index, item := range data.RedistributeIsis {
			if !item.InstanceName.Null && !item.InstanceName.Unknown {
				body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"instance-name", item.InstanceName.Value)
			}
			if !item.Level1.Null && !item.Level1.Unknown {
				if item.Level1.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level-1", map[string]string{})
				}
			}
			if !item.Level2.Null && !item.Level2.Unknown {
				if item.Level2.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level-2", map[string]string{})
				}
			}
			if !item.Level12.Null && !item.Level12.Unknown {
				if item.Level12.Value {
					body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"level-1-2", map[string]string{})
				}
			}
			if !item.Tag.Null && !item.Tag.Unknown {
				body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"tag", strconv.FormatInt(item.Tag.Value, 10))
			}
			if !item.MetricType.Null && !item.MetricType.Unknown {
				body, _ = sjson.Set(body, "redistribute.isis"+"."+strconv.Itoa(index)+"."+"metric-type", item.MetricType.Value)
			}
		}
	}
	if len(data.RedistributeOspf) > 0 {
		body, _ = sjson.Set(body, "redistribute.ospf", []interface{}{})
		for index, item := range data.RedistributeOspf {
			if !item.InstanceName.Null && !item.InstanceName.Unknown {
				body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"instance-name", item.InstanceName.Value)
			}
			if !item.MatchInternal.Null && !item.MatchInternal.Unknown {
				if item.MatchInternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.internal", map[string]string{})
				}
			}
			if !item.MatchExternal.Null && !item.MatchExternal.Unknown {
				if item.MatchExternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.external", map[string]string{})
				}
			}
			if !item.MatchNssaExternal.Null && !item.MatchNssaExternal.Unknown {
				if item.MatchNssaExternal.Value {
					body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"match.nssa-external", map[string]string{})
				}
			}
			if !item.Tag.Null && !item.Tag.Unknown {
				body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"tag", strconv.FormatInt(item.Tag.Value, 10))
			}
			if !item.MetricType.Null && !item.MetricType.Unknown {
				body, _ = sjson.Set(body, "redistribute.ospf"+"."+strconv.Itoa(index)+"."+"metric-type", item.MetricType.Value)
			}
		}
	}
	return body
}

func (data *RouterOSPFVRF) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "mpls.ldp.sync"); value.Exists() {
		data.MplsLdpSync.Value = true
	} else {
		data.MplsLdpSync.Value = false
	}
	if value := gjson.GetBytes(res, "hello-interval"); value.Exists() {
		data.HelloInterval.Value = value.Int()
	} else {
		data.HelloInterval.Null = true
	}
	if value := gjson.GetBytes(res, "dead-interval"); value.Exists() {
		data.DeadInterval.Value = value.Int()
	} else {
		data.DeadInterval.Null = true
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() {
		data.Priority.Value = value.Int()
	} else {
		data.Priority.Null = true
	}
	if value := gjson.GetBytes(res, "mtu-ignore.enable"); value.Exists() {
		data.MtuIgnoreEnable.Value = true
	} else {
		data.MtuIgnoreEnable.Value = false
	}
	if value := gjson.GetBytes(res, "mtu-ignore.disable"); value.Exists() {
		data.MtuIgnoreDisable.Value = true
	} else {
		data.MtuIgnoreDisable.Value = false
	}
	if value := gjson.GetBytes(res, "passive.enable"); value.Exists() {
		data.PassiveEnable.Value = true
	} else {
		data.PassiveEnable.Value = false
	}
	if value := gjson.GetBytes(res, "passive.disable"); value.Exists() {
		data.PassiveDisable.Value = true
	} else {
		data.PassiveDisable.Value = false
	}
	if value := gjson.GetBytes(res, "router-id"); value.Exists() {
		data.RouterId.Value = value.String()
	} else {
		data.RouterId.Null = true
	}
	if value := gjson.GetBytes(res, "redistribute.connected"); value.Exists() {
		data.RedistributeConnected.Value = true
	} else {
		data.RedistributeConnected.Value = false
	}
	if value := gjson.GetBytes(res, "redistribute.connected.tag"); value.Exists() {
		data.RedistributeConnectedTag.Value = value.Int()
	} else {
		data.RedistributeConnectedTag.Null = true
	}
	if value := gjson.GetBytes(res, "redistribute.connected.metric-type"); value.Exists() {
		data.RedistributeConnectedMetricType.Value = value.String()
	} else {
		data.RedistributeConnectedMetricType.Null = true
	}
	if value := gjson.GetBytes(res, "redistribute.static"); value.Exists() {
		data.RedistributeStatic.Value = true
	} else {
		data.RedistributeStatic.Value = false
	}
	if value := gjson.GetBytes(res, "redistribute.static.tag"); value.Exists() {
		data.RedistributeStaticTag.Value = value.Int()
	} else {
		data.RedistributeStaticTag.Null = true
	}
	if value := gjson.GetBytes(res, "redistribute.static.metric-type"); value.Exists() {
		data.RedistributeStaticMetricType.Value = value.String()
	} else {
		data.RedistributeStaticMetricType.Null = true
	}
	if value := gjson.GetBytes(res, "bfd.fast-detect"); value.Exists() {
		data.BfdFastDetect.Value = true
	} else {
		data.BfdFastDetect.Value = false
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() {
		data.BfdMinimumInterval.Value = value.Int()
	} else {
		data.BfdMinimumInterval.Null = true
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() {
		data.BfdMultiplier.Value = value.Int()
	} else {
		data.BfdMultiplier.Null = true
	}
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
	} else {
		data.DefaultInformationOriginate.Value = false
	}
	if value := gjson.GetBytes(res, "default-information.originate.always"); value.Exists() {
		data.DefaultInformationOriginateAlways.Value = true
	} else {
		data.DefaultInformationOriginateAlways.Value = false
	}
	if value := gjson.GetBytes(res, "default-information.originate.metric-type"); value.Exists() {
		data.DefaultInformationOriginateMetricType.Value = value.Int()
	} else {
		data.DefaultInformationOriginateMetricType.Null = true
	}
	for i := range data.Areas {
		keys := [...]string{"area-id"}
		keyValues := [...]string{data.Areas[i].AreaId.Value}

		var r gjson.Result
		gjson.GetBytes(res, "areas.area").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("area-id"); value.Exists() {
			data.Areas[i].AreaId.Value = value.String()
		} else {
			data.Areas[i].AreaId.Null = true
		}
	}
	for i := range data.RedistributeBgp {
		keys := [...]string{"as-number"}
		keyValues := [...]string{data.RedistributeBgp[i].AsNumber.Value}

		var r gjson.Result
		gjson.GetBytes(res, "redistribute.bgp.as").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.RedistributeBgp[i].AsNumber.Value = value.String()
		} else {
			data.RedistributeBgp[i].AsNumber.Null = true
		}
		if value := r.Get("tag"); value.Exists() {
			data.RedistributeBgp[i].Tag.Value = value.Int()
		} else {
			data.RedistributeBgp[i].Tag.Null = true
		}
		if value := r.Get("metric-type"); value.Exists() {
			data.RedistributeBgp[i].MetricType.Value = value.String()
		} else {
			data.RedistributeBgp[i].MetricType.Null = true
		}
	}
	for i := range data.RedistributeIsis {
		keys := [...]string{"instance-name"}
		keyValues := [...]string{data.RedistributeIsis[i].InstanceName.Value}

		var r gjson.Result
		gjson.GetBytes(res, "redistribute.isis").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("instance-name"); value.Exists() {
			data.RedistributeIsis[i].InstanceName.Value = value.String()
		} else {
			data.RedistributeIsis[i].InstanceName.Null = true
		}
		if value := r.Get("level-1"); value.Exists() {
			data.RedistributeIsis[i].Level1.Value = true
		} else {
			data.RedistributeIsis[i].Level1.Value = false
		}
		if value := r.Get("level-2"); value.Exists() {
			data.RedistributeIsis[i].Level2.Value = true
		} else {
			data.RedistributeIsis[i].Level2.Value = false
		}
		if value := r.Get("level-1-2"); value.Exists() {
			data.RedistributeIsis[i].Level12.Value = true
		} else {
			data.RedistributeIsis[i].Level12.Value = false
		}
		if value := r.Get("tag"); value.Exists() {
			data.RedistributeIsis[i].Tag.Value = value.Int()
		} else {
			data.RedistributeIsis[i].Tag.Null = true
		}
		if value := r.Get("metric-type"); value.Exists() {
			data.RedistributeIsis[i].MetricType.Value = value.String()
		} else {
			data.RedistributeIsis[i].MetricType.Null = true
		}
	}
	for i := range data.RedistributeOspf {
		keys := [...]string{"instance-name"}
		keyValues := [...]string{data.RedistributeOspf[i].InstanceName.Value}

		var r gjson.Result
		gjson.GetBytes(res, "redistribute.ospf").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("instance-name"); value.Exists() {
			data.RedistributeOspf[i].InstanceName.Value = value.String()
		} else {
			data.RedistributeOspf[i].InstanceName.Null = true
		}
		if value := r.Get("match.internal"); value.Exists() {
			data.RedistributeOspf[i].MatchInternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchInternal.Value = false
		}
		if value := r.Get("match.external"); value.Exists() {
			data.RedistributeOspf[i].MatchExternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchExternal.Value = false
		}
		if value := r.Get("match.nssa-external"); value.Exists() {
			data.RedistributeOspf[i].MatchNssaExternal.Value = true
		} else {
			data.RedistributeOspf[i].MatchNssaExternal.Value = false
		}
		if value := r.Get("tag"); value.Exists() {
			data.RedistributeOspf[i].Tag.Value = value.Int()
		} else {
			data.RedistributeOspf[i].Tag.Null = true
		}
		if value := r.Get("metric-type"); value.Exists() {
			data.RedistributeOspf[i].MetricType.Value = value.String()
		} else {
			data.RedistributeOspf[i].MetricType.Null = true
		}
	}
}

func (data *RouterOSPFVRF) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "mpls.ldp.sync"); value.Exists() {
		data.MplsLdpSync.Value = true
		data.MplsLdpSync.Null = false
	} else {
		data.MplsLdpSync.Value = false
		data.MplsLdpSync.Null = false
	}
	if value := gjson.GetBytes(res, "hello-interval"); value.Exists() {
		data.HelloInterval.Value = value.Int()
		data.HelloInterval.Null = false
	}
	if value := gjson.GetBytes(res, "dead-interval"); value.Exists() {
		data.DeadInterval.Value = value.Int()
		data.DeadInterval.Null = false
	}
	if value := gjson.GetBytes(res, "priority"); value.Exists() {
		data.Priority.Value = value.Int()
		data.Priority.Null = false
	}
	if value := gjson.GetBytes(res, "mtu-ignore.enable"); value.Exists() {
		data.MtuIgnoreEnable.Value = true
		data.MtuIgnoreEnable.Null = false
	} else {
		data.MtuIgnoreEnable.Value = false
		data.MtuIgnoreEnable.Null = false
	}
	if value := gjson.GetBytes(res, "mtu-ignore.disable"); value.Exists() {
		data.MtuIgnoreDisable.Value = true
		data.MtuIgnoreDisable.Null = false
	} else {
		data.MtuIgnoreDisable.Value = false
		data.MtuIgnoreDisable.Null = false
	}
	if value := gjson.GetBytes(res, "passive.enable"); value.Exists() {
		data.PassiveEnable.Value = true
		data.PassiveEnable.Null = false
	} else {
		data.PassiveEnable.Value = false
		data.PassiveEnable.Null = false
	}
	if value := gjson.GetBytes(res, "passive.disable"); value.Exists() {
		data.PassiveDisable.Value = true
		data.PassiveDisable.Null = false
	} else {
		data.PassiveDisable.Value = false
		data.PassiveDisable.Null = false
	}
	if value := gjson.GetBytes(res, "router-id"); value.Exists() {
		data.RouterId.Value = value.String()
		data.RouterId.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.connected"); value.Exists() {
		data.RedistributeConnected.Value = true
		data.RedistributeConnected.Null = false
	} else {
		data.RedistributeConnected.Value = false
		data.RedistributeConnected.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.connected.tag"); value.Exists() {
		data.RedistributeConnectedTag.Value = value.Int()
		data.RedistributeConnectedTag.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.connected.metric-type"); value.Exists() {
		data.RedistributeConnectedMetricType.Value = value.String()
		data.RedistributeConnectedMetricType.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.static"); value.Exists() {
		data.RedistributeStatic.Value = true
		data.RedistributeStatic.Null = false
	} else {
		data.RedistributeStatic.Value = false
		data.RedistributeStatic.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.static.tag"); value.Exists() {
		data.RedistributeStaticTag.Value = value.Int()
		data.RedistributeStaticTag.Null = false
	}
	if value := gjson.GetBytes(res, "redistribute.static.metric-type"); value.Exists() {
		data.RedistributeStaticMetricType.Value = value.String()
		data.RedistributeStaticMetricType.Null = false
	}
	if value := gjson.GetBytes(res, "bfd.fast-detect"); value.Exists() {
		data.BfdFastDetect.Value = true
		data.BfdFastDetect.Null = false
	} else {
		data.BfdFastDetect.Value = false
		data.BfdFastDetect.Null = false
	}
	if value := gjson.GetBytes(res, "bfd.minimum-interval"); value.Exists() {
		data.BfdMinimumInterval.Value = value.Int()
		data.BfdMinimumInterval.Null = false
	}
	if value := gjson.GetBytes(res, "bfd.multiplier"); value.Exists() {
		data.BfdMultiplier.Value = value.Int()
		data.BfdMultiplier.Null = false
	}
	if value := gjson.GetBytes(res, "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
		data.DefaultInformationOriginate.Null = false
	} else {
		data.DefaultInformationOriginate.Value = false
		data.DefaultInformationOriginate.Null = false
	}
	if value := gjson.GetBytes(res, "default-information.originate.always"); value.Exists() {
		data.DefaultInformationOriginateAlways.Value = true
		data.DefaultInformationOriginateAlways.Null = false
	} else {
		data.DefaultInformationOriginateAlways.Value = false
		data.DefaultInformationOriginateAlways.Null = false
	}
	if value := gjson.GetBytes(res, "default-information.originate.metric-type"); value.Exists() {
		data.DefaultInformationOriginateMetricType.Value = value.Int()
		data.DefaultInformationOriginateMetricType.Null = false
	}
	if value := gjson.GetBytes(res, "areas.area"); value.Exists() {
		data.Areas = make([]RouterOSPFVRFAreas, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterOSPFVRFAreas{}
			if cValue := v.Get("area-id"); cValue.Exists() {
				item.AreaId.Value = cValue.String()
				item.AreaId.Null = false
			}
			data.Areas = append(data.Areas, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "redistribute.bgp.as"); value.Exists() {
		data.RedistributeBgp = make([]RouterOSPFVRFRedistributeBgp, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterOSPFVRFRedistributeBgp{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.String()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag.Value = cValue.Int()
				item.Tag.Null = false
			}
			if cValue := v.Get("metric-type"); cValue.Exists() {
				item.MetricType.Value = cValue.String()
				item.MetricType.Null = false
			}
			data.RedistributeBgp = append(data.RedistributeBgp, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "redistribute.isis"); value.Exists() {
		data.RedistributeIsis = make([]RouterOSPFVRFRedistributeIsis, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterOSPFVRFRedistributeIsis{}
			if cValue := v.Get("instance-name"); cValue.Exists() {
				item.InstanceName.Value = cValue.String()
				item.InstanceName.Null = false
			}
			if cValue := v.Get("level-1"); cValue.Exists() {
				item.Level1.Value = true
				item.Level1.Null = false
			}
			if cValue := v.Get("level-2"); cValue.Exists() {
				item.Level2.Value = true
				item.Level2.Null = false
			}
			if cValue := v.Get("level-1-2"); cValue.Exists() {
				item.Level12.Value = true
				item.Level12.Null = false
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag.Value = cValue.Int()
				item.Tag.Null = false
			}
			if cValue := v.Get("metric-type"); cValue.Exists() {
				item.MetricType.Value = cValue.String()
				item.MetricType.Null = false
			}
			data.RedistributeIsis = append(data.RedistributeIsis, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "redistribute.ospf"); value.Exists() {
		data.RedistributeOspf = make([]RouterOSPFVRFRedistributeOspf, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterOSPFVRFRedistributeOspf{}
			if cValue := v.Get("instance-name"); cValue.Exists() {
				item.InstanceName.Value = cValue.String()
				item.InstanceName.Null = false
			}
			if cValue := v.Get("match.internal"); cValue.Exists() {
				item.MatchInternal.Value = true
				item.MatchInternal.Null = false
			}
			if cValue := v.Get("match.external"); cValue.Exists() {
				item.MatchExternal.Value = true
				item.MatchExternal.Null = false
			}
			if cValue := v.Get("match.nssa-external"); cValue.Exists() {
				item.MatchNssaExternal.Value = true
				item.MatchNssaExternal.Null = false
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag.Value = cValue.Int()
				item.Tag.Null = false
			}
			if cValue := v.Get("metric-type"); cValue.Exists() {
				item.MetricType.Value = cValue.String()
				item.MetricType.Null = false
			}
			data.RedistributeOspf = append(data.RedistributeOspf, item)
			return true
		})
	}
}

func (data *RouterOSPFVRF) fromPlan(plan RouterOSPFVRF) {
	data.Device = plan.Device
	data.ProcessName.Value = plan.ProcessName.Value
	data.VrfName.Value = plan.VrfName.Value
}

func (data *RouterOSPFVRF) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.ProcessName.Unknown {
		data.ProcessName.Unknown = false
		data.ProcessName.Null = true
	}
	if data.VrfName.Unknown {
		data.VrfName.Unknown = false
		data.VrfName.Null = true
	}
	if data.MplsLdpSync.Unknown {
		data.MplsLdpSync.Unknown = false
		data.MplsLdpSync.Null = true
	}
	if data.HelloInterval.Unknown {
		data.HelloInterval.Unknown = false
		data.HelloInterval.Null = true
	}
	if data.DeadInterval.Unknown {
		data.DeadInterval.Unknown = false
		data.DeadInterval.Null = true
	}
	if data.Priority.Unknown {
		data.Priority.Unknown = false
		data.Priority.Null = true
	}
	if data.MtuIgnoreEnable.Unknown {
		data.MtuIgnoreEnable.Unknown = false
		data.MtuIgnoreEnable.Null = true
	}
	if data.MtuIgnoreDisable.Unknown {
		data.MtuIgnoreDisable.Unknown = false
		data.MtuIgnoreDisable.Null = true
	}
	if data.PassiveEnable.Unknown {
		data.PassiveEnable.Unknown = false
		data.PassiveEnable.Null = true
	}
	if data.PassiveDisable.Unknown {
		data.PassiveDisable.Unknown = false
		data.PassiveDisable.Null = true
	}
	if data.RouterId.Unknown {
		data.RouterId.Unknown = false
		data.RouterId.Null = true
	}
	if data.RedistributeConnected.Unknown {
		data.RedistributeConnected.Unknown = false
		data.RedistributeConnected.Null = true
	}
	if data.RedistributeConnectedTag.Unknown {
		data.RedistributeConnectedTag.Unknown = false
		data.RedistributeConnectedTag.Null = true
	}
	if data.RedistributeConnectedMetricType.Unknown {
		data.RedistributeConnectedMetricType.Unknown = false
		data.RedistributeConnectedMetricType.Null = true
	}
	if data.RedistributeStatic.Unknown {
		data.RedistributeStatic.Unknown = false
		data.RedistributeStatic.Null = true
	}
	if data.RedistributeStaticTag.Unknown {
		data.RedistributeStaticTag.Unknown = false
		data.RedistributeStaticTag.Null = true
	}
	if data.RedistributeStaticMetricType.Unknown {
		data.RedistributeStaticMetricType.Unknown = false
		data.RedistributeStaticMetricType.Null = true
	}
	if data.BfdFastDetect.Unknown {
		data.BfdFastDetect.Unknown = false
		data.BfdFastDetect.Null = true
	}
	if data.BfdMinimumInterval.Unknown {
		data.BfdMinimumInterval.Unknown = false
		data.BfdMinimumInterval.Null = true
	}
	if data.BfdMultiplier.Unknown {
		data.BfdMultiplier.Unknown = false
		data.BfdMultiplier.Null = true
	}
	if data.DefaultInformationOriginate.Unknown {
		data.DefaultInformationOriginate.Unknown = false
		data.DefaultInformationOriginate.Null = true
	}
	if data.DefaultInformationOriginateAlways.Unknown {
		data.DefaultInformationOriginateAlways.Unknown = false
		data.DefaultInformationOriginateAlways.Null = true
	}
	if data.DefaultInformationOriginateMetricType.Unknown {
		data.DefaultInformationOriginateMetricType.Unknown = false
		data.DefaultInformationOriginateMetricType.Null = true
	}
	for i := range data.Areas {
		if data.Areas[i].AreaId.Unknown {
			data.Areas[i].AreaId.Unknown = false
			data.Areas[i].AreaId.Null = true
		}
	}
	for i := range data.RedistributeBgp {
		if data.RedistributeBgp[i].AsNumber.Unknown {
			data.RedistributeBgp[i].AsNumber.Unknown = false
			data.RedistributeBgp[i].AsNumber.Null = true
		}
		if data.RedistributeBgp[i].Tag.Unknown {
			data.RedistributeBgp[i].Tag.Unknown = false
			data.RedistributeBgp[i].Tag.Null = true
		}
		if data.RedistributeBgp[i].MetricType.Unknown {
			data.RedistributeBgp[i].MetricType.Unknown = false
			data.RedistributeBgp[i].MetricType.Null = true
		}
	}
	for i := range data.RedistributeIsis {
		if data.RedistributeIsis[i].InstanceName.Unknown {
			data.RedistributeIsis[i].InstanceName.Unknown = false
			data.RedistributeIsis[i].InstanceName.Null = true
		}
		if data.RedistributeIsis[i].Level1.Unknown {
			data.RedistributeIsis[i].Level1.Unknown = false
			data.RedistributeIsis[i].Level1.Null = true
		}
		if data.RedistributeIsis[i].Level2.Unknown {
			data.RedistributeIsis[i].Level2.Unknown = false
			data.RedistributeIsis[i].Level2.Null = true
		}
		if data.RedistributeIsis[i].Level12.Unknown {
			data.RedistributeIsis[i].Level12.Unknown = false
			data.RedistributeIsis[i].Level12.Null = true
		}
		if data.RedistributeIsis[i].Tag.Unknown {
			data.RedistributeIsis[i].Tag.Unknown = false
			data.RedistributeIsis[i].Tag.Null = true
		}
		if data.RedistributeIsis[i].MetricType.Unknown {
			data.RedistributeIsis[i].MetricType.Unknown = false
			data.RedistributeIsis[i].MetricType.Null = true
		}
	}
	for i := range data.RedistributeOspf {
		if data.RedistributeOspf[i].InstanceName.Unknown {
			data.RedistributeOspf[i].InstanceName.Unknown = false
			data.RedistributeOspf[i].InstanceName.Null = true
		}
		if data.RedistributeOspf[i].MatchInternal.Unknown {
			data.RedistributeOspf[i].MatchInternal.Unknown = false
			data.RedistributeOspf[i].MatchInternal.Null = true
		}
		if data.RedistributeOspf[i].MatchExternal.Unknown {
			data.RedistributeOspf[i].MatchExternal.Unknown = false
			data.RedistributeOspf[i].MatchExternal.Null = true
		}
		if data.RedistributeOspf[i].MatchNssaExternal.Unknown {
			data.RedistributeOspf[i].MatchNssaExternal.Unknown = false
			data.RedistributeOspf[i].MatchNssaExternal.Null = true
		}
		if data.RedistributeOspf[i].Tag.Unknown {
			data.RedistributeOspf[i].Tag.Unknown = false
			data.RedistributeOspf[i].Tag.Null = true
		}
		if data.RedistributeOspf[i].MetricType.Unknown {
			data.RedistributeOspf[i].MetricType.Unknown = false
			data.RedistributeOspf[i].MetricType.Null = true
		}
	}
}

func (data *RouterOSPFVRF) getDeletedListItems(state RouterOSPFVRF) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Areas {
		keys := [...]string{"area-id"}
		stateKeyValues := [...]string{state.Areas[i].AreaId.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Areas[i].AreaId.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Areas {
			found = true
			if state.Areas[i].AreaId.Value != data.Areas[j].AreaId.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/areas/area%v", state.getPath(), keyString))
		}
	}
	for i := range state.RedistributeBgp {
		keys := [...]string{"as-number"}
		stateKeyValues := [...]string{state.RedistributeBgp[i].AsNumber.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.RedistributeBgp[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.RedistributeBgp {
			found = true
			if state.RedistributeBgp[i].AsNumber.Value != data.RedistributeBgp[j].AsNumber.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/redistribute/bgp/as%v", state.getPath(), keyString))
		}
	}
	for i := range state.RedistributeIsis {
		keys := [...]string{"instance-name"}
		stateKeyValues := [...]string{state.RedistributeIsis[i].InstanceName.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.RedistributeIsis[i].InstanceName.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.RedistributeIsis {
			found = true
			if state.RedistributeIsis[i].InstanceName.Value != data.RedistributeIsis[j].InstanceName.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/redistribute/isis%v", state.getPath(), keyString))
		}
	}
	for i := range state.RedistributeOspf {
		keys := [...]string{"instance-name"}
		stateKeyValues := [...]string{state.RedistributeOspf[i].InstanceName.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.RedistributeOspf[i].InstanceName.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.RedistributeOspf {
			found = true
			if state.RedistributeOspf[i].InstanceName.Value != data.RedistributeOspf[j].InstanceName.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/redistribute/ospf%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *RouterOSPFVRF) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
