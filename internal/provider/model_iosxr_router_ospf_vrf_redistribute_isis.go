// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterOSPFVRFRedistributeISIS struct {
	Device       types.String `tfsdk:"device"`
	Id           types.String `tfsdk:"id"`
	ProcessName  types.String `tfsdk:"process_name"`
	VrfName      types.String `tfsdk:"vrf_name"`
	InstanceName types.String `tfsdk:"instance_name"`
	Level1       types.Bool   `tfsdk:"level_1"`
	Level2       types.Bool   `tfsdk:"level_2"`
	Level12      types.Bool   `tfsdk:"level_1_2"`
	Tag          types.Int64  `tfsdk:"tag"`
	MetricType   types.String `tfsdk:"metric_type"`
}

func (data RouterOSPFVRFRedistributeISIS) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-ospf-cfg:/router/ospf/processes/process[process-name=%s]/vrfs/vrf[vrf-name=%s]/redistribute/isis[instance-name=%s]", data.ProcessName.Value, data.VrfName.Value, data.InstanceName.Value)
}

func (data RouterOSPFVRFRedistributeISIS) toBody() string {
	body := "{}"
	if !data.Level1.Null && !data.Level1.Unknown {
		if data.Level1.Value {
			body, _ = sjson.Set(body, "level-1", map[string]string{})
		}
	}
	if !data.Level2.Null && !data.Level2.Unknown {
		if data.Level2.Value {
			body, _ = sjson.Set(body, "level-2", map[string]string{})
		}
	}
	if !data.Level12.Null && !data.Level12.Unknown {
		if data.Level12.Value {
			body, _ = sjson.Set(body, "level-1-2", map[string]string{})
		}
	}
	if !data.Tag.Null && !data.Tag.Unknown {
		body, _ = sjson.Set(body, "tag", strconv.FormatInt(data.Tag.Value, 10))
	}
	if !data.MetricType.Null && !data.MetricType.Unknown {
		body, _ = sjson.Set(body, "metric-type", data.MetricType.Value)
	}
	return body
}

func (data *RouterOSPFVRFRedistributeISIS) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "level-1"); value.Exists() {
		data.Level1.Value = true
	} else {
		data.Level1.Value = false
	}
	if value := gjson.GetBytes(res, "level-2"); value.Exists() {
		data.Level2.Value = true
	} else {
		data.Level2.Value = false
	}
	if value := gjson.GetBytes(res, "level-1-2"); value.Exists() {
		data.Level12.Value = true
	} else {
		data.Level12.Value = false
	}
	if value := gjson.GetBytes(res, "tag"); value.Exists() {
		data.Tag.Value = value.Int()
	} else {
		data.Tag.Null = true
	}
	if value := gjson.GetBytes(res, "metric-type"); value.Exists() {
		data.MetricType.Value = value.String()
	} else {
		data.MetricType.Null = true
	}
}

func (data *RouterOSPFVRFRedistributeISIS) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "level-1"); value.Exists() {
		data.Level1.Value = true
		data.Level1.Null = false
	} else {
		data.Level1.Value = false
		data.Level1.Null = false
	}
	if value := gjson.GetBytes(res, "level-2"); value.Exists() {
		data.Level2.Value = true
		data.Level2.Null = false
	} else {
		data.Level2.Value = false
		data.Level2.Null = false
	}
	if value := gjson.GetBytes(res, "level-1-2"); value.Exists() {
		data.Level12.Value = true
		data.Level12.Null = false
	} else {
		data.Level12.Value = false
		data.Level12.Null = false
	}
	if value := gjson.GetBytes(res, "tag"); value.Exists() {
		data.Tag.Value = value.Int()
		data.Tag.Null = false
	}
	if value := gjson.GetBytes(res, "metric-type"); value.Exists() {
		data.MetricType.Value = value.String()
		data.MetricType.Null = false
	}
}

func (data *RouterOSPFVRFRedistributeISIS) fromPlan(plan RouterOSPFVRFRedistributeISIS) {
	data.Device = plan.Device
	data.ProcessName.Value = plan.ProcessName.Value
	data.VrfName.Value = plan.VrfName.Value
	data.InstanceName.Value = plan.InstanceName.Value
}

func (data *RouterOSPFVRFRedistributeISIS) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.ProcessName.Unknown {
		data.ProcessName.Unknown = false
		data.ProcessName.Null = true
	}
	if data.VrfName.Unknown {
		data.VrfName.Unknown = false
		data.VrfName.Null = true
	}
	if data.InstanceName.Unknown {
		data.InstanceName.Unknown = false
		data.InstanceName.Null = true
	}
	if data.Level1.Unknown {
		data.Level1.Unknown = false
		data.Level1.Null = true
	}
	if data.Level2.Unknown {
		data.Level2.Unknown = false
		data.Level2.Null = true
	}
	if data.Level12.Unknown {
		data.Level12.Unknown = false
		data.Level12.Null = true
	}
	if data.Tag.Unknown {
		data.Tag.Unknown = false
		data.Tag.Null = true
	}
	if data.MetricType.Unknown {
		data.MetricType.Unknown = false
		data.MetricType.Null = true
	}
}

func (data *RouterOSPFVRFRedistributeISIS) getDeletedListItems(state RouterOSPFVRFRedistributeISIS) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *RouterOSPFVRFRedistributeISIS) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
