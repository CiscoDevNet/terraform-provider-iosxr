// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterOSPFVRFRedistributeOSPF struct {
	Device            types.String `tfsdk:"device"`
	Id                types.String `tfsdk:"id"`
	ProcessName       types.String `tfsdk:"process_name"`
	VrfName           types.String `tfsdk:"vrf_name"`
	InstanceName      types.String `tfsdk:"instance_name"`
	MatchInternal     types.Bool   `tfsdk:"match_internal"`
	MatchExternal     types.Bool   `tfsdk:"match_external"`
	MatchNssaExternal types.Bool   `tfsdk:"match_nssa_external"`
	Tag               types.Int64  `tfsdk:"tag"`
	MetricType        types.String `tfsdk:"metric_type"`
}

func (data RouterOSPFVRFRedistributeOSPF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-ospf-cfg:/router/ospf/processes/process[process-name=%s]/vrfs/vrf[vrf-name=%s]/redistribute/ospf[instance-name=%s]", data.ProcessName.Value, data.VrfName.Value, data.InstanceName.Value)
}

func (data RouterOSPFVRFRedistributeOSPF) toBody() string {
	body := "{}"
	if !data.MatchInternal.Null && !data.MatchInternal.Unknown {
		if data.MatchInternal.Value {
			body, _ = sjson.Set(body, "match.internal", map[string]string{})
		}
	}
	if !data.MatchExternal.Null && !data.MatchExternal.Unknown {
		if data.MatchExternal.Value {
			body, _ = sjson.Set(body, "match.external", map[string]string{})
		}
	}
	if !data.MatchNssaExternal.Null && !data.MatchNssaExternal.Unknown {
		if data.MatchNssaExternal.Value {
			body, _ = sjson.Set(body, "match.nssa-external", map[string]string{})
		}
	}
	if !data.Tag.Null && !data.Tag.Unknown {
		body, _ = sjson.Set(body, "tag", strconv.FormatInt(data.Tag.Value, 10))
	}
	if !data.MetricType.Null && !data.MetricType.Unknown {
		body, _ = sjson.Set(body, "metric-type", data.MetricType.Value)
	}
	return body
}

func (data *RouterOSPFVRFRedistributeOSPF) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "match.internal"); value.Exists() {
		data.MatchInternal.Value = true
	} else {
		data.MatchInternal.Value = false
	}
	if value := gjson.GetBytes(res, "match.external"); value.Exists() {
		data.MatchExternal.Value = true
	} else {
		data.MatchExternal.Value = false
	}
	if value := gjson.GetBytes(res, "match.nssa-external"); value.Exists() {
		data.MatchNssaExternal.Value = true
	} else {
		data.MatchNssaExternal.Value = false
	}
	if value := gjson.GetBytes(res, "tag"); value.Exists() {
		data.Tag.Value = value.Int()
	} else {
		data.Tag.Null = true
	}
	if value := gjson.GetBytes(res, "metric-type"); value.Exists() {
		data.MetricType.Value = value.String()
	} else {
		data.MetricType.Null = true
	}
}

func (data *RouterOSPFVRFRedistributeOSPF) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "match.internal"); value.Exists() {
		data.MatchInternal.Value = true
		data.MatchInternal.Null = false
	} else {
		data.MatchInternal.Value = false
		data.MatchInternal.Null = false
	}
	if value := gjson.GetBytes(res, "match.external"); value.Exists() {
		data.MatchExternal.Value = true
		data.MatchExternal.Null = false
	} else {
		data.MatchExternal.Value = false
		data.MatchExternal.Null = false
	}
	if value := gjson.GetBytes(res, "match.nssa-external"); value.Exists() {
		data.MatchNssaExternal.Value = true
		data.MatchNssaExternal.Null = false
	} else {
		data.MatchNssaExternal.Value = false
		data.MatchNssaExternal.Null = false
	}
	if value := gjson.GetBytes(res, "tag"); value.Exists() {
		data.Tag.Value = value.Int()
		data.Tag.Null = false
	}
	if value := gjson.GetBytes(res, "metric-type"); value.Exists() {
		data.MetricType.Value = value.String()
		data.MetricType.Null = false
	}
}

func (data *RouterOSPFVRFRedistributeOSPF) fromPlan(plan RouterOSPFVRFRedistributeOSPF) {
	data.Device = plan.Device
	data.ProcessName.Value = plan.ProcessName.Value
	data.VrfName.Value = plan.VrfName.Value
	data.InstanceName.Value = plan.InstanceName.Value
}

func (data *RouterOSPFVRFRedistributeOSPF) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.ProcessName.Unknown {
		data.ProcessName.Unknown = false
		data.ProcessName.Null = true
	}
	if data.VrfName.Unknown {
		data.VrfName.Unknown = false
		data.VrfName.Null = true
	}
	if data.InstanceName.Unknown {
		data.InstanceName.Unknown = false
		data.InstanceName.Null = true
	}
	if data.MatchInternal.Unknown {
		data.MatchInternal.Unknown = false
		data.MatchInternal.Null = true
	}
	if data.MatchExternal.Unknown {
		data.MatchExternal.Unknown = false
		data.MatchExternal.Null = true
	}
	if data.MatchNssaExternal.Unknown {
		data.MatchNssaExternal.Unknown = false
		data.MatchNssaExternal.Null = true
	}
	if data.Tag.Unknown {
		data.Tag.Unknown = false
		data.Tag.Null = true
	}
	if data.MetricType.Unknown {
		data.MetricType.Unknown = false
		data.MetricType.Null = true
	}
}

func (data *RouterOSPFVRFRedistributeOSPF) getDeletedListItems(state RouterOSPFVRFRedistributeOSPF) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *RouterOSPFVRFRedistributeOSPF) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
