// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type RouterStaticVRFIPv4Unicast struct {
	Device                    types.String                                          `tfsdk:"device"`
	Id                        types.String                                          `tfsdk:"id"`
	DeleteMode                types.String                                          `tfsdk:"delete_mode"`
	VrfName                   types.String                                          `tfsdk:"vrf_name"`
	PrefixAddress             types.String                                          `tfsdk:"prefix_address"`
	PrefixLength              types.Int64                                           `tfsdk:"prefix_length"`
	NexthopInterfaces         []RouterStaticVRFIPv4UnicastNexthopInterfaces         `tfsdk:"nexthop_interfaces"`
	NexthopInterfaceAddresses []RouterStaticVRFIPv4UnicastNexthopInterfaceAddresses `tfsdk:"nexthop_interface_addresses"`
	NexthopAddresses          []RouterStaticVRFIPv4UnicastNexthopAddresses          `tfsdk:"nexthop_addresses"`
	Vrfs                      []RouterStaticVRFIPv4UnicastVrfs                      `tfsdk:"vrfs"`
}

type RouterStaticVRFIPv4UnicastData struct {
	Device                    types.String                                          `tfsdk:"device"`
	Id                        types.String                                          `tfsdk:"id"`
	VrfName                   types.String                                          `tfsdk:"vrf_name"`
	PrefixAddress             types.String                                          `tfsdk:"prefix_address"`
	PrefixLength              types.Int64                                           `tfsdk:"prefix_length"`
	NexthopInterfaces         []RouterStaticVRFIPv4UnicastNexthopInterfaces         `tfsdk:"nexthop_interfaces"`
	NexthopInterfaceAddresses []RouterStaticVRFIPv4UnicastNexthopInterfaceAddresses `tfsdk:"nexthop_interface_addresses"`
	NexthopAddresses          []RouterStaticVRFIPv4UnicastNexthopAddresses          `tfsdk:"nexthop_addresses"`
	Vrfs                      []RouterStaticVRFIPv4UnicastVrfs                      `tfsdk:"vrfs"`
}
type RouterStaticVRFIPv4UnicastNexthopInterfaces struct {
	InterfaceName  types.String `tfsdk:"interface_name"`
	Description    types.String `tfsdk:"description"`
	Tag            types.Int64  `tfsdk:"tag"`
	DistanceMetric types.Int64  `tfsdk:"distance_metric"`
	Permanent      types.Bool   `tfsdk:"permanent"`
	Track          types.String `tfsdk:"track"`
	Metric         types.Int64  `tfsdk:"metric"`
}
type RouterStaticVRFIPv4UnicastNexthopInterfaceAddresses struct {
	InterfaceName                types.String `tfsdk:"interface_name"`
	Address                      types.String `tfsdk:"address"`
	Description                  types.String `tfsdk:"description"`
	Tag                          types.Int64  `tfsdk:"tag"`
	DistanceMetric               types.Int64  `tfsdk:"distance_metric"`
	Permanent                    types.Bool   `tfsdk:"permanent"`
	Track                        types.String `tfsdk:"track"`
	Metric                       types.Int64  `tfsdk:"metric"`
	BfdFastDetectMinimumInterval types.Int64  `tfsdk:"bfd_fast_detect_minimum_interval"`
	BfdFastDetectMultiplier      types.Int64  `tfsdk:"bfd_fast_detect_multiplier"`
}
type RouterStaticVRFIPv4UnicastNexthopAddresses struct {
	Address        types.String `tfsdk:"address"`
	Description    types.String `tfsdk:"description"`
	Tag            types.Int64  `tfsdk:"tag"`
	DistanceMetric types.Int64  `tfsdk:"distance_metric"`
	Permanent      types.Bool   `tfsdk:"permanent"`
	Track          types.String `tfsdk:"track"`
	Metric         types.Int64  `tfsdk:"metric"`
}
type RouterStaticVRFIPv4UnicastVrfs struct {
	VrfName                   types.String                                              `tfsdk:"vrf_name"`
	NexthopInterfaces         []RouterStaticVRFIPv4UnicastVrfsNexthopInterfaces         `tfsdk:"nexthop_interfaces"`
	NexthopInterfaceAddresses []RouterStaticVRFIPv4UnicastVrfsNexthopInterfaceAddresses `tfsdk:"nexthop_interface_addresses"`
	NexthopAddresses          []RouterStaticVRFIPv4UnicastVrfsNexthopAddresses          `tfsdk:"nexthop_addresses"`
}
type RouterStaticVRFIPv4UnicastVrfsNexthopInterfaces struct {
	InterfaceName  types.String `tfsdk:"interface_name"`
	Description    types.String `tfsdk:"description"`
	Tag            types.Int64  `tfsdk:"tag"`
	DistanceMetric types.Int64  `tfsdk:"distance_metric"`
	Permanent      types.Bool   `tfsdk:"permanent"`
	Track          types.String `tfsdk:"track"`
	Metric         types.Int64  `tfsdk:"metric"`
}
type RouterStaticVRFIPv4UnicastVrfsNexthopInterfaceAddresses struct {
	InterfaceName  types.String `tfsdk:"interface_name"`
	Address        types.String `tfsdk:"address"`
	Description    types.String `tfsdk:"description"`
	Tag            types.Int64  `tfsdk:"tag"`
	DistanceMetric types.Int64  `tfsdk:"distance_metric"`
	Permanent      types.Bool   `tfsdk:"permanent"`
	Track          types.String `tfsdk:"track"`
	Metric         types.Int64  `tfsdk:"metric"`
}
type RouterStaticVRFIPv4UnicastVrfsNexthopAddresses struct {
	Address        types.String `tfsdk:"address"`
	Description    types.String `tfsdk:"description"`
	Tag            types.Int64  `tfsdk:"tag"`
	DistanceMetric types.Int64  `tfsdk:"distance_metric"`
	Permanent      types.Bool   `tfsdk:"permanent"`
	Track          types.String `tfsdk:"track"`
	Metric         types.Int64  `tfsdk:"metric"`
}

func (data RouterStaticVRFIPv4Unicast) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-static-cfg:/router/static/vrfs/vrf[vrf-name=%s]/address-family/ipv4/unicast/prefixes/prefix[prefix-address=%s][prefix-length=%d]", data.VrfName.ValueString(), data.PrefixAddress.ValueString(), data.PrefixLength.ValueInt64())
}

func (data RouterStaticVRFIPv4UnicastData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-static-cfg:/router/static/vrfs/vrf[vrf-name=%s]/address-family/ipv4/unicast/prefixes/prefix[prefix-address=%s][prefix-length=%d]", data.VrfName.ValueString(), data.PrefixAddress.ValueString(), data.PrefixLength.ValueInt64())
}

func (data RouterStaticVRFIPv4Unicast) toBody(ctx context.Context) string {
	body := "{}"
	if !data.PrefixAddress.IsNull() && !data.PrefixAddress.IsUnknown() {
		body, _ = sjson.Set(body, "prefix-address", data.PrefixAddress.ValueString())
	}
	if !data.PrefixLength.IsNull() && !data.PrefixLength.IsUnknown() {
		body, _ = sjson.Set(body, "prefix-length", strconv.FormatInt(data.PrefixLength.ValueInt64(), 10))
	}
	if len(data.NexthopInterfaces) > 0 {
		body, _ = sjson.Set(body, "nexthop-interfaces.nexthop-interface", []interface{}{})
		for index, item := range data.NexthopInterfaces {
			if !item.InterfaceName.IsNull() && !item.InterfaceName.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(index)+"."+"interface-name", item.InterfaceName.ValueString())
			}
			if !item.Description.IsNull() && !item.Description.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(index)+"."+"description", item.Description.ValueString())
			}
			if !item.Tag.IsNull() && !item.Tag.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(index)+"."+"tag", strconv.FormatInt(item.Tag.ValueInt64(), 10))
			}
			if !item.DistanceMetric.IsNull() && !item.DistanceMetric.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(index)+"."+"distance-metric", strconv.FormatInt(item.DistanceMetric.ValueInt64(), 10))
			}
			if !item.Permanent.IsNull() && !item.Permanent.IsUnknown() {
				if item.Permanent.ValueBool() {
					body, _ = sjson.Set(body, "nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(index)+"."+"permanent", map[string]string{})
				}
			}
			if !item.Track.IsNull() && !item.Track.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(index)+"."+"track", item.Track.ValueString())
			}
			if !item.Metric.IsNull() && !item.Metric.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(index)+"."+"metric", strconv.FormatInt(item.Metric.ValueInt64(), 10))
			}
		}
	}
	if len(data.NexthopInterfaceAddresses) > 0 {
		body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address", []interface{}{})
		for index, item := range data.NexthopInterfaceAddresses {
			if !item.InterfaceName.IsNull() && !item.InterfaceName.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"interface-name", item.InterfaceName.ValueString())
			}
			if !item.Address.IsNull() && !item.Address.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"address", item.Address.ValueString())
			}
			if !item.Description.IsNull() && !item.Description.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"description", item.Description.ValueString())
			}
			if !item.Tag.IsNull() && !item.Tag.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"tag", strconv.FormatInt(item.Tag.ValueInt64(), 10))
			}
			if !item.DistanceMetric.IsNull() && !item.DistanceMetric.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"distance-metric", strconv.FormatInt(item.DistanceMetric.ValueInt64(), 10))
			}
			if !item.Permanent.IsNull() && !item.Permanent.IsUnknown() {
				if item.Permanent.ValueBool() {
					body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"permanent", map[string]string{})
				}
			}
			if !item.Track.IsNull() && !item.Track.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"track", item.Track.ValueString())
			}
			if !item.Metric.IsNull() && !item.Metric.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"metric", strconv.FormatInt(item.Metric.ValueInt64(), 10))
			}
			if !item.BfdFastDetectMinimumInterval.IsNull() && !item.BfdFastDetectMinimumInterval.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"bfd.fast-detect.minimum-interval", strconv.FormatInt(item.BfdFastDetectMinimumInterval.ValueInt64(), 10))
			}
			if !item.BfdFastDetectMultiplier.IsNull() && !item.BfdFastDetectMultiplier.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(index)+"."+"bfd.fast-detect.multiplier", strconv.FormatInt(item.BfdFastDetectMultiplier.ValueInt64(), 10))
			}
		}
	}
	if len(data.NexthopAddresses) > 0 {
		body, _ = sjson.Set(body, "nexthop-addresses.nexthop-address", []interface{}{})
		for index, item := range data.NexthopAddresses {
			if !item.Address.IsNull() && !item.Address.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-addresses.nexthop-address"+"."+strconv.Itoa(index)+"."+"address", item.Address.ValueString())
			}
			if !item.Description.IsNull() && !item.Description.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-addresses.nexthop-address"+"."+strconv.Itoa(index)+"."+"description", item.Description.ValueString())
			}
			if !item.Tag.IsNull() && !item.Tag.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-addresses.nexthop-address"+"."+strconv.Itoa(index)+"."+"tag", strconv.FormatInt(item.Tag.ValueInt64(), 10))
			}
			if !item.DistanceMetric.IsNull() && !item.DistanceMetric.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-addresses.nexthop-address"+"."+strconv.Itoa(index)+"."+"distance-metric", strconv.FormatInt(item.DistanceMetric.ValueInt64(), 10))
			}
			if !item.Permanent.IsNull() && !item.Permanent.IsUnknown() {
				if item.Permanent.ValueBool() {
					body, _ = sjson.Set(body, "nexthop-addresses.nexthop-address"+"."+strconv.Itoa(index)+"."+"permanent", map[string]string{})
				}
			}
			if !item.Track.IsNull() && !item.Track.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-addresses.nexthop-address"+"."+strconv.Itoa(index)+"."+"track", item.Track.ValueString())
			}
			if !item.Metric.IsNull() && !item.Metric.IsUnknown() {
				body, _ = sjson.Set(body, "nexthop-addresses.nexthop-address"+"."+strconv.Itoa(index)+"."+"metric", strconv.FormatInt(item.Metric.ValueInt64(), 10))
			}
		}
	}
	if len(data.Vrfs) > 0 {
		body, _ = sjson.Set(body, "vrfs.vrf", []interface{}{})
		for index, item := range data.Vrfs {
			if !item.VrfName.IsNull() && !item.VrfName.IsUnknown() {
				body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"vrf-name", item.VrfName.ValueString())
			}
			if len(item.NexthopInterfaces) > 0 {
				body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interfaces.nexthop-interface", []interface{}{})
				for cindex, citem := range item.NexthopInterfaces {
					if !citem.InterfaceName.IsNull() && !citem.InterfaceName.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(cindex)+"."+"interface-name", citem.InterfaceName.ValueString())
					}
					if !citem.Description.IsNull() && !citem.Description.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(cindex)+"."+"description", citem.Description.ValueString())
					}
					if !citem.Tag.IsNull() && !citem.Tag.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(cindex)+"."+"tag", strconv.FormatInt(citem.Tag.ValueInt64(), 10))
					}
					if !citem.DistanceMetric.IsNull() && !citem.DistanceMetric.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(cindex)+"."+"distance-metric", strconv.FormatInt(citem.DistanceMetric.ValueInt64(), 10))
					}
					if !citem.Permanent.IsNull() && !citem.Permanent.IsUnknown() {
						if citem.Permanent.ValueBool() {
							body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(cindex)+"."+"permanent", map[string]string{})
						}
					}
					if !citem.Track.IsNull() && !citem.Track.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(cindex)+"."+"track", citem.Track.ValueString())
					}
					if !citem.Metric.IsNull() && !citem.Metric.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interfaces.nexthop-interface"+"."+strconv.Itoa(cindex)+"."+"metric", strconv.FormatInt(citem.Metric.ValueInt64(), 10))
					}
				}
			}
			if len(item.NexthopInterfaceAddresses) > 0 {
				body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address", []interface{}{})
				for cindex, citem := range item.NexthopInterfaceAddresses {
					if !citem.InterfaceName.IsNull() && !citem.InterfaceName.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(cindex)+"."+"interface-name", citem.InterfaceName.ValueString())
					}
					if !citem.Address.IsNull() && !citem.Address.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(cindex)+"."+"address", citem.Address.ValueString())
					}
					if !citem.Description.IsNull() && !citem.Description.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(cindex)+"."+"description", citem.Description.ValueString())
					}
					if !citem.Tag.IsNull() && !citem.Tag.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(cindex)+"."+"tag", strconv.FormatInt(citem.Tag.ValueInt64(), 10))
					}
					if !citem.DistanceMetric.IsNull() && !citem.DistanceMetric.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(cindex)+"."+"distance-metric", strconv.FormatInt(citem.DistanceMetric.ValueInt64(), 10))
					}
					if !citem.Permanent.IsNull() && !citem.Permanent.IsUnknown() {
						if citem.Permanent.ValueBool() {
							body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(cindex)+"."+"permanent", map[string]string{})
						}
					}
					if !citem.Track.IsNull() && !citem.Track.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(cindex)+"."+"track", citem.Track.ValueString())
					}
					if !citem.Metric.IsNull() && !citem.Metric.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-interface-addresses.nexthop-interface-address"+"."+strconv.Itoa(cindex)+"."+"metric", strconv.FormatInt(citem.Metric.ValueInt64(), 10))
					}
				}
			}
			if len(item.NexthopAddresses) > 0 {
				body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-addresses.nexthop-address", []interface{}{})
				for cindex, citem := range item.NexthopAddresses {
					if !citem.Address.IsNull() && !citem.Address.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-addresses.nexthop-address"+"."+strconv.Itoa(cindex)+"."+"address", citem.Address.ValueString())
					}
					if !citem.Description.IsNull() && !citem.Description.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-addresses.nexthop-address"+"."+strconv.Itoa(cindex)+"."+"description", citem.Description.ValueString())
					}
					if !citem.Tag.IsNull() && !citem.Tag.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-addresses.nexthop-address"+"."+strconv.Itoa(cindex)+"."+"tag", strconv.FormatInt(citem.Tag.ValueInt64(), 10))
					}
					if !citem.DistanceMetric.IsNull() && !citem.DistanceMetric.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-addresses.nexthop-address"+"."+strconv.Itoa(cindex)+"."+"distance-metric", strconv.FormatInt(citem.DistanceMetric.ValueInt64(), 10))
					}
					if !citem.Permanent.IsNull() && !citem.Permanent.IsUnknown() {
						if citem.Permanent.ValueBool() {
							body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-addresses.nexthop-address"+"."+strconv.Itoa(cindex)+"."+"permanent", map[string]string{})
						}
					}
					if !citem.Track.IsNull() && !citem.Track.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-addresses.nexthop-address"+"."+strconv.Itoa(cindex)+"."+"track", citem.Track.ValueString())
					}
					if !citem.Metric.IsNull() && !citem.Metric.IsUnknown() {
						body, _ = sjson.Set(body, "vrfs.vrf"+"."+strconv.Itoa(index)+"."+"nexthop-addresses.nexthop-address"+"."+strconv.Itoa(cindex)+"."+"metric", strconv.FormatInt(citem.Metric.ValueInt64(), 10))
					}
				}
			}
		}
	}
	return body
}

func (data *RouterStaticVRFIPv4Unicast) updateFromBody(ctx context.Context, res []byte) {
	for i := range data.NexthopInterfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.NexthopInterfaces[i].InterfaceName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "nexthop-interfaces.nexthop-interface").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("interface-name"); value.Exists() && !data.NexthopInterfaces[i].InterfaceName.IsNull() {
			data.NexthopInterfaces[i].InterfaceName = types.StringValue(value.String())
		} else {
			data.NexthopInterfaces[i].InterfaceName = types.StringNull()
		}
		if value := r.Get("description"); value.Exists() && !data.NexthopInterfaces[i].Description.IsNull() {
			data.NexthopInterfaces[i].Description = types.StringValue(value.String())
		} else {
			data.NexthopInterfaces[i].Description = types.StringNull()
		}
		if value := r.Get("tag"); value.Exists() && !data.NexthopInterfaces[i].Tag.IsNull() {
			data.NexthopInterfaces[i].Tag = types.Int64Value(value.Int())
		} else {
			data.NexthopInterfaces[i].Tag = types.Int64Null()
		}
		if value := r.Get("distance-metric"); value.Exists() && !data.NexthopInterfaces[i].DistanceMetric.IsNull() {
			data.NexthopInterfaces[i].DistanceMetric = types.Int64Value(value.Int())
		} else {
			data.NexthopInterfaces[i].DistanceMetric = types.Int64Null()
		}
		if value := r.Get("permanent"); !data.NexthopInterfaces[i].Permanent.IsNull() {
			if value.Exists() {
				data.NexthopInterfaces[i].Permanent = types.BoolValue(true)
			} else {
				data.NexthopInterfaces[i].Permanent = types.BoolValue(false)
			}
		} else {
			data.NexthopInterfaces[i].Permanent = types.BoolNull()
		}
		if value := r.Get("track"); value.Exists() && !data.NexthopInterfaces[i].Track.IsNull() {
			data.NexthopInterfaces[i].Track = types.StringValue(value.String())
		} else {
			data.NexthopInterfaces[i].Track = types.StringNull()
		}
		if value := r.Get("metric"); value.Exists() && !data.NexthopInterfaces[i].Metric.IsNull() {
			data.NexthopInterfaces[i].Metric = types.Int64Value(value.Int())
		} else {
			data.NexthopInterfaces[i].Metric = types.Int64Null()
		}
	}
	for i := range data.NexthopInterfaceAddresses {
		keys := [...]string{"interface-name", "address"}
		keyValues := [...]string{data.NexthopInterfaceAddresses[i].InterfaceName.ValueString(), data.NexthopInterfaceAddresses[i].Address.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "nexthop-interface-addresses.nexthop-interface-address").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("interface-name"); value.Exists() && !data.NexthopInterfaceAddresses[i].InterfaceName.IsNull() {
			data.NexthopInterfaceAddresses[i].InterfaceName = types.StringValue(value.String())
		} else {
			data.NexthopInterfaceAddresses[i].InterfaceName = types.StringNull()
		}
		if value := r.Get("address"); value.Exists() && !data.NexthopInterfaceAddresses[i].Address.IsNull() {
			data.NexthopInterfaceAddresses[i].Address = types.StringValue(value.String())
		} else {
			data.NexthopInterfaceAddresses[i].Address = types.StringNull()
		}
		if value := r.Get("description"); value.Exists() && !data.NexthopInterfaceAddresses[i].Description.IsNull() {
			data.NexthopInterfaceAddresses[i].Description = types.StringValue(value.String())
		} else {
			data.NexthopInterfaceAddresses[i].Description = types.StringNull()
		}
		if value := r.Get("tag"); value.Exists() && !data.NexthopInterfaceAddresses[i].Tag.IsNull() {
			data.NexthopInterfaceAddresses[i].Tag = types.Int64Value(value.Int())
		} else {
			data.NexthopInterfaceAddresses[i].Tag = types.Int64Null()
		}
		if value := r.Get("distance-metric"); value.Exists() && !data.NexthopInterfaceAddresses[i].DistanceMetric.IsNull() {
			data.NexthopInterfaceAddresses[i].DistanceMetric = types.Int64Value(value.Int())
		} else {
			data.NexthopInterfaceAddresses[i].DistanceMetric = types.Int64Null()
		}
		if value := r.Get("permanent"); !data.NexthopInterfaceAddresses[i].Permanent.IsNull() {
			if value.Exists() {
				data.NexthopInterfaceAddresses[i].Permanent = types.BoolValue(true)
			} else {
				data.NexthopInterfaceAddresses[i].Permanent = types.BoolValue(false)
			}
		} else {
			data.NexthopInterfaceAddresses[i].Permanent = types.BoolNull()
		}
		if value := r.Get("track"); value.Exists() && !data.NexthopInterfaceAddresses[i].Track.IsNull() {
			data.NexthopInterfaceAddresses[i].Track = types.StringValue(value.String())
		} else {
			data.NexthopInterfaceAddresses[i].Track = types.StringNull()
		}
		if value := r.Get("metric"); value.Exists() && !data.NexthopInterfaceAddresses[i].Metric.IsNull() {
			data.NexthopInterfaceAddresses[i].Metric = types.Int64Value(value.Int())
		} else {
			data.NexthopInterfaceAddresses[i].Metric = types.Int64Null()
		}
		if value := r.Get("bfd.fast-detect.minimum-interval"); value.Exists() && !data.NexthopInterfaceAddresses[i].BfdFastDetectMinimumInterval.IsNull() {
			data.NexthopInterfaceAddresses[i].BfdFastDetectMinimumInterval = types.Int64Value(value.Int())
		} else {
			data.NexthopInterfaceAddresses[i].BfdFastDetectMinimumInterval = types.Int64Null()
		}
		if value := r.Get("bfd.fast-detect.multiplier"); value.Exists() && !data.NexthopInterfaceAddresses[i].BfdFastDetectMultiplier.IsNull() {
			data.NexthopInterfaceAddresses[i].BfdFastDetectMultiplier = types.Int64Value(value.Int())
		} else {
			data.NexthopInterfaceAddresses[i].BfdFastDetectMultiplier = types.Int64Null()
		}
	}
	for i := range data.NexthopAddresses {
		keys := [...]string{"address"}
		keyValues := [...]string{data.NexthopAddresses[i].Address.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "nexthop-addresses.nexthop-address").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("address"); value.Exists() && !data.NexthopAddresses[i].Address.IsNull() {
			data.NexthopAddresses[i].Address = types.StringValue(value.String())
		} else {
			data.NexthopAddresses[i].Address = types.StringNull()
		}
		if value := r.Get("description"); value.Exists() && !data.NexthopAddresses[i].Description.IsNull() {
			data.NexthopAddresses[i].Description = types.StringValue(value.String())
		} else {
			data.NexthopAddresses[i].Description = types.StringNull()
		}
		if value := r.Get("tag"); value.Exists() && !data.NexthopAddresses[i].Tag.IsNull() {
			data.NexthopAddresses[i].Tag = types.Int64Value(value.Int())
		} else {
			data.NexthopAddresses[i].Tag = types.Int64Null()
		}
		if value := r.Get("distance-metric"); value.Exists() && !data.NexthopAddresses[i].DistanceMetric.IsNull() {
			data.NexthopAddresses[i].DistanceMetric = types.Int64Value(value.Int())
		} else {
			data.NexthopAddresses[i].DistanceMetric = types.Int64Null()
		}
		if value := r.Get("permanent"); !data.NexthopAddresses[i].Permanent.IsNull() {
			if value.Exists() {
				data.NexthopAddresses[i].Permanent = types.BoolValue(true)
			} else {
				data.NexthopAddresses[i].Permanent = types.BoolValue(false)
			}
		} else {
			data.NexthopAddresses[i].Permanent = types.BoolNull()
		}
		if value := r.Get("track"); value.Exists() && !data.NexthopAddresses[i].Track.IsNull() {
			data.NexthopAddresses[i].Track = types.StringValue(value.String())
		} else {
			data.NexthopAddresses[i].Track = types.StringNull()
		}
		if value := r.Get("metric"); value.Exists() && !data.NexthopAddresses[i].Metric.IsNull() {
			data.NexthopAddresses[i].Metric = types.Int64Value(value.Int())
		} else {
			data.NexthopAddresses[i].Metric = types.Int64Null()
		}
	}
	for i := range data.Vrfs {
		keys := [...]string{"vrf-name"}
		keyValues := [...]string{data.Vrfs[i].VrfName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "vrfs.vrf").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("vrf-name"); value.Exists() && !data.Vrfs[i].VrfName.IsNull() {
			data.Vrfs[i].VrfName = types.StringValue(value.String())
		} else {
			data.Vrfs[i].VrfName = types.StringNull()
		}
		for ci := range data.Vrfs[i].NexthopInterfaces {
			keys := [...]string{"interface-name"}
			keyValues := [...]string{data.Vrfs[i].NexthopInterfaces[ci].InterfaceName.ValueString()}

			var cr gjson.Result
			r.Get("nexthop-interfaces.nexthop-interface").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("interface-name"); value.Exists() && !data.Vrfs[i].NexthopInterfaces[ci].InterfaceName.IsNull() {
				data.Vrfs[i].NexthopInterfaces[ci].InterfaceName = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopInterfaces[ci].InterfaceName = types.StringNull()
			}
			if value := cr.Get("description"); value.Exists() && !data.Vrfs[i].NexthopInterfaces[ci].Description.IsNull() {
				data.Vrfs[i].NexthopInterfaces[ci].Description = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopInterfaces[ci].Description = types.StringNull()
			}
			if value := cr.Get("tag"); value.Exists() && !data.Vrfs[i].NexthopInterfaces[ci].Tag.IsNull() {
				data.Vrfs[i].NexthopInterfaces[ci].Tag = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopInterfaces[ci].Tag = types.Int64Null()
			}
			if value := cr.Get("distance-metric"); value.Exists() && !data.Vrfs[i].NexthopInterfaces[ci].DistanceMetric.IsNull() {
				data.Vrfs[i].NexthopInterfaces[ci].DistanceMetric = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopInterfaces[ci].DistanceMetric = types.Int64Null()
			}
			if value := cr.Get("permanent"); !data.Vrfs[i].NexthopInterfaces[ci].Permanent.IsNull() {
				if value.Exists() {
					data.Vrfs[i].NexthopInterfaces[ci].Permanent = types.BoolValue(true)
				} else {
					data.Vrfs[i].NexthopInterfaces[ci].Permanent = types.BoolValue(false)
				}
			} else {
				data.Vrfs[i].NexthopInterfaces[ci].Permanent = types.BoolNull()
			}
			if value := cr.Get("track"); value.Exists() && !data.Vrfs[i].NexthopInterfaces[ci].Track.IsNull() {
				data.Vrfs[i].NexthopInterfaces[ci].Track = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopInterfaces[ci].Track = types.StringNull()
			}
			if value := cr.Get("metric"); value.Exists() && !data.Vrfs[i].NexthopInterfaces[ci].Metric.IsNull() {
				data.Vrfs[i].NexthopInterfaces[ci].Metric = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopInterfaces[ci].Metric = types.Int64Null()
			}
		}
		for ci := range data.Vrfs[i].NexthopInterfaceAddresses {
			keys := [...]string{"interface-name", "address"}
			keyValues := [...]string{data.Vrfs[i].NexthopInterfaceAddresses[ci].InterfaceName.ValueString(), data.Vrfs[i].NexthopInterfaceAddresses[ci].Address.ValueString()}

			var cr gjson.Result
			r.Get("nexthop-interface-addresses.nexthop-interface-address").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("interface-name"); value.Exists() && !data.Vrfs[i].NexthopInterfaceAddresses[ci].InterfaceName.IsNull() {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].InterfaceName = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].InterfaceName = types.StringNull()
			}
			if value := cr.Get("address"); value.Exists() && !data.Vrfs[i].NexthopInterfaceAddresses[ci].Address.IsNull() {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Address = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Address = types.StringNull()
			}
			if value := cr.Get("description"); value.Exists() && !data.Vrfs[i].NexthopInterfaceAddresses[ci].Description.IsNull() {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Description = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Description = types.StringNull()
			}
			if value := cr.Get("tag"); value.Exists() && !data.Vrfs[i].NexthopInterfaceAddresses[ci].Tag.IsNull() {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Tag = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Tag = types.Int64Null()
			}
			if value := cr.Get("distance-metric"); value.Exists() && !data.Vrfs[i].NexthopInterfaceAddresses[ci].DistanceMetric.IsNull() {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].DistanceMetric = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].DistanceMetric = types.Int64Null()
			}
			if value := cr.Get("permanent"); !data.Vrfs[i].NexthopInterfaceAddresses[ci].Permanent.IsNull() {
				if value.Exists() {
					data.Vrfs[i].NexthopInterfaceAddresses[ci].Permanent = types.BoolValue(true)
				} else {
					data.Vrfs[i].NexthopInterfaceAddresses[ci].Permanent = types.BoolValue(false)
				}
			} else {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Permanent = types.BoolNull()
			}
			if value := cr.Get("track"); value.Exists() && !data.Vrfs[i].NexthopInterfaceAddresses[ci].Track.IsNull() {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Track = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Track = types.StringNull()
			}
			if value := cr.Get("metric"); value.Exists() && !data.Vrfs[i].NexthopInterfaceAddresses[ci].Metric.IsNull() {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Metric = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopInterfaceAddresses[ci].Metric = types.Int64Null()
			}
		}
		for ci := range data.Vrfs[i].NexthopAddresses {
			keys := [...]string{"address"}
			keyValues := [...]string{data.Vrfs[i].NexthopAddresses[ci].Address.ValueString()}

			var cr gjson.Result
			r.Get("nexthop-addresses.nexthop-address").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("address"); value.Exists() && !data.Vrfs[i].NexthopAddresses[ci].Address.IsNull() {
				data.Vrfs[i].NexthopAddresses[ci].Address = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopAddresses[ci].Address = types.StringNull()
			}
			if value := cr.Get("description"); value.Exists() && !data.Vrfs[i].NexthopAddresses[ci].Description.IsNull() {
				data.Vrfs[i].NexthopAddresses[ci].Description = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopAddresses[ci].Description = types.StringNull()
			}
			if value := cr.Get("tag"); value.Exists() && !data.Vrfs[i].NexthopAddresses[ci].Tag.IsNull() {
				data.Vrfs[i].NexthopAddresses[ci].Tag = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopAddresses[ci].Tag = types.Int64Null()
			}
			if value := cr.Get("distance-metric"); value.Exists() && !data.Vrfs[i].NexthopAddresses[ci].DistanceMetric.IsNull() {
				data.Vrfs[i].NexthopAddresses[ci].DistanceMetric = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopAddresses[ci].DistanceMetric = types.Int64Null()
			}
			if value := cr.Get("permanent"); !data.Vrfs[i].NexthopAddresses[ci].Permanent.IsNull() {
				if value.Exists() {
					data.Vrfs[i].NexthopAddresses[ci].Permanent = types.BoolValue(true)
				} else {
					data.Vrfs[i].NexthopAddresses[ci].Permanent = types.BoolValue(false)
				}
			} else {
				data.Vrfs[i].NexthopAddresses[ci].Permanent = types.BoolNull()
			}
			if value := cr.Get("track"); value.Exists() && !data.Vrfs[i].NexthopAddresses[ci].Track.IsNull() {
				data.Vrfs[i].NexthopAddresses[ci].Track = types.StringValue(value.String())
			} else {
				data.Vrfs[i].NexthopAddresses[ci].Track = types.StringNull()
			}
			if value := cr.Get("metric"); value.Exists() && !data.Vrfs[i].NexthopAddresses[ci].Metric.IsNull() {
				data.Vrfs[i].NexthopAddresses[ci].Metric = types.Int64Value(value.Int())
			} else {
				data.Vrfs[i].NexthopAddresses[ci].Metric = types.Int64Null()
			}
		}
	}
}

func (data *RouterStaticVRFIPv4Unicast) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "nexthop-interfaces.nexthop-interface"); value.Exists() {
		data.NexthopInterfaces = make([]RouterStaticVRFIPv4UnicastNexthopInterfaces, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterStaticVRFIPv4UnicastNexthopInterfaces{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("description"); cValue.Exists() {
				item.Description = types.StringValue(cValue.String())
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("distance-metric"); cValue.Exists() {
				item.DistanceMetric = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("permanent"); cValue.Exists() {
				item.Permanent = types.BoolValue(true)
			} else {
				item.Permanent = types.BoolValue(false)
			}
			if cValue := v.Get("track"); cValue.Exists() {
				item.Track = types.StringValue(cValue.String())
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric = types.Int64Value(cValue.Int())
			}
			data.NexthopInterfaces = append(data.NexthopInterfaces, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "nexthop-interface-addresses.nexthop-interface-address"); value.Exists() {
		data.NexthopInterfaceAddresses = make([]RouterStaticVRFIPv4UnicastNexthopInterfaceAddresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterStaticVRFIPv4UnicastNexthopInterfaceAddresses{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("description"); cValue.Exists() {
				item.Description = types.StringValue(cValue.String())
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("distance-metric"); cValue.Exists() {
				item.DistanceMetric = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("permanent"); cValue.Exists() {
				item.Permanent = types.BoolValue(true)
			} else {
				item.Permanent = types.BoolValue(false)
			}
			if cValue := v.Get("track"); cValue.Exists() {
				item.Track = types.StringValue(cValue.String())
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("bfd.fast-detect.minimum-interval"); cValue.Exists() {
				item.BfdFastDetectMinimumInterval = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("bfd.fast-detect.multiplier"); cValue.Exists() {
				item.BfdFastDetectMultiplier = types.Int64Value(cValue.Int())
			}
			data.NexthopInterfaceAddresses = append(data.NexthopInterfaceAddresses, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "nexthop-addresses.nexthop-address"); value.Exists() {
		data.NexthopAddresses = make([]RouterStaticVRFIPv4UnicastNexthopAddresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterStaticVRFIPv4UnicastNexthopAddresses{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("description"); cValue.Exists() {
				item.Description = types.StringValue(cValue.String())
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("distance-metric"); cValue.Exists() {
				item.DistanceMetric = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("permanent"); cValue.Exists() {
				item.Permanent = types.BoolValue(true)
			} else {
				item.Permanent = types.BoolValue(false)
			}
			if cValue := v.Get("track"); cValue.Exists() {
				item.Track = types.StringValue(cValue.String())
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric = types.Int64Value(cValue.Int())
			}
			data.NexthopAddresses = append(data.NexthopAddresses, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "vrfs.vrf"); value.Exists() {
		data.Vrfs = make([]RouterStaticVRFIPv4UnicastVrfs, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterStaticVRFIPv4UnicastVrfs{}
			if cValue := v.Get("vrf-name"); cValue.Exists() {
				item.VrfName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("nexthop-interfaces.nexthop-interface"); cValue.Exists() {
				item.NexthopInterfaces = make([]RouterStaticVRFIPv4UnicastVrfsNexthopInterfaces, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterStaticVRFIPv4UnicastVrfsNexthopInterfaces{}
					if ccValue := cv.Get("interface-name"); ccValue.Exists() {
						cItem.InterfaceName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("description"); ccValue.Exists() {
						cItem.Description = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("tag"); ccValue.Exists() {
						cItem.Tag = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("distance-metric"); ccValue.Exists() {
						cItem.DistanceMetric = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("permanent"); ccValue.Exists() {
						cItem.Permanent = types.BoolValue(true)
					} else {
						cItem.Permanent = types.BoolValue(false)
					}
					if ccValue := cv.Get("track"); ccValue.Exists() {
						cItem.Track = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("metric"); ccValue.Exists() {
						cItem.Metric = types.Int64Value(ccValue.Int())
					}
					item.NexthopInterfaces = append(item.NexthopInterfaces, cItem)
					return true
				})
			}
			if cValue := v.Get("nexthop-interface-addresses.nexthop-interface-address"); cValue.Exists() {
				item.NexthopInterfaceAddresses = make([]RouterStaticVRFIPv4UnicastVrfsNexthopInterfaceAddresses, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterStaticVRFIPv4UnicastVrfsNexthopInterfaceAddresses{}
					if ccValue := cv.Get("interface-name"); ccValue.Exists() {
						cItem.InterfaceName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("address"); ccValue.Exists() {
						cItem.Address = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("description"); ccValue.Exists() {
						cItem.Description = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("tag"); ccValue.Exists() {
						cItem.Tag = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("distance-metric"); ccValue.Exists() {
						cItem.DistanceMetric = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("permanent"); ccValue.Exists() {
						cItem.Permanent = types.BoolValue(true)
					} else {
						cItem.Permanent = types.BoolValue(false)
					}
					if ccValue := cv.Get("track"); ccValue.Exists() {
						cItem.Track = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("metric"); ccValue.Exists() {
						cItem.Metric = types.Int64Value(ccValue.Int())
					}
					item.NexthopInterfaceAddresses = append(item.NexthopInterfaceAddresses, cItem)
					return true
				})
			}
			if cValue := v.Get("nexthop-addresses.nexthop-address"); cValue.Exists() {
				item.NexthopAddresses = make([]RouterStaticVRFIPv4UnicastVrfsNexthopAddresses, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterStaticVRFIPv4UnicastVrfsNexthopAddresses{}
					if ccValue := cv.Get("address"); ccValue.Exists() {
						cItem.Address = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("description"); ccValue.Exists() {
						cItem.Description = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("tag"); ccValue.Exists() {
						cItem.Tag = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("distance-metric"); ccValue.Exists() {
						cItem.DistanceMetric = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("permanent"); ccValue.Exists() {
						cItem.Permanent = types.BoolValue(true)
					} else {
						cItem.Permanent = types.BoolValue(false)
					}
					if ccValue := cv.Get("track"); ccValue.Exists() {
						cItem.Track = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("metric"); ccValue.Exists() {
						cItem.Metric = types.Int64Value(ccValue.Int())
					}
					item.NexthopAddresses = append(item.NexthopAddresses, cItem)
					return true
				})
			}
			data.Vrfs = append(data.Vrfs, item)
			return true
		})
	}
}

func (data *RouterStaticVRFIPv4UnicastData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "nexthop-interfaces.nexthop-interface"); value.Exists() {
		data.NexthopInterfaces = make([]RouterStaticVRFIPv4UnicastNexthopInterfaces, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterStaticVRFIPv4UnicastNexthopInterfaces{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("description"); cValue.Exists() {
				item.Description = types.StringValue(cValue.String())
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("distance-metric"); cValue.Exists() {
				item.DistanceMetric = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("permanent"); cValue.Exists() {
				item.Permanent = types.BoolValue(true)
			} else {
				item.Permanent = types.BoolValue(false)
			}
			if cValue := v.Get("track"); cValue.Exists() {
				item.Track = types.StringValue(cValue.String())
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric = types.Int64Value(cValue.Int())
			}
			data.NexthopInterfaces = append(data.NexthopInterfaces, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "nexthop-interface-addresses.nexthop-interface-address"); value.Exists() {
		data.NexthopInterfaceAddresses = make([]RouterStaticVRFIPv4UnicastNexthopInterfaceAddresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterStaticVRFIPv4UnicastNexthopInterfaceAddresses{}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("description"); cValue.Exists() {
				item.Description = types.StringValue(cValue.String())
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("distance-metric"); cValue.Exists() {
				item.DistanceMetric = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("permanent"); cValue.Exists() {
				item.Permanent = types.BoolValue(true)
			} else {
				item.Permanent = types.BoolValue(false)
			}
			if cValue := v.Get("track"); cValue.Exists() {
				item.Track = types.StringValue(cValue.String())
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("bfd.fast-detect.minimum-interval"); cValue.Exists() {
				item.BfdFastDetectMinimumInterval = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("bfd.fast-detect.multiplier"); cValue.Exists() {
				item.BfdFastDetectMultiplier = types.Int64Value(cValue.Int())
			}
			data.NexthopInterfaceAddresses = append(data.NexthopInterfaceAddresses, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "nexthop-addresses.nexthop-address"); value.Exists() {
		data.NexthopAddresses = make([]RouterStaticVRFIPv4UnicastNexthopAddresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterStaticVRFIPv4UnicastNexthopAddresses{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("description"); cValue.Exists() {
				item.Description = types.StringValue(cValue.String())
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("distance-metric"); cValue.Exists() {
				item.DistanceMetric = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("permanent"); cValue.Exists() {
				item.Permanent = types.BoolValue(true)
			} else {
				item.Permanent = types.BoolValue(false)
			}
			if cValue := v.Get("track"); cValue.Exists() {
				item.Track = types.StringValue(cValue.String())
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric = types.Int64Value(cValue.Int())
			}
			data.NexthopAddresses = append(data.NexthopAddresses, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "vrfs.vrf"); value.Exists() {
		data.Vrfs = make([]RouterStaticVRFIPv4UnicastVrfs, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := RouterStaticVRFIPv4UnicastVrfs{}
			if cValue := v.Get("vrf-name"); cValue.Exists() {
				item.VrfName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("nexthop-interfaces.nexthop-interface"); cValue.Exists() {
				item.NexthopInterfaces = make([]RouterStaticVRFIPv4UnicastVrfsNexthopInterfaces, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterStaticVRFIPv4UnicastVrfsNexthopInterfaces{}
					if ccValue := cv.Get("interface-name"); ccValue.Exists() {
						cItem.InterfaceName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("description"); ccValue.Exists() {
						cItem.Description = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("tag"); ccValue.Exists() {
						cItem.Tag = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("distance-metric"); ccValue.Exists() {
						cItem.DistanceMetric = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("permanent"); ccValue.Exists() {
						cItem.Permanent = types.BoolValue(true)
					} else {
						cItem.Permanent = types.BoolValue(false)
					}
					if ccValue := cv.Get("track"); ccValue.Exists() {
						cItem.Track = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("metric"); ccValue.Exists() {
						cItem.Metric = types.Int64Value(ccValue.Int())
					}
					item.NexthopInterfaces = append(item.NexthopInterfaces, cItem)
					return true
				})
			}
			if cValue := v.Get("nexthop-interface-addresses.nexthop-interface-address"); cValue.Exists() {
				item.NexthopInterfaceAddresses = make([]RouterStaticVRFIPv4UnicastVrfsNexthopInterfaceAddresses, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterStaticVRFIPv4UnicastVrfsNexthopInterfaceAddresses{}
					if ccValue := cv.Get("interface-name"); ccValue.Exists() {
						cItem.InterfaceName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("address"); ccValue.Exists() {
						cItem.Address = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("description"); ccValue.Exists() {
						cItem.Description = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("tag"); ccValue.Exists() {
						cItem.Tag = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("distance-metric"); ccValue.Exists() {
						cItem.DistanceMetric = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("permanent"); ccValue.Exists() {
						cItem.Permanent = types.BoolValue(true)
					} else {
						cItem.Permanent = types.BoolValue(false)
					}
					if ccValue := cv.Get("track"); ccValue.Exists() {
						cItem.Track = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("metric"); ccValue.Exists() {
						cItem.Metric = types.Int64Value(ccValue.Int())
					}
					item.NexthopInterfaceAddresses = append(item.NexthopInterfaceAddresses, cItem)
					return true
				})
			}
			if cValue := v.Get("nexthop-addresses.nexthop-address"); cValue.Exists() {
				item.NexthopAddresses = make([]RouterStaticVRFIPv4UnicastVrfsNexthopAddresses, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := RouterStaticVRFIPv4UnicastVrfsNexthopAddresses{}
					if ccValue := cv.Get("address"); ccValue.Exists() {
						cItem.Address = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("description"); ccValue.Exists() {
						cItem.Description = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("tag"); ccValue.Exists() {
						cItem.Tag = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("distance-metric"); ccValue.Exists() {
						cItem.DistanceMetric = types.Int64Value(ccValue.Int())
					}
					if ccValue := cv.Get("permanent"); ccValue.Exists() {
						cItem.Permanent = types.BoolValue(true)
					} else {
						cItem.Permanent = types.BoolValue(false)
					}
					if ccValue := cv.Get("track"); ccValue.Exists() {
						cItem.Track = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("metric"); ccValue.Exists() {
						cItem.Metric = types.Int64Value(ccValue.Int())
					}
					item.NexthopAddresses = append(item.NexthopAddresses, cItem)
					return true
				})
			}
			data.Vrfs = append(data.Vrfs, item)
			return true
		})
	}
}

func (data *RouterStaticVRFIPv4Unicast) getDeletedItems(ctx context.Context, state RouterStaticVRFIPv4Unicast) []string {
	deletedItems := make([]string, 0)
	for i := range state.NexthopInterfaces {
		keys := [...]string{"interface-name"}
		stateKeyValues := [...]string{state.NexthopInterfaces[i].InterfaceName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.NexthopInterfaces[i].InterfaceName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.NexthopInterfaces {
			found = true
			if state.NexthopInterfaces[i].InterfaceName.ValueString() != data.NexthopInterfaces[j].InterfaceName.ValueString() {
				found = false
			}
			if found {
				if !state.NexthopInterfaces[i].Description.IsNull() && data.NexthopInterfaces[j].Description.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v/description", state.getPath(), keyString))
				}
				if !state.NexthopInterfaces[i].Tag.IsNull() && data.NexthopInterfaces[j].Tag.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v/tag", state.getPath(), keyString))
				}
				if !state.NexthopInterfaces[i].DistanceMetric.IsNull() && data.NexthopInterfaces[j].DistanceMetric.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v/distance-metric", state.getPath(), keyString))
				}
				if !state.NexthopInterfaces[i].Permanent.IsNull() && data.NexthopInterfaces[j].Permanent.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v/permanent", state.getPath(), keyString))
				}
				if !state.NexthopInterfaces[i].Track.IsNull() && data.NexthopInterfaces[j].Track.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v/track", state.getPath(), keyString))
				}
				if !state.NexthopInterfaces[i].Metric.IsNull() && data.NexthopInterfaces[j].Metric.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v/metric", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v", state.getPath(), keyString))
		}
	}
	for i := range state.NexthopInterfaceAddresses {
		keys := [...]string{"interface-name", "address"}
		stateKeyValues := [...]string{state.NexthopInterfaceAddresses[i].InterfaceName.ValueString(), state.NexthopInterfaceAddresses[i].Address.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.NexthopInterfaceAddresses[i].InterfaceName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.NexthopInterfaceAddresses[i].Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.NexthopInterfaceAddresses {
			found = true
			if state.NexthopInterfaceAddresses[i].InterfaceName.ValueString() != data.NexthopInterfaceAddresses[j].InterfaceName.ValueString() {
				found = false
			}
			if state.NexthopInterfaceAddresses[i].Address.ValueString() != data.NexthopInterfaceAddresses[j].Address.ValueString() {
				found = false
			}
			if found {
				if !state.NexthopInterfaceAddresses[i].Description.IsNull() && data.NexthopInterfaceAddresses[j].Description.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/description", state.getPath(), keyString))
				}
				if !state.NexthopInterfaceAddresses[i].Tag.IsNull() && data.NexthopInterfaceAddresses[j].Tag.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/tag", state.getPath(), keyString))
				}
				if !state.NexthopInterfaceAddresses[i].DistanceMetric.IsNull() && data.NexthopInterfaceAddresses[j].DistanceMetric.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/distance-metric", state.getPath(), keyString))
				}
				if !state.NexthopInterfaceAddresses[i].Permanent.IsNull() && data.NexthopInterfaceAddresses[j].Permanent.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/permanent", state.getPath(), keyString))
				}
				if !state.NexthopInterfaceAddresses[i].Track.IsNull() && data.NexthopInterfaceAddresses[j].Track.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/track", state.getPath(), keyString))
				}
				if !state.NexthopInterfaceAddresses[i].Metric.IsNull() && data.NexthopInterfaceAddresses[j].Metric.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/metric", state.getPath(), keyString))
				}
				if !state.NexthopInterfaceAddresses[i].BfdFastDetectMinimumInterval.IsNull() && data.NexthopInterfaceAddresses[j].BfdFastDetectMinimumInterval.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/bfd/fast-detect/minimum-interval", state.getPath(), keyString))
				}
				if !state.NexthopInterfaceAddresses[i].BfdFastDetectMultiplier.IsNull() && data.NexthopInterfaceAddresses[j].BfdFastDetectMultiplier.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/bfd/fast-detect/multiplier", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v", state.getPath(), keyString))
		}
	}
	for i := range state.NexthopAddresses {
		keys := [...]string{"address"}
		stateKeyValues := [...]string{state.NexthopAddresses[i].Address.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.NexthopAddresses[i].Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.NexthopAddresses {
			found = true
			if state.NexthopAddresses[i].Address.ValueString() != data.NexthopAddresses[j].Address.ValueString() {
				found = false
			}
			if found {
				if !state.NexthopAddresses[i].Description.IsNull() && data.NexthopAddresses[j].Description.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v/description", state.getPath(), keyString))
				}
				if !state.NexthopAddresses[i].Tag.IsNull() && data.NexthopAddresses[j].Tag.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v/tag", state.getPath(), keyString))
				}
				if !state.NexthopAddresses[i].DistanceMetric.IsNull() && data.NexthopAddresses[j].DistanceMetric.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v/distance-metric", state.getPath(), keyString))
				}
				if !state.NexthopAddresses[i].Permanent.IsNull() && data.NexthopAddresses[j].Permanent.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v/permanent", state.getPath(), keyString))
				}
				if !state.NexthopAddresses[i].Track.IsNull() && data.NexthopAddresses[j].Track.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v/track", state.getPath(), keyString))
				}
				if !state.NexthopAddresses[i].Metric.IsNull() && data.NexthopAddresses[j].Metric.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v/metric", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v", state.getPath(), keyString))
		}
	}
	for i := range state.Vrfs {
		keys := [...]string{"vrf-name"}
		stateKeyValues := [...]string{state.Vrfs[i].VrfName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Vrfs[i].VrfName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Vrfs {
			found = true
			if state.Vrfs[i].VrfName.ValueString() != data.Vrfs[j].VrfName.ValueString() {
				found = false
			}
			if found {
				for ci := range state.Vrfs[i].NexthopInterfaces {
					ckeys := [...]string{"interface-name"}
					cstateKeyValues := [...]string{state.Vrfs[i].NexthopInterfaces[ci].InterfaceName.ValueString()}
					ckeyString := ""
					for cki := range ckeys {
						ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
					}

					cemptyKeys := true
					if !reflect.ValueOf(state.Vrfs[i].NexthopInterfaces[ci].InterfaceName.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.Vrfs[j].NexthopInterfaces {
						found = true
						if state.Vrfs[i].NexthopInterfaces[ci].InterfaceName.ValueString() != data.Vrfs[j].NexthopInterfaces[cj].InterfaceName.ValueString() {
							found = false
						}
						if found {
							if !state.Vrfs[i].NexthopInterfaces[ci].Description.IsNull() && data.Vrfs[j].NexthopInterfaces[cj].Description.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interfaces/nexthop-interface%v/description", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaces[ci].Tag.IsNull() && data.Vrfs[j].NexthopInterfaces[cj].Tag.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interfaces/nexthop-interface%v/tag", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaces[ci].DistanceMetric.IsNull() && data.Vrfs[j].NexthopInterfaces[cj].DistanceMetric.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interfaces/nexthop-interface%v/distance-metric", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaces[ci].Permanent.IsNull() && data.Vrfs[j].NexthopInterfaces[cj].Permanent.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interfaces/nexthop-interface%v/permanent", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaces[ci].Track.IsNull() && data.Vrfs[j].NexthopInterfaces[cj].Track.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interfaces/nexthop-interface%v/track", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaces[ci].Metric.IsNull() && data.Vrfs[j].NexthopInterfaces[cj].Metric.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interfaces/nexthop-interface%v/metric", state.getPath(), keyString, ckeyString))
							}
							break
						}
					}
					if !found {
						deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interfaces/nexthop-interface%v", state.getPath(), keyString, ckeyString))
					}
				}
				for ci := range state.Vrfs[i].NexthopInterfaceAddresses {
					ckeys := [...]string{"interface-name", "address"}
					cstateKeyValues := [...]string{state.Vrfs[i].NexthopInterfaceAddresses[ci].InterfaceName.ValueString(), state.Vrfs[i].NexthopInterfaceAddresses[ci].Address.ValueString()}
					ckeyString := ""
					for cki := range ckeys {
						ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
					}

					cemptyKeys := true
					if !reflect.ValueOf(state.Vrfs[i].NexthopInterfaceAddresses[ci].InterfaceName.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if !reflect.ValueOf(state.Vrfs[i].NexthopInterfaceAddresses[ci].Address.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.Vrfs[j].NexthopInterfaceAddresses {
						found = true
						if state.Vrfs[i].NexthopInterfaceAddresses[ci].InterfaceName.ValueString() != data.Vrfs[j].NexthopInterfaceAddresses[cj].InterfaceName.ValueString() {
							found = false
						}
						if state.Vrfs[i].NexthopInterfaceAddresses[ci].Address.ValueString() != data.Vrfs[j].NexthopInterfaceAddresses[cj].Address.ValueString() {
							found = false
						}
						if found {
							if !state.Vrfs[i].NexthopInterfaceAddresses[ci].Description.IsNull() && data.Vrfs[j].NexthopInterfaceAddresses[cj].Description.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interface-addresses/nexthop-interface-address%v/description", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaceAddresses[ci].Tag.IsNull() && data.Vrfs[j].NexthopInterfaceAddresses[cj].Tag.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interface-addresses/nexthop-interface-address%v/tag", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaceAddresses[ci].DistanceMetric.IsNull() && data.Vrfs[j].NexthopInterfaceAddresses[cj].DistanceMetric.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interface-addresses/nexthop-interface-address%v/distance-metric", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaceAddresses[ci].Permanent.IsNull() && data.Vrfs[j].NexthopInterfaceAddresses[cj].Permanent.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interface-addresses/nexthop-interface-address%v/permanent", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaceAddresses[ci].Track.IsNull() && data.Vrfs[j].NexthopInterfaceAddresses[cj].Track.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interface-addresses/nexthop-interface-address%v/track", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopInterfaceAddresses[ci].Metric.IsNull() && data.Vrfs[j].NexthopInterfaceAddresses[cj].Metric.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interface-addresses/nexthop-interface-address%v/metric", state.getPath(), keyString, ckeyString))
							}
							break
						}
					}
					if !found {
						deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-interface-addresses/nexthop-interface-address%v", state.getPath(), keyString, ckeyString))
					}
				}
				for ci := range state.Vrfs[i].NexthopAddresses {
					ckeys := [...]string{"address"}
					cstateKeyValues := [...]string{state.Vrfs[i].NexthopAddresses[ci].Address.ValueString()}
					ckeyString := ""
					for cki := range ckeys {
						ckeyString += "[" + ckeys[cki] + "=" + cstateKeyValues[cki] + "]"
					}

					cemptyKeys := true
					if !reflect.ValueOf(state.Vrfs[i].NexthopAddresses[ci].Address.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.Vrfs[j].NexthopAddresses {
						found = true
						if state.Vrfs[i].NexthopAddresses[ci].Address.ValueString() != data.Vrfs[j].NexthopAddresses[cj].Address.ValueString() {
							found = false
						}
						if found {
							if !state.Vrfs[i].NexthopAddresses[ci].Description.IsNull() && data.Vrfs[j].NexthopAddresses[cj].Description.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-addresses/nexthop-address%v/description", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopAddresses[ci].Tag.IsNull() && data.Vrfs[j].NexthopAddresses[cj].Tag.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-addresses/nexthop-address%v/tag", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopAddresses[ci].DistanceMetric.IsNull() && data.Vrfs[j].NexthopAddresses[cj].DistanceMetric.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-addresses/nexthop-address%v/distance-metric", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopAddresses[ci].Permanent.IsNull() && data.Vrfs[j].NexthopAddresses[cj].Permanent.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-addresses/nexthop-address%v/permanent", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopAddresses[ci].Track.IsNull() && data.Vrfs[j].NexthopAddresses[cj].Track.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-addresses/nexthop-address%v/track", state.getPath(), keyString, ckeyString))
							}
							if !state.Vrfs[i].NexthopAddresses[ci].Metric.IsNull() && data.Vrfs[j].NexthopAddresses[cj].Metric.IsNull() {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-addresses/nexthop-address%v/metric", state.getPath(), keyString, ckeyString))
							}
							break
						}
					}
					if !found {
						deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v/nexthop-addresses/nexthop-address%v", state.getPath(), keyString, ckeyString))
					}
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/vrfs/vrf%v", state.getPath(), keyString))
		}
	}
	return deletedItems
}

func (data *RouterStaticVRFIPv4Unicast) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	for i := range data.NexthopInterfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.NexthopInterfaces[i].InterfaceName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.NexthopInterfaces[i].Permanent.IsNull() && !data.NexthopInterfaces[i].Permanent.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v/permanent", data.getPath(), keyString))
		}
	}
	for i := range data.NexthopInterfaceAddresses {
		keys := [...]string{"interface-name", "address"}
		keyValues := [...]string{data.NexthopInterfaceAddresses[i].InterfaceName.ValueString(), data.NexthopInterfaceAddresses[i].Address.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.NexthopInterfaceAddresses[i].Permanent.IsNull() && !data.NexthopInterfaceAddresses[i].Permanent.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v/permanent", data.getPath(), keyString))
		}
	}
	for i := range data.NexthopAddresses {
		keys := [...]string{"address"}
		keyValues := [...]string{data.NexthopAddresses[i].Address.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.NexthopAddresses[i].Permanent.IsNull() && !data.NexthopAddresses[i].Permanent.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v/permanent", data.getPath(), keyString))
		}
	}
	for i := range data.Vrfs {
		keys := [...]string{"vrf-name"}
		keyValues := [...]string{data.Vrfs[i].VrfName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		for ci := range data.Vrfs[i].NexthopInterfaces {
			ckeys := [...]string{"interface-name"}
			ckeyValues := [...]string{data.Vrfs[i].NexthopInterfaces[ci].InterfaceName.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
			if !data.Vrfs[i].NexthopInterfaces[ci].Permanent.IsNull() && !data.Vrfs[i].NexthopInterfaces[ci].Permanent.ValueBool() {
				emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/vrfs/vrf%v/permanent/nexthop-interfaces/nexthop-interface%v/permanent", data.getPath(), keyString, ckeyString))
			}
		}
		for ci := range data.Vrfs[i].NexthopInterfaceAddresses {
			ckeys := [...]string{"interface-name", "address"}
			ckeyValues := [...]string{data.Vrfs[i].NexthopInterfaceAddresses[ci].InterfaceName.ValueString(), data.Vrfs[i].NexthopInterfaceAddresses[ci].Address.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
			if !data.Vrfs[i].NexthopInterfaceAddresses[ci].Permanent.IsNull() && !data.Vrfs[i].NexthopInterfaceAddresses[ci].Permanent.ValueBool() {
				emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/vrfs/vrf%v/permanent/nexthop-interface-addresses/nexthop-interface-address%v/permanent", data.getPath(), keyString, ckeyString))
			}
		}
		for ci := range data.Vrfs[i].NexthopAddresses {
			ckeys := [...]string{"address"}
			ckeyValues := [...]string{data.Vrfs[i].NexthopAddresses[ci].Address.ValueString()}
			ckeyString := ""
			for cki := range ckeys {
				ckeyString += "[" + ckeys[cki] + "=" + ckeyValues[cki] + "]"
			}
			if !data.Vrfs[i].NexthopAddresses[ci].Permanent.IsNull() && !data.Vrfs[i].NexthopAddresses[ci].Permanent.ValueBool() {
				emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/vrfs/vrf%v/permanent/nexthop-addresses/nexthop-address%v/permanent", data.getPath(), keyString, ckeyString))
			}
		}
	}
	return emptyLeafsDelete
}

func (data *RouterStaticVRFIPv4Unicast) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.NexthopInterfaces {
		keys := [...]string{"interface-name"}
		keyValues := [...]string{data.NexthopInterfaces[i].InterfaceName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/nexthop-interfaces/nexthop-interface%v", data.getPath(), keyString))
	}
	for i := range data.NexthopInterfaceAddresses {
		keys := [...]string{"interface-name", "address"}
		keyValues := [...]string{data.NexthopInterfaceAddresses[i].InterfaceName.ValueString(), data.NexthopInterfaceAddresses[i].Address.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/nexthop-interface-addresses/nexthop-interface-address%v", data.getPath(), keyString))
	}
	for i := range data.NexthopAddresses {
		keys := [...]string{"address"}
		keyValues := [...]string{data.NexthopAddresses[i].Address.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/nexthop-addresses/nexthop-address%v", data.getPath(), keyString))
	}
	for i := range data.Vrfs {
		keys := [...]string{"vrf-name"}
		keyValues := [...]string{data.Vrfs[i].VrfName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/vrfs/vrf%v", data.getPath(), keyString))
	}
	return deletePaths
}
