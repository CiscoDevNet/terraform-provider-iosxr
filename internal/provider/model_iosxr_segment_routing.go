// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type SegmentRouting struct {
	Device                types.String `tfsdk:"device"`
	Id                    types.String `tfsdk:"id"`
	DeleteMode            types.String `tfsdk:"delete_mode"`
	GlobalBlockLowerBound types.Int64  `tfsdk:"global_block_lower_bound"`
	GlobalBlockUpperBound types.Int64  `tfsdk:"global_block_upper_bound"`
	LocalBlockLowerBound  types.Int64  `tfsdk:"local_block_lower_bound"`
	LocalBlockUpperBound  types.Int64  `tfsdk:"local_block_upper_bound"`
	Enable                types.Bool   `tfsdk:"enable"`
}

type SegmentRoutingData struct {
	Device                types.String `tfsdk:"device"`
	Id                    types.String `tfsdk:"id"`
	GlobalBlockLowerBound types.Int64  `tfsdk:"global_block_lower_bound"`
	GlobalBlockUpperBound types.Int64  `tfsdk:"global_block_upper_bound"`
	LocalBlockLowerBound  types.Int64  `tfsdk:"local_block_lower_bound"`
	LocalBlockUpperBound  types.Int64  `tfsdk:"local_block_upper_bound"`
	Enable                types.Bool   `tfsdk:"enable"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data SegmentRouting) getPath() string {
	return "Cisco-IOS-XR-segment-routing-ms-cfg:/sr"
}

func (data SegmentRoutingData) getPath() string {
	return "Cisco-IOS-XR-segment-routing-ms-cfg:/sr"
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data SegmentRouting) toBody(ctx context.Context) string {
	body := "{}"
	if !data.GlobalBlockLowerBound.IsNull() && !data.GlobalBlockLowerBound.IsUnknown() {
		body, _ = sjson.Set(body, "global-block.lower-bound", strconv.FormatInt(data.GlobalBlockLowerBound.ValueInt64(), 10))
	}
	if !data.GlobalBlockUpperBound.IsNull() && !data.GlobalBlockUpperBound.IsUnknown() {
		body, _ = sjson.Set(body, "global-block.upper-bound", strconv.FormatInt(data.GlobalBlockUpperBound.ValueInt64(), 10))
	}
	if !data.LocalBlockLowerBound.IsNull() && !data.LocalBlockLowerBound.IsUnknown() {
		body, _ = sjson.Set(body, "local-block.lower-bound", strconv.FormatInt(data.LocalBlockLowerBound.ValueInt64(), 10))
	}
	if !data.LocalBlockUpperBound.IsNull() && !data.LocalBlockUpperBound.IsUnknown() {
		body, _ = sjson.Set(body, "local-block.upper-bound", strconv.FormatInt(data.LocalBlockUpperBound.ValueInt64(), 10))
	}
	if !data.Enable.IsNull() && !data.Enable.IsUnknown() {
		if data.Enable.ValueBool() {
			body, _ = sjson.Set(body, "enable", map[string]string{})
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *SegmentRouting) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "global-block.lower-bound"); value.Exists() && !data.GlobalBlockLowerBound.IsNull() {
		data.GlobalBlockLowerBound = types.Int64Value(value.Int())
	} else {
		data.GlobalBlockLowerBound = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "global-block.upper-bound"); value.Exists() && !data.GlobalBlockUpperBound.IsNull() {
		data.GlobalBlockUpperBound = types.Int64Value(value.Int())
	} else {
		data.GlobalBlockUpperBound = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "local-block.lower-bound"); value.Exists() && !data.LocalBlockLowerBound.IsNull() {
		data.LocalBlockLowerBound = types.Int64Value(value.Int())
	} else {
		data.LocalBlockLowerBound = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "local-block.upper-bound"); value.Exists() && !data.LocalBlockUpperBound.IsNull() {
		data.LocalBlockUpperBound = types.Int64Value(value.Int())
	} else {
		data.LocalBlockUpperBound = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "enable"); !data.Enable.IsNull() {
		if value.Exists() {
			data.Enable = types.BoolValue(true)
		} else {
			data.Enable = types.BoolValue(false)
		}
	} else {
		data.Enable = types.BoolNull()
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *SegmentRouting) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "global-block.lower-bound"); value.Exists() {
		data.GlobalBlockLowerBound = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "global-block.upper-bound"); value.Exists() {
		data.GlobalBlockUpperBound = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "local-block.lower-bound"); value.Exists() {
		data.LocalBlockLowerBound = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "local-block.upper-bound"); value.Exists() {
		data.LocalBlockUpperBound = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "enable"); value.Exists() {
		data.Enable = types.BoolValue(true)
	} else {
		data.Enable = types.BoolValue(false)
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *SegmentRoutingData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "global-block.lower-bound"); value.Exists() {
		data.GlobalBlockLowerBound = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "global-block.upper-bound"); value.Exists() {
		data.GlobalBlockUpperBound = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "local-block.lower-bound"); value.Exists() {
		data.LocalBlockLowerBound = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "local-block.upper-bound"); value.Exists() {
		data.LocalBlockUpperBound = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "enable"); value.Exists() {
		data.Enable = types.BoolValue(true)
	} else {
		data.Enable = types.BoolValue(false)
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *SegmentRouting) getDeletedItems(ctx context.Context, state SegmentRouting) []string {
	deletedItems := make([]string, 0)
	if !state.GlobalBlockLowerBound.IsNull() && data.GlobalBlockLowerBound.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/global-block", state.getPath()))
	}
	if !state.GlobalBlockUpperBound.IsNull() && data.GlobalBlockUpperBound.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/global-block", state.getPath()))
	}
	if !state.LocalBlockLowerBound.IsNull() && data.LocalBlockLowerBound.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/local-block", state.getPath()))
	}
	if !state.LocalBlockUpperBound.IsNull() && data.LocalBlockUpperBound.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/local-block", state.getPath()))
	}
	if !state.Enable.IsNull() && data.Enable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/enable", state.getPath()))
	}
	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *SegmentRouting) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.Enable.IsNull() && !data.Enable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/enable", data.getPath()))
	}
	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *SegmentRouting) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.GlobalBlockLowerBound.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/global-block", data.getPath()))
	}
	if !data.GlobalBlockUpperBound.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/global-block", data.getPath()))
	}
	if !data.LocalBlockLowerBound.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/local-block", data.getPath()))
	}
	if !data.LocalBlockUpperBound.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/local-block", data.getPath()))
	}
	if !data.Enable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/enable", data.getPath()))
	}
	return deletePaths
}

// End of section. //template:end getDeletePaths
