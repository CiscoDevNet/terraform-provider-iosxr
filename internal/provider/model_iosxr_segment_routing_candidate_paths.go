// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SegmentRoutingCandidatePaths struct {
	Device             types.String                                     `tfsdk:"device"`
	Id                 types.String                                     `tfsdk:"id"`
	PolicyName         types.String                                     `tfsdk:"policy_name"`
	PathIndex          types.Int64                                      `tfsdk:"path_index"`
	CandidatePathsType []SegmentRoutingCandidatePathsCandidatePathsType `tfsdk:"candidate_paths_type"`
}
type SegmentRoutingCandidatePathsCandidatePathsType struct {
	Type             types.String `tfsdk:"type"`
	Pcep             types.Bool   `tfsdk:"pcep"`
	MetricMetricType types.String `tfsdk:"metric_metric_type"`
	HopType          types.String `tfsdk:"hop_type"`
	SegmentListName  types.String `tfsdk:"segment_list_name"`
}

func (data SegmentRoutingCandidatePaths) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-segment-routing-ms-cfg:/sr/Cisco-IOS-XR-infra-xtc-agent-cfg:traffic-engineering/policies/policy[policy-name=%s]/candidate-paths/preferences/preference[path-index=%d]", data.PolicyName.ValueString(), data.PathIndex.ValueInt64())
}

func (data SegmentRoutingCandidatePaths) toBody(ctx context.Context) string {
	body := "{}"
	if !data.PathIndex.IsNull() && !data.PathIndex.IsUnknown() {
		body, _ = sjson.Set(body, "path-index", strconv.FormatInt(data.PathIndex.ValueInt64(), 10))
	}
	if len(data.CandidatePathsType) > 0 {
		body, _ = sjson.Set(body, "path-infos.path-info", []interface{}{})
		for index, item := range data.CandidatePathsType {
			if !item.Type.IsNull() && !item.Type.IsUnknown() {
				body, _ = sjson.Set(body, "path-infos.path-info"+"."+strconv.Itoa(index)+"."+"type", item.Type.ValueString())
			}
			if !item.Pcep.IsNull() && !item.Pcep.IsUnknown() {
				if item.Pcep.ValueBool() {
					body, _ = sjson.Set(body, "path-infos.path-info"+"."+strconv.Itoa(index)+"."+"pcep", map[string]string{})
				}
			}
			if !item.MetricMetricType.IsNull() && !item.MetricMetricType.IsUnknown() {
				body, _ = sjson.Set(body, "path-infos.path-info"+"."+strconv.Itoa(index)+"."+"metric.metric-type", item.MetricMetricType.ValueString())
			}
			if !item.HopType.IsNull() && !item.HopType.IsUnknown() {
				body, _ = sjson.Set(body, "path-infos.path-info"+"."+strconv.Itoa(index)+"."+"hop-type", item.HopType.ValueString())
			}
			if !item.SegmentListName.IsNull() && !item.SegmentListName.IsUnknown() {
				body, _ = sjson.Set(body, "path-infos.path-info"+"."+strconv.Itoa(index)+"."+"segment-list-name", item.SegmentListName.ValueString())
			}
		}
	}
	return body
}

func (data *SegmentRoutingCandidatePaths) updateFromBody(ctx context.Context, res []byte) {
	for i := range data.CandidatePathsType {
		keys := [...]string{"type", "hop-type", "segment-list-name"}
		keyValues := [...]string{data.CandidatePathsType[i].Type.ValueString(), data.CandidatePathsType[i].HopType.ValueString(), data.CandidatePathsType[i].SegmentListName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "path-infos.path-info").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("type"); value.Exists() && !data.CandidatePathsType[i].Type.IsNull() {
			data.CandidatePathsType[i].Type = types.StringValue(value.String())
		} else {
			data.CandidatePathsType[i].Type = types.StringNull()
		}
		if value := r.Get("pcep"); !data.CandidatePathsType[i].Pcep.IsNull() {
			if value.Exists() {
				data.CandidatePathsType[i].Pcep = types.BoolValue(true)
			} else {
				data.CandidatePathsType[i].Pcep = types.BoolValue(false)
			}
		} else {
			data.CandidatePathsType[i].Pcep = types.BoolNull()
		}
		if value := r.Get("metric.metric-type"); value.Exists() && !data.CandidatePathsType[i].MetricMetricType.IsNull() {
			data.CandidatePathsType[i].MetricMetricType = types.StringValue(value.String())
		} else {
			data.CandidatePathsType[i].MetricMetricType = types.StringNull()
		}
		if value := r.Get("hop-type"); value.Exists() && !data.CandidatePathsType[i].HopType.IsNull() {
			data.CandidatePathsType[i].HopType = types.StringValue(value.String())
		} else {
			data.CandidatePathsType[i].HopType = types.StringNull()
		}
		if value := r.Get("segment-list-name"); value.Exists() && !data.CandidatePathsType[i].SegmentListName.IsNull() {
			data.CandidatePathsType[i].SegmentListName = types.StringValue(value.String())
		} else {
			data.CandidatePathsType[i].SegmentListName = types.StringNull()
		}
	}
}

func (data *SegmentRoutingCandidatePaths) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "path-infos.path-info"); value.Exists() {
		data.CandidatePathsType = make([]SegmentRoutingCandidatePathsCandidatePathsType, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SegmentRoutingCandidatePathsCandidatePathsType{}
			if cValue := v.Get("type"); cValue.Exists() {
				item.Type = types.StringValue(cValue.String())
			}
			if cValue := v.Get("pcep"); cValue.Exists() {
				item.Pcep = types.BoolValue(true)
			} else {
				item.Pcep = types.BoolValue(false)
			}
			if cValue := v.Get("metric.metric-type"); cValue.Exists() {
				item.MetricMetricType = types.StringValue(cValue.String())
			}
			if cValue := v.Get("hop-type"); cValue.Exists() {
				item.HopType = types.StringValue(cValue.String())
			}
			if cValue := v.Get("segment-list-name"); cValue.Exists() {
				item.SegmentListName = types.StringValue(cValue.String())
			}
			data.CandidatePathsType = append(data.CandidatePathsType, item)
			return true
		})
	}
}

func (data *SegmentRoutingCandidatePaths) getDeletedListItems(ctx context.Context, state SegmentRoutingCandidatePaths) []string {
	deletedListItems := make([]string, 0)
	for i := range state.CandidatePathsType {
		keys := [...]string{"type", "hop-type", "segment-list-name"}
		stateKeyValues := [...]string{state.CandidatePathsType[i].Type.ValueString(), state.CandidatePathsType[i].HopType.ValueString(), state.CandidatePathsType[i].SegmentListName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.CandidatePathsType[i].Type.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.CandidatePathsType[i].HopType.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.CandidatePathsType[i].SegmentListName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.CandidatePathsType {
			found = true
			if state.CandidatePathsType[i].Type.ValueString() != data.CandidatePathsType[j].Type.ValueString() {
				found = false
			}
			if state.CandidatePathsType[i].HopType.ValueString() != data.CandidatePathsType[j].HopType.ValueString() {
				found = false
			}
			if state.CandidatePathsType[i].SegmentListName.ValueString() != data.CandidatePathsType[j].SegmentListName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/path-infos/path-info%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *SegmentRoutingCandidatePaths) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	for i := range data.CandidatePathsType {
		keys := [...]string{"type", "hop-type", "segment-list-name"}
		keyValues := [...]string{data.CandidatePathsType[i].Type.ValueString(), data.CandidatePathsType[i].HopType.ValueString(), data.CandidatePathsType[i].SegmentListName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.CandidatePathsType[i].Pcep.IsNull() && !data.CandidatePathsType[i].Pcep.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/path-infos/path-info%v/pcep", data.getPath(), keyString))
		}
	}
	return emptyLeafsDelete
}
