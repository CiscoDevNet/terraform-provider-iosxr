// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SegmentRoutingISIS struct {
	Device                           types.String                 `tfsdk:"device"`
	Id                               types.String                 `tfsdk:"id"`
	ProcessId                        types.String                 `tfsdk:"process_id"`
	AfName                           types.String                 `tfsdk:"af_name"`
	SafName                          types.String                 `tfsdk:"saf_name"`
	MetricStyleWide                  types.Bool                   `tfsdk:"metric_style_wide"`
	MicroloopAvoidanceSegmentRouting types.Bool                   `tfsdk:"microloop_avoidance_segment_routing"`
	RouterIdInterfaceName            types.String                 `tfsdk:"router_id_interface_name"`
	Locators                         []SegmentRoutingISISLocators `tfsdk:"locators"`
}
type SegmentRoutingISISLocators struct {
	LocatorName types.String `tfsdk:"locator_name"`
	Level       types.Int64  `tfsdk:"level"`
}

func (data SegmentRoutingISIS) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=%s]/address-families/address-family[af-name=%s][saf-name=%s]", data.ProcessId.ValueString(), data.AfName.ValueString(), data.SafName.ValueString())
}

func (data SegmentRoutingISIS) toBody(ctx context.Context) string {
	body := "{}"
	if !data.AfName.IsNull() && !data.AfName.IsUnknown() {
		body, _ = sjson.Set(body, "af-name", data.AfName.ValueString())
	}
	if !data.SafName.IsNull() && !data.SafName.IsUnknown() {
		body, _ = sjson.Set(body, "saf-name", data.SafName.ValueString())
	}
	if !data.MetricStyleWide.IsNull() && !data.MetricStyleWide.IsUnknown() {
		if data.MetricStyleWide.ValueBool() {
			body, _ = sjson.Set(body, "metric-style.wide", map[string]string{})
		}
	}
	if !data.MicroloopAvoidanceSegmentRouting.IsNull() && !data.MicroloopAvoidanceSegmentRouting.IsUnknown() {
		if data.MicroloopAvoidanceSegmentRouting.ValueBool() {
			body, _ = sjson.Set(body, "microloop.avoidance.segment-routing", map[string]string{})
		}
	}
	if !data.RouterIdInterfaceName.IsNull() && !data.RouterIdInterfaceName.IsUnknown() {
		body, _ = sjson.Set(body, "router-id.interface-name", data.RouterIdInterfaceName.ValueString())
	}
	if len(data.Locators) > 0 {
		body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator", []interface{}{})
		for index, item := range data.Locators {
			if !item.LocatorName.IsNull() && !item.LocatorName.IsUnknown() {
				body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator"+"."+strconv.Itoa(index)+"."+"locator-name", item.LocatorName.ValueString())
			}
			if !item.Level.IsNull() && !item.Level.IsUnknown() {
				body, _ = sjson.Set(body, "segment-routing.srv6.locators.locator"+"."+strconv.Itoa(index)+"."+"level", strconv.FormatInt(item.Level.ValueInt64(), 10))
			}
		}
	}
	return body
}

func (data *SegmentRoutingISIS) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "metric-style.wide"); !data.MetricStyleWide.IsNull() {
		if value.Exists() {
			data.MetricStyleWide = types.BoolValue(true)
		} else {
			data.MetricStyleWide = types.BoolValue(false)
		}
	} else {
		data.MetricStyleWide = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "microloop.avoidance.segment-routing"); !data.MicroloopAvoidanceSegmentRouting.IsNull() {
		if value.Exists() {
			data.MicroloopAvoidanceSegmentRouting = types.BoolValue(true)
		} else {
			data.MicroloopAvoidanceSegmentRouting = types.BoolValue(false)
		}
	} else {
		data.MicroloopAvoidanceSegmentRouting = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "router-id.interface-name"); value.Exists() && !data.RouterIdInterfaceName.IsNull() {
		data.RouterIdInterfaceName = types.StringValue(value.String())
	} else {
		data.RouterIdInterfaceName = types.StringNull()
	}
	for i := range data.Locators {
		keys := [...]string{"locator-name"}
		keyValues := [...]string{data.Locators[i].LocatorName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "segment-routing.srv6.locators.locator").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("locator-name"); value.Exists() && !data.Locators[i].LocatorName.IsNull() {
			data.Locators[i].LocatorName = types.StringValue(value.String())
		} else {
			data.Locators[i].LocatorName = types.StringNull()
		}
		if value := r.Get("level"); value.Exists() && !data.Locators[i].Level.IsNull() {
			data.Locators[i].Level = types.Int64Value(value.Int())
		} else {
			data.Locators[i].Level = types.Int64Null()
		}
	}
}

func (data *SegmentRoutingISIS) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "metric-style.wide"); value.Exists() {
		data.MetricStyleWide = types.BoolValue(true)
	} else {
		data.MetricStyleWide = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "microloop.avoidance.segment-routing"); value.Exists() {
		data.MicroloopAvoidanceSegmentRouting = types.BoolValue(true)
	} else {
		data.MicroloopAvoidanceSegmentRouting = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "router-id.interface-name"); value.Exists() {
		data.RouterIdInterfaceName = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "segment-routing.srv6.locators.locator"); value.Exists() {
		data.Locators = make([]SegmentRoutingISISLocators, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SegmentRoutingISISLocators{}
			if cValue := v.Get("locator-name"); cValue.Exists() {
				item.LocatorName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("level"); cValue.Exists() {
				item.Level = types.Int64Value(cValue.Int())
			}
			data.Locators = append(data.Locators, item)
			return true
		})
	}
}

func (data *SegmentRoutingISIS) getDeletedListItems(ctx context.Context, state SegmentRoutingISIS) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Locators {
		keys := [...]string{"locator-name"}
		stateKeyValues := [...]string{state.Locators[i].LocatorName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Locators[i].LocatorName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Locators {
			found = true
			if state.Locators[i].LocatorName.ValueString() != data.Locators[j].LocatorName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/segment-routing/srv6/locators/locator%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *SegmentRoutingISIS) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.MetricStyleWide.IsNull() && !data.MetricStyleWide.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/metric-style/wide", data.getPath()))
	}
	if !data.MicroloopAvoidanceSegmentRouting.IsNull() && !data.MicroloopAvoidanceSegmentRouting.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/microloop/avoidance/segment-routing", data.getPath()))
	}

	return emptyLeafsDelete
}
