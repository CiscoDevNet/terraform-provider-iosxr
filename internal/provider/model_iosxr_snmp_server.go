// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SNMPServer struct {
	Device                              types.String            `tfsdk:"device"`
	Id                                  types.String            `tfsdk:"id"`
	DeleteMode                          types.String            `tfsdk:"delete_mode"`
	Location                            types.String            `tfsdk:"location"`
	Contact                             types.String            `tfsdk:"contact"`
	TrapsRf                             types.Bool              `tfsdk:"traps_rf"`
	TrapsBfd                            types.Bool              `tfsdk:"traps_bfd"`
	TrapsNtp                            types.Bool              `tfsdk:"traps_ntp"`
	TrapsEthernetOamEvents              types.Bool              `tfsdk:"traps_ethernet_oam_events"`
	TrapsCopyComplete                   types.Bool              `tfsdk:"traps_copy_complete"`
	TrapsSnmpLinkup                     types.Bool              `tfsdk:"traps_snmp_linkup"`
	TrapsSnmpLinkdown                   types.Bool              `tfsdk:"traps_snmp_linkdown"`
	TrapsPower                          types.Bool              `tfsdk:"traps_power"`
	TrapsConfig                         types.Bool              `tfsdk:"traps_config"`
	TrapsEntity                         types.Bool              `tfsdk:"traps_entity"`
	TrapsSystem                         types.Bool              `tfsdk:"traps_system"`
	TrapsBridgemib                      types.Bool              `tfsdk:"traps_bridgemib"`
	TrapsEntityStateOperstatus          types.Bool              `tfsdk:"traps_entity_state_operstatus"`
	TrapsEntityRedundancyAll            types.Bool              `tfsdk:"traps_entity_redundancy_all"`
	TrapSourceBoth                      types.String            `tfsdk:"trap_source_both"`
	TrapsL2vpnAll                       types.Bool              `tfsdk:"traps_l2vpn_all"`
	TrapsL2vpnVcUp                      types.Bool              `tfsdk:"traps_l2vpn_vc_up"`
	TrapsL2vpnVcDown                    types.Bool              `tfsdk:"traps_l2vpn_vc_down"`
	TrapsSensor                         types.Bool              `tfsdk:"traps_sensor"`
	TrapsFruCtrl                        types.Bool              `tfsdk:"traps_fru_ctrl"`
	TrapsIsisAll                        types.String            `tfsdk:"traps_isis_all"`
	TrapsIsisDatabaseOverload           types.String            `tfsdk:"traps_isis_database_overload"`
	TrapsIsisManualAddressDrops         types.String            `tfsdk:"traps_isis_manual_address_drops"`
	TrapsIsisCorruptedLspDetected       types.String            `tfsdk:"traps_isis_corrupted_lsp_detected"`
	TrapsIsisAttemptToExceedMaxSequence types.String            `tfsdk:"traps_isis_attempt_to_exceed_max_sequence"`
	TrapsIsisIdLenMismatch              types.String            `tfsdk:"traps_isis_id_len_mismatch"`
	TrapsIsisMaxAreaAddressesMismatch   types.String            `tfsdk:"traps_isis_max_area_addresses_mismatch"`
	TrapsIsisOwnLspPurge                types.String            `tfsdk:"traps_isis_own_lsp_purge"`
	TrapsIsisSequenceNumberSkip         types.String            `tfsdk:"traps_isis_sequence_number_skip"`
	TrapsIsisAuthenticationTypeFailure  types.String            `tfsdk:"traps_isis_authentication_type_failure"`
	TrapsIsisAuthenticationFailure      types.String            `tfsdk:"traps_isis_authentication_failure"`
	TrapsIsisVersionSkew                types.String            `tfsdk:"traps_isis_version_skew"`
	TrapsIsisAreaMismatch               types.String            `tfsdk:"traps_isis_area_mismatch"`
	TrapsIsisRejectedAdjacency          types.String            `tfsdk:"traps_isis_rejected_adjacency"`
	TrapsIsisLspTooLargeToPropagate     types.String            `tfsdk:"traps_isis_lsp_too_large_to_propagate"`
	TrapsIsisOrigLspBuffSizeMismatch    types.String            `tfsdk:"traps_isis_orig_lsp_buff_size_mismatch"`
	TrapsIsisProtocolsSupportedMismatch types.String            `tfsdk:"traps_isis_protocols_supported_mismatch"`
	TrapsIsisAdjacencyChange            types.String            `tfsdk:"traps_isis_adjacency_change"`
	TrapsIsisLspErrorDetected           types.String            `tfsdk:"traps_isis_lsp_error_detected"`
	TrapsBgpCbgp2Updown                 types.Bool              `tfsdk:"traps_bgp_cbgp2_updown"`
	TrapsBgpBgp4MibUpdown               types.Bool              `tfsdk:"traps_bgp_bgp4_mib_updown"`
	Users                               []SNMPServerUsers       `tfsdk:"users"`
	Groups                              []SNMPServerGroups      `tfsdk:"groups"`
	Communities                         []SNMPServerCommunities `tfsdk:"communities"`
}

type SNMPServerData struct {
	Device                              types.String            `tfsdk:"device"`
	Id                                  types.String            `tfsdk:"id"`
	Location                            types.String            `tfsdk:"location"`
	Contact                             types.String            `tfsdk:"contact"`
	TrapsRf                             types.Bool              `tfsdk:"traps_rf"`
	TrapsBfd                            types.Bool              `tfsdk:"traps_bfd"`
	TrapsNtp                            types.Bool              `tfsdk:"traps_ntp"`
	TrapsEthernetOamEvents              types.Bool              `tfsdk:"traps_ethernet_oam_events"`
	TrapsCopyComplete                   types.Bool              `tfsdk:"traps_copy_complete"`
	TrapsSnmpLinkup                     types.Bool              `tfsdk:"traps_snmp_linkup"`
	TrapsSnmpLinkdown                   types.Bool              `tfsdk:"traps_snmp_linkdown"`
	TrapsPower                          types.Bool              `tfsdk:"traps_power"`
	TrapsConfig                         types.Bool              `tfsdk:"traps_config"`
	TrapsEntity                         types.Bool              `tfsdk:"traps_entity"`
	TrapsSystem                         types.Bool              `tfsdk:"traps_system"`
	TrapsBridgemib                      types.Bool              `tfsdk:"traps_bridgemib"`
	TrapsEntityStateOperstatus          types.Bool              `tfsdk:"traps_entity_state_operstatus"`
	TrapsEntityRedundancyAll            types.Bool              `tfsdk:"traps_entity_redundancy_all"`
	TrapSourceBoth                      types.String            `tfsdk:"trap_source_both"`
	TrapsL2vpnAll                       types.Bool              `tfsdk:"traps_l2vpn_all"`
	TrapsL2vpnVcUp                      types.Bool              `tfsdk:"traps_l2vpn_vc_up"`
	TrapsL2vpnVcDown                    types.Bool              `tfsdk:"traps_l2vpn_vc_down"`
	TrapsSensor                         types.Bool              `tfsdk:"traps_sensor"`
	TrapsFruCtrl                        types.Bool              `tfsdk:"traps_fru_ctrl"`
	TrapsIsisAll                        types.String            `tfsdk:"traps_isis_all"`
	TrapsIsisDatabaseOverload           types.String            `tfsdk:"traps_isis_database_overload"`
	TrapsIsisManualAddressDrops         types.String            `tfsdk:"traps_isis_manual_address_drops"`
	TrapsIsisCorruptedLspDetected       types.String            `tfsdk:"traps_isis_corrupted_lsp_detected"`
	TrapsIsisAttemptToExceedMaxSequence types.String            `tfsdk:"traps_isis_attempt_to_exceed_max_sequence"`
	TrapsIsisIdLenMismatch              types.String            `tfsdk:"traps_isis_id_len_mismatch"`
	TrapsIsisMaxAreaAddressesMismatch   types.String            `tfsdk:"traps_isis_max_area_addresses_mismatch"`
	TrapsIsisOwnLspPurge                types.String            `tfsdk:"traps_isis_own_lsp_purge"`
	TrapsIsisSequenceNumberSkip         types.String            `tfsdk:"traps_isis_sequence_number_skip"`
	TrapsIsisAuthenticationTypeFailure  types.String            `tfsdk:"traps_isis_authentication_type_failure"`
	TrapsIsisAuthenticationFailure      types.String            `tfsdk:"traps_isis_authentication_failure"`
	TrapsIsisVersionSkew                types.String            `tfsdk:"traps_isis_version_skew"`
	TrapsIsisAreaMismatch               types.String            `tfsdk:"traps_isis_area_mismatch"`
	TrapsIsisRejectedAdjacency          types.String            `tfsdk:"traps_isis_rejected_adjacency"`
	TrapsIsisLspTooLargeToPropagate     types.String            `tfsdk:"traps_isis_lsp_too_large_to_propagate"`
	TrapsIsisOrigLspBuffSizeMismatch    types.String            `tfsdk:"traps_isis_orig_lsp_buff_size_mismatch"`
	TrapsIsisProtocolsSupportedMismatch types.String            `tfsdk:"traps_isis_protocols_supported_mismatch"`
	TrapsIsisAdjacencyChange            types.String            `tfsdk:"traps_isis_adjacency_change"`
	TrapsIsisLspErrorDetected           types.String            `tfsdk:"traps_isis_lsp_error_detected"`
	TrapsBgpCbgp2Updown                 types.Bool              `tfsdk:"traps_bgp_cbgp2_updown"`
	TrapsBgpBgp4MibUpdown               types.Bool              `tfsdk:"traps_bgp_bgp4_mib_updown"`
	Users                               []SNMPServerUsers       `tfsdk:"users"`
	Groups                              []SNMPServerGroups      `tfsdk:"groups"`
	Communities                         []SNMPServerCommunities `tfsdk:"communities"`
}
type SNMPServerUsers struct {
	UserName                         types.String `tfsdk:"user_name"`
	GroupName                        types.String `tfsdk:"group_name"`
	V3AuthMd5EncryptionAes           types.String `tfsdk:"v3_auth_md5_encryption_aes"`
	V3AuthMd5EncryptionDefault       types.String `tfsdk:"v3_auth_md5_encryption_default"`
	V3AuthShaEncryptionAes           types.String `tfsdk:"v3_auth_sha_encryption_aes"`
	V3AuthShaEncryptionDefault       types.String `tfsdk:"v3_auth_sha_encryption_default"`
	V3PrivAesAes128EncryptionDefault types.String `tfsdk:"v3_priv_aes_aes_128_encryption_default"`
	V3PrivAesAes128EncryptionAes     types.String `tfsdk:"v3_priv_aes_aes_128_encryption_aes"`
	V3Ipv4                           types.String `tfsdk:"v3_ipv4"`
	V3Systemowner                    types.Bool   `tfsdk:"v3_systemowner"`
}
type SNMPServerGroups struct {
	GroupName types.String `tfsdk:"group_name"`
	V3Priv    types.Bool   `tfsdk:"v3_priv"`
	V3Read    types.String `tfsdk:"v3_read"`
	V3Write   types.String `tfsdk:"v3_write"`
	V3Context types.String `tfsdk:"v3_context"`
	V3Notify  types.String `tfsdk:"v3_notify"`
	V3Ipv4    types.String `tfsdk:"v3_ipv4"`
	V3Ipv6    types.String `tfsdk:"v3_ipv6"`
}
type SNMPServerCommunities struct {
	Community   types.String `tfsdk:"community"`
	View        types.String `tfsdk:"view"`
	Ro          types.Bool   `tfsdk:"ro"`
	Rw          types.Bool   `tfsdk:"rw"`
	Sdrowner    types.Bool   `tfsdk:"sdrowner"`
	Systemowner types.Bool   `tfsdk:"systemowner"`
	Ipv4        types.String `tfsdk:"ipv4"`
	Ipv6        types.String `tfsdk:"ipv6"`
}

func (data SNMPServer) getPath() string {
	return "Cisco-IOS-XR-um-snmp-server-cfg:/snmp-server"
}

func (data SNMPServerData) getPath() string {
	return "Cisco-IOS-XR-um-snmp-server-cfg:/snmp-server"
}

func (data SNMPServer) toBody(ctx context.Context) string {
	body := "{}"
	if !data.Location.IsNull() && !data.Location.IsUnknown() {
		body, _ = sjson.Set(body, "location", data.Location.ValueString())
	}
	if !data.Contact.IsNull() && !data.Contact.IsUnknown() {
		body, _ = sjson.Set(body, "contact", data.Contact.ValueString())
	}
	if !data.TrapsRf.IsNull() && !data.TrapsRf.IsUnknown() {
		if data.TrapsRf.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-mibs-rfmib-cfg:rf", map[string]string{})
		}
	}
	if !data.TrapsBfd.IsNull() && !data.TrapsBfd.IsUnknown() {
		if data.TrapsBfd.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-bfd-sbfd-cfg:bfd", map[string]string{})
		}
	}
	if !data.TrapsNtp.IsNull() && !data.TrapsNtp.IsUnknown() {
		if data.TrapsNtp.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-ntp-cfg:ntp", map[string]string{})
		}
	}
	if !data.TrapsEthernetOamEvents.IsNull() && !data.TrapsEthernetOamEvents.IsUnknown() {
		if data.TrapsEthernetOamEvents.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-ethernet-oam-cfg:ethernet.oam.events", map[string]string{})
		}
	}
	if !data.TrapsCopyComplete.IsNull() && !data.TrapsCopyComplete.IsUnknown() {
		if data.TrapsCopyComplete.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-traps-config-copy-cfg:copy-complete", map[string]string{})
		}
	}
	if !data.TrapsSnmpLinkup.IsNull() && !data.TrapsSnmpLinkup.IsUnknown() {
		if data.TrapsSnmpLinkup.ValueBool() {
			body, _ = sjson.Set(body, "traps.snmp.linkup", map[string]string{})
		}
	}
	if !data.TrapsSnmpLinkdown.IsNull() && !data.TrapsSnmpLinkdown.IsUnknown() {
		if data.TrapsSnmpLinkdown.ValueBool() {
			body, _ = sjson.Set(body, "traps.snmp.linkdown", map[string]string{})
		}
	}
	if !data.TrapsPower.IsNull() && !data.TrapsPower.IsUnknown() {
		if data.TrapsPower.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-traps-power-cfg:power", map[string]string{})
		}
	}
	if !data.TrapsConfig.IsNull() && !data.TrapsConfig.IsUnknown() {
		if data.TrapsConfig.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-cfg-mibs-cfg:config", map[string]string{})
		}
	}
	if !data.TrapsEntity.IsNull() && !data.TrapsEntity.IsUnknown() {
		if data.TrapsEntity.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-traps-entity-cfg:entity", map[string]string{})
		}
	}
	if !data.TrapsSystem.IsNull() && !data.TrapsSystem.IsUnknown() {
		if data.TrapsSystem.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-traps-system-cfg:system", map[string]string{})
		}
	}
	if !data.TrapsBridgemib.IsNull() && !data.TrapsBridgemib.IsUnknown() {
		if data.TrapsBridgemib.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-traps-bridgemib-cfg:bridgemib", map[string]string{})
		}
	}
	if !data.TrapsEntityStateOperstatus.IsNull() && !data.TrapsEntityStateOperstatus.IsUnknown() {
		if data.TrapsEntityStateOperstatus.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-traps-entity-state-cfg:entity-state.operstatus", map[string]string{})
		}
	}
	if !data.TrapsEntityRedundancyAll.IsNull() && !data.TrapsEntityRedundancyAll.IsUnknown() {
		if data.TrapsEntityRedundancyAll.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-traps-entity-redundancy-cfg:entity-redundancy.all", map[string]string{})
		}
	}
	if !data.TrapSourceBoth.IsNull() && !data.TrapSourceBoth.IsUnknown() {
		body, _ = sjson.Set(body, "trap-source.both", data.TrapSourceBoth.ValueString())
	}
	if !data.TrapsL2vpnAll.IsNull() && !data.TrapsL2vpnAll.IsUnknown() {
		if data.TrapsL2vpnAll.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.all", map[string]string{})
		}
	}
	if !data.TrapsL2vpnVcUp.IsNull() && !data.TrapsL2vpnVcUp.IsUnknown() {
		if data.TrapsL2vpnVcUp.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.vc-up", map[string]string{})
		}
	}
	if !data.TrapsL2vpnVcDown.IsNull() && !data.TrapsL2vpnVcDown.IsUnknown() {
		if data.TrapsL2vpnVcDown.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.vc-down", map[string]string{})
		}
	}
	if !data.TrapsSensor.IsNull() && !data.TrapsSensor.IsUnknown() {
		if data.TrapsSensor.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-mibs-sensormib-cfg:sensor", map[string]string{})
		}
	}
	if !data.TrapsFruCtrl.IsNull() && !data.TrapsFruCtrl.IsUnknown() {
		if data.TrapsFruCtrl.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-traps-fru-ctrl-cfg:fru-ctrl", map[string]string{})
		}
	}
	if !data.TrapsIsisAll.IsNull() && !data.TrapsIsisAll.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.all", data.TrapsIsisAll.ValueString())
	}
	if !data.TrapsIsisDatabaseOverload.IsNull() && !data.TrapsIsisDatabaseOverload.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.database-overload", data.TrapsIsisDatabaseOverload.ValueString())
	}
	if !data.TrapsIsisManualAddressDrops.IsNull() && !data.TrapsIsisManualAddressDrops.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.manual-address-drops", data.TrapsIsisManualAddressDrops.ValueString())
	}
	if !data.TrapsIsisCorruptedLspDetected.IsNull() && !data.TrapsIsisCorruptedLspDetected.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.corrupted-lsp-detected", data.TrapsIsisCorruptedLspDetected.ValueString())
	}
	if !data.TrapsIsisAttemptToExceedMaxSequence.IsNull() && !data.TrapsIsisAttemptToExceedMaxSequence.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.attempt-to-exceed-max-sequence", data.TrapsIsisAttemptToExceedMaxSequence.ValueString())
	}
	if !data.TrapsIsisIdLenMismatch.IsNull() && !data.TrapsIsisIdLenMismatch.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.id-len-mismatch", data.TrapsIsisIdLenMismatch.ValueString())
	}
	if !data.TrapsIsisMaxAreaAddressesMismatch.IsNull() && !data.TrapsIsisMaxAreaAddressesMismatch.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.max-area-addresses-mismatch", data.TrapsIsisMaxAreaAddressesMismatch.ValueString())
	}
	if !data.TrapsIsisOwnLspPurge.IsNull() && !data.TrapsIsisOwnLspPurge.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.own-lsp-purge", data.TrapsIsisOwnLspPurge.ValueString())
	}
	if !data.TrapsIsisSequenceNumberSkip.IsNull() && !data.TrapsIsisSequenceNumberSkip.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.sequence-number-skip", data.TrapsIsisSequenceNumberSkip.ValueString())
	}
	if !data.TrapsIsisAuthenticationTypeFailure.IsNull() && !data.TrapsIsisAuthenticationTypeFailure.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.authentication-type-failure", data.TrapsIsisAuthenticationTypeFailure.ValueString())
	}
	if !data.TrapsIsisAuthenticationFailure.IsNull() && !data.TrapsIsisAuthenticationFailure.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.authentication-failure", data.TrapsIsisAuthenticationFailure.ValueString())
	}
	if !data.TrapsIsisVersionSkew.IsNull() && !data.TrapsIsisVersionSkew.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.version-skew", data.TrapsIsisVersionSkew.ValueString())
	}
	if !data.TrapsIsisAreaMismatch.IsNull() && !data.TrapsIsisAreaMismatch.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.area-mismatch", data.TrapsIsisAreaMismatch.ValueString())
	}
	if !data.TrapsIsisRejectedAdjacency.IsNull() && !data.TrapsIsisRejectedAdjacency.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.rejected-adjacency", data.TrapsIsisRejectedAdjacency.ValueString())
	}
	if !data.TrapsIsisLspTooLargeToPropagate.IsNull() && !data.TrapsIsisLspTooLargeToPropagate.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.lsp-too-large-to-propagate", data.TrapsIsisLspTooLargeToPropagate.ValueString())
	}
	if !data.TrapsIsisOrigLspBuffSizeMismatch.IsNull() && !data.TrapsIsisOrigLspBuffSizeMismatch.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.orig-lsp-buff-size-mismatch", data.TrapsIsisOrigLspBuffSizeMismatch.ValueString())
	}
	if !data.TrapsIsisProtocolsSupportedMismatch.IsNull() && !data.TrapsIsisProtocolsSupportedMismatch.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.protocols-supported-mismatch", data.TrapsIsisProtocolsSupportedMismatch.ValueString())
	}
	if !data.TrapsIsisAdjacencyChange.IsNull() && !data.TrapsIsisAdjacencyChange.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.adjacency-change", data.TrapsIsisAdjacencyChange.ValueString())
	}
	if !data.TrapsIsisLspErrorDetected.IsNull() && !data.TrapsIsisLspErrorDetected.IsUnknown() {
		body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.lsp-error-detected", data.TrapsIsisLspErrorDetected.ValueString())
	}
	if !data.TrapsBgpCbgp2Updown.IsNull() && !data.TrapsBgpCbgp2Updown.IsUnknown() {
		if data.TrapsBgpCbgp2Updown.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-bgp-cfg:bgp.cbgp2-updown", map[string]string{})
		}
	}
	if !data.TrapsBgpBgp4MibUpdown.IsNull() && !data.TrapsBgpBgp4MibUpdown.IsUnknown() {
		if data.TrapsBgpBgp4MibUpdown.ValueBool() {
			body, _ = sjson.Set(body, "traps.Cisco-IOS-XR-um-router-bgp-cfg:bgp.bgp4-mib-updown", map[string]string{})
		}
	}
	if len(data.Users) > 0 {
		body, _ = sjson.Set(body, "users.user", []interface{}{})
		for index, item := range data.Users {
			if !item.UserName.IsNull() && !item.UserName.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"user-name", item.UserName.ValueString())
			}
			if !item.GroupName.IsNull() && !item.GroupName.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"group-name", item.GroupName.ValueString())
			}
			if !item.V3AuthMd5EncryptionAes.IsNull() && !item.V3AuthMd5EncryptionAes.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"v3.auth.md5.encryption-aes", item.V3AuthMd5EncryptionAes.ValueString())
			}
			if !item.V3AuthMd5EncryptionDefault.IsNull() && !item.V3AuthMd5EncryptionDefault.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"v3.auth.md5.encryption-default", item.V3AuthMd5EncryptionDefault.ValueString())
			}
			if !item.V3AuthShaEncryptionAes.IsNull() && !item.V3AuthShaEncryptionAes.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"v3.auth.sha.encryption-aes", item.V3AuthShaEncryptionAes.ValueString())
			}
			if !item.V3AuthShaEncryptionDefault.IsNull() && !item.V3AuthShaEncryptionDefault.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"v3.auth.sha.encryption-default", item.V3AuthShaEncryptionDefault.ValueString())
			}
			if !item.V3PrivAesAes128EncryptionDefault.IsNull() && !item.V3PrivAesAes128EncryptionDefault.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"v3.priv.aes.aes-128.encryption-default", item.V3PrivAesAes128EncryptionDefault.ValueString())
			}
			if !item.V3PrivAesAes128EncryptionAes.IsNull() && !item.V3PrivAesAes128EncryptionAes.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"v3.priv.aes.aes-128.encryption-aes", item.V3PrivAesAes128EncryptionAes.ValueString())
			}
			if !item.V3Ipv4.IsNull() && !item.V3Ipv4.IsUnknown() {
				body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"v3.ipv4", item.V3Ipv4.ValueString())
			}
			if !item.V3Systemowner.IsNull() && !item.V3Systemowner.IsUnknown() {
				if item.V3Systemowner.ValueBool() {
					body, _ = sjson.Set(body, "users.user"+"."+strconv.Itoa(index)+"."+"v3.systemowner", map[string]string{})
				}
			}
		}
	}
	if len(data.Groups) > 0 {
		body, _ = sjson.Set(body, "groups.group", []interface{}{})
		for index, item := range data.Groups {
			if !item.GroupName.IsNull() && !item.GroupName.IsUnknown() {
				body, _ = sjson.Set(body, "groups.group"+"."+strconv.Itoa(index)+"."+"group-name", item.GroupName.ValueString())
			}
			if !item.V3Priv.IsNull() && !item.V3Priv.IsUnknown() {
				if item.V3Priv.ValueBool() {
					body, _ = sjson.Set(body, "groups.group"+"."+strconv.Itoa(index)+"."+"v3.priv", map[string]string{})
				}
			}
			if !item.V3Read.IsNull() && !item.V3Read.IsUnknown() {
				body, _ = sjson.Set(body, "groups.group"+"."+strconv.Itoa(index)+"."+"v3.read", item.V3Read.ValueString())
			}
			if !item.V3Write.IsNull() && !item.V3Write.IsUnknown() {
				body, _ = sjson.Set(body, "groups.group"+"."+strconv.Itoa(index)+"."+"v3.write", item.V3Write.ValueString())
			}
			if !item.V3Context.IsNull() && !item.V3Context.IsUnknown() {
				body, _ = sjson.Set(body, "groups.group"+"."+strconv.Itoa(index)+"."+"v3.context", item.V3Context.ValueString())
			}
			if !item.V3Notify.IsNull() && !item.V3Notify.IsUnknown() {
				body, _ = sjson.Set(body, "groups.group"+"."+strconv.Itoa(index)+"."+"v3.notify", item.V3Notify.ValueString())
			}
			if !item.V3Ipv4.IsNull() && !item.V3Ipv4.IsUnknown() {
				body, _ = sjson.Set(body, "groups.group"+"."+strconv.Itoa(index)+"."+"v3.ipv4", item.V3Ipv4.ValueString())
			}
			if !item.V3Ipv6.IsNull() && !item.V3Ipv6.IsUnknown() {
				body, _ = sjson.Set(body, "groups.group"+"."+strconv.Itoa(index)+"."+"v3.ipv6", item.V3Ipv6.ValueString())
			}
		}
	}
	if len(data.Communities) > 0 {
		body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string", []interface{}{})
		for index, item := range data.Communities {
			if !item.Community.IsNull() && !item.Community.IsUnknown() {
				body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string"+"."+strconv.Itoa(index)+"."+"community-string", item.Community.ValueString())
			}
			if !item.View.IsNull() && !item.View.IsUnknown() {
				body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string"+"."+strconv.Itoa(index)+"."+"view", item.View.ValueString())
			}
			if !item.Ro.IsNull() && !item.Ro.IsUnknown() {
				if item.Ro.ValueBool() {
					body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string"+"."+strconv.Itoa(index)+"."+"ro", map[string]string{})
				}
			}
			if !item.Rw.IsNull() && !item.Rw.IsUnknown() {
				if item.Rw.ValueBool() {
					body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string"+"."+strconv.Itoa(index)+"."+"rw", map[string]string{})
				}
			}
			if !item.Sdrowner.IsNull() && !item.Sdrowner.IsUnknown() {
				if item.Sdrowner.ValueBool() {
					body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string"+"."+strconv.Itoa(index)+"."+"sdrowner", map[string]string{})
				}
			}
			if !item.Systemowner.IsNull() && !item.Systemowner.IsUnknown() {
				if item.Systemowner.ValueBool() {
					body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string"+"."+strconv.Itoa(index)+"."+"systemowner", map[string]string{})
				}
			}
			if !item.Ipv4.IsNull() && !item.Ipv4.IsUnknown() {
				body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string"+"."+strconv.Itoa(index)+"."+"ipv4", item.Ipv4.ValueString())
			}
			if !item.Ipv6.IsNull() && !item.Ipv6.IsUnknown() {
				body, _ = sjson.Set(body, "community.unencrypted.unencrypted-string"+"."+strconv.Itoa(index)+"."+"ipv6", item.Ipv6.ValueString())
			}
		}
	}
	return body
}

func (data *SNMPServer) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "location"); value.Exists() && !data.Location.IsNull() {
		data.Location = types.StringValue(value.String())
	} else {
		data.Location = types.StringNull()
	}
	if value := gjson.GetBytes(res, "contact"); value.Exists() && !data.Contact.IsNull() {
		data.Contact = types.StringValue(value.String())
	} else {
		data.Contact = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-mibs-rfmib-cfg:rf"); !data.TrapsRf.IsNull() {
		if value.Exists() {
			data.TrapsRf = types.BoolValue(true)
		} else {
			data.TrapsRf = types.BoolValue(false)
		}
	} else {
		data.TrapsRf = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-bfd-sbfd-cfg:bfd"); !data.TrapsBfd.IsNull() {
		if value.Exists() {
			data.TrapsBfd = types.BoolValue(true)
		} else {
			data.TrapsBfd = types.BoolValue(false)
		}
	} else {
		data.TrapsBfd = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-ntp-cfg:ntp"); !data.TrapsNtp.IsNull() {
		if value.Exists() {
			data.TrapsNtp = types.BoolValue(true)
		} else {
			data.TrapsNtp = types.BoolValue(false)
		}
	} else {
		data.TrapsNtp = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-ethernet-oam-cfg:ethernet.oam.events"); !data.TrapsEthernetOamEvents.IsNull() {
		if value.Exists() {
			data.TrapsEthernetOamEvents = types.BoolValue(true)
		} else {
			data.TrapsEthernetOamEvents = types.BoolValue(false)
		}
	} else {
		data.TrapsEthernetOamEvents = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-config-copy-cfg:copy-complete"); !data.TrapsCopyComplete.IsNull() {
		if value.Exists() {
			data.TrapsCopyComplete = types.BoolValue(true)
		} else {
			data.TrapsCopyComplete = types.BoolValue(false)
		}
	} else {
		data.TrapsCopyComplete = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.snmp.linkup"); !data.TrapsSnmpLinkup.IsNull() {
		if value.Exists() {
			data.TrapsSnmpLinkup = types.BoolValue(true)
		} else {
			data.TrapsSnmpLinkup = types.BoolValue(false)
		}
	} else {
		data.TrapsSnmpLinkup = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.snmp.linkdown"); !data.TrapsSnmpLinkdown.IsNull() {
		if value.Exists() {
			data.TrapsSnmpLinkdown = types.BoolValue(true)
		} else {
			data.TrapsSnmpLinkdown = types.BoolValue(false)
		}
	} else {
		data.TrapsSnmpLinkdown = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-power-cfg:power"); !data.TrapsPower.IsNull() {
		if value.Exists() {
			data.TrapsPower = types.BoolValue(true)
		} else {
			data.TrapsPower = types.BoolValue(false)
		}
	} else {
		data.TrapsPower = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-cfg-mibs-cfg:config"); !data.TrapsConfig.IsNull() {
		if value.Exists() {
			data.TrapsConfig = types.BoolValue(true)
		} else {
			data.TrapsConfig = types.BoolValue(false)
		}
	} else {
		data.TrapsConfig = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-entity-cfg:entity"); !data.TrapsEntity.IsNull() {
		if value.Exists() {
			data.TrapsEntity = types.BoolValue(true)
		} else {
			data.TrapsEntity = types.BoolValue(false)
		}
	} else {
		data.TrapsEntity = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-system-cfg:system"); !data.TrapsSystem.IsNull() {
		if value.Exists() {
			data.TrapsSystem = types.BoolValue(true)
		} else {
			data.TrapsSystem = types.BoolValue(false)
		}
	} else {
		data.TrapsSystem = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-bridgemib-cfg:bridgemib"); !data.TrapsBridgemib.IsNull() {
		if value.Exists() {
			data.TrapsBridgemib = types.BoolValue(true)
		} else {
			data.TrapsBridgemib = types.BoolValue(false)
		}
	} else {
		data.TrapsBridgemib = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-entity-state-cfg:entity-state.operstatus"); !data.TrapsEntityStateOperstatus.IsNull() {
		if value.Exists() {
			data.TrapsEntityStateOperstatus = types.BoolValue(true)
		} else {
			data.TrapsEntityStateOperstatus = types.BoolValue(false)
		}
	} else {
		data.TrapsEntityStateOperstatus = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-entity-redundancy-cfg:entity-redundancy.all"); !data.TrapsEntityRedundancyAll.IsNull() {
		if value.Exists() {
			data.TrapsEntityRedundancyAll = types.BoolValue(true)
		} else {
			data.TrapsEntityRedundancyAll = types.BoolValue(false)
		}
	} else {
		data.TrapsEntityRedundancyAll = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "trap-source.both"); value.Exists() && !data.TrapSourceBoth.IsNull() {
		data.TrapSourceBoth = types.StringValue(value.String())
	} else {
		data.TrapSourceBoth = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.all"); !data.TrapsL2vpnAll.IsNull() {
		if value.Exists() {
			data.TrapsL2vpnAll = types.BoolValue(true)
		} else {
			data.TrapsL2vpnAll = types.BoolValue(false)
		}
	} else {
		data.TrapsL2vpnAll = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.vc-up"); !data.TrapsL2vpnVcUp.IsNull() {
		if value.Exists() {
			data.TrapsL2vpnVcUp = types.BoolValue(true)
		} else {
			data.TrapsL2vpnVcUp = types.BoolValue(false)
		}
	} else {
		data.TrapsL2vpnVcUp = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.vc-down"); !data.TrapsL2vpnVcDown.IsNull() {
		if value.Exists() {
			data.TrapsL2vpnVcDown = types.BoolValue(true)
		} else {
			data.TrapsL2vpnVcDown = types.BoolValue(false)
		}
	} else {
		data.TrapsL2vpnVcDown = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-mibs-sensormib-cfg:sensor"); !data.TrapsSensor.IsNull() {
		if value.Exists() {
			data.TrapsSensor = types.BoolValue(true)
		} else {
			data.TrapsSensor = types.BoolValue(false)
		}
	} else {
		data.TrapsSensor = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-fru-ctrl-cfg:fru-ctrl"); !data.TrapsFruCtrl.IsNull() {
		if value.Exists() {
			data.TrapsFruCtrl = types.BoolValue(true)
		} else {
			data.TrapsFruCtrl = types.BoolValue(false)
		}
	} else {
		data.TrapsFruCtrl = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.all"); value.Exists() && !data.TrapsIsisAll.IsNull() {
		data.TrapsIsisAll = types.StringValue(value.String())
	} else {
		data.TrapsIsisAll = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.database-overload"); value.Exists() && !data.TrapsIsisDatabaseOverload.IsNull() {
		data.TrapsIsisDatabaseOverload = types.StringValue(value.String())
	} else {
		data.TrapsIsisDatabaseOverload = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.manual-address-drops"); value.Exists() && !data.TrapsIsisManualAddressDrops.IsNull() {
		data.TrapsIsisManualAddressDrops = types.StringValue(value.String())
	} else {
		data.TrapsIsisManualAddressDrops = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.corrupted-lsp-detected"); value.Exists() && !data.TrapsIsisCorruptedLspDetected.IsNull() {
		data.TrapsIsisCorruptedLspDetected = types.StringValue(value.String())
	} else {
		data.TrapsIsisCorruptedLspDetected = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.attempt-to-exceed-max-sequence"); value.Exists() && !data.TrapsIsisAttemptToExceedMaxSequence.IsNull() {
		data.TrapsIsisAttemptToExceedMaxSequence = types.StringValue(value.String())
	} else {
		data.TrapsIsisAttemptToExceedMaxSequence = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.id-len-mismatch"); value.Exists() && !data.TrapsIsisIdLenMismatch.IsNull() {
		data.TrapsIsisIdLenMismatch = types.StringValue(value.String())
	} else {
		data.TrapsIsisIdLenMismatch = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.max-area-addresses-mismatch"); value.Exists() && !data.TrapsIsisMaxAreaAddressesMismatch.IsNull() {
		data.TrapsIsisMaxAreaAddressesMismatch = types.StringValue(value.String())
	} else {
		data.TrapsIsisMaxAreaAddressesMismatch = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.own-lsp-purge"); value.Exists() && !data.TrapsIsisOwnLspPurge.IsNull() {
		data.TrapsIsisOwnLspPurge = types.StringValue(value.String())
	} else {
		data.TrapsIsisOwnLspPurge = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.sequence-number-skip"); value.Exists() && !data.TrapsIsisSequenceNumberSkip.IsNull() {
		data.TrapsIsisSequenceNumberSkip = types.StringValue(value.String())
	} else {
		data.TrapsIsisSequenceNumberSkip = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.authentication-type-failure"); value.Exists() && !data.TrapsIsisAuthenticationTypeFailure.IsNull() {
		data.TrapsIsisAuthenticationTypeFailure = types.StringValue(value.String())
	} else {
		data.TrapsIsisAuthenticationTypeFailure = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.authentication-failure"); value.Exists() && !data.TrapsIsisAuthenticationFailure.IsNull() {
		data.TrapsIsisAuthenticationFailure = types.StringValue(value.String())
	} else {
		data.TrapsIsisAuthenticationFailure = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.version-skew"); value.Exists() && !data.TrapsIsisVersionSkew.IsNull() {
		data.TrapsIsisVersionSkew = types.StringValue(value.String())
	} else {
		data.TrapsIsisVersionSkew = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.area-mismatch"); value.Exists() && !data.TrapsIsisAreaMismatch.IsNull() {
		data.TrapsIsisAreaMismatch = types.StringValue(value.String())
	} else {
		data.TrapsIsisAreaMismatch = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.rejected-adjacency"); value.Exists() && !data.TrapsIsisRejectedAdjacency.IsNull() {
		data.TrapsIsisRejectedAdjacency = types.StringValue(value.String())
	} else {
		data.TrapsIsisRejectedAdjacency = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.lsp-too-large-to-propagate"); value.Exists() && !data.TrapsIsisLspTooLargeToPropagate.IsNull() {
		data.TrapsIsisLspTooLargeToPropagate = types.StringValue(value.String())
	} else {
		data.TrapsIsisLspTooLargeToPropagate = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.orig-lsp-buff-size-mismatch"); value.Exists() && !data.TrapsIsisOrigLspBuffSizeMismatch.IsNull() {
		data.TrapsIsisOrigLspBuffSizeMismatch = types.StringValue(value.String())
	} else {
		data.TrapsIsisOrigLspBuffSizeMismatch = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.protocols-supported-mismatch"); value.Exists() && !data.TrapsIsisProtocolsSupportedMismatch.IsNull() {
		data.TrapsIsisProtocolsSupportedMismatch = types.StringValue(value.String())
	} else {
		data.TrapsIsisProtocolsSupportedMismatch = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.adjacency-change"); value.Exists() && !data.TrapsIsisAdjacencyChange.IsNull() {
		data.TrapsIsisAdjacencyChange = types.StringValue(value.String())
	} else {
		data.TrapsIsisAdjacencyChange = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.lsp-error-detected"); value.Exists() && !data.TrapsIsisLspErrorDetected.IsNull() {
		data.TrapsIsisLspErrorDetected = types.StringValue(value.String())
	} else {
		data.TrapsIsisLspErrorDetected = types.StringNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-bgp-cfg:bgp.cbgp2-updown"); !data.TrapsBgpCbgp2Updown.IsNull() {
		if value.Exists() {
			data.TrapsBgpCbgp2Updown = types.BoolValue(true)
		} else {
			data.TrapsBgpCbgp2Updown = types.BoolValue(false)
		}
	} else {
		data.TrapsBgpCbgp2Updown = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-bgp-cfg:bgp.bgp4-mib-updown"); !data.TrapsBgpBgp4MibUpdown.IsNull() {
		if value.Exists() {
			data.TrapsBgpBgp4MibUpdown = types.BoolValue(true)
		} else {
			data.TrapsBgpBgp4MibUpdown = types.BoolValue(false)
		}
	} else {
		data.TrapsBgpBgp4MibUpdown = types.BoolNull()
	}
	for i := range data.Users {
		keys := [...]string{"user-name"}
		keyValues := [...]string{data.Users[i].UserName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "users.user").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("user-name"); value.Exists() && !data.Users[i].UserName.IsNull() {
			data.Users[i].UserName = types.StringValue(value.String())
		} else {
			data.Users[i].UserName = types.StringNull()
		}
		if value := r.Get("group-name"); value.Exists() && !data.Users[i].GroupName.IsNull() {
			data.Users[i].GroupName = types.StringValue(value.String())
		} else {
			data.Users[i].GroupName = types.StringNull()
		}
		if value := r.Get("v3.auth.md5.encryption-aes"); value.Exists() && !data.Users[i].V3AuthMd5EncryptionAes.IsNull() {
			data.Users[i].V3AuthMd5EncryptionAes = types.StringValue(value.String())
		} else {
			data.Users[i].V3AuthMd5EncryptionAes = types.StringNull()
		}
		if value := r.Get("v3.auth.md5.encryption-default"); value.Exists() && !data.Users[i].V3AuthMd5EncryptionDefault.IsNull() {
			data.Users[i].V3AuthMd5EncryptionDefault = types.StringValue(value.String())
		} else {
			data.Users[i].V3AuthMd5EncryptionDefault = types.StringNull()
		}
		if value := r.Get("v3.auth.sha.encryption-aes"); value.Exists() && !data.Users[i].V3AuthShaEncryptionAes.IsNull() {
			data.Users[i].V3AuthShaEncryptionAes = types.StringValue(value.String())
		} else {
			data.Users[i].V3AuthShaEncryptionAes = types.StringNull()
		}
		if value := r.Get("v3.auth.sha.encryption-default"); value.Exists() && !data.Users[i].V3AuthShaEncryptionDefault.IsNull() {
			data.Users[i].V3AuthShaEncryptionDefault = types.StringValue(value.String())
		} else {
			data.Users[i].V3AuthShaEncryptionDefault = types.StringNull()
		}
		if value := r.Get("v3.priv.aes.aes-128.encryption-default"); value.Exists() && !data.Users[i].V3PrivAesAes128EncryptionDefault.IsNull() {
			data.Users[i].V3PrivAesAes128EncryptionDefault = types.StringValue(value.String())
		} else {
			data.Users[i].V3PrivAesAes128EncryptionDefault = types.StringNull()
		}
		if value := r.Get("v3.priv.aes.aes-128.encryption-aes"); value.Exists() && !data.Users[i].V3PrivAesAes128EncryptionAes.IsNull() {
			data.Users[i].V3PrivAesAes128EncryptionAes = types.StringValue(value.String())
		} else {
			data.Users[i].V3PrivAesAes128EncryptionAes = types.StringNull()
		}
		if value := r.Get("v3.ipv4"); value.Exists() && !data.Users[i].V3Ipv4.IsNull() {
			data.Users[i].V3Ipv4 = types.StringValue(value.String())
		} else {
			data.Users[i].V3Ipv4 = types.StringNull()
		}
		if value := r.Get("v3.systemowner"); !data.Users[i].V3Systemowner.IsNull() {
			if value.Exists() {
				data.Users[i].V3Systemowner = types.BoolValue(true)
			} else {
				data.Users[i].V3Systemowner = types.BoolValue(false)
			}
		} else {
			data.Users[i].V3Systemowner = types.BoolNull()
		}
	}
	for i := range data.Groups {
		keys := [...]string{"group-name"}
		keyValues := [...]string{data.Groups[i].GroupName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "groups.group").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("group-name"); value.Exists() && !data.Groups[i].GroupName.IsNull() {
			data.Groups[i].GroupName = types.StringValue(value.String())
		} else {
			data.Groups[i].GroupName = types.StringNull()
		}
		if value := r.Get("v3.priv"); !data.Groups[i].V3Priv.IsNull() {
			if value.Exists() {
				data.Groups[i].V3Priv = types.BoolValue(true)
			} else {
				data.Groups[i].V3Priv = types.BoolValue(false)
			}
		} else {
			data.Groups[i].V3Priv = types.BoolNull()
		}
		if value := r.Get("v3.read"); value.Exists() && !data.Groups[i].V3Read.IsNull() {
			data.Groups[i].V3Read = types.StringValue(value.String())
		} else {
			data.Groups[i].V3Read = types.StringNull()
		}
		if value := r.Get("v3.write"); value.Exists() && !data.Groups[i].V3Write.IsNull() {
			data.Groups[i].V3Write = types.StringValue(value.String())
		} else {
			data.Groups[i].V3Write = types.StringNull()
		}
		if value := r.Get("v3.context"); value.Exists() && !data.Groups[i].V3Context.IsNull() {
			data.Groups[i].V3Context = types.StringValue(value.String())
		} else {
			data.Groups[i].V3Context = types.StringNull()
		}
		if value := r.Get("v3.notify"); value.Exists() && !data.Groups[i].V3Notify.IsNull() {
			data.Groups[i].V3Notify = types.StringValue(value.String())
		} else {
			data.Groups[i].V3Notify = types.StringNull()
		}
		if value := r.Get("v3.ipv4"); value.Exists() && !data.Groups[i].V3Ipv4.IsNull() {
			data.Groups[i].V3Ipv4 = types.StringValue(value.String())
		} else {
			data.Groups[i].V3Ipv4 = types.StringNull()
		}
		if value := r.Get("v3.ipv6"); value.Exists() && !data.Groups[i].V3Ipv6.IsNull() {
			data.Groups[i].V3Ipv6 = types.StringValue(value.String())
		} else {
			data.Groups[i].V3Ipv6 = types.StringNull()
		}
	}
	for i := range data.Communities {
		keys := [...]string{"community-string"}
		keyValues := [...]string{data.Communities[i].Community.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "community.unencrypted.unencrypted-string").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("community-string"); value.Exists() && !data.Communities[i].Community.IsNull() {
			data.Communities[i].Community = types.StringValue(value.String())
		} else {
			data.Communities[i].Community = types.StringNull()
		}
		if value := r.Get("view"); value.Exists() && !data.Communities[i].View.IsNull() {
			data.Communities[i].View = types.StringValue(value.String())
		} else {
			data.Communities[i].View = types.StringNull()
		}
		if value := r.Get("ro"); !data.Communities[i].Ro.IsNull() {
			if value.Exists() {
				data.Communities[i].Ro = types.BoolValue(true)
			} else {
				data.Communities[i].Ro = types.BoolValue(false)
			}
		} else {
			data.Communities[i].Ro = types.BoolNull()
		}
		if value := r.Get("rw"); !data.Communities[i].Rw.IsNull() {
			if value.Exists() {
				data.Communities[i].Rw = types.BoolValue(true)
			} else {
				data.Communities[i].Rw = types.BoolValue(false)
			}
		} else {
			data.Communities[i].Rw = types.BoolNull()
		}
		if value := r.Get("sdrowner"); !data.Communities[i].Sdrowner.IsNull() {
			if value.Exists() {
				data.Communities[i].Sdrowner = types.BoolValue(true)
			} else {
				data.Communities[i].Sdrowner = types.BoolValue(false)
			}
		} else {
			data.Communities[i].Sdrowner = types.BoolNull()
		}
		if value := r.Get("systemowner"); !data.Communities[i].Systemowner.IsNull() {
			if value.Exists() {
				data.Communities[i].Systemowner = types.BoolValue(true)
			} else {
				data.Communities[i].Systemowner = types.BoolValue(false)
			}
		} else {
			data.Communities[i].Systemowner = types.BoolNull()
		}
		if value := r.Get("ipv4"); value.Exists() && !data.Communities[i].Ipv4.IsNull() {
			data.Communities[i].Ipv4 = types.StringValue(value.String())
		} else {
			data.Communities[i].Ipv4 = types.StringNull()
		}
		if value := r.Get("ipv6"); value.Exists() && !data.Communities[i].Ipv6.IsNull() {
			data.Communities[i].Ipv6 = types.StringValue(value.String())
		} else {
			data.Communities[i].Ipv6 = types.StringNull()
		}
	}
}

func (data *SNMPServerData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "location"); value.Exists() {
		data.Location = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "contact"); value.Exists() {
		data.Contact = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-mibs-rfmib-cfg:rf"); value.Exists() {
		data.TrapsRf = types.BoolValue(true)
	} else {
		data.TrapsRf = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-bfd-sbfd-cfg:bfd"); value.Exists() {
		data.TrapsBfd = types.BoolValue(true)
	} else {
		data.TrapsBfd = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-ntp-cfg:ntp"); value.Exists() {
		data.TrapsNtp = types.BoolValue(true)
	} else {
		data.TrapsNtp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-ethernet-oam-cfg:ethernet.oam.events"); value.Exists() {
		data.TrapsEthernetOamEvents = types.BoolValue(true)
	} else {
		data.TrapsEthernetOamEvents = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-config-copy-cfg:copy-complete"); value.Exists() {
		data.TrapsCopyComplete = types.BoolValue(true)
	} else {
		data.TrapsCopyComplete = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.snmp.linkup"); value.Exists() {
		data.TrapsSnmpLinkup = types.BoolValue(true)
	} else {
		data.TrapsSnmpLinkup = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.snmp.linkdown"); value.Exists() {
		data.TrapsSnmpLinkdown = types.BoolValue(true)
	} else {
		data.TrapsSnmpLinkdown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-power-cfg:power"); value.Exists() {
		data.TrapsPower = types.BoolValue(true)
	} else {
		data.TrapsPower = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-cfg-mibs-cfg:config"); value.Exists() {
		data.TrapsConfig = types.BoolValue(true)
	} else {
		data.TrapsConfig = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-entity-cfg:entity"); value.Exists() {
		data.TrapsEntity = types.BoolValue(true)
	} else {
		data.TrapsEntity = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-system-cfg:system"); value.Exists() {
		data.TrapsSystem = types.BoolValue(true)
	} else {
		data.TrapsSystem = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-bridgemib-cfg:bridgemib"); value.Exists() {
		data.TrapsBridgemib = types.BoolValue(true)
	} else {
		data.TrapsBridgemib = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-entity-state-cfg:entity-state.operstatus"); value.Exists() {
		data.TrapsEntityStateOperstatus = types.BoolValue(true)
	} else {
		data.TrapsEntityStateOperstatus = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-entity-redundancy-cfg:entity-redundancy.all"); value.Exists() {
		data.TrapsEntityRedundancyAll = types.BoolValue(true)
	} else {
		data.TrapsEntityRedundancyAll = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "trap-source.both"); value.Exists() {
		data.TrapSourceBoth = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.all"); value.Exists() {
		data.TrapsL2vpnAll = types.BoolValue(true)
	} else {
		data.TrapsL2vpnAll = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.vc-up"); value.Exists() {
		data.TrapsL2vpnVcUp = types.BoolValue(true)
	} else {
		data.TrapsL2vpnVcUp = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-l2vpn-cfg:l2vpn.vc-down"); value.Exists() {
		data.TrapsL2vpnVcDown = types.BoolValue(true)
	} else {
		data.TrapsL2vpnVcDown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-mibs-sensormib-cfg:sensor"); value.Exists() {
		data.TrapsSensor = types.BoolValue(true)
	} else {
		data.TrapsSensor = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-traps-fru-ctrl-cfg:fru-ctrl"); value.Exists() {
		data.TrapsFruCtrl = types.BoolValue(true)
	} else {
		data.TrapsFruCtrl = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.all"); value.Exists() {
		data.TrapsIsisAll = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.database-overload"); value.Exists() {
		data.TrapsIsisDatabaseOverload = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.manual-address-drops"); value.Exists() {
		data.TrapsIsisManualAddressDrops = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.corrupted-lsp-detected"); value.Exists() {
		data.TrapsIsisCorruptedLspDetected = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.attempt-to-exceed-max-sequence"); value.Exists() {
		data.TrapsIsisAttemptToExceedMaxSequence = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.id-len-mismatch"); value.Exists() {
		data.TrapsIsisIdLenMismatch = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.max-area-addresses-mismatch"); value.Exists() {
		data.TrapsIsisMaxAreaAddressesMismatch = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.own-lsp-purge"); value.Exists() {
		data.TrapsIsisOwnLspPurge = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.sequence-number-skip"); value.Exists() {
		data.TrapsIsisSequenceNumberSkip = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.authentication-type-failure"); value.Exists() {
		data.TrapsIsisAuthenticationTypeFailure = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.authentication-failure"); value.Exists() {
		data.TrapsIsisAuthenticationFailure = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.version-skew"); value.Exists() {
		data.TrapsIsisVersionSkew = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.area-mismatch"); value.Exists() {
		data.TrapsIsisAreaMismatch = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.rejected-adjacency"); value.Exists() {
		data.TrapsIsisRejectedAdjacency = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.lsp-too-large-to-propagate"); value.Exists() {
		data.TrapsIsisLspTooLargeToPropagate = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.orig-lsp-buff-size-mismatch"); value.Exists() {
		data.TrapsIsisOrigLspBuffSizeMismatch = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.protocols-supported-mismatch"); value.Exists() {
		data.TrapsIsisProtocolsSupportedMismatch = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.adjacency-change"); value.Exists() {
		data.TrapsIsisAdjacencyChange = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-isis-cfg:isis.lsp-error-detected"); value.Exists() {
		data.TrapsIsisLspErrorDetected = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-bgp-cfg:bgp.cbgp2-updown"); value.Exists() {
		data.TrapsBgpCbgp2Updown = types.BoolValue(true)
	} else {
		data.TrapsBgpCbgp2Updown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "traps.Cisco-IOS-XR-um-router-bgp-cfg:bgp.bgp4-mib-updown"); value.Exists() {
		data.TrapsBgpBgp4MibUpdown = types.BoolValue(true)
	} else {
		data.TrapsBgpBgp4MibUpdown = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "users.user"); value.Exists() {
		data.Users = make([]SNMPServerUsers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerUsers{}
			if cValue := v.Get("user-name"); cValue.Exists() {
				item.UserName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("group-name"); cValue.Exists() {
				item.GroupName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.auth.md5.encryption-aes"); cValue.Exists() {
				item.V3AuthMd5EncryptionAes = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.auth.md5.encryption-default"); cValue.Exists() {
				item.V3AuthMd5EncryptionDefault = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.auth.sha.encryption-aes"); cValue.Exists() {
				item.V3AuthShaEncryptionAes = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.auth.sha.encryption-default"); cValue.Exists() {
				item.V3AuthShaEncryptionDefault = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.priv.aes.aes-128.encryption-default"); cValue.Exists() {
				item.V3PrivAesAes128EncryptionDefault = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.priv.aes.aes-128.encryption-aes"); cValue.Exists() {
				item.V3PrivAesAes128EncryptionAes = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.ipv4"); cValue.Exists() {
				item.V3Ipv4 = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.systemowner"); cValue.Exists() {
				item.V3Systemowner = types.BoolValue(true)
			} else {
				item.V3Systemowner = types.BoolValue(false)
			}
			data.Users = append(data.Users, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "groups.group"); value.Exists() {
		data.Groups = make([]SNMPServerGroups, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerGroups{}
			if cValue := v.Get("group-name"); cValue.Exists() {
				item.GroupName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.priv"); cValue.Exists() {
				item.V3Priv = types.BoolValue(true)
			} else {
				item.V3Priv = types.BoolValue(false)
			}
			if cValue := v.Get("v3.read"); cValue.Exists() {
				item.V3Read = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.write"); cValue.Exists() {
				item.V3Write = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.context"); cValue.Exists() {
				item.V3Context = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.notify"); cValue.Exists() {
				item.V3Notify = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.ipv4"); cValue.Exists() {
				item.V3Ipv4 = types.StringValue(cValue.String())
			}
			if cValue := v.Get("v3.ipv6"); cValue.Exists() {
				item.V3Ipv6 = types.StringValue(cValue.String())
			}
			data.Groups = append(data.Groups, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "community.unencrypted.unencrypted-string"); value.Exists() {
		data.Communities = make([]SNMPServerCommunities, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerCommunities{}
			if cValue := v.Get("community-string"); cValue.Exists() {
				item.Community = types.StringValue(cValue.String())
			}
			if cValue := v.Get("view"); cValue.Exists() {
				item.View = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ro"); cValue.Exists() {
				item.Ro = types.BoolValue(true)
			} else {
				item.Ro = types.BoolValue(false)
			}
			if cValue := v.Get("rw"); cValue.Exists() {
				item.Rw = types.BoolValue(true)
			} else {
				item.Rw = types.BoolValue(false)
			}
			if cValue := v.Get("sdrowner"); cValue.Exists() {
				item.Sdrowner = types.BoolValue(true)
			} else {
				item.Sdrowner = types.BoolValue(false)
			}
			if cValue := v.Get("systemowner"); cValue.Exists() {
				item.Systemowner = types.BoolValue(true)
			} else {
				item.Systemowner = types.BoolValue(false)
			}
			if cValue := v.Get("ipv4"); cValue.Exists() {
				item.Ipv4 = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv6"); cValue.Exists() {
				item.Ipv6 = types.StringValue(cValue.String())
			}
			data.Communities = append(data.Communities, item)
			return true
		})
	}
}

func (data *SNMPServer) getDeletedItems(ctx context.Context, state SNMPServer) []string {
	deletedItems := make([]string, 0)
	if !state.Location.IsNull() && data.Location.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/location", state.getPath()))
	}
	if !state.Contact.IsNull() && data.Contact.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/contact", state.getPath()))
	}
	if !state.TrapsRf.IsNull() && data.TrapsRf.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-mibs-rfmib-cfg:rf", state.getPath()))
	}
	if !state.TrapsBfd.IsNull() && data.TrapsBfd.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-bfd-sbfd-cfg:bfd", state.getPath()))
	}
	if !state.TrapsNtp.IsNull() && data.TrapsNtp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-ntp-cfg:ntp", state.getPath()))
	}
	if !state.TrapsEthernetOamEvents.IsNull() && data.TrapsEthernetOamEvents.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-ethernet-oam-cfg:ethernet/oam/events", state.getPath()))
	}
	if !state.TrapsCopyComplete.IsNull() && data.TrapsCopyComplete.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-config-copy-cfg:copy-complete", state.getPath()))
	}
	if !state.TrapsSnmpLinkup.IsNull() && data.TrapsSnmpLinkup.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/snmp/linkup", state.getPath()))
	}
	if !state.TrapsSnmpLinkdown.IsNull() && data.TrapsSnmpLinkdown.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/snmp/linkdown", state.getPath()))
	}
	if !state.TrapsPower.IsNull() && data.TrapsPower.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-power-cfg:power", state.getPath()))
	}
	if !state.TrapsConfig.IsNull() && data.TrapsConfig.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-cfg-mibs-cfg:config", state.getPath()))
	}
	if !state.TrapsEntity.IsNull() && data.TrapsEntity.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-cfg:entity", state.getPath()))
	}
	if !state.TrapsSystem.IsNull() && data.TrapsSystem.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-system-cfg:system", state.getPath()))
	}
	if !state.TrapsBridgemib.IsNull() && data.TrapsBridgemib.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-bridgemib-cfg:bridgemib", state.getPath()))
	}
	if !state.TrapsEntityStateOperstatus.IsNull() && data.TrapsEntityStateOperstatus.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-state-cfg:entity-state/operstatus", state.getPath()))
	}
	if !state.TrapsEntityRedundancyAll.IsNull() && data.TrapsEntityRedundancyAll.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-redundancy-cfg:entity-redundancy/all", state.getPath()))
	}
	if !state.TrapSourceBoth.IsNull() && data.TrapSourceBoth.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/trap-source/both", state.getPath()))
	}
	if !state.TrapsL2vpnAll.IsNull() && data.TrapsL2vpnAll.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/all", state.getPath()))
	}
	if !state.TrapsL2vpnVcUp.IsNull() && data.TrapsL2vpnVcUp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/vc-up", state.getPath()))
	}
	if !state.TrapsL2vpnVcDown.IsNull() && data.TrapsL2vpnVcDown.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/vc-down", state.getPath()))
	}
	if !state.TrapsSensor.IsNull() && data.TrapsSensor.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-mibs-sensormib-cfg:sensor", state.getPath()))
	}
	if !state.TrapsFruCtrl.IsNull() && data.TrapsFruCtrl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-fru-ctrl-cfg:fru-ctrl", state.getPath()))
	}
	if !state.TrapsIsisAll.IsNull() && data.TrapsIsisAll.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisDatabaseOverload.IsNull() && data.TrapsIsisDatabaseOverload.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisManualAddressDrops.IsNull() && data.TrapsIsisManualAddressDrops.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisCorruptedLspDetected.IsNull() && data.TrapsIsisCorruptedLspDetected.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisAttemptToExceedMaxSequence.IsNull() && data.TrapsIsisAttemptToExceedMaxSequence.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisIdLenMismatch.IsNull() && data.TrapsIsisIdLenMismatch.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisMaxAreaAddressesMismatch.IsNull() && data.TrapsIsisMaxAreaAddressesMismatch.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisOwnLspPurge.IsNull() && data.TrapsIsisOwnLspPurge.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisSequenceNumberSkip.IsNull() && data.TrapsIsisSequenceNumberSkip.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisAuthenticationTypeFailure.IsNull() && data.TrapsIsisAuthenticationTypeFailure.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisAuthenticationFailure.IsNull() && data.TrapsIsisAuthenticationFailure.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisVersionSkew.IsNull() && data.TrapsIsisVersionSkew.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisAreaMismatch.IsNull() && data.TrapsIsisAreaMismatch.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisRejectedAdjacency.IsNull() && data.TrapsIsisRejectedAdjacency.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisLspTooLargeToPropagate.IsNull() && data.TrapsIsisLspTooLargeToPropagate.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisOrigLspBuffSizeMismatch.IsNull() && data.TrapsIsisOrigLspBuffSizeMismatch.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisProtocolsSupportedMismatch.IsNull() && data.TrapsIsisProtocolsSupportedMismatch.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisAdjacencyChange.IsNull() && data.TrapsIsisAdjacencyChange.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsIsisLspErrorDetected.IsNull() && data.TrapsIsisLspErrorDetected.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", state.getPath()))
	}
	if !state.TrapsBgpCbgp2Updown.IsNull() && data.TrapsBgpCbgp2Updown.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-bgp-cfg:bgp/cbgp2-updown", state.getPath()))
	}
	if !state.TrapsBgpBgp4MibUpdown.IsNull() && data.TrapsBgpBgp4MibUpdown.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-bgp-cfg:bgp/bgp4-mib-updown", state.getPath()))
	}
	for i := range state.Users {
		keys := [...]string{"user-name"}
		stateKeyValues := [...]string{state.Users[i].UserName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Users[i].UserName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Users {
			found = true
			if state.Users[i].UserName.ValueString() != data.Users[j].UserName.ValueString() {
				found = false
			}
			if found {
				if !state.Users[i].GroupName.IsNull() && data.Users[j].GroupName.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/group-name", state.getPath(), keyString))
				}
				if !state.Users[i].V3AuthMd5EncryptionAes.IsNull() && data.Users[j].V3AuthMd5EncryptionAes.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/v3/auth/md5/encryption-aes", state.getPath(), keyString))
				}
				if !state.Users[i].V3AuthMd5EncryptionDefault.IsNull() && data.Users[j].V3AuthMd5EncryptionDefault.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/v3/auth/md5/encryption-default", state.getPath(), keyString))
				}
				if !state.Users[i].V3AuthShaEncryptionAes.IsNull() && data.Users[j].V3AuthShaEncryptionAes.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/v3/auth/sha/encryption-aes", state.getPath(), keyString))
				}
				if !state.Users[i].V3AuthShaEncryptionDefault.IsNull() && data.Users[j].V3AuthShaEncryptionDefault.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/v3/auth/sha/encryption-default", state.getPath(), keyString))
				}
				if !state.Users[i].V3PrivAesAes128EncryptionDefault.IsNull() && data.Users[j].V3PrivAesAes128EncryptionDefault.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/v3/priv/aes/aes-128/encryption-default", state.getPath(), keyString))
				}
				if !state.Users[i].V3PrivAesAes128EncryptionAes.IsNull() && data.Users[j].V3PrivAesAes128EncryptionAes.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/v3/priv/aes/aes-128/encryption-aes", state.getPath(), keyString))
				}
				if !state.Users[i].V3Ipv4.IsNull() && data.Users[j].V3Ipv4.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/v3/ipv4", state.getPath(), keyString))
				}
				if !state.Users[i].V3Systemowner.IsNull() && data.Users[j].V3Systemowner.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v/v3/systemowner", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/users/user%v", state.getPath(), keyString))
		}
	}
	for i := range state.Groups {
		keys := [...]string{"group-name"}
		stateKeyValues := [...]string{state.Groups[i].GroupName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Groups[i].GroupName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Groups {
			found = true
			if state.Groups[i].GroupName.ValueString() != data.Groups[j].GroupName.ValueString() {
				found = false
			}
			if found {
				if !state.Groups[i].V3Priv.IsNull() && data.Groups[j].V3Priv.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/groups/group%v/v3/priv", state.getPath(), keyString))
				}
				if !state.Groups[i].V3Read.IsNull() && data.Groups[j].V3Read.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/groups/group%v/v3/read", state.getPath(), keyString))
				}
				if !state.Groups[i].V3Write.IsNull() && data.Groups[j].V3Write.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/groups/group%v/v3/write", state.getPath(), keyString))
				}
				if !state.Groups[i].V3Context.IsNull() && data.Groups[j].V3Context.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/groups/group%v/v3/context", state.getPath(), keyString))
				}
				if !state.Groups[i].V3Notify.IsNull() && data.Groups[j].V3Notify.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/groups/group%v/v3/notify", state.getPath(), keyString))
				}
				if !state.Groups[i].V3Ipv4.IsNull() && data.Groups[j].V3Ipv4.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/groups/group%v/v3/ipv4", state.getPath(), keyString))
				}
				if !state.Groups[i].V3Ipv6.IsNull() && data.Groups[j].V3Ipv6.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/groups/group%v/v3/ipv6", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/groups/group%v", state.getPath(), keyString))
		}
	}
	for i := range state.Communities {
		keys := [...]string{"community-string"}
		stateKeyValues := [...]string{state.Communities[i].Community.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Communities[i].Community.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Communities {
			found = true
			if state.Communities[i].Community.ValueString() != data.Communities[j].Community.ValueString() {
				found = false
			}
			if found {
				if !state.Communities[i].View.IsNull() && data.Communities[j].View.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/view", state.getPath(), keyString))
				}
				if !state.Communities[i].Ro.IsNull() && data.Communities[j].Ro.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/ro", state.getPath(), keyString))
				}
				if !state.Communities[i].Rw.IsNull() && data.Communities[j].Rw.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/rw", state.getPath(), keyString))
				}
				if !state.Communities[i].Sdrowner.IsNull() && data.Communities[j].Sdrowner.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/sdrowner", state.getPath(), keyString))
				}
				if !state.Communities[i].Systemowner.IsNull() && data.Communities[j].Systemowner.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/systemowner", state.getPath(), keyString))
				}
				if !state.Communities[i].Ipv4.IsNull() && data.Communities[j].Ipv4.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/ipv4", state.getPath(), keyString))
				}
				if !state.Communities[i].Ipv6.IsNull() && data.Communities[j].Ipv6.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/ipv6", state.getPath(), keyString))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v", state.getPath(), keyString))
		}
	}
	return deletedItems
}

func (data *SNMPServer) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.TrapsRf.IsNull() && !data.TrapsRf.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-mibs-rfmib-cfg:rf", data.getPath()))
	}
	if !data.TrapsBfd.IsNull() && !data.TrapsBfd.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-bfd-sbfd-cfg:bfd", data.getPath()))
	}
	if !data.TrapsNtp.IsNull() && !data.TrapsNtp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-ntp-cfg:ntp", data.getPath()))
	}
	if !data.TrapsEthernetOamEvents.IsNull() && !data.TrapsEthernetOamEvents.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-ethernet-oam-cfg:ethernet/oam/events", data.getPath()))
	}
	if !data.TrapsCopyComplete.IsNull() && !data.TrapsCopyComplete.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-config-copy-cfg:copy-complete", data.getPath()))
	}
	if !data.TrapsSnmpLinkup.IsNull() && !data.TrapsSnmpLinkup.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/snmp/linkup", data.getPath()))
	}
	if !data.TrapsSnmpLinkdown.IsNull() && !data.TrapsSnmpLinkdown.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/snmp/linkdown", data.getPath()))
	}
	if !data.TrapsPower.IsNull() && !data.TrapsPower.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-power-cfg:power", data.getPath()))
	}
	if !data.TrapsConfig.IsNull() && !data.TrapsConfig.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-cfg-mibs-cfg:config", data.getPath()))
	}
	if !data.TrapsEntity.IsNull() && !data.TrapsEntity.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-cfg:entity", data.getPath()))
	}
	if !data.TrapsSystem.IsNull() && !data.TrapsSystem.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-system-cfg:system", data.getPath()))
	}
	if !data.TrapsBridgemib.IsNull() && !data.TrapsBridgemib.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-bridgemib-cfg:bridgemib", data.getPath()))
	}
	if !data.TrapsEntityStateOperstatus.IsNull() && !data.TrapsEntityStateOperstatus.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-state-cfg:entity-state/operstatus", data.getPath()))
	}
	if !data.TrapsEntityRedundancyAll.IsNull() && !data.TrapsEntityRedundancyAll.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-redundancy-cfg:entity-redundancy/all", data.getPath()))
	}
	if !data.TrapsL2vpnAll.IsNull() && !data.TrapsL2vpnAll.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/all", data.getPath()))
	}
	if !data.TrapsL2vpnVcUp.IsNull() && !data.TrapsL2vpnVcUp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/vc-up", data.getPath()))
	}
	if !data.TrapsL2vpnVcDown.IsNull() && !data.TrapsL2vpnVcDown.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/vc-down", data.getPath()))
	}
	if !data.TrapsSensor.IsNull() && !data.TrapsSensor.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-mibs-sensormib-cfg:sensor", data.getPath()))
	}
	if !data.TrapsFruCtrl.IsNull() && !data.TrapsFruCtrl.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-fru-ctrl-cfg:fru-ctrl", data.getPath()))
	}
	if !data.TrapsBgpCbgp2Updown.IsNull() && !data.TrapsBgpCbgp2Updown.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-bgp-cfg:bgp/cbgp2-updown", data.getPath()))
	}
	if !data.TrapsBgpBgp4MibUpdown.IsNull() && !data.TrapsBgpBgp4MibUpdown.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-bgp-cfg:bgp/bgp4-mib-updown", data.getPath()))
	}
	for i := range data.Users {
		keys := [...]string{"user-name"}
		keyValues := [...]string{data.Users[i].UserName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.Users[i].V3Systemowner.IsNull() && !data.Users[i].V3Systemowner.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/users/user%v/v3/systemowner", data.getPath(), keyString))
		}
	}
	for i := range data.Groups {
		keys := [...]string{"group-name"}
		keyValues := [...]string{data.Groups[i].GroupName.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.Groups[i].V3Priv.IsNull() && !data.Groups[i].V3Priv.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/groups/group%v/v3/priv", data.getPath(), keyString))
		}
	}
	for i := range data.Communities {
		keys := [...]string{"community-string"}
		keyValues := [...]string{data.Communities[i].Community.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		if !data.Communities[i].Ro.IsNull() && !data.Communities[i].Ro.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/ro", data.getPath(), keyString))
		}
		if !data.Communities[i].Rw.IsNull() && !data.Communities[i].Rw.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/rw", data.getPath(), keyString))
		}
		if !data.Communities[i].Sdrowner.IsNull() && !data.Communities[i].Sdrowner.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/sdrowner", data.getPath(), keyString))
		}
		if !data.Communities[i].Systemowner.IsNull() && !data.Communities[i].Systemowner.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v/systemowner", data.getPath(), keyString))
		}
	}
	return emptyLeafsDelete
}

func (data *SNMPServer) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Location.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/location", data.getPath()))
	}
	if !data.Contact.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/contact", data.getPath()))
	}
	if !data.TrapsRf.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-mibs-rfmib-cfg:rf", data.getPath()))
	}
	if !data.TrapsBfd.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-bfd-sbfd-cfg:bfd", data.getPath()))
	}
	if !data.TrapsNtp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-ntp-cfg:ntp", data.getPath()))
	}
	if !data.TrapsEthernetOamEvents.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-ethernet-oam-cfg:ethernet/oam/events", data.getPath()))
	}
	if !data.TrapsCopyComplete.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-config-copy-cfg:copy-complete", data.getPath()))
	}
	if !data.TrapsSnmpLinkup.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/snmp/linkup", data.getPath()))
	}
	if !data.TrapsSnmpLinkdown.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/snmp/linkdown", data.getPath()))
	}
	if !data.TrapsPower.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-power-cfg:power", data.getPath()))
	}
	if !data.TrapsConfig.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-cfg-mibs-cfg:config", data.getPath()))
	}
	if !data.TrapsEntity.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-cfg:entity", data.getPath()))
	}
	if !data.TrapsSystem.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-system-cfg:system", data.getPath()))
	}
	if !data.TrapsBridgemib.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-bridgemib-cfg:bridgemib", data.getPath()))
	}
	if !data.TrapsEntityStateOperstatus.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-state-cfg:entity-state/operstatus", data.getPath()))
	}
	if !data.TrapsEntityRedundancyAll.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-entity-redundancy-cfg:entity-redundancy/all", data.getPath()))
	}
	if !data.TrapSourceBoth.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/trap-source/both", data.getPath()))
	}
	if !data.TrapsL2vpnAll.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/all", data.getPath()))
	}
	if !data.TrapsL2vpnVcUp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/vc-up", data.getPath()))
	}
	if !data.TrapsL2vpnVcDown.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-l2vpn-cfg:l2vpn/vc-down", data.getPath()))
	}
	if !data.TrapsSensor.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-mibs-sensormib-cfg:sensor", data.getPath()))
	}
	if !data.TrapsFruCtrl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-traps-fru-ctrl-cfg:fru-ctrl", data.getPath()))
	}
	if !data.TrapsIsisAll.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisDatabaseOverload.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisManualAddressDrops.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisCorruptedLspDetected.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisAttemptToExceedMaxSequence.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisIdLenMismatch.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisMaxAreaAddressesMismatch.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisOwnLspPurge.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisSequenceNumberSkip.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisAuthenticationTypeFailure.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisAuthenticationFailure.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisVersionSkew.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisAreaMismatch.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisRejectedAdjacency.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisLspTooLargeToPropagate.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisOrigLspBuffSizeMismatch.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisProtocolsSupportedMismatch.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisAdjacencyChange.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsIsisLspErrorDetected.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-isis-cfg:isis", data.getPath()))
	}
	if !data.TrapsBgpCbgp2Updown.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-bgp-cfg:bgp/cbgp2-updown", data.getPath()))
	}
	if !data.TrapsBgpBgp4MibUpdown.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/traps/Cisco-IOS-XR-um-router-bgp-cfg:bgp/bgp4-mib-updown", data.getPath()))
	}
	for i := range data.Users {
		keys := [...]string{"user-name"}
		keyValues := [...]string{data.Users[i].UserName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/users/user%v", data.getPath(), keyString))
	}
	for i := range data.Groups {
		keys := [...]string{"group-name"}
		keyValues := [...]string{data.Groups[i].GroupName.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/groups/group%v", data.getPath(), keyString))
	}
	for i := range data.Communities {
		keys := [...]string{"community-string"}
		keyValues := [...]string{data.Communities[i].Community.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/community/unencrypted/unencrypted-string%v", data.getPath(), keyString))
	}
	return deletePaths
}
