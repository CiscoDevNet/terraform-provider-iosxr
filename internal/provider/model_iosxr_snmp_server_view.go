// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SNMPServerView struct {
	Device   types.String         `tfsdk:"device"`
	Id       types.String         `tfsdk:"id"`
	ViewName types.String         `tfsdk:"view_name"`
	Name     []SNMPServerViewName `tfsdk:"name"`
}
type SNMPServerViewName struct {
	MibViewFamilyName types.String `tfsdk:"mib_view_family_name"`
	Included          types.Bool   `tfsdk:"included"`
	Excluded          types.Bool   `tfsdk:"excluded"`
}

func (data SNMPServerView) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-snmp-server-cfg:snmp-server/views/view[view-name-%s]", data.ViewName.ValueString())
}

func (data SNMPServerView) toBody(ctx context.Context) string {
	body := "{}"
	if !data.ViewName.IsNull() && !data.ViewName.IsUnknown() {
		body, _ = sjson.Set(body, "view-name", data.ViewName.ValueString())
	}
	if len(data.Name) > 0 {
		body, _ = sjson.Set(body, "mib-view-families.mib-view-family", []interface{}{})
		for index, item := range data.Name {
			if !item.MibViewFamilyName.IsNull() && !item.MibViewFamilyName.IsUnknown() {
				body, _ = sjson.Set(body, "mib-view-families.mib-view-family"+"."+strconv.Itoa(index)+"."+"mib-view-family-name", item.MibViewFamilyName.ValueString())
			}
			if !item.Included.IsNull() && !item.Included.IsUnknown() {
				if item.Included.ValueBool() {
					body, _ = sjson.Set(body, "mib-view-families.mib-view-family"+"."+strconv.Itoa(index)+"."+"included", map[string]string{})
				}
			}
			if !item.Excluded.IsNull() && !item.Excluded.IsUnknown() {
				if item.Excluded.ValueBool() {
					body, _ = sjson.Set(body, "mib-view-families.mib-view-family"+"."+strconv.Itoa(index)+"."+"excluded", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *SNMPServerView) updateFromBody(ctx context.Context, res []byte) {
	for i := range data.Name {
		keys := [...]string{"mib-view-family-name"}
		keyValues := [...]string{data.Name[i].MibViewFamilyName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "mib-view-families.mib-view-family").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("mib-view-family-name"); value.Exists() && !data.Name[i].MibViewFamilyName.IsNull() {
			data.Name[i].MibViewFamilyName = types.StringValue(value.String())
		} else {
			data.Name[i].MibViewFamilyName = types.StringNull()
		}
		if value := r.Get("included"); !data.Name[i].Included.IsNull() {
			if value.Exists() {
				data.Name[i].Included = types.BoolValue(true)
			} else {
				data.Name[i].Included = types.BoolValue(false)
			}
		} else {
			data.Name[i].Included = types.BoolNull()
		}
		if value := r.Get("excluded"); !data.Name[i].Excluded.IsNull() {
			if value.Exists() {
				data.Name[i].Excluded = types.BoolValue(true)
			} else {
				data.Name[i].Excluded = types.BoolValue(false)
			}
		} else {
			data.Name[i].Excluded = types.BoolNull()
		}
	}
}

func (data *SNMPServerView) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "mib-view-families.mib-view-family"); value.Exists() {
		data.Name = make([]SNMPServerViewName, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerViewName{}
			if cValue := v.Get("mib-view-family-name"); cValue.Exists() {
				item.MibViewFamilyName = types.StringValue(cValue.String())
			}
			if cValue := v.Get("included"); cValue.Exists() {
				item.Included = types.BoolValue(true)
			} else {
				item.Included = types.BoolValue(false)
			}
			if cValue := v.Get("excluded"); cValue.Exists() {
				item.Excluded = types.BoolValue(true)
			} else {
				item.Excluded = types.BoolValue(false)
			}
			data.Name = append(data.Name, item)
			return true
		})
	}
}

func (data *SNMPServerView) fromPlan(ctx context.Context, plan SNMPServerView) {
	data.Device = plan.Device
	data.ViewName = types.StringValue(plan.ViewName.ValueString())
}

func (data *SNMPServerView) getDeletedListItems(ctx context.Context, state SNMPServerView) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Name {
		keys := [...]string{"mib-view-family-name"}
		stateKeyValues := [...]string{state.Name[i].MibViewFamilyName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Name[i].MibViewFamilyName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Name {
			found = true
			if state.Name[i].MibViewFamilyName.ValueString() != data.Name[j].MibViewFamilyName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/mib-view-families/mib-view-family%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *SNMPServerView) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
