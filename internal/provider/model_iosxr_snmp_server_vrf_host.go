// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SNMPServerVRFHost struct {
	Device                                                  types.String `tfsdk:"device"`
	Id                                                      types.String `tfsdk:"id"`
	VrfName                                                 types.String `tfsdk:"vrf_name"`
	TrapsUnencryptedUnencryptedStringVersionV3SecurityLevel types.String `tfsdk:"traps_unencrypted_unencrypted_string_version_v3_security_level"`
}

func (data SNMPServerVRFHost) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-snmp-server-cfg:snmp-server/vrfs/vrf[vrf-name-%s]/hosts/host[address=%s]", data.VrfName.ValueString())
}

func (data SNMPServerVRFHost) toBody(ctx context.Context) string {
	body := "{}"
	if !data.TrapsUnencryptedUnencryptedStringVersionV3SecurityLevel.IsNull() && !data.TrapsUnencryptedUnencryptedStringVersionV3SecurityLevel.IsUnknown() {
		body, _ = sjson.Set(body, "traps.unencrypted.unencrypted-string.version.v3.security-level", data.TrapsUnencryptedUnencryptedStringVersionV3SecurityLevel.ValueString())
	}
	return body
}

func (data *SNMPServerVRFHost) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "traps.unencrypted.unencrypted-string.version.v3.security-level"); value.Exists() && !data.TrapsUnencryptedUnencryptedStringVersionV3SecurityLevel.IsNull() {
		data.TrapsUnencryptedUnencryptedStringVersionV3SecurityLevel = types.StringValue(value.String())
	} else {
		data.TrapsUnencryptedUnencryptedStringVersionV3SecurityLevel = types.StringNull()
	}
}

func (data *SNMPServerVRFHost) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "traps.unencrypted.unencrypted-string.version.v3.security-level"); value.Exists() {
		data.TrapsUnencryptedUnencryptedStringVersionV3SecurityLevel = types.StringValue(value.String())
	}
}

func (data *SNMPServerVRFHost) fromPlan(ctx context.Context, plan SNMPServerVRFHost) {
	data.Device = plan.Device
	data.VrfName = types.StringValue(plan.VrfName.ValueString())
}

func (data *SNMPServerVRFHost) getDeletedListItems(ctx context.Context, state SNMPServerVRFHost) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *SNMPServerVRFHost) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
