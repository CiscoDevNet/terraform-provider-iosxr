// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SNMPView struct {
	Device            types.String `tfsdk:"device"`
	Id                types.String `tfsdk:"id"`
	ViewName          types.String `tfsdk:"view_name"`
	MibViewFamilyName types.String `tfsdk:"mib_view_family_name"`
	Included          types.Bool   `tfsdk:"included"`
	Excluded          types.Bool   `tfsdk:"excluded"`
}

func (data SNMPView) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-snmp-server-cfg:snmp-server/views/view[view-name-%s]/mib-view-families/mib-view-family[mib-view-family-name=%s]", data.ViewName.ValueString(), data.MibViewFamilyName.ValueString())
}

func (data SNMPView) toBody(ctx context.Context) string {
	body := "{}"
	if !data.MibViewFamilyName.IsNull() && !data.MibViewFamilyName.IsUnknown() {
		body, _ = sjson.Set(body, "mib-view-family-name", data.MibViewFamilyName.ValueString())
	}
	if !data.Included.IsNull() && !data.Included.IsUnknown() {
		if data.Included.ValueBool() {
			body, _ = sjson.Set(body, "included", map[string]string{})
		}
	}
	if !data.Excluded.IsNull() && !data.Excluded.IsUnknown() {
		if data.Excluded.ValueBool() {
			body, _ = sjson.Set(body, "excluded", map[string]string{})
		}
	}
	return body
}

func (data *SNMPView) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "included"); !data.Included.IsNull() {
		if value.Exists() {
			data.Included = types.BoolValue(true)
		} else {
			data.Included = types.BoolValue(false)
		}
	} else {
		data.Included = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "excluded"); !data.Excluded.IsNull() {
		if value.Exists() {
			data.Excluded = types.BoolValue(true)
		} else {
			data.Excluded = types.BoolValue(false)
		}
	} else {
		data.Excluded = types.BoolNull()
	}
}

func (data *SNMPView) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "included"); value.Exists() {
		data.Included = types.BoolValue(true)
	} else {
		data.Included = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "excluded"); value.Exists() {
		data.Excluded = types.BoolValue(true)
	} else {
		data.Excluded = types.BoolValue(false)
	}
}

func (data *SNMPView) fromPlan(ctx context.Context, plan SNMPView) {
	data.Device = plan.Device
	data.ViewName = types.StringValue(plan.ViewName.ValueString())
	data.MibViewFamilyName = types.StringValue(plan.MibViewFamilyName.ValueString())
}

func (data *SNMPView) getDeletedListItems(ctx context.Context, state SNMPView) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *SNMPView) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
