// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SSH struct {
	Device             types.String    `tfsdk:"device"`
	Id                 types.String    `tfsdk:"id"`
	ServerDscp         types.Int64     `tfsdk:"server_dscp"`
	ServerLogging      types.Bool      `tfsdk:"server_logging"`
	ServerRateLimit    types.Int64     `tfsdk:"server_rate_limit"`
	ServerSessionLimit types.Int64     `tfsdk:"server_session_limit"`
	ServerV2           types.Bool      `tfsdk:"server_v2"`
	ServerVrfs         []SSHServerVrfs `tfsdk:"server_vrfs"`
}
type SSHServerVrfs struct {
	VrfName types.String `tfsdk:"vrf_name"`
}

func (data SSH) getPath() string {
	return "Cisco-IOS-XR-um-ssh-cfg:/ssh"
}

func (data SSH) toBody(ctx context.Context) string {
	body := "{}"
	if !data.ServerDscp.IsNull() && !data.ServerDscp.IsUnknown() {
		body, _ = sjson.Set(body, "server.dscp", strconv.FormatInt(data.ServerDscp.ValueInt64(), 10))
	}
	if !data.ServerLogging.IsNull() && !data.ServerLogging.IsUnknown() {
		if data.ServerLogging.ValueBool() {
			body, _ = sjson.Set(body, "server.logging", map[string]string{})
		}
	}
	if !data.ServerRateLimit.IsNull() && !data.ServerRateLimit.IsUnknown() {
		body, _ = sjson.Set(body, "server.rate-limit", strconv.FormatInt(data.ServerRateLimit.ValueInt64(), 10))
	}
	if !data.ServerSessionLimit.IsNull() && !data.ServerSessionLimit.IsUnknown() {
		body, _ = sjson.Set(body, "server.session-limit", strconv.FormatInt(data.ServerSessionLimit.ValueInt64(), 10))
	}
	if !data.ServerV2.IsNull() && !data.ServerV2.IsUnknown() {
		if data.ServerV2.ValueBool() {
			body, _ = sjson.Set(body, "server.v2", map[string]string{})
		}
	}
	if len(data.ServerVrfs) > 0 {
		body, _ = sjson.Set(body, "server.vrfs.vrf", []interface{}{})
		for index, item := range data.ServerVrfs {
			if !item.VrfName.IsNull() && !item.VrfName.IsUnknown() {
				body, _ = sjson.Set(body, "server.vrfs.vrf"+"."+strconv.Itoa(index)+"."+"vrf-name", item.VrfName.ValueString())
			}
		}
	}
	return body
}

func (data *SSH) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "server.dscp"); value.Exists() && !data.ServerDscp.IsNull() {
		data.ServerDscp = types.Int64Value(value.Int())
	} else {
		data.ServerDscp = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "server.logging"); !data.ServerLogging.IsNull() {
		if value.Exists() {
			data.ServerLogging = types.BoolValue(true)
		} else {
			data.ServerLogging = types.BoolValue(false)
		}
	} else {
		data.ServerLogging = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "server.rate-limit"); value.Exists() && !data.ServerRateLimit.IsNull() {
		data.ServerRateLimit = types.Int64Value(value.Int())
	} else {
		data.ServerRateLimit = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "server.session-limit"); value.Exists() && !data.ServerSessionLimit.IsNull() {
		data.ServerSessionLimit = types.Int64Value(value.Int())
	} else {
		data.ServerSessionLimit = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "server.v2"); !data.ServerV2.IsNull() {
		if value.Exists() {
			data.ServerV2 = types.BoolValue(true)
		} else {
			data.ServerV2 = types.BoolValue(false)
		}
	} else {
		data.ServerV2 = types.BoolNull()
	}
	for i := range data.ServerVrfs {
		keys := [...]string{"vrf-name"}
		keyValues := [...]string{data.ServerVrfs[i].VrfName.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "server.vrfs.vrf").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("vrf-name"); value.Exists() && !data.ServerVrfs[i].VrfName.IsNull() {
			data.ServerVrfs[i].VrfName = types.StringValue(value.String())
		} else {
			data.ServerVrfs[i].VrfName = types.StringNull()
		}
	}
}

func (data *SSH) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "server.dscp"); value.Exists() {
		data.ServerDscp = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "server.logging"); value.Exists() {
		data.ServerLogging = types.BoolValue(true)
	} else {
		data.ServerLogging = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "server.rate-limit"); value.Exists() {
		data.ServerRateLimit = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "server.session-limit"); value.Exists() {
		data.ServerSessionLimit = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "server.v2"); value.Exists() {
		data.ServerV2 = types.BoolValue(true)
	} else {
		data.ServerV2 = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "server.vrfs.vrf"); value.Exists() {
		data.ServerVrfs = make([]SSHServerVrfs, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SSHServerVrfs{}
			if cValue := v.Get("vrf-name"); cValue.Exists() {
				item.VrfName = types.StringValue(cValue.String())
			}
			data.ServerVrfs = append(data.ServerVrfs, item)
			return true
		})
	}
}

func (data *SSH) fromPlan(ctx context.Context, plan SSH) {
	data.Device = plan.Device
}

func (data *SSH) getDeletedListItems(ctx context.Context, state SSH) []string {
	deletedListItems := make([]string, 0)
	for i := range state.ServerVrfs {
		keys := [...]string{"vrf-name"}
		stateKeyValues := [...]string{state.ServerVrfs[i].VrfName.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.ServerVrfs[i].VrfName.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.ServerVrfs {
			found = true
			if state.ServerVrfs[i].VrfName.ValueString() != data.ServerVrfs[j].VrfName.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/server/vrfs/vrf%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *SSH) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
