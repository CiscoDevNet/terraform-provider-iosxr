// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type VRF struct {
	Device                                       types.String                                      `tfsdk:"device"`
	Id                                           types.String                                      `tfsdk:"id"`
	DeleteMode                                   types.String                                      `tfsdk:"delete_mode"`
	VrfName                                      types.String                                      `tfsdk:"vrf_name"`
	Description                                  types.String                                      `tfsdk:"description"`
	VpnId                                        types.String                                      `tfsdk:"vpn_id"`
	Ipv4Unicast                                  types.Bool                                        `tfsdk:"ipv4_unicast"`
	Ipv4UnicastImportRoutePolicy                 types.String                                      `tfsdk:"ipv4_unicast_import_route_policy"`
	Ipv4UnicastExportRoutePolicy                 types.String                                      `tfsdk:"ipv4_unicast_export_route_policy"`
	Ipv4Multicast                                types.Bool                                        `tfsdk:"ipv4_multicast"`
	Ipv4Flowspec                                 types.Bool                                        `tfsdk:"ipv4_flowspec"`
	Ipv6Unicast                                  types.Bool                                        `tfsdk:"ipv6_unicast"`
	Ipv6UnicastImportRoutePolicy                 types.String                                      `tfsdk:"ipv6_unicast_import_route_policy"`
	Ipv6UnicastExportRoutePolicy                 types.String                                      `tfsdk:"ipv6_unicast_export_route_policy"`
	Ipv6Multicast                                types.Bool                                        `tfsdk:"ipv6_multicast"`
	Ipv6Flowspec                                 types.Bool                                        `tfsdk:"ipv6_flowspec"`
	RdTwoByteAsNumber                            types.String                                      `tfsdk:"rd_two_byte_as_number"`
	RdTwoByteAsIndex                             types.Int64                                       `tfsdk:"rd_two_byte_as_index"`
	RdFourByteAsNumber                           types.String                                      `tfsdk:"rd_four_byte_as_number"`
	RdFourByteAsIndex                            types.Int64                                       `tfsdk:"rd_four_byte_as_index"`
	RdIpv4Address                                types.String                                      `tfsdk:"rd_ipv4_address"`
	RdIpv4AddressIndex                           types.Int64                                       `tfsdk:"rd_ipv4_address_index"`
	Ipv4UnicastImportRouteTargetTwoByteAsFormat  []VRFIpv4UnicastImportRouteTargetTwoByteAsFormat  `tfsdk:"ipv4_unicast_import_route_target_two_byte_as_format"`
	Ipv4UnicastImportRouteTargetFourByteAsFormat []VRFIpv4UnicastImportRouteTargetFourByteAsFormat `tfsdk:"ipv4_unicast_import_route_target_four_byte_as_format"`
	Ipv4UnicastImportRouteTargetIpAddressFormat  []VRFIpv4UnicastImportRouteTargetIpAddressFormat  `tfsdk:"ipv4_unicast_import_route_target_ip_address_format"`
	Ipv4UnicastExportRouteTargetTwoByteAsFormat  []VRFIpv4UnicastExportRouteTargetTwoByteAsFormat  `tfsdk:"ipv4_unicast_export_route_target_two_byte_as_format"`
	Ipv4UnicastExportRouteTargetFourByteAsFormat []VRFIpv4UnicastExportRouteTargetFourByteAsFormat `tfsdk:"ipv4_unicast_export_route_target_four_byte_as_format"`
	Ipv4UnicastExportRouteTargetIpAddressFormat  []VRFIpv4UnicastExportRouteTargetIpAddressFormat  `tfsdk:"ipv4_unicast_export_route_target_ip_address_format"`
	Ipv6UnicastImportRouteTargetTwoByteAsFormat  []VRFIpv6UnicastImportRouteTargetTwoByteAsFormat  `tfsdk:"ipv6_unicast_import_route_target_two_byte_as_format"`
	Ipv6UnicastImportRouteTargetFourByteAsFormat []VRFIpv6UnicastImportRouteTargetFourByteAsFormat `tfsdk:"ipv6_unicast_import_route_target_four_byte_as_format"`
	Ipv6UnicastImportRouteTargetIpAddressFormat  []VRFIpv6UnicastImportRouteTargetIpAddressFormat  `tfsdk:"ipv6_unicast_import_route_target_ip_address_format"`
	Ipv6UnicastExportRouteTargetTwoByteAsFormat  []VRFIpv6UnicastExportRouteTargetTwoByteAsFormat  `tfsdk:"ipv6_unicast_export_route_target_two_byte_as_format"`
	Ipv6UnicastExportRouteTargetFourByteAsFormat []VRFIpv6UnicastExportRouteTargetFourByteAsFormat `tfsdk:"ipv6_unicast_export_route_target_four_byte_as_format"`
	Ipv6UnicastExportRouteTargetIpAddressFormat  []VRFIpv6UnicastExportRouteTargetIpAddressFormat  `tfsdk:"ipv6_unicast_export_route_target_ip_address_format"`
}

type VRFData struct {
	Device                                       types.String                                      `tfsdk:"device"`
	Id                                           types.String                                      `tfsdk:"id"`
	VrfName                                      types.String                                      `tfsdk:"vrf_name"`
	Description                                  types.String                                      `tfsdk:"description"`
	VpnId                                        types.String                                      `tfsdk:"vpn_id"`
	Ipv4Unicast                                  types.Bool                                        `tfsdk:"ipv4_unicast"`
	Ipv4UnicastImportRoutePolicy                 types.String                                      `tfsdk:"ipv4_unicast_import_route_policy"`
	Ipv4UnicastExportRoutePolicy                 types.String                                      `tfsdk:"ipv4_unicast_export_route_policy"`
	Ipv4Multicast                                types.Bool                                        `tfsdk:"ipv4_multicast"`
	Ipv4Flowspec                                 types.Bool                                        `tfsdk:"ipv4_flowspec"`
	Ipv6Unicast                                  types.Bool                                        `tfsdk:"ipv6_unicast"`
	Ipv6UnicastImportRoutePolicy                 types.String                                      `tfsdk:"ipv6_unicast_import_route_policy"`
	Ipv6UnicastExportRoutePolicy                 types.String                                      `tfsdk:"ipv6_unicast_export_route_policy"`
	Ipv6Multicast                                types.Bool                                        `tfsdk:"ipv6_multicast"`
	Ipv6Flowspec                                 types.Bool                                        `tfsdk:"ipv6_flowspec"`
	RdTwoByteAsNumber                            types.String                                      `tfsdk:"rd_two_byte_as_number"`
	RdTwoByteAsIndex                             types.Int64                                       `tfsdk:"rd_two_byte_as_index"`
	RdFourByteAsNumber                           types.String                                      `tfsdk:"rd_four_byte_as_number"`
	RdFourByteAsIndex                            types.Int64                                       `tfsdk:"rd_four_byte_as_index"`
	RdIpv4Address                                types.String                                      `tfsdk:"rd_ipv4_address"`
	RdIpv4AddressIndex                           types.Int64                                       `tfsdk:"rd_ipv4_address_index"`
	Ipv4UnicastImportRouteTargetTwoByteAsFormat  []VRFIpv4UnicastImportRouteTargetTwoByteAsFormat  `tfsdk:"ipv4_unicast_import_route_target_two_byte_as_format"`
	Ipv4UnicastImportRouteTargetFourByteAsFormat []VRFIpv4UnicastImportRouteTargetFourByteAsFormat `tfsdk:"ipv4_unicast_import_route_target_four_byte_as_format"`
	Ipv4UnicastImportRouteTargetIpAddressFormat  []VRFIpv4UnicastImportRouteTargetIpAddressFormat  `tfsdk:"ipv4_unicast_import_route_target_ip_address_format"`
	Ipv4UnicastExportRouteTargetTwoByteAsFormat  []VRFIpv4UnicastExportRouteTargetTwoByteAsFormat  `tfsdk:"ipv4_unicast_export_route_target_two_byte_as_format"`
	Ipv4UnicastExportRouteTargetFourByteAsFormat []VRFIpv4UnicastExportRouteTargetFourByteAsFormat `tfsdk:"ipv4_unicast_export_route_target_four_byte_as_format"`
	Ipv4UnicastExportRouteTargetIpAddressFormat  []VRFIpv4UnicastExportRouteTargetIpAddressFormat  `tfsdk:"ipv4_unicast_export_route_target_ip_address_format"`
	Ipv6UnicastImportRouteTargetTwoByteAsFormat  []VRFIpv6UnicastImportRouteTargetTwoByteAsFormat  `tfsdk:"ipv6_unicast_import_route_target_two_byte_as_format"`
	Ipv6UnicastImportRouteTargetFourByteAsFormat []VRFIpv6UnicastImportRouteTargetFourByteAsFormat `tfsdk:"ipv6_unicast_import_route_target_four_byte_as_format"`
	Ipv6UnicastImportRouteTargetIpAddressFormat  []VRFIpv6UnicastImportRouteTargetIpAddressFormat  `tfsdk:"ipv6_unicast_import_route_target_ip_address_format"`
	Ipv6UnicastExportRouteTargetTwoByteAsFormat  []VRFIpv6UnicastExportRouteTargetTwoByteAsFormat  `tfsdk:"ipv6_unicast_export_route_target_two_byte_as_format"`
	Ipv6UnicastExportRouteTargetFourByteAsFormat []VRFIpv6UnicastExportRouteTargetFourByteAsFormat `tfsdk:"ipv6_unicast_export_route_target_four_byte_as_format"`
	Ipv6UnicastExportRouteTargetIpAddressFormat  []VRFIpv6UnicastExportRouteTargetIpAddressFormat  `tfsdk:"ipv6_unicast_export_route_target_ip_address_format"`
}
type VRFIpv4UnicastImportRouteTargetTwoByteAsFormat struct {
	TwoByteAsNumber types.Int64  `tfsdk:"two_byte_as_number"`
	Asn2Index       types.Int64  `tfsdk:"asn2_index"`
	Stitching       types.String `tfsdk:"stitching"`
}
type VRFIpv4UnicastImportRouteTargetFourByteAsFormat struct {
	FourByteAsNumber types.Int64  `tfsdk:"four_byte_as_number"`
	Asn4Index        types.Int64  `tfsdk:"asn4_index"`
	Stitching        types.String `tfsdk:"stitching"`
}
type VRFIpv4UnicastImportRouteTargetIpAddressFormat struct {
	Ipv4Address      types.String `tfsdk:"ipv4_address"`
	Ipv4AddressIndex types.Int64  `tfsdk:"ipv4_address_index"`
	Stitching        types.String `tfsdk:"stitching"`
}
type VRFIpv4UnicastExportRouteTargetTwoByteAsFormat struct {
	TwoByteAsNumber types.Int64  `tfsdk:"two_byte_as_number"`
	Asn2Index       types.Int64  `tfsdk:"asn2_index"`
	Stitching       types.String `tfsdk:"stitching"`
}
type VRFIpv4UnicastExportRouteTargetFourByteAsFormat struct {
	FourByteAsNumber types.Int64  `tfsdk:"four_byte_as_number"`
	Asn4Index        types.Int64  `tfsdk:"asn4_index"`
	Stitching        types.String `tfsdk:"stitching"`
}
type VRFIpv4UnicastExportRouteTargetIpAddressFormat struct {
	Ipv4Address      types.String `tfsdk:"ipv4_address"`
	Ipv4AddressIndex types.Int64  `tfsdk:"ipv4_address_index"`
	Stitching        types.String `tfsdk:"stitching"`
}
type VRFIpv6UnicastImportRouteTargetTwoByteAsFormat struct {
	TwoByteAsNumber types.Int64  `tfsdk:"two_byte_as_number"`
	Asn2Index       types.Int64  `tfsdk:"asn2_index"`
	Stitching       types.String `tfsdk:"stitching"`
}
type VRFIpv6UnicastImportRouteTargetFourByteAsFormat struct {
	FourByteAsNumber types.Int64  `tfsdk:"four_byte_as_number"`
	Asn4Index        types.Int64  `tfsdk:"asn4_index"`
	Stitching        types.String `tfsdk:"stitching"`
}
type VRFIpv6UnicastImportRouteTargetIpAddressFormat struct {
	Ipv4Address      types.String `tfsdk:"ipv4_address"`
	Ipv4AddressIndex types.Int64  `tfsdk:"ipv4_address_index"`
	Stitching        types.String `tfsdk:"stitching"`
}
type VRFIpv6UnicastExportRouteTargetTwoByteAsFormat struct {
	TwoByteAsNumber types.Int64  `tfsdk:"two_byte_as_number"`
	Asn2Index       types.Int64  `tfsdk:"asn2_index"`
	Stitching       types.String `tfsdk:"stitching"`
}
type VRFIpv6UnicastExportRouteTargetFourByteAsFormat struct {
	FourByteAsNumber types.Int64  `tfsdk:"four_byte_as_number"`
	Asn4Index        types.Int64  `tfsdk:"asn4_index"`
	Stitching        types.String `tfsdk:"stitching"`
}
type VRFIpv6UnicastExportRouteTargetIpAddressFormat struct {
	Ipv4Address      types.String `tfsdk:"ipv4_address"`
	Ipv4AddressIndex types.Int64  `tfsdk:"ipv4_address_index"`
	Stitching        types.String `tfsdk:"stitching"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data VRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-vrf-cfg:/vrfs/vrf[vrf-name=%s]", data.VrfName.ValueString())
}

func (data VRFData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-vrf-cfg:/vrfs/vrf[vrf-name=%s]", data.VrfName.ValueString())
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data VRF) toBody(ctx context.Context) string {
	body := "{}"
	if !data.VrfName.IsNull() && !data.VrfName.IsUnknown() {
		body, _ = sjson.Set(body, "vrf-name", data.VrfName.ValueString())
	}
	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.VpnId.IsNull() && !data.VpnId.IsUnknown() {
		body, _ = sjson.Set(body, "vpn.id", data.VpnId.ValueString())
	}
	if !data.Ipv4Unicast.IsNull() && !data.Ipv4Unicast.IsUnknown() {
		if data.Ipv4Unicast.ValueBool() {
			body, _ = sjson.Set(body, "address-family.ipv4.unicast", map[string]string{})
		}
	}
	if !data.Ipv4UnicastImportRoutePolicy.IsNull() && !data.Ipv4UnicastImportRoutePolicy.IsUnknown() {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-policy", data.Ipv4UnicastImportRoutePolicy.ValueString())
	}
	if !data.Ipv4UnicastExportRoutePolicy.IsNull() && !data.Ipv4UnicastExportRoutePolicy.IsUnknown() {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-policy", data.Ipv4UnicastExportRoutePolicy.ValueString())
	}
	if !data.Ipv4Multicast.IsNull() && !data.Ipv4Multicast.IsUnknown() {
		if data.Ipv4Multicast.ValueBool() {
			body, _ = sjson.Set(body, "address-family.ipv4.multicast", map[string]string{})
		}
	}
	if !data.Ipv4Flowspec.IsNull() && !data.Ipv4Flowspec.IsUnknown() {
		if data.Ipv4Flowspec.ValueBool() {
			body, _ = sjson.Set(body, "address-family.ipv4.flowspec", map[string]string{})
		}
	}
	if !data.Ipv6Unicast.IsNull() && !data.Ipv6Unicast.IsUnknown() {
		if data.Ipv6Unicast.ValueBool() {
			body, _ = sjson.Set(body, "address-family.ipv6.unicast", map[string]string{})
		}
	}
	if !data.Ipv6UnicastImportRoutePolicy.IsNull() && !data.Ipv6UnicastImportRoutePolicy.IsUnknown() {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-policy", data.Ipv6UnicastImportRoutePolicy.ValueString())
	}
	if !data.Ipv6UnicastExportRoutePolicy.IsNull() && !data.Ipv6UnicastExportRoutePolicy.IsUnknown() {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-policy", data.Ipv6UnicastExportRoutePolicy.ValueString())
	}
	if !data.Ipv6Multicast.IsNull() && !data.Ipv6Multicast.IsUnknown() {
		if data.Ipv6Multicast.ValueBool() {
			body, _ = sjson.Set(body, "address-family.ipv6.multicast", map[string]string{})
		}
	}
	if !data.Ipv6Flowspec.IsNull() && !data.Ipv6Flowspec.IsUnknown() {
		if data.Ipv6Flowspec.ValueBool() {
			body, _ = sjson.Set(body, "address-family.ipv6.flowspec", map[string]string{})
		}
	}
	if !data.RdTwoByteAsNumber.IsNull() && !data.RdTwoByteAsNumber.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.two-byte-as-number", data.RdTwoByteAsNumber.ValueString())
	}
	if !data.RdTwoByteAsIndex.IsNull() && !data.RdTwoByteAsIndex.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.asn2-index", strconv.FormatInt(data.RdTwoByteAsIndex.ValueInt64(), 10))
	}
	if !data.RdFourByteAsNumber.IsNull() && !data.RdFourByteAsNumber.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.four-byte-as-number", data.RdFourByteAsNumber.ValueString())
	}
	if !data.RdFourByteAsIndex.IsNull() && !data.RdFourByteAsIndex.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.asn4-index", strconv.FormatInt(data.RdFourByteAsIndex.ValueInt64(), 10))
	}
	if !data.RdIpv4Address.IsNull() && !data.RdIpv4Address.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ipv4-address.address", data.RdIpv4Address.ValueString())
	}
	if !data.RdIpv4AddressIndex.IsNull() && !data.RdIpv4AddressIndex.IsUnknown() {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ipv4-address.ipv4address-index", strconv.FormatInt(data.RdIpv4AddressIndex.ValueInt64(), 10))
	}
	if len(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target", []interface{}{})
		for index, item := range data.Ipv4UnicastImportRouteTargetTwoByteAsFormat {
			if !item.TwoByteAsNumber.IsNull() && !item.TwoByteAsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.TwoByteAsNumber.ValueInt64(), 10))
			}
			if !item.Asn2Index.IsNull() && !item.Asn2Index.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"asn2-index", strconv.FormatInt(item.Asn2Index.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv4UnicastImportRouteTargetFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target", []interface{}{})
		for index, item := range data.Ipv4UnicastImportRouteTargetFourByteAsFormat {
			if !item.FourByteAsNumber.IsNull() && !item.FourByteAsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.FourByteAsNumber.ValueInt64(), 10))
			}
			if !item.Asn4Index.IsNull() && !item.Asn4Index.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"asn4-index", strconv.FormatInt(item.Asn4Index.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv4UnicastImportRouteTargetIpAddressFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target", []interface{}{})
		for index, item := range data.Ipv4UnicastImportRouteTargetIpAddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.Ipv4AddressIndex.IsNull() && !item.Ipv4AddressIndex.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"ipv4-address-index", strconv.FormatInt(item.Ipv4AddressIndex.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target", []interface{}{})
		for index, item := range data.Ipv4UnicastExportRouteTargetTwoByteAsFormat {
			if !item.TwoByteAsNumber.IsNull() && !item.TwoByteAsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.TwoByteAsNumber.ValueInt64(), 10))
			}
			if !item.Asn2Index.IsNull() && !item.Asn2Index.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"asn2-index", strconv.FormatInt(item.Asn2Index.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv4UnicastExportRouteTargetFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target", []interface{}{})
		for index, item := range data.Ipv4UnicastExportRouteTargetFourByteAsFormat {
			if !item.FourByteAsNumber.IsNull() && !item.FourByteAsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.FourByteAsNumber.ValueInt64(), 10))
			}
			if !item.Asn4Index.IsNull() && !item.Asn4Index.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"asn4-index", strconv.FormatInt(item.Asn4Index.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv4UnicastExportRouteTargetIpAddressFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target", []interface{}{})
		for index, item := range data.Ipv4UnicastExportRouteTargetIpAddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.Ipv4AddressIndex.IsNull() && !item.Ipv4AddressIndex.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"ipv4-address-index", strconv.FormatInt(item.Ipv4AddressIndex.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target", []interface{}{})
		for index, item := range data.Ipv6UnicastImportRouteTargetTwoByteAsFormat {
			if !item.TwoByteAsNumber.IsNull() && !item.TwoByteAsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.TwoByteAsNumber.ValueInt64(), 10))
			}
			if !item.Asn2Index.IsNull() && !item.Asn2Index.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"asn2-index", strconv.FormatInt(item.Asn2Index.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv6UnicastImportRouteTargetFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target", []interface{}{})
		for index, item := range data.Ipv6UnicastImportRouteTargetFourByteAsFormat {
			if !item.FourByteAsNumber.IsNull() && !item.FourByteAsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.FourByteAsNumber.ValueInt64(), 10))
			}
			if !item.Asn4Index.IsNull() && !item.Asn4Index.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"asn4-index", strconv.FormatInt(item.Asn4Index.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv6UnicastImportRouteTargetIpAddressFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target", []interface{}{})
		for index, item := range data.Ipv6UnicastImportRouteTargetIpAddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.Ipv4AddressIndex.IsNull() && !item.Ipv4AddressIndex.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"ipv4-address-index", strconv.FormatInt(item.Ipv4AddressIndex.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target", []interface{}{})
		for index, item := range data.Ipv6UnicastExportRouteTargetTwoByteAsFormat {
			if !item.TwoByteAsNumber.IsNull() && !item.TwoByteAsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"two-byte-as-number", strconv.FormatInt(item.TwoByteAsNumber.ValueInt64(), 10))
			}
			if !item.Asn2Index.IsNull() && !item.Asn2Index.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"asn2-index", strconv.FormatInt(item.Asn2Index.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv6UnicastExportRouteTargetFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target", []interface{}{})
		for index, item := range data.Ipv6UnicastExportRouteTargetFourByteAsFormat {
			if !item.FourByteAsNumber.IsNull() && !item.FourByteAsNumber.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"four-byte-as-number", strconv.FormatInt(item.FourByteAsNumber.ValueInt64(), 10))
			}
			if !item.Asn4Index.IsNull() && !item.Asn4Index.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"asn4-index", strconv.FormatInt(item.Asn4Index.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	if len(data.Ipv6UnicastExportRouteTargetIpAddressFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target", []interface{}{})
		for index, item := range data.Ipv6UnicastExportRouteTargetIpAddressFormat {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.Ipv4AddressIndex.IsNull() && !item.Ipv4AddressIndex.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"ipv4-address-index", strconv.FormatInt(item.Ipv4AddressIndex.ValueInt64(), 10))
			}
			if !item.Stitching.IsNull() && !item.Stitching.IsUnknown() {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.ValueString())
			}
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *VRF) updateFromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := gjson.GetBytes(res, "vpn.id"); value.Exists() && !data.VpnId.IsNull() {
		data.VpnId = types.StringValue(value.String())
	} else {
		data.VpnId = types.StringNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast"); !data.Ipv4Unicast.IsNull() {
		if value.Exists() {
			data.Ipv4Unicast = types.BoolValue(true)
		} else {
			data.Ipv4Unicast = types.BoolValue(false)
		}
	} else {
		data.Ipv4Unicast = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-policy"); value.Exists() && !data.Ipv4UnicastImportRoutePolicy.IsNull() {
		data.Ipv4UnicastImportRoutePolicy = types.StringValue(value.String())
	} else {
		data.Ipv4UnicastImportRoutePolicy = types.StringNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-policy"); value.Exists() && !data.Ipv4UnicastExportRoutePolicy.IsNull() {
		data.Ipv4UnicastExportRoutePolicy = types.StringValue(value.String())
	} else {
		data.Ipv4UnicastExportRoutePolicy = types.StringNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.multicast"); !data.Ipv4Multicast.IsNull() {
		if value.Exists() {
			data.Ipv4Multicast = types.BoolValue(true)
		} else {
			data.Ipv4Multicast = types.BoolValue(false)
		}
	} else {
		data.Ipv4Multicast = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.flowspec"); !data.Ipv4Flowspec.IsNull() {
		if value.Exists() {
			data.Ipv4Flowspec = types.BoolValue(true)
		} else {
			data.Ipv4Flowspec = types.BoolValue(false)
		}
	} else {
		data.Ipv4Flowspec = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast"); !data.Ipv6Unicast.IsNull() {
		if value.Exists() {
			data.Ipv6Unicast = types.BoolValue(true)
		} else {
			data.Ipv6Unicast = types.BoolValue(false)
		}
	} else {
		data.Ipv6Unicast = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-policy"); value.Exists() && !data.Ipv6UnicastImportRoutePolicy.IsNull() {
		data.Ipv6UnicastImportRoutePolicy = types.StringValue(value.String())
	} else {
		data.Ipv6UnicastImportRoutePolicy = types.StringNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-policy"); value.Exists() && !data.Ipv6UnicastExportRoutePolicy.IsNull() {
		data.Ipv6UnicastExportRoutePolicy = types.StringValue(value.String())
	} else {
		data.Ipv6UnicastExportRoutePolicy = types.StringNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.multicast"); !data.Ipv6Multicast.IsNull() {
		if value.Exists() {
			data.Ipv6Multicast = types.BoolValue(true)
		} else {
			data.Ipv6Multicast = types.BoolValue(false)
		}
	} else {
		data.Ipv6Multicast = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.flowspec"); !data.Ipv6Flowspec.IsNull() {
		if value.Exists() {
			data.Ipv6Flowspec = types.BoolValue(true)
		} else {
			data.Ipv6Flowspec = types.BoolValue(false)
		}
	} else {
		data.Ipv6Flowspec = types.BoolNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.two-byte-as-number"); value.Exists() && !data.RdTwoByteAsNumber.IsNull() {
		data.RdTwoByteAsNumber = types.StringValue(value.String())
	} else {
		data.RdTwoByteAsNumber = types.StringNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.asn2-index"); value.Exists() && !data.RdTwoByteAsIndex.IsNull() {
		data.RdTwoByteAsIndex = types.Int64Value(value.Int())
	} else {
		data.RdTwoByteAsIndex = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.four-byte-as-number"); value.Exists() && !data.RdFourByteAsNumber.IsNull() {
		data.RdFourByteAsNumber = types.StringValue(value.String())
	} else {
		data.RdFourByteAsNumber = types.StringNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.asn4-index"); value.Exists() && !data.RdFourByteAsIndex.IsNull() {
		data.RdFourByteAsIndex = types.Int64Value(value.Int())
	} else {
		data.RdFourByteAsIndex = types.Int64Null()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ipv4-address.address"); value.Exists() && !data.RdIpv4Address.IsNull() {
		data.RdIpv4Address = types.StringValue(value.String())
	} else {
		data.RdIpv4Address = types.StringNull()
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ipv4-address.ipv4address-index"); value.Exists() && !data.RdIpv4AddressIndex.IsNull() {
		data.RdIpv4AddressIndex = types.Int64Value(value.Int())
	} else {
		data.RdIpv4AddressIndex = types.Int64Null()
	}
	for i := range data.Ipv4UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.IsNull() {
			data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber = types.Int64Null()
		}
		if value := r.Get("asn2-index"); value.Exists() && !data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.IsNull() {
			data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.IsNull() {
			data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv4UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.IsNull() {
			data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber = types.Int64Null()
		}
		if value := r.Get("asn4-index"); value.Exists() && !data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.IsNull() {
			data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.IsNull() {
			data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv4UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.IsNull() {
			data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("ipv4-address-index"); value.Exists() && !data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.IsNull() {
			data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.IsNull() {
			data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv4UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.IsNull() {
			data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber = types.Int64Null()
		}
		if value := r.Get("asn2-index"); value.Exists() && !data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.IsNull() {
			data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.IsNull() {
			data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv4UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.IsNull() {
			data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber = types.Int64Null()
		}
		if value := r.Get("asn4-index"); value.Exists() && !data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.IsNull() {
			data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.IsNull() {
			data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv4UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.IsNull() {
			data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("ipv4-address-index"); value.Exists() && !data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.IsNull() {
			data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex = types.Int64Value(value.Int())
		} else {
			data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.IsNull() {
			data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv6UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.IsNull() {
			data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber = types.Int64Null()
		}
		if value := r.Get("asn2-index"); value.Exists() && !data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.IsNull() {
			data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.IsNull() {
			data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv6UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.IsNull() {
			data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber = types.Int64Null()
		}
		if value := r.Get("asn4-index"); value.Exists() && !data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.IsNull() {
			data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.IsNull() {
			data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv6UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.IsNull() {
			data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("ipv4-address-index"); value.Exists() && !data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.IsNull() {
			data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.IsNull() {
			data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv6UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("two-byte-as-number"); value.Exists() && !data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.IsNull() {
			data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber = types.Int64Null()
		}
		if value := r.Get("asn2-index"); value.Exists() && !data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.IsNull() {
			data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.IsNull() {
			data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv6UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("four-byte-as-number"); value.Exists() && !data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.IsNull() {
			data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber = types.Int64Null()
		}
		if value := r.Get("asn4-index"); value.Exists() && !data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.IsNull() {
			data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.IsNull() {
			data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching = types.StringNull()
		}
	}
	for i := range data.Ipv6UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.IsNull() {
			data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("ipv4-address-index"); value.Exists() && !data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.IsNull() {
			data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex = types.Int64Value(value.Int())
		} else {
			data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex = types.Int64Null()
		}
		if value := r.Get("stitching"); value.Exists() && !data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.IsNull() {
			data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching = types.StringValue(value.String())
		} else {
			data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching = types.StringNull()
		}
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *VRF) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "vpn.id"); value.Exists() {
		data.VpnId = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast"); value.Exists() {
		data.Ipv4Unicast = types.BoolValue(true)
	} else {
		data.Ipv4Unicast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-policy"); value.Exists() {
		data.Ipv4UnicastImportRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-policy"); value.Exists() {
		data.Ipv4UnicastExportRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.multicast"); value.Exists() {
		data.Ipv4Multicast = types.BoolValue(true)
	} else {
		data.Ipv4Multicast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.flowspec"); value.Exists() {
		data.Ipv4Flowspec = types.BoolValue(true)
	} else {
		data.Ipv4Flowspec = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast"); value.Exists() {
		data.Ipv6Unicast = types.BoolValue(true)
	} else {
		data.Ipv6Unicast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-policy"); value.Exists() {
		data.Ipv6UnicastImportRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-policy"); value.Exists() {
		data.Ipv6UnicastExportRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.multicast"); value.Exists() {
		data.Ipv6Multicast = types.BoolValue(true)
	} else {
		data.Ipv6Multicast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.flowspec"); value.Exists() {
		data.Ipv6Flowspec = types.BoolValue(true)
	} else {
		data.Ipv6Flowspec = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.two-byte-as-number"); value.Exists() {
		data.RdTwoByteAsNumber = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.asn2-index"); value.Exists() {
		data.RdTwoByteAsIndex = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.four-byte-as-number"); value.Exists() {
		data.RdFourByteAsNumber = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.asn4-index"); value.Exists() {
		data.RdFourByteAsIndex = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ipv4-address.address"); value.Exists() {
		data.RdIpv4Address = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ipv4-address.ipv4address-index"); value.Exists() {
		data.RdIpv4AddressIndex = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"); value.Exists() {
		data.Ipv4UnicastImportRouteTargetTwoByteAsFormat = make([]VRFIpv4UnicastImportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastImportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.TwoByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn2-index"); cValue.Exists() {
				item.Asn2Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastImportRouteTargetTwoByteAsFormat = append(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"); value.Exists() {
		data.Ipv4UnicastImportRouteTargetFourByteAsFormat = make([]VRFIpv4UnicastImportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastImportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.FourByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn4-index"); cValue.Exists() {
				item.Asn4Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastImportRouteTargetFourByteAsFormat = append(data.Ipv4UnicastImportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"); value.Exists() {
		data.Ipv4UnicastImportRouteTargetIpAddressFormat = make([]VRFIpv4UnicastImportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastImportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-address-index"); cValue.Exists() {
				item.Ipv4AddressIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastImportRouteTargetIpAddressFormat = append(data.Ipv4UnicastImportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"); value.Exists() {
		data.Ipv4UnicastExportRouteTargetTwoByteAsFormat = make([]VRFIpv4UnicastExportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastExportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.TwoByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn2-index"); cValue.Exists() {
				item.Asn2Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastExportRouteTargetTwoByteAsFormat = append(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"); value.Exists() {
		data.Ipv4UnicastExportRouteTargetFourByteAsFormat = make([]VRFIpv4UnicastExportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastExportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.FourByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn4-index"); cValue.Exists() {
				item.Asn4Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastExportRouteTargetFourByteAsFormat = append(data.Ipv4UnicastExportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"); value.Exists() {
		data.Ipv4UnicastExportRouteTargetIpAddressFormat = make([]VRFIpv4UnicastExportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastExportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-address-index"); cValue.Exists() {
				item.Ipv4AddressIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastExportRouteTargetIpAddressFormat = append(data.Ipv4UnicastExportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"); value.Exists() {
		data.Ipv6UnicastImportRouteTargetTwoByteAsFormat = make([]VRFIpv6UnicastImportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastImportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.TwoByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn2-index"); cValue.Exists() {
				item.Asn2Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastImportRouteTargetTwoByteAsFormat = append(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"); value.Exists() {
		data.Ipv6UnicastImportRouteTargetFourByteAsFormat = make([]VRFIpv6UnicastImportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastImportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.FourByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn4-index"); cValue.Exists() {
				item.Asn4Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastImportRouteTargetFourByteAsFormat = append(data.Ipv6UnicastImportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"); value.Exists() {
		data.Ipv6UnicastImportRouteTargetIpAddressFormat = make([]VRFIpv6UnicastImportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastImportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-address-index"); cValue.Exists() {
				item.Ipv4AddressIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastImportRouteTargetIpAddressFormat = append(data.Ipv6UnicastImportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"); value.Exists() {
		data.Ipv6UnicastExportRouteTargetTwoByteAsFormat = make([]VRFIpv6UnicastExportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastExportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.TwoByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn2-index"); cValue.Exists() {
				item.Asn2Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastExportRouteTargetTwoByteAsFormat = append(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"); value.Exists() {
		data.Ipv6UnicastExportRouteTargetFourByteAsFormat = make([]VRFIpv6UnicastExportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastExportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.FourByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn4-index"); cValue.Exists() {
				item.Asn4Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastExportRouteTargetFourByteAsFormat = append(data.Ipv6UnicastExportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"); value.Exists() {
		data.Ipv6UnicastExportRouteTargetIpAddressFormat = make([]VRFIpv6UnicastExportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastExportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-address-index"); cValue.Exists() {
				item.Ipv4AddressIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastExportRouteTargetIpAddressFormat = append(data.Ipv6UnicastExportRouteTargetIpAddressFormat, item)
			return true
		})
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *VRFData) fromBody(ctx context.Context, res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "vpn.id"); value.Exists() {
		data.VpnId = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast"); value.Exists() {
		data.Ipv4Unicast = types.BoolValue(true)
	} else {
		data.Ipv4Unicast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-policy"); value.Exists() {
		data.Ipv4UnicastImportRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-policy"); value.Exists() {
		data.Ipv4UnicastExportRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.multicast"); value.Exists() {
		data.Ipv4Multicast = types.BoolValue(true)
	} else {
		data.Ipv4Multicast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.flowspec"); value.Exists() {
		data.Ipv4Flowspec = types.BoolValue(true)
	} else {
		data.Ipv4Flowspec = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast"); value.Exists() {
		data.Ipv6Unicast = types.BoolValue(true)
	} else {
		data.Ipv6Unicast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-policy"); value.Exists() {
		data.Ipv6UnicastImportRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-policy"); value.Exists() {
		data.Ipv6UnicastExportRoutePolicy = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.multicast"); value.Exists() {
		data.Ipv6Multicast = types.BoolValue(true)
	} else {
		data.Ipv6Multicast = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.flowspec"); value.Exists() {
		data.Ipv6Flowspec = types.BoolValue(true)
	} else {
		data.Ipv6Flowspec = types.BoolValue(false)
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.two-byte-as-number"); value.Exists() {
		data.RdTwoByteAsNumber = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.asn2-index"); value.Exists() {
		data.RdTwoByteAsIndex = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.four-byte-as-number"); value.Exists() {
		data.RdFourByteAsNumber = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.asn4-index"); value.Exists() {
		data.RdFourByteAsIndex = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ipv4-address.address"); value.Exists() {
		data.RdIpv4Address = types.StringValue(value.String())
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ipv4-address.ipv4address-index"); value.Exists() {
		data.RdIpv4AddressIndex = types.Int64Value(value.Int())
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"); value.Exists() {
		data.Ipv4UnicastImportRouteTargetTwoByteAsFormat = make([]VRFIpv4UnicastImportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastImportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.TwoByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn2-index"); cValue.Exists() {
				item.Asn2Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastImportRouteTargetTwoByteAsFormat = append(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"); value.Exists() {
		data.Ipv4UnicastImportRouteTargetFourByteAsFormat = make([]VRFIpv4UnicastImportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastImportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.FourByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn4-index"); cValue.Exists() {
				item.Asn4Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastImportRouteTargetFourByteAsFormat = append(data.Ipv4UnicastImportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"); value.Exists() {
		data.Ipv4UnicastImportRouteTargetIpAddressFormat = make([]VRFIpv4UnicastImportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastImportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-address-index"); cValue.Exists() {
				item.Ipv4AddressIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastImportRouteTargetIpAddressFormat = append(data.Ipv4UnicastImportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"); value.Exists() {
		data.Ipv4UnicastExportRouteTargetTwoByteAsFormat = make([]VRFIpv4UnicastExportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastExportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.TwoByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn2-index"); cValue.Exists() {
				item.Asn2Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastExportRouteTargetTwoByteAsFormat = append(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"); value.Exists() {
		data.Ipv4UnicastExportRouteTargetFourByteAsFormat = make([]VRFIpv4UnicastExportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastExportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.FourByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn4-index"); cValue.Exists() {
				item.Asn4Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastExportRouteTargetFourByteAsFormat = append(data.Ipv4UnicastExportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"); value.Exists() {
		data.Ipv4UnicastExportRouteTargetIpAddressFormat = make([]VRFIpv4UnicastExportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4UnicastExportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-address-index"); cValue.Exists() {
				item.Ipv4AddressIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv4UnicastExportRouteTargetIpAddressFormat = append(data.Ipv4UnicastExportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-route-targets.two-byte-as-route-target"); value.Exists() {
		data.Ipv6UnicastImportRouteTargetTwoByteAsFormat = make([]VRFIpv6UnicastImportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastImportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.TwoByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn2-index"); cValue.Exists() {
				item.Asn2Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastImportRouteTargetTwoByteAsFormat = append(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-route-targets.four-byte-as-route-target"); value.Exists() {
		data.Ipv6UnicastImportRouteTargetFourByteAsFormat = make([]VRFIpv6UnicastImportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastImportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.FourByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn4-index"); cValue.Exists() {
				item.Asn4Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastImportRouteTargetFourByteAsFormat = append(data.Ipv6UnicastImportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ipv4-address-route-targets.ipv4-address-route-target"); value.Exists() {
		data.Ipv6UnicastImportRouteTargetIpAddressFormat = make([]VRFIpv6UnicastImportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastImportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-address-index"); cValue.Exists() {
				item.Ipv4AddressIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastImportRouteTargetIpAddressFormat = append(data.Ipv6UnicastImportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-route-targets.two-byte-as-route-target"); value.Exists() {
		data.Ipv6UnicastExportRouteTargetTwoByteAsFormat = make([]VRFIpv6UnicastExportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastExportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("two-byte-as-number"); cValue.Exists() {
				item.TwoByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn2-index"); cValue.Exists() {
				item.Asn2Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastExportRouteTargetTwoByteAsFormat = append(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-route-targets.four-byte-as-route-target"); value.Exists() {
		data.Ipv6UnicastExportRouteTargetFourByteAsFormat = make([]VRFIpv6UnicastExportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastExportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("four-byte-as-number"); cValue.Exists() {
				item.FourByteAsNumber = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("asn4-index"); cValue.Exists() {
				item.Asn4Index = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastExportRouteTargetFourByteAsFormat = append(data.Ipv6UnicastExportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ipv4-address-route-targets.ipv4-address-route-target"); value.Exists() {
		data.Ipv6UnicastExportRouteTargetIpAddressFormat = make([]VRFIpv6UnicastExportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6UnicastExportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-address-index"); cValue.Exists() {
				item.Ipv4AddressIndex = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching = types.StringValue(cValue.String())
			}
			data.Ipv6UnicastExportRouteTargetIpAddressFormat = append(data.Ipv6UnicastExportRouteTargetIpAddressFormat, item)
			return true
		})
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *VRF) getDeletedItems(ctx context.Context, state VRF) []string {
	deletedItems := make([]string, 0)
	if !state.Description.IsNull() && data.Description.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/description", state.getPath()))
	}
	if !state.VpnId.IsNull() && data.VpnId.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/vpn/id", state.getPath()))
	}
	if !state.Ipv4Unicast.IsNull() && data.Ipv4Unicast.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast", state.getPath()))
	}
	if !state.Ipv4UnicastImportRoutePolicy.IsNull() && data.Ipv4UnicastImportRoutePolicy.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-policy", state.getPath()))
	}
	if !state.Ipv4UnicastExportRoutePolicy.IsNull() && data.Ipv4UnicastExportRoutePolicy.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-policy", state.getPath()))
	}
	if !state.Ipv4Multicast.IsNull() && data.Ipv4Multicast.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/multicast", state.getPath()))
	}
	if !state.Ipv4Flowspec.IsNull() && data.Ipv4Flowspec.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/flowspec", state.getPath()))
	}
	if !state.Ipv6Unicast.IsNull() && data.Ipv6Unicast.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast", state.getPath()))
	}
	if !state.Ipv6UnicastImportRoutePolicy.IsNull() && data.Ipv6UnicastImportRoutePolicy.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-policy", state.getPath()))
	}
	if !state.Ipv6UnicastExportRoutePolicy.IsNull() && data.Ipv6UnicastExportRoutePolicy.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-policy", state.getPath()))
	}
	if !state.Ipv6Multicast.IsNull() && data.Ipv6Multicast.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/multicast", state.getPath()))
	}
	if !state.Ipv6Flowspec.IsNull() && data.Ipv6Flowspec.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/flowspec", state.getPath()))
	}
	if !state.RdTwoByteAsNumber.IsNull() && data.RdTwoByteAsNumber.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/two-byte-as", state.getPath()))
	}
	if !state.RdTwoByteAsIndex.IsNull() && data.RdTwoByteAsIndex.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/two-byte-as", state.getPath()))
	}
	if !state.RdFourByteAsNumber.IsNull() && data.RdFourByteAsNumber.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/four-byte-as", state.getPath()))
	}
	if !state.RdFourByteAsIndex.IsNull() && data.RdFourByteAsIndex.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/four-byte-as", state.getPath()))
	}
	if !state.RdIpv4Address.IsNull() && data.RdIpv4Address.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/ipv4-address", state.getPath()))
	}
	if !state.RdIpv4AddressIndex.IsNull() && data.RdIpv4AddressIndex.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/ipv4-address", state.getPath()))
	}
	for i := range state.Ipv4UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4UnicastImportRouteTargetTwoByteAsFormat {
			found = true
			if state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64() != data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[j].TwoByteAsNumber.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64() != data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[j].Asn2Index.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString() != data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/two-byte-as-route-targets/two-byte-as-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv4UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4UnicastImportRouteTargetFourByteAsFormat {
			found = true
			if state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64() != data.Ipv4UnicastImportRouteTargetFourByteAsFormat[j].FourByteAsNumber.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64() != data.Ipv4UnicastImportRouteTargetFourByteAsFormat[j].Asn4Index.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString() != data.Ipv4UnicastImportRouteTargetFourByteAsFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/four-byte-as-route-targets/four-byte-as-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv4UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		stateKeyValues := [...]string{state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4UnicastImportRouteTargetIpAddressFormat {
			found = true
			if state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString() != data.Ipv4UnicastImportRouteTargetIpAddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64() != data.Ipv4UnicastImportRouteTargetIpAddressFormat[j].Ipv4AddressIndex.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString() != data.Ipv4UnicastImportRouteTargetIpAddressFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/ipv4-address-route-targets/ipv4-address-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv4UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4UnicastExportRouteTargetTwoByteAsFormat {
			found = true
			if state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64() != data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[j].TwoByteAsNumber.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64() != data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[j].Asn2Index.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString() != data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/two-byte-as-route-targets/two-byte-as-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv4UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4UnicastExportRouteTargetFourByteAsFormat {
			found = true
			if state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64() != data.Ipv4UnicastExportRouteTargetFourByteAsFormat[j].FourByteAsNumber.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64() != data.Ipv4UnicastExportRouteTargetFourByteAsFormat[j].Asn4Index.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString() != data.Ipv4UnicastExportRouteTargetFourByteAsFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/four-byte-as-route-targets/four-byte-as-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv4UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		stateKeyValues := [...]string{state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4UnicastExportRouteTargetIpAddressFormat {
			found = true
			if state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString() != data.Ipv4UnicastExportRouteTargetIpAddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64() != data.Ipv4UnicastExportRouteTargetIpAddressFormat[j].Ipv4AddressIndex.ValueInt64() {
				found = false
			}
			if state.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString() != data.Ipv4UnicastExportRouteTargetIpAddressFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/ipv4-address-route-targets/ipv4-address-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv6UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6UnicastImportRouteTargetTwoByteAsFormat {
			found = true
			if state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64() != data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[j].TwoByteAsNumber.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64() != data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[j].Asn2Index.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString() != data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/two-byte-as-route-targets/two-byte-as-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv6UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6UnicastImportRouteTargetFourByteAsFormat {
			found = true
			if state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64() != data.Ipv6UnicastImportRouteTargetFourByteAsFormat[j].FourByteAsNumber.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64() != data.Ipv6UnicastImportRouteTargetFourByteAsFormat[j].Asn4Index.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString() != data.Ipv6UnicastImportRouteTargetFourByteAsFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/four-byte-as-route-targets/four-byte-as-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv6UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		stateKeyValues := [...]string{state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6UnicastImportRouteTargetIpAddressFormat {
			found = true
			if state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString() != data.Ipv6UnicastImportRouteTargetIpAddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64() != data.Ipv6UnicastImportRouteTargetIpAddressFormat[j].Ipv4AddressIndex.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString() != data.Ipv6UnicastImportRouteTargetIpAddressFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/ipv4-address-route-targets/ipv4-address-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv6UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6UnicastExportRouteTargetTwoByteAsFormat {
			found = true
			if state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64() != data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[j].TwoByteAsNumber.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64() != data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[j].Asn2Index.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString() != data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/two-byte-as-route-targets/two-byte-as-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv6UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6UnicastExportRouteTargetFourByteAsFormat {
			found = true
			if state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64() != data.Ipv6UnicastExportRouteTargetFourByteAsFormat[j].FourByteAsNumber.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64() != data.Ipv6UnicastExportRouteTargetFourByteAsFormat[j].Asn4Index.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString() != data.Ipv6UnicastExportRouteTargetFourByteAsFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/four-byte-as-route-targets/four-byte-as-route-target%v", state.getPath(), keyString))
		}
	}
	for i := range state.Ipv6UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		stateKeyValues := [...]string{state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6UnicastExportRouteTargetIpAddressFormat {
			found = true
			if state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString() != data.Ipv6UnicastExportRouteTargetIpAddressFormat[j].Ipv4Address.ValueString() {
				found = false
			}
			if state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64() != data.Ipv6UnicastExportRouteTargetIpAddressFormat[j].Ipv4AddressIndex.ValueInt64() {
				found = false
			}
			if state.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString() != data.Ipv6UnicastExportRouteTargetIpAddressFormat[j].Stitching.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/ipv4-address-route-targets/ipv4-address-route-target%v", state.getPath(), keyString))
		}
	}
	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *VRF) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.Ipv4Unicast.IsNull() && !data.Ipv4Unicast.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/address-family/ipv4/unicast", data.getPath()))
	}
	if !data.Ipv4Multicast.IsNull() && !data.Ipv4Multicast.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/address-family/ipv4/multicast", data.getPath()))
	}
	if !data.Ipv4Flowspec.IsNull() && !data.Ipv4Flowspec.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/address-family/ipv4/flowspec", data.getPath()))
	}
	if !data.Ipv6Unicast.IsNull() && !data.Ipv6Unicast.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/address-family/ipv6/unicast", data.getPath()))
	}
	if !data.Ipv6Multicast.IsNull() && !data.Ipv6Multicast.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/address-family/ipv6/multicast", data.getPath()))
	}
	if !data.Ipv6Flowspec.IsNull() && !data.Ipv6Flowspec.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/address-family/ipv6/flowspec", data.getPath()))
	}
	for i := range data.Ipv4UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv4UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv4UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv4UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv4UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv4UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv6UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv6UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv6UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv6UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv6UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	for i := range data.Ipv6UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()}
		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
	}
	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *VRF) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Description.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/description", data.getPath()))
	}
	if !data.VpnId.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/vpn/id", data.getPath()))
	}
	if !data.Ipv4Unicast.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast", data.getPath()))
	}
	if !data.Ipv4UnicastImportRoutePolicy.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-policy", data.getPath()))
	}
	if !data.Ipv4UnicastExportRoutePolicy.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-policy", data.getPath()))
	}
	if !data.Ipv4Multicast.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/multicast", data.getPath()))
	}
	if !data.Ipv4Flowspec.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/flowspec", data.getPath()))
	}
	if !data.Ipv6Unicast.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast", data.getPath()))
	}
	if !data.Ipv6UnicastImportRoutePolicy.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-policy", data.getPath()))
	}
	if !data.Ipv6UnicastExportRoutePolicy.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-policy", data.getPath()))
	}
	if !data.Ipv6Multicast.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/multicast", data.getPath()))
	}
	if !data.Ipv6Flowspec.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/flowspec", data.getPath()))
	}
	if !data.RdTwoByteAsNumber.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/two-byte-as", data.getPath()))
	}
	if !data.RdTwoByteAsIndex.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/two-byte-as", data.getPath()))
	}
	if !data.RdFourByteAsNumber.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/four-byte-as", data.getPath()))
	}
	if !data.RdFourByteAsIndex.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/four-byte-as", data.getPath()))
	}
	if !data.RdIpv4Address.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/ipv4-address", data.getPath()))
	}
	if !data.RdIpv4AddressIndex.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XR-um-router-bgp-cfg:rd/ipv4-address", data.getPath()))
	}
	for i := range data.Ipv4UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/two-byte-as-route-targets/two-byte-as-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv4UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/four-byte-as-route-targets/four-byte-as-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv4UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/ipv4-address-route-targets/ipv4-address-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv4UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/two-byte-as-route-targets/two-byte-as-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv4UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/four-byte-as-route-targets/four-byte-as-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv4UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/ipv4-address-route-targets/ipv4-address-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv6UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/two-byte-as-route-targets/two-byte-as-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv6UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/four-byte-as-route-targets/four-byte-as-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv6UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/ipv4-address-route-targets/ipv4-address-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv6UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"two-byte-as-number", "asn2-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].TwoByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Asn2Index.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/two-byte-as-route-targets/two-byte-as-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv6UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"four-byte-as-number", "asn4-index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].FourByteAsNumber.ValueInt64(), 10), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Asn4Index.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/four-byte-as-route-targets/four-byte-as-route-target%v", data.getPath(), keyString))
	}
	for i := range data.Ipv6UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ipv4-address", "ipv4-address-index", "stitching"}
		keyValues := [...]string{data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4Address.ValueString(), strconv.FormatInt(data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Ipv4AddressIndex.ValueInt64(), 10), data.Ipv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.ValueString()}

		keyString := ""
		for ki := range keys {
			keyString += "[" + keys[ki] + "=" + keyValues[ki] + "]"
		}
		deletePaths = append(deletePaths, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/ipv4-address-route-targets/ipv4-address-route-target%v", data.getPath(), keyString))
	}
	return deletePaths
}

// End of section. //template:end getDeletePaths
