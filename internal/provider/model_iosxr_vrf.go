// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VRF struct {
	Device                                                    types.String                                                   `tfsdk:"device"`
	Id                                                        types.String                                                   `tfsdk:"id"`
	VrfName                                                   types.String                                                   `tfsdk:"vrf_name"`
	Description                                               types.String                                                   `tfsdk:"description"`
	VpnId                                                     types.String                                                   `tfsdk:"vpn_id"`
	AddressFamilyIpv4Unicast                                  types.Bool                                                     `tfsdk:"address_family_ipv4_unicast"`
	AddressFamilyIpv4Multicast                                types.Bool                                                     `tfsdk:"address_family_ipv4_multicast"`
	AddressFamilyIpv4Flowspec                                 types.Bool                                                     `tfsdk:"address_family_ipv4_flowspec"`
	AddressFamilyIpv6Unicast                                  types.Bool                                                     `tfsdk:"address_family_ipv6_unicast"`
	AddressFamilyIpv6Multicast                                types.Bool                                                     `tfsdk:"address_family_ipv6_multicast"`
	AddressFamilyIpv6Flowspec                                 types.Bool                                                     `tfsdk:"address_family_ipv6_flowspec"`
	RdTwoByteAsAsNumber                                       types.String                                                   `tfsdk:"rd_two_byte_as_as_number"`
	RdTwoByteAsIndex                                          types.Int64                                                    `tfsdk:"rd_two_byte_as_index"`
	RdFourByteAsAsNumber                                      types.String                                                   `tfsdk:"rd_four_byte_as_as_number"`
	RdFourByteAsIndex                                         types.Int64                                                    `tfsdk:"rd_four_byte_as_index"`
	RdIpAddressIpv4Address                                    types.String                                                   `tfsdk:"rd_ip_address_ipv4_address"`
	RdIpAddressIndex                                          types.Int64                                                    `tfsdk:"rd_ip_address_index"`
	AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat  []VRFAddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat  `tfsdk:"address_family_ipv4_unicast_import_route_target_two_byte_as_format"`
	AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat []VRFAddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat `tfsdk:"address_family_ipv4_unicast_import_route_target_four_byte_as_format"`
	AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat  []VRFAddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat  `tfsdk:"address_family_ipv4_unicast_import_route_target_ip_address_format"`
	AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat  []VRFAddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat  `tfsdk:"address_family_ipv4_unicast_export_route_target_two_byte_as_format"`
	AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat []VRFAddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat `tfsdk:"address_family_ipv4_unicast_export_route_target_four_byte_as_format"`
	AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat  []VRFAddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat  `tfsdk:"address_family_ipv4_unicast_export_route_target_ip_address_format"`
	AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat  []VRFAddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat  `tfsdk:"address_family_ipv6_unicast_import_route_target_two_byte_as_format"`
	AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat []VRFAddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat `tfsdk:"address_family_ipv6_unicast_import_route_target_four_byte_as_format"`
	AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat  []VRFAddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat  `tfsdk:"address_family_ipv6_unicast_import_route_target_ip_address_format"`
	AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat  []VRFAddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat  `tfsdk:"address_family_ipv6_unicast_export_route_target_two_byte_as_format"`
	AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat []VRFAddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat `tfsdk:"address_family_ipv6_unicast_export_route_target_four_byte_as_format"`
	AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat  []VRFAddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat  `tfsdk:"address_family_ipv6_unicast_export_route_target_ip_address_format"`
}
type VRFAddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat struct {
	AsNumber  types.Int64 `tfsdk:"as_number"`
	Index     types.Int64 `tfsdk:"index"`
	Stitching types.Bool  `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat struct {
	AsNumber  types.Int64 `tfsdk:"as_number"`
	Index     types.Int64 `tfsdk:"index"`
	Stitching types.Bool  `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat struct {
	IpAddress types.String `tfsdk:"ip_address"`
	Index     types.Int64  `tfsdk:"index"`
	Stitching types.Bool   `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat struct {
	AsNumber  types.Int64 `tfsdk:"as_number"`
	Index     types.Int64 `tfsdk:"index"`
	Stitching types.Bool  `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat struct {
	AsNumber  types.Int64 `tfsdk:"as_number"`
	Index     types.Int64 `tfsdk:"index"`
	Stitching types.Bool  `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat struct {
	IpAddress types.String `tfsdk:"ip_address"`
	Index     types.Int64  `tfsdk:"index"`
	Stitching types.Bool   `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat struct {
	AsNumber  types.Int64 `tfsdk:"as_number"`
	Index     types.Int64 `tfsdk:"index"`
	Stitching types.Bool  `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat struct {
	AsNumber  types.Int64 `tfsdk:"as_number"`
	Index     types.Int64 `tfsdk:"index"`
	Stitching types.Bool  `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat struct {
	IpAddress types.String `tfsdk:"ip_address"`
	Index     types.Int64  `tfsdk:"index"`
	Stitching types.Bool   `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat struct {
	AsNumber  types.Int64 `tfsdk:"as_number"`
	Index     types.Int64 `tfsdk:"index"`
	Stitching types.Bool  `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat struct {
	AsNumber  types.Int64 `tfsdk:"as_number"`
	Index     types.Int64 `tfsdk:"index"`
	Stitching types.Bool  `tfsdk:"stitching"`
}
type VRFAddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat struct {
	IpAddress types.String `tfsdk:"ip_address"`
	Index     types.Int64  `tfsdk:"index"`
	Stitching types.Bool   `tfsdk:"stitching"`
}

func (data VRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-vrf-cfg:/vrfs/vrf[vrf-name=%s]", data.VrfName.Value)
}

func (data VRF) toBody() string {
	body := "{}"
	if !data.Description.Null && !data.Description.Unknown {
		body, _ = sjson.Set(body, "description", data.Description.Value)
	}
	if !data.VpnId.Null && !data.VpnId.Unknown {
		body, _ = sjson.Set(body, "vpn.id", data.VpnId.Value)
	}
	if !data.AddressFamilyIpv4Unicast.Null && !data.AddressFamilyIpv4Unicast.Unknown {
		if data.AddressFamilyIpv4Unicast.Value {
			body, _ = sjson.Set(body, "address-family.ipv4.unicast", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv4Multicast.Null && !data.AddressFamilyIpv4Multicast.Unknown {
		if data.AddressFamilyIpv4Multicast.Value {
			body, _ = sjson.Set(body, "address-family.ipv4.multicast", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv4Flowspec.Null && !data.AddressFamilyIpv4Flowspec.Unknown {
		if data.AddressFamilyIpv4Flowspec.Value {
			body, _ = sjson.Set(body, "address-family.ipv4.flowspec", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv6Unicast.Null && !data.AddressFamilyIpv6Unicast.Unknown {
		if data.AddressFamilyIpv6Unicast.Value {
			body, _ = sjson.Set(body, "address-family.ipv6.unicast", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv6Multicast.Null && !data.AddressFamilyIpv6Multicast.Unknown {
		if data.AddressFamilyIpv6Multicast.Value {
			body, _ = sjson.Set(body, "address-family.ipv6.multicast", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv6Flowspec.Null && !data.AddressFamilyIpv6Flowspec.Unknown {
		if data.AddressFamilyIpv6Flowspec.Value {
			body, _ = sjson.Set(body, "address-family.ipv6.flowspec", map[string]string{})
		}
	}
	if !data.RdTwoByteAsAsNumber.Null && !data.RdTwoByteAsAsNumber.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.as-number", data.RdTwoByteAsAsNumber.Value)
	}
	if !data.RdTwoByteAsIndex.Null && !data.RdTwoByteAsIndex.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.index", strconv.FormatInt(data.RdTwoByteAsIndex.Value, 10))
	}
	if !data.RdFourByteAsAsNumber.Null && !data.RdFourByteAsAsNumber.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.as-number", data.RdFourByteAsAsNumber.Value)
	}
	if !data.RdFourByteAsIndex.Null && !data.RdFourByteAsIndex.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.index", strconv.FormatInt(data.RdFourByteAsIndex.Value, 10))
	}
	if !data.RdIpAddressIpv4Address.Null && !data.RdIpAddressIpv4Address.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.ipv4-address", data.RdIpAddressIpv4Address.Value)
	}
	if !data.RdIpAddressIndex.Null && !data.RdIpAddressIndex.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.index", strconv.FormatInt(data.RdIpAddressIndex.Value, 10))
	}
	if len(data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"as-number", strconv.FormatInt(item.AsNumber.Value, 10))
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"as-number", strconv.FormatInt(item.AsNumber.Value, 10))
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat {
			if !item.IpAddress.Null && !item.IpAddress.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"ip-address", item.IpAddress.Value)
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"as-number", strconv.FormatInt(item.AsNumber.Value, 10))
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"as-number", strconv.FormatInt(item.AsNumber.Value, 10))
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat {
			if !item.IpAddress.Null && !item.IpAddress.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"ip-address", item.IpAddress.Value)
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"as-number", strconv.FormatInt(item.AsNumber.Value, 10))
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"as-number", strconv.FormatInt(item.AsNumber.Value, 10))
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat {
			if !item.IpAddress.Null && !item.IpAddress.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"ip-address", item.IpAddress.Value)
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"as-number", strconv.FormatInt(item.AsNumber.Value, 10))
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat {
			if !item.AsNumber.Null && !item.AsNumber.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"as-number", strconv.FormatInt(item.AsNumber.Value, 10))
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	if len(data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat) > 0 {
		body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt", []interface{}{})
		for index, item := range data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat {
			if !item.IpAddress.Null && !item.IpAddress.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"ip-address", item.IpAddress.Value)
			}
			if !item.Index.Null && !item.Index.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"index", strconv.FormatInt(item.Index.Value, 10))
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				body, _ = sjson.Set(body, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt"+"."+strconv.Itoa(index)+"."+"stitching", item.Stitching.Value)
			}
		}
	}
	return body
}

func (data *VRF) updateFromBody(res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description.Value = value.String()
	} else {
		data.Description.Null = true
	}
	if value := gjson.GetBytes(res, "vpn.id"); value.Exists() {
		data.VpnId.Value = value.String()
	} else {
		data.VpnId.Null = true
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast"); value.Exists() {
		data.AddressFamilyIpv4Unicast.Value = true
	} else {
		data.AddressFamilyIpv4Unicast.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.multicast"); value.Exists() {
		data.AddressFamilyIpv4Multicast.Value = true
	} else {
		data.AddressFamilyIpv4Multicast.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.flowspec"); value.Exists() {
		data.AddressFamilyIpv4Flowspec.Value = true
	} else {
		data.AddressFamilyIpv4Flowspec.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast"); value.Exists() {
		data.AddressFamilyIpv6Unicast.Value = true
	} else {
		data.AddressFamilyIpv6Unicast.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.multicast"); value.Exists() {
		data.AddressFamilyIpv6Multicast.Value = true
	} else {
		data.AddressFamilyIpv6Multicast.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.flowspec"); value.Exists() {
		data.AddressFamilyIpv6Flowspec.Value = true
	} else {
		data.AddressFamilyIpv6Flowspec.Value = false
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.as-number"); value.Exists() {
		data.RdTwoByteAsAsNumber.Value = value.String()
	} else {
		data.RdTwoByteAsAsNumber.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.index"); value.Exists() {
		data.RdTwoByteAsIndex.Value = value.Int()
	} else {
		data.RdTwoByteAsIndex.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.as-number"); value.Exists() {
		data.RdFourByteAsAsNumber.Value = value.String()
	} else {
		data.RdFourByteAsAsNumber.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.index"); value.Exists() {
		data.RdFourByteAsIndex.Value = value.Int()
	} else {
		data.RdFourByteAsIndex.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.ipv4-address"); value.Exists() {
		data.RdIpAddressIpv4Address.Value = value.String()
	} else {
		data.RdIpAddressIpv4Address.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.index"); value.Exists() {
		data.RdIpAddressIndex.Value = value.Int()
	} else {
		data.RdIpAddressIndex.Null = true
	}
	for i := range data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ip-address", "index", "stitching"}
		keyValues := [...]string{data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value, strconv.FormatInt(data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ip-address"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value = value.String()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ip-address", "index", "stitching"}
		keyValues := [...]string{data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value, strconv.FormatInt(data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ip-address"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value = value.String()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ip-address", "index", "stitching"}
		keyValues := [...]string{data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value, strconv.FormatInt(data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ip-address"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value = value.String()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		keyValues := [...]string{strconv.FormatInt(data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("as-number"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value = false
		}
	}
	for i := range data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ip-address", "index", "stitching"}
		keyValues := [...]string{data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value, strconv.FormatInt(data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Value, 10), strconv.FormatBool(data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value)}

		var r gjson.Result
		gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ip-address"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value = value.String()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Null = true
		}
		if value := r.Get("index"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Value = value.Int()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Null = true
		}
		if value := r.Get("stitching"); value.Exists() {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value = value.Bool()
		} else {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value = false
		}
	}
}

func (data *VRF) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description.Value = value.String()
		data.Description.Null = false
	}
	if value := gjson.GetBytes(res, "vpn.id"); value.Exists() {
		data.VpnId.Value = value.String()
		data.VpnId.Null = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast"); value.Exists() {
		data.AddressFamilyIpv4Unicast.Value = true
		data.AddressFamilyIpv4Unicast.Null = false
	} else {
		data.AddressFamilyIpv4Unicast.Value = false
		data.AddressFamilyIpv4Unicast.Null = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.multicast"); value.Exists() {
		data.AddressFamilyIpv4Multicast.Value = true
		data.AddressFamilyIpv4Multicast.Null = false
	} else {
		data.AddressFamilyIpv4Multicast.Value = false
		data.AddressFamilyIpv4Multicast.Null = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.flowspec"); value.Exists() {
		data.AddressFamilyIpv4Flowspec.Value = true
		data.AddressFamilyIpv4Flowspec.Null = false
	} else {
		data.AddressFamilyIpv4Flowspec.Value = false
		data.AddressFamilyIpv4Flowspec.Null = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast"); value.Exists() {
		data.AddressFamilyIpv6Unicast.Value = true
		data.AddressFamilyIpv6Unicast.Null = false
	} else {
		data.AddressFamilyIpv6Unicast.Value = false
		data.AddressFamilyIpv6Unicast.Null = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.multicast"); value.Exists() {
		data.AddressFamilyIpv6Multicast.Value = true
		data.AddressFamilyIpv6Multicast.Null = false
	} else {
		data.AddressFamilyIpv6Multicast.Value = false
		data.AddressFamilyIpv6Multicast.Null = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.flowspec"); value.Exists() {
		data.AddressFamilyIpv6Flowspec.Value = true
		data.AddressFamilyIpv6Flowspec.Null = false
	} else {
		data.AddressFamilyIpv6Flowspec.Value = false
		data.AddressFamilyIpv6Flowspec.Null = false
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.as-number"); value.Exists() {
		data.RdTwoByteAsAsNumber.Value = value.String()
		data.RdTwoByteAsAsNumber.Null = false
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.index"); value.Exists() {
		data.RdTwoByteAsIndex.Value = value.Int()
		data.RdTwoByteAsIndex.Null = false
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.as-number"); value.Exists() {
		data.RdFourByteAsAsNumber.Value = value.String()
		data.RdFourByteAsAsNumber.Null = false
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.index"); value.Exists() {
		data.RdFourByteAsIndex.Value = value.Int()
		data.RdFourByteAsIndex.Null = false
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.ipv4-address"); value.Exists() {
		data.RdIpAddressIpv4Address.Value = value.String()
		data.RdIpAddressIpv4Address.Null = false
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.index"); value.Exists() {
		data.RdIpAddressIndex.Value = value.Int()
		data.RdIpAddressIndex.Null = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat = make([]VRFAddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.Int()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat = append(data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat = make([]VRFAddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.Int()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat = append(data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt"); value.Exists() {
		data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat = make([]VRFAddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ip-address"); cValue.Exists() {
				item.IpAddress.Value = cValue.String()
				item.IpAddress.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat = append(data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat = make([]VRFAddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.Int()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat = append(data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat = make([]VRFAddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.Int()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat = append(data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt"); value.Exists() {
		data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat = make([]VRFAddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ip-address"); cValue.Exists() {
				item.IpAddress.Value = cValue.String()
				item.IpAddress.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat = append(data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat = make([]VRFAddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.Int()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat = append(data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat = make([]VRFAddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.Int()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat = append(data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:import.route-target.ip-addresse-rts.ip-address-rt"); value.Exists() {
		data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat = make([]VRFAddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ip-address"); cValue.Exists() {
				item.IpAddress.Value = cValue.String()
				item.IpAddress.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat = append(data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.two-byte-as-rts.two-byte-as-rt"); value.Exists() {
		data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat = make([]VRFAddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.Int()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat = append(data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.four-byte-as-rts.four-byte-as-rt"); value.Exists() {
		data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat = make([]VRFAddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat{}
			if cValue := v.Get("as-number"); cValue.Exists() {
				item.AsNumber.Value = cValue.Int()
				item.AsNumber.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat = append(data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat, item)
			return true
		})
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast.Cisco-IOS-XR-um-router-bgp-cfg:export.route-target.ip-addresse-rts.ip-address-rt"); value.Exists() {
		data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat = make([]VRFAddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFAddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat{}
			if cValue := v.Get("ip-address"); cValue.Exists() {
				item.IpAddress.Value = cValue.String()
				item.IpAddress.Null = false
			}
			if cValue := v.Get("index"); cValue.Exists() {
				item.Index.Value = cValue.Int()
				item.Index.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = cValue.Bool()
				item.Stitching.Null = false
			}
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat = append(data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat, item)
			return true
		})
	}
}

func (data *VRF) fromPlan(plan VRF) {
	data.Device = plan.Device
	data.VrfName.Value = plan.VrfName.Value
}

func (data *VRF) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.VrfName.Unknown {
		data.VrfName.Unknown = false
		data.VrfName.Null = true
	}
	if data.Description.Unknown {
		data.Description.Unknown = false
		data.Description.Null = true
	}
	if data.VpnId.Unknown {
		data.VpnId.Unknown = false
		data.VpnId.Null = true
	}
	if data.AddressFamilyIpv4Unicast.Unknown {
		data.AddressFamilyIpv4Unicast.Unknown = false
		data.AddressFamilyIpv4Unicast.Null = true
	}
	if data.AddressFamilyIpv4Multicast.Unknown {
		data.AddressFamilyIpv4Multicast.Unknown = false
		data.AddressFamilyIpv4Multicast.Null = true
	}
	if data.AddressFamilyIpv4Flowspec.Unknown {
		data.AddressFamilyIpv4Flowspec.Unknown = false
		data.AddressFamilyIpv4Flowspec.Null = true
	}
	if data.AddressFamilyIpv6Unicast.Unknown {
		data.AddressFamilyIpv6Unicast.Unknown = false
		data.AddressFamilyIpv6Unicast.Null = true
	}
	if data.AddressFamilyIpv6Multicast.Unknown {
		data.AddressFamilyIpv6Multicast.Unknown = false
		data.AddressFamilyIpv6Multicast.Null = true
	}
	if data.AddressFamilyIpv6Flowspec.Unknown {
		data.AddressFamilyIpv6Flowspec.Unknown = false
		data.AddressFamilyIpv6Flowspec.Null = true
	}
	if data.RdTwoByteAsAsNumber.Unknown {
		data.RdTwoByteAsAsNumber.Unknown = false
		data.RdTwoByteAsAsNumber.Null = true
	}
	if data.RdTwoByteAsIndex.Unknown {
		data.RdTwoByteAsIndex.Unknown = false
		data.RdTwoByteAsIndex.Null = true
	}
	if data.RdFourByteAsAsNumber.Unknown {
		data.RdFourByteAsAsNumber.Unknown = false
		data.RdFourByteAsAsNumber.Null = true
	}
	if data.RdFourByteAsIndex.Unknown {
		data.RdFourByteAsIndex.Unknown = false
		data.RdFourByteAsIndex.Null = true
	}
	if data.RdIpAddressIpv4Address.Unknown {
		data.RdIpAddressIpv4Address.Unknown = false
		data.RdIpAddressIpv4Address.Null = true
	}
	if data.RdIpAddressIndex.Unknown {
		data.RdIpAddressIndex.Unknown = false
		data.RdIpAddressIndex.Null = true
	}
	for i := range data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat {
		if data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Null = true
		}
		if data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat {
		if data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Null = true
		}
		if data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat {
		if data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Null = true
		}
		if data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat {
		if data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Null = true
		}
		if data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat {
		if data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Null = true
		}
		if data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat {
		if data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Null = true
		}
		if data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat {
		if data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Null = true
		}
		if data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat {
		if data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Null = true
		}
		if data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat {
		if data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Null = true
		}
		if data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat {
		if data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Null = true
		}
		if data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat {
		if data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Null = true
		}
		if data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Null = true
		}
	}
	for i := range data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat {
		if data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Null = true
		}
		if data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Null = true
		}
		if data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Unknown {
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Unknown = false
			data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Null = true
		}
	}
}

func (data *VRF) getDeletedListItems(state VRF) []string {
	deletedListItems := make([]string, 0)
	for i := range state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat {
			found = true
			if state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value != data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[j].AsNumber.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value != data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value != data.AddressFamilyIpv4UnicastImportRouteTargetTwoByteAsFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat {
			found = true
			if state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value != data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[j].AsNumber.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Index.Value != data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value != data.AddressFamilyIpv4UnicastImportRouteTargetFourByteAsFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ip-address", "index", "stitching"}
		stateKeyValues := [...]string{state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value, strconv.FormatInt(state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat {
			found = true
			if state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value != data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[j].IpAddress.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Index.Value != data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value != data.AddressFamilyIpv4UnicastImportRouteTargetIpAddressFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/ip-addresse-rts/ip-address-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat {
			found = true
			if state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value != data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[j].AsNumber.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value != data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value != data.AddressFamilyIpv4UnicastExportRouteTargetTwoByteAsFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat {
			found = true
			if state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value != data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[j].AsNumber.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Index.Value != data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value != data.AddressFamilyIpv4UnicastExportRouteTargetFourByteAsFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ip-address", "index", "stitching"}
		stateKeyValues := [...]string{state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value, strconv.FormatInt(state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat {
			found = true
			if state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value != data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[j].IpAddress.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Index.Value != data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value != data.AddressFamilyIpv4UnicastExportRouteTargetIpAddressFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/ip-addresse-rts/ip-address-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat {
			found = true
			if state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].AsNumber.Value != data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[j].AsNumber.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Index.Value != data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[i].Stitching.Value != data.AddressFamilyIpv6UnicastImportRouteTargetTwoByteAsFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat {
			found = true
			if state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].AsNumber.Value != data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[j].AsNumber.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Index.Value != data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[i].Stitching.Value != data.AddressFamilyIpv6UnicastImportRouteTargetFourByteAsFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat {
		keys := [...]string{"ip-address", "index", "stitching"}
		stateKeyValues := [...]string{state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value, strconv.FormatInt(state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat {
			found = true
			if state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].IpAddress.Value != data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[j].IpAddress.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Index.Value != data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[i].Stitching.Value != data.AddressFamilyIpv6UnicastImportRouteTargetIpAddressFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:import/route-target/ip-addresse-rts/ip-address-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat {
			found = true
			if state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].AsNumber.Value != data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[j].AsNumber.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Index.Value != data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[i].Stitching.Value != data.AddressFamilyIpv6UnicastExportRouteTargetTwoByteAsFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/two-byte-as-rts/two-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat {
		keys := [...]string{"as-number", "index", "stitching"}
		stateKeyValues := [...]string{strconv.FormatInt(state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value, 10), strconv.FormatInt(state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat {
			found = true
			if state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].AsNumber.Value != data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[j].AsNumber.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Index.Value != data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[i].Stitching.Value != data.AddressFamilyIpv6UnicastExportRouteTargetFourByteAsFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/four-byte-as-rts/four-byte-as-rt%v", state.getPath(), keyString))
		}
	}
	for i := range state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat {
		keys := [...]string{"ip-address", "index", "stitching"}
		stateKeyValues := [...]string{state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value, strconv.FormatInt(state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Value, 10), strconv.FormatBool(state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value)}

		emptyKeys := true
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat {
			found = true
			if state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].IpAddress.Value != data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[j].IpAddress.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Index.Value != data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[j].Index.Value {
				found = false
			}
			if state.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[i].Stitching.Value != data.AddressFamilyIpv6UnicastExportRouteTargetIpAddressFormat[j].Stitching.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			keyString := ""
			for ki := range keys {
				keyString += "[" + keys[ki] + "=" + stateKeyValues[ki] + "]"
			}
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/unicast/Cisco-IOS-XR-um-router-bgp-cfg:export/route-target/ip-addresse-rts/ip-address-rt%v", state.getPath(), keyString))
		}
	}
	return deletedListItems
}

func (data *VRF) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
