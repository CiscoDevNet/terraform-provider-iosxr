// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"

	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/tidwall/sjson"

	"github.com/tidwall/gjson"
)

type VRF struct {
	Device                     types.String `tfsdk:"device"`
	Id                         types.String `tfsdk:"id"`
	VrfName                    types.String `tfsdk:"vrf_name"`
	Description                types.String `tfsdk:"description"`
	VpnId                      types.String `tfsdk:"vpn_id"`
	AddressFamilyIpv4Unicast   types.Bool   `tfsdk:"address_family_ipv4_unicast"`
	AddressFamilyIpv4Multicast types.Bool   `tfsdk:"address_family_ipv4_multicast"`
	AddressFamilyIpv4Flowspec  types.Bool   `tfsdk:"address_family_ipv4_flowspec"`
	AddressFamilyIpv6Unicast   types.Bool   `tfsdk:"address_family_ipv6_unicast"`
	AddressFamilyIpv6Multicast types.Bool   `tfsdk:"address_family_ipv6_multicast"`
	AddressFamilyIpv6Flowspec  types.Bool   `tfsdk:"address_family_ipv6_flowspec"`
	RdTwoByteAsAsNumber        types.String `tfsdk:"rd_two_byte_as_as_number"`
	RdTwoByteAsIndex           types.Int64  `tfsdk:"rd_two_byte_as_index"`
	RdFourByteAsAsNumber       types.String `tfsdk:"rd_four_byte_as_as_number"`
	RdFourByteAsIndex          types.Int64  `tfsdk:"rd_four_byte_as_index"`
	RdIpAddressIpv4Address     types.String `tfsdk:"rd_ip_address_ipv4_address"`
	RdIpAddressIndex           types.Int64  `tfsdk:"rd_ip_address_index"`
}

func (data VRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XR-um-vrf-cfg:/vrfs/vrf[vrf-name=%s]", data.VrfName.Value)
}

func (data VRF) toBody() string {
	body := "{}"
	if !data.Description.Null && !data.Description.Unknown {
		body, _ = sjson.Set(body, "description", data.Description.Value)
	}
	if !data.VpnId.Null && !data.VpnId.Unknown {
		body, _ = sjson.Set(body, "vpn.id", data.VpnId.Value)
	}
	if !data.AddressFamilyIpv4Unicast.Null && !data.AddressFamilyIpv4Unicast.Unknown {
		if data.AddressFamilyIpv4Unicast.Value {
			body, _ = sjson.Set(body, "address-family.ipv4.unicast", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv4Multicast.Null && !data.AddressFamilyIpv4Multicast.Unknown {
		if data.AddressFamilyIpv4Multicast.Value {
			body, _ = sjson.Set(body, "address-family.ipv4.multicast", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv4Flowspec.Null && !data.AddressFamilyIpv4Flowspec.Unknown {
		if data.AddressFamilyIpv4Flowspec.Value {
			body, _ = sjson.Set(body, "address-family.ipv4.flowspec", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv6Unicast.Null && !data.AddressFamilyIpv6Unicast.Unknown {
		if data.AddressFamilyIpv6Unicast.Value {
			body, _ = sjson.Set(body, "address-family.ipv6.unicast", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv6Multicast.Null && !data.AddressFamilyIpv6Multicast.Unknown {
		if data.AddressFamilyIpv6Multicast.Value {
			body, _ = sjson.Set(body, "address-family.ipv6.multicast", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv6Flowspec.Null && !data.AddressFamilyIpv6Flowspec.Unknown {
		if data.AddressFamilyIpv6Flowspec.Value {
			body, _ = sjson.Set(body, "address-family.ipv6.flowspec", map[string]string{})
		}
	}
	if !data.RdTwoByteAsAsNumber.Null && !data.RdTwoByteAsAsNumber.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.as-number", data.RdTwoByteAsAsNumber.Value)
	}
	if !data.RdTwoByteAsIndex.Null && !data.RdTwoByteAsIndex.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.index", strconv.FormatInt(data.RdTwoByteAsIndex.Value, 10))
	}
	if !data.RdFourByteAsAsNumber.Null && !data.RdFourByteAsAsNumber.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.as-number", data.RdFourByteAsAsNumber.Value)
	}
	if !data.RdFourByteAsIndex.Null && !data.RdFourByteAsIndex.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.index", strconv.FormatInt(data.RdFourByteAsIndex.Value, 10))
	}
	if !data.RdIpAddressIpv4Address.Null && !data.RdIpAddressIpv4Address.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.ipv4-address", data.RdIpAddressIpv4Address.Value)
	}
	if !data.RdIpAddressIndex.Null && !data.RdIpAddressIndex.Unknown {
		body, _ = sjson.Set(body, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.index", strconv.FormatInt(data.RdIpAddressIndex.Value, 10))
	}
	return body
}

func (data *VRF) fromBody(res []byte) {
	if value := gjson.GetBytes(res, "description"); value.Exists() {
		data.Description.Value = value.String()
	} else {
		data.Description.Null = true
	}
	if value := gjson.GetBytes(res, "vpn.id"); value.Exists() {
		data.VpnId.Value = value.String()
	} else {
		data.VpnId.Null = true
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.unicast"); value.Exists() {
		data.AddressFamilyIpv4Unicast.Value = true
	} else {
		data.AddressFamilyIpv4Unicast.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.multicast"); value.Exists() {
		data.AddressFamilyIpv4Multicast.Value = true
	} else {
		data.AddressFamilyIpv4Multicast.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv4.flowspec"); value.Exists() {
		data.AddressFamilyIpv4Flowspec.Value = true
	} else {
		data.AddressFamilyIpv4Flowspec.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.unicast"); value.Exists() {
		data.AddressFamilyIpv6Unicast.Value = true
	} else {
		data.AddressFamilyIpv6Unicast.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.multicast"); value.Exists() {
		data.AddressFamilyIpv6Multicast.Value = true
	} else {
		data.AddressFamilyIpv6Multicast.Value = false
	}
	if value := gjson.GetBytes(res, "address-family.ipv6.flowspec"); value.Exists() {
		data.AddressFamilyIpv6Flowspec.Value = true
	} else {
		data.AddressFamilyIpv6Flowspec.Value = false
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.as-number"); value.Exists() {
		data.RdTwoByteAsAsNumber.Value = value.String()
	} else {
		data.RdTwoByteAsAsNumber.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.two-byte-as.index"); value.Exists() {
		data.RdTwoByteAsIndex.Value = value.Int()
	} else {
		data.RdTwoByteAsIndex.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.as-number"); value.Exists() {
		data.RdFourByteAsAsNumber.Value = value.String()
	} else {
		data.RdFourByteAsAsNumber.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.four-byte-as.index"); value.Exists() {
		data.RdFourByteAsIndex.Value = value.Int()
	} else {
		data.RdFourByteAsIndex.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.ipv4-address"); value.Exists() {
		data.RdIpAddressIpv4Address.Value = value.String()
	} else {
		data.RdIpAddressIpv4Address.Null = true
	}
	if value := gjson.GetBytes(res, "Cisco-IOS-XR-um-router-bgp-cfg:rd.ip-address.index"); value.Exists() {
		data.RdIpAddressIndex.Value = value.Int()
	} else {
		data.RdIpAddressIndex.Null = true
	}
}

func (data *VRF) fromPlan(plan VRF) {
	data.Device = plan.Device
	data.VrfName.Value = plan.VrfName.Value
}

func (data *VRF) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.VrfName.Unknown {
		data.VrfName.Unknown = false
		data.VrfName.Null = true
	}
	if data.Description.Unknown {
		data.Description.Unknown = false
		data.Description.Null = true
	}
	if data.VpnId.Unknown {
		data.VpnId.Unknown = false
		data.VpnId.Null = true
	}
	if data.AddressFamilyIpv4Unicast.Unknown {
		data.AddressFamilyIpv4Unicast.Unknown = false
		data.AddressFamilyIpv4Unicast.Null = true
	}
	if data.AddressFamilyIpv4Multicast.Unknown {
		data.AddressFamilyIpv4Multicast.Unknown = false
		data.AddressFamilyIpv4Multicast.Null = true
	}
	if data.AddressFamilyIpv4Flowspec.Unknown {
		data.AddressFamilyIpv4Flowspec.Unknown = false
		data.AddressFamilyIpv4Flowspec.Null = true
	}
	if data.AddressFamilyIpv6Unicast.Unknown {
		data.AddressFamilyIpv6Unicast.Unknown = false
		data.AddressFamilyIpv6Unicast.Null = true
	}
	if data.AddressFamilyIpv6Multicast.Unknown {
		data.AddressFamilyIpv6Multicast.Unknown = false
		data.AddressFamilyIpv6Multicast.Null = true
	}
	if data.AddressFamilyIpv6Flowspec.Unknown {
		data.AddressFamilyIpv6Flowspec.Unknown = false
		data.AddressFamilyIpv6Flowspec.Null = true
	}
	if data.RdTwoByteAsAsNumber.Unknown {
		data.RdTwoByteAsAsNumber.Unknown = false
		data.RdTwoByteAsAsNumber.Null = true
	}
	if data.RdTwoByteAsIndex.Unknown {
		data.RdTwoByteAsIndex.Unknown = false
		data.RdTwoByteAsIndex.Null = true
	}
	if data.RdFourByteAsAsNumber.Unknown {
		data.RdFourByteAsAsNumber.Unknown = false
		data.RdFourByteAsAsNumber.Null = true
	}
	if data.RdFourByteAsIndex.Unknown {
		data.RdFourByteAsIndex.Unknown = false
		data.RdFourByteAsIndex.Null = true
	}
	if data.RdIpAddressIpv4Address.Unknown {
		data.RdIpAddressIpv4Address.Unknown = false
		data.RdIpAddressIpv4Address.Null = true
	}
	if data.RdIpAddressIndex.Unknown {
		data.RdIpAddressIndex.Unknown = false
		data.RdIpAddressIndex.Null = true
	}
}

func (data *VRF) getDeletedListItems(state VRF) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *VRF) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
