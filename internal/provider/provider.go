// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"os"
	"slices"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func New() provider.Provider {
	return &iosxrProvider{}
}

// provider satisfies the tfsdk.Provider interface and usually is included
// with all Resource and DataSource implementations.
type iosxrProvider struct{}

// providerData can be used to store data from the Terraform configuration.
type providerData struct {
	Username          types.String         `tfsdk:"username"`
	Password          types.String         `tfsdk:"password"`
	Host              types.String         `tfsdk:"host"`
	VerifyCertificate types.Bool           `tfsdk:"verify_certificate"`
	Tls               types.Bool           `tfsdk:"tls"`
	Certificate       types.String         `tfsdk:"certificate"`
	Key               types.String         `tfsdk:"key"`
	CaCertificate     types.String         `tfsdk:"ca_certificate"`
	ReuseConnection   types.Bool           `tfsdk:"reuse_connection"`
	SelectedDevices   types.List           `tfsdk:"selected_devices"`
	Devices           []providerDataDevice `tfsdk:"devices"`
}

type providerDataDevice struct {
	Name    types.String `tfsdk:"name"`
	Host    types.String `tfsdk:"host"`
	Managed types.Bool   `tfsdk:"managed"`
}

type IosxrProviderData struct {
	Client  *client.Client
	Devices map[string]*IosxrProviderDataDevice
}

type IosxrProviderDataDevice struct {
	Managed bool
}

// Metadata returns the provider type name.
func (p *iosxrProvider) Metadata(_ context.Context, _ provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "iosxr"
}

func (p *iosxrProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"username": schema.StringAttribute{
				MarkdownDescription: "Username for the IOS-XR device. This can also be set as the IOSXR_USERNAME environment variable.",
				Optional:            true,
			},
			"password": schema.StringAttribute{
				MarkdownDescription: "Password for the IOS-XR device. This can also be set as the IOSXR_PASSWORD environment variable.",
				Optional:            true,
				Sensitive:           true,
			},
			"host": schema.StringAttribute{
				MarkdownDescription: "IP or name of the Cisco IOS-XR device. Optionally a port can be added with `:12345`. The default port is `57400`. This can also be set as the IOSXR_HOST environment variable. If no `host` is provided, the `host` of the first device from the `devices` list is being used.",
				Optional:            true,
			},
			"verify_certificate": schema.BoolAttribute{
				MarkdownDescription: "Verify target certificate. This can also be set as the IOSXR_VERIFY_CERTIFICATE environment variable. Defaults to `false`.",
				Optional:            true,
			},
			"tls": schema.BoolAttribute{
				MarkdownDescription: "Use TLS. This can also be set as the IOSXR_TLS environment variable. Defaults to `true`.",
				Optional:            true,
			},
			"certificate": schema.StringAttribute{
				MarkdownDescription: "TLS certificate content. This can also be set as the IOSXR_CERTIFICATE environment variable.",
				Optional:            true,
			},
			"key": schema.StringAttribute{
				MarkdownDescription: "TLS private key content. This can also be set as the IOSXR_KEY environment variable.",
				Optional:            true,
			},
			"ca_certificate": schema.StringAttribute{
				MarkdownDescription: "TLS CA certificate content. This can also be set as the IOSXR_CA_CERTIFICATE environment variable.",
				Optional:            true,
			},
			"reuse_connection": schema.BoolAttribute{
				MarkdownDescription: "Reuse gNMI connection. This can also be set as the IOSXR_REUSE_CONNECTION environment variable. Defaults to `true`.",
				Optional:            true,
			},
			"selected_devices": schema.ListAttribute{
				MarkdownDescription: "This can be used to select a list of devices to manage from the `devices` list. Selected devices will be managed while other devices will be skipped and their state will be frozen. This can be used to deploy changes to a subset of devices. Defaults to all devices.",
				Optional:            true,
				ElementType:         types.StringType,
			},
			"devices": schema.ListNestedAttribute{
				MarkdownDescription: "This can be used to manage a list of devices from a single provider. All devices must use the same credentials. Each resource and data source has an optional attribute named `device`, which can then select a device by its name from this list.",
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "Device name.",
							Required:            true,
						},
						"host": schema.StringAttribute{
							MarkdownDescription: "IP of the Cisco IOS-XR device.",
							Required:            true,
						},
						"managed": schema.BoolAttribute{
							MarkdownDescription: "Enable or disable device management. This can be used to temporarily skip a device due to maintenance for example. Defaults to `true`.",
							Optional:            true,
						},
					},
				},
			},
		},
	}
}

func (p *iosxrProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	// Retrieve provider data from configuration
	var config providerData
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// User must provide a username to the provider
	var username string
	if config.Username.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as username",
		)
		return
	}

	if config.Username.IsNull() {
		username = os.Getenv("IOSXR_USERNAME")
	} else {
		username = config.Username.ValueString()
	}

	if username == "" {
		// Error vs warning - empty value must stop execution
		resp.Diagnostics.AddError(
			"Unable to find username",
			"Username cannot be an empty string",
		)
		return
	}

	// User must provide a password to the provider
	var password string
	if config.Password.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as password",
		)
		return
	}

	if config.Password.IsNull() {
		password = os.Getenv("IOSXR_PASSWORD")
	} else {
		password = config.Password.ValueString()
	}

	if password == "" {
		// Error vs warning - empty value must stop execution
		resp.Diagnostics.AddError(
			"Unable to find password",
			"Password cannot be an empty string",
		)
		return
	}

	// User must provide a username to the provider
	var host string
	if config.Host.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as host",
		)
		return
	}

	if config.Host.IsNull() {
		host = os.Getenv("IOSXR_HOST")
		if host == "" && len(config.Devices) > 0 {
			host = config.Devices[0].Host.ValueString()
		}
	} else {
		host = config.Host.ValueString()
	}

	if host == "" {
		// Error vs warning - empty value must stop execution
		resp.Diagnostics.AddError(
			"Unable to find host",
			"Host cannot be an empty string",
		)
		return
	}

	var verifyCertificate bool
	if config.VerifyCertificate.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as verify_certificate",
		)
		return
	}

	if config.VerifyCertificate.IsNull() {
		verifyCertificateStr := os.Getenv("IOSXR_VERIFY_CERTIFICATE")
		if verifyCertificateStr == "" {
			verifyCertificate = false
		} else {
			var err error
			verifyCertificate, err = strconv.ParseBool(verifyCertificateStr)
			if err != nil {
				resp.Diagnostics.AddError(
					"Invalid verify_certificate value",
					"IOSXR_VERIFY_CERTIFICATE must be a valid boolean (true/false/1/0), got: "+verifyCertificateStr,
				)
				return
			}
		}
	} else {
		verifyCertificate = config.VerifyCertificate.ValueBool()
	}

	var tls bool
	if config.Tls.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as tls",
		)
		return
	}

	if config.Tls.IsNull() {
		tlsStr := os.Getenv("IOSXR_TLS")
		if tlsStr == "" {
			tls = true
		} else {
			var err error
			tls, err = strconv.ParseBool(tlsStr)
			if err != nil {
				resp.Diagnostics.AddError(
					"Invalid tls value",
					"IOSXR_TLS must be a valid boolean (true/false/1/0), got: "+tlsStr,
				)
				return
			}
		}
	} else {
		tls = config.Tls.ValueBool()
	}

	var certificate string
	if config.Certificate.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as certificate",
		)
		return
	}

	if config.Certificate.IsNull() {
		certificate = os.Getenv("IOSXR_CERTIFICATE")
	} else {
		certificate = config.Certificate.ValueString()
	}

	var key string
	if config.Key.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as key",
		)
		return
	}

	if config.Key.IsNull() {
		key = os.Getenv("IOSXR_KEY")
	} else {
		key = config.Key.ValueString()
	}

	var caCertificate string
	if config.CaCertificate.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as ca_certificate",
		)
		return
	}

	if config.CaCertificate.IsNull() {
		caCertificate = os.Getenv("IOSXR_CA_CERTIFICATE")
	} else {
		caCertificate = config.CaCertificate.ValueString()
	}

	var reuseConnection bool
	if config.ReuseConnection.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as reuse_connection",
		)
		return
	}

	if config.ReuseConnection.IsNull() {
		reuseConnectionStr := os.Getenv("IOSXR_REUSE_CONNECTION")
		if reuseConnectionStr == "" {
			reuseConnection = true
		} else {
			var err error
			reuseConnection, err = strconv.ParseBool(reuseConnectionStr)
			if err != nil {
				resp.Diagnostics.AddError(
					"Invalid reuse_connection value",
					"IOSXR_REUSE_CONNECTION must be a valid boolean (true/false/1/0), got: "+reuseConnectionStr,
				)
				return
			}
		}
	} else {
		reuseConnection = config.ReuseConnection.ValueBool()
	}

	var selectedDevices []string
	if config.SelectedDevices.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as selected_devices",
		)
		return
	}

	if config.SelectedDevices.IsNull() {
		selectedDevicesStr := os.Getenv("IOSXR_SELECTED_DEVICES")
		if selectedDevicesStr != "" {
			parts := strings.Split(selectedDevicesStr, ",")
			for _, part := range parts {
				trimmed := strings.TrimSpace(part)
				if trimmed != "" {
					selectedDevices = append(selectedDevices, trimmed)
				}
			}
		}
	} else {
		diags = config.SelectedDevices.ElementsAs(ctx, &selectedDevices, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
	}

	// Validate selected_devices references
	if len(selectedDevices) > 0 {
		deviceMap := make(map[string]bool)
		for _, device := range config.Devices {
			deviceMap[device.Name.ValueString()] = true
		}

		var invalidDevices []string
		for _, selectedName := range selectedDevices {
			if !deviceMap[selectedName] {
				invalidDevices = append(invalidDevices, selectedName)
			}
		}

		if len(invalidDevices) > 0 {
			resp.Diagnostics.AddWarning(
				"Unknown devices in selected_devices",
				"The following device names from selected_devices do not exist in the devices list: "+strings.Join(invalidDevices, ", "),
			)
		}
	}

	client := client.NewClient(reuseConnection)

	err := client.AddTarget(ctx, "", host, username, password, certificate, key, caCertificate, verifyCertificate, tls)
	if err != nil {
		resp.Diagnostics.AddError("Unable to add target", err.Error())
	}

	// Build provider data structure with device management information
	providerData := &IosxrProviderData{
		Client:  &client,
		Devices: make(map[string]*IosxrProviderDataDevice),
	}

	// Add default device (empty string)
	providerData.Devices[""] = &IosxrProviderDataDevice{Managed: true}

	// Add all devices with their managed status
	for _, device := range config.Devices {
		deviceName := device.Name.ValueString()
		var managed bool
		if len(selectedDevices) > 0 {
			managed = slices.Contains(selectedDevices, deviceName)
		} else {
			managed = device.Managed.IsNull() || device.Managed.IsUnknown() || device.Managed.ValueBool()
		}
		providerData.Devices[deviceName] = &IosxrProviderDataDevice{Managed: managed}

		if managed {
			err := client.AddTarget(ctx, deviceName, device.Host.ValueString(), username, password, certificate, key, caCertificate, verifyCertificate, tls)
			if err != nil {
				resp.Diagnostics.AddError("Unable to add target", err.Error())
			}
		}
	}

	resp.DataSourceData = providerData
	resp.ResourceData = providerData
}

func (p *iosxrProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewGnmiResource,
		NewASPathSetResource,
		NewBannerResource,
		NewBFDResource,
		NewBGPASFormatResource,
		NewCDPResource,
		NewClassMapQoSResource,
		NewCommunitySetResource,
		NewDomainResource,
		NewDomainVRFResource,
		NewErrorDisableRecoveryResource,
		NewESISetResource,
		NewEVPNResource,
		NewEVPNEVIResource,
		NewEVPNGroupResource,
		NewEVPNInterfaceResource,
		NewEVPNSegmentRoutingSRv6EVIResource,
		NewExtcommunityCostSetResource,
		NewExtcommunityOpaqueSetResource,
		NewExtcommunityRTSetResource,
		NewExtcommunitySOOSetResource,
		NewFlowExporterMapResource,
		NewFlowMonitorMapResource,
		NewFlowSamplerMapResource,
		NewFPDResource,
		NewHostnameResource,
		NewInterfaceResource,
		NewIPv4AccessListResource,
		NewIPv4AccessListOptionsResource,
		NewIPv4PrefixListResource,
		NewIPv6Resource,
		NewIPv6AccessListResource,
		NewIPv6AccessListOptionsResource,
		NewIPv6PrefixListResource,
		NewKeyChainResource,
		NewL2VPNResource,
		NewL2VPNBridgeGroupResource,
		NewL2VPNBridgeGroupBridgeDomainResource,
		NewL2VPNPWClassResource,
		NewL2VPNXconnectGroupP2PResource,
		NewLACPResource,
		NewLLDPResource,
		NewLoggingResource,
		NewLoggingSourceInterfaceResource,
		NewLoggingVRFResource,
		NewMPLSLDPResource,
		NewMPLSOAMResource,
		NewMPLSTrafficEngResource,
		NewNTPResource,
		NewPCEResource,
		NewPolicyMapQoSResource,
		NewPrefixSetResource,
		NewRDSetResource,
		NewRoutePolicyResource,
		NewRouterBGPResource,
		NewRouterBGPAddressFamilyResource,
		NewRouterBGPNeighborAddressFamilyResource,
		NewRouterBGPNeighborGroupResource,
		NewRouterBGPVRFResource,
		NewRouterBGPVRFAddressFamilyResource,
		NewRouterBGPVRFNeighborAddressFamilyResource,
		NewRouterHSRPInterfaceResource,
		NewRouterHSRPInterfaceIPv4GroupV1Resource,
		NewRouterHSRPInterfaceIPv4GroupV2Resource,
		NewRouterHSRPInterfaceIPv6GroupV2Resource,
		NewRouterISISResource,
		NewRouterISISAddressFamilyResource,
		NewRouterISISInterfaceResource,
		NewRouterISISInterfaceAddressFamilyResource,
		NewRouterOSPFResource,
		NewRouterOSPFAreaInterfaceResource,
		NewRouterOSPFVRFResource,
		NewRouterOSPFVRFAreaInterfaceResource,
		NewRouterStaticIPv4MulticastResource,
		NewRouterStaticIPv4UnicastResource,
		NewRouterStaticIPv6MulticastResource,
		NewRouterStaticIPv6UnicastResource,
		NewRouterStaticVRFIPv4MulticastResource,
		NewRouterStaticVRFIPv4UnicastResource,
		NewRouterStaticVRFIPv6MulticastResource,
		NewRouterStaticVRFIPv6UnicastResource,
		NewRouterVRRPInterfaceResource,
		NewRouterVRRPInterfaceIPv4Resource,
		NewRouterVRRPInterfaceIPv6Resource,
		NewSegmentRoutingResource,
		NewSegmentRoutingTEResource,
		NewSegmentRoutingTEPolicyCandidatePathResource,
		NewSegmentRoutingV6Resource,
		NewServiceTimestampsResource,
		NewSNMPServerResource,
		NewSNMPServerMIBResource,
		NewSNMPServerViewResource,
		NewSNMPServerVRFHostResource,
		NewSSHResource,
		NewTagSetResource,
		NewTelnetResource,
		NewVRFResource,
	}
}

func (p *iosxrProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewGnmiDataSource,
		NewASPathSetDataSource,
		NewBannerDataSource,
		NewBFDDataSource,
		NewBGPASFormatDataSource,
		NewCDPDataSource,
		NewClassMapQoSDataSource,
		NewCommunitySetDataSource,
		NewDomainDataSource,
		NewDomainVRFDataSource,
		NewErrorDisableRecoveryDataSource,
		NewESISetDataSource,
		NewEVPNDataSource,
		NewEVPNEVIDataSource,
		NewEVPNGroupDataSource,
		NewEVPNInterfaceDataSource,
		NewEVPNSegmentRoutingSRv6EVIDataSource,
		NewExtcommunityCostSetDataSource,
		NewExtcommunityOpaqueSetDataSource,
		NewExtcommunityRTSetDataSource,
		NewExtcommunitySOOSetDataSource,
		NewFlowExporterMapDataSource,
		NewFlowMonitorMapDataSource,
		NewFlowSamplerMapDataSource,
		NewFPDDataSource,
		NewHostnameDataSource,
		NewInterfaceDataSource,
		NewIPv4AccessListDataSource,
		NewIPv4AccessListOptionsDataSource,
		NewIPv4PrefixListDataSource,
		NewIPv6DataSource,
		NewIPv6AccessListDataSource,
		NewIPv6AccessListOptionsDataSource,
		NewIPv6PrefixListDataSource,
		NewKeyChainDataSource,
		NewL2VPNDataSource,
		NewL2VPNBridgeGroupDataSource,
		NewL2VPNBridgeGroupBridgeDomainDataSource,
		NewL2VPNPWClassDataSource,
		NewL2VPNXconnectGroupP2PDataSource,
		NewLACPDataSource,
		NewLLDPDataSource,
		NewLoggingDataSource,
		NewLoggingSourceInterfaceDataSource,
		NewLoggingVRFDataSource,
		NewMPLSLDPDataSource,
		NewMPLSOAMDataSource,
		NewMPLSTrafficEngDataSource,
		NewNTPDataSource,
		NewPCEDataSource,
		NewPolicyMapQoSDataSource,
		NewPrefixSetDataSource,
		NewRDSetDataSource,
		NewRoutePolicyDataSource,
		NewRouterBGPDataSource,
		NewRouterBGPAddressFamilyDataSource,
		NewRouterBGPNeighborAddressFamilyDataSource,
		NewRouterBGPNeighborGroupDataSource,
		NewRouterBGPVRFDataSource,
		NewRouterBGPVRFAddressFamilyDataSource,
		NewRouterBGPVRFNeighborAddressFamilyDataSource,
		NewRouterHSRPInterfaceDataSource,
		NewRouterHSRPInterfaceIPv4GroupV1DataSource,
		NewRouterHSRPInterfaceIPv4GroupV2DataSource,
		NewRouterHSRPInterfaceIPv6GroupV2DataSource,
		NewRouterISISDataSource,
		NewRouterISISAddressFamilyDataSource,
		NewRouterISISInterfaceDataSource,
		NewRouterISISInterfaceAddressFamilyDataSource,
		NewRouterOSPFDataSource,
		NewRouterOSPFAreaInterfaceDataSource,
		NewRouterOSPFVRFDataSource,
		NewRouterOSPFVRFAreaInterfaceDataSource,
		NewRouterStaticIPv4MulticastDataSource,
		NewRouterStaticIPv4UnicastDataSource,
		NewRouterStaticIPv6MulticastDataSource,
		NewRouterStaticIPv6UnicastDataSource,
		NewRouterStaticVRFIPv4MulticastDataSource,
		NewRouterStaticVRFIPv4UnicastDataSource,
		NewRouterStaticVRFIPv6MulticastDataSource,
		NewRouterStaticVRFIPv6UnicastDataSource,
		NewRouterVRRPInterfaceDataSource,
		NewRouterVRRPInterfaceIPv4DataSource,
		NewRouterVRRPInterfaceIPv6DataSource,
		NewSegmentRoutingDataSource,
		NewSegmentRoutingTEDataSource,
		NewSegmentRoutingTEPolicyCandidatePathDataSource,
		NewSegmentRoutingV6DataSource,
		NewServiceTimestampsDataSource,
		NewSNMPServerDataSource,
		NewSNMPServerMIBDataSource,
		NewSNMPServerViewDataSource,
		NewSNMPServerVRFHostDataSource,
		NewSSHDataSource,
		NewTagSetDataSource,
		NewTelnetDataSource,
		NewVRFDataSource,
	}
}
