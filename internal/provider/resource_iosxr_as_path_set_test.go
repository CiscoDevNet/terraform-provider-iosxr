// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrASPathSet(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_as_path_set.test", "set_name", "TEST1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_as_path_set.test", "rpl", "as-path-set TEST1\n  length ge 10\nend-set\n"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrASPathSetConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrASPathSetConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:  "iosxr_as_path_set.test",
		ImportState:   true,
		ImportStateId: "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/sets/as-path-sets/as-path-set[set-name=TEST1]",
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

func testAccIosxrASPathSetConfig_minimum() string {
	config := `resource "iosxr_as_path_set" "test" {` + "\n"
	config += `	set_name = "TEST1"` + "\n"
	config += `	rpl = "as-path-set TEST1\n  length ge 10\nend-set\n"` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrASPathSetConfig_all() string {
	config := `resource "iosxr_as_path_set" "test" {` + "\n"
	config += `	set_name = "TEST1"` + "\n"
	config += `	rpl = "as-path-set TEST1\n  length ge 10\nend-set\n"` + "\n"
	config += `}` + "\n"
	return config
}
