// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"regexp"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

func NewBFDResource() resource.Resource {
	return &BFDResource{}
}

type BFDResource struct {
	client *client.Client
}

func (r *BFDResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_bfd"
}

func (r *BFDResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the BFD configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the object.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"delete_mode": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is. Default value is `all`.").AddStringEnumDescription("all", "attributes").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("all", "attributes"),
				},
			},
			"echo_disable": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Disable BFD echo mode").String,
				Optional:            true,
			},
			"echo_latency_detect_percentage": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Percentage of detection time to consider as bad latency").AddIntegerRangeDescription(100, 250).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(100, 250),
				},
			},
			"echo_latency_detect_count": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Count of consecutive bad latency packets to take session down").AddIntegerRangeDescription(1, 10).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 10),
				},
			},
			"echo_startup_validate_force": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Ignore remote 'Required Min Echo RX Interval' setting").String,
				Optional:            true,
			},
			"echo_ipv4_source": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("BFD echo source IP address").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
					stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
				},
			},
			"echo_ipv4_bundle_per_member_preferred_minimum_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("The preferred minimum interval (in ms) for the BFD session").AddIntegerRangeDescription(15, 2000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(15, 2000),
				},
			},
			"trap_singlehop_pre_mapped": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure BFD trap pre-mapped").String,
				Optional:            true,
			},
			"multipath_locations": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Specify a location").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"location_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify a location").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+)`), ""),
							},
						},
					},
				},
			},
			"multihop_ttl_drop_threshold": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("TTL Drop Threshold").AddIntegerRangeDescription(0, 254).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(0, 254),
				},
			},
			"dampening_initial_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Initial delay before bringing up session").AddIntegerRangeDescription(1, 3600000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 3600000),
				},
			},
			"dampening_secondary_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Secondary delay before bringing up session").AddIntegerRangeDescription(1, 3600000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 3600000),
				},
			},
			"dampening_maximum_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Maximum delay before bringing up session").AddIntegerRangeDescription(1, 3600000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 3600000),
				},
			},
			"dampening_threshold": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Stability threshold to enable dampening").AddIntegerRangeDescription(60000, 3600000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(60000, 3600000),
				},
			},
			"dampening_extensions_down_monitoring": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable DOWN state session monitoring extensions").String,
				Optional:            true,
			},
			"dampening_disable": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Disable BFD dampening").String,
				Optional:            true,
			},
			"dampening_bundle_member_l3_only_mode": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Apply immediate dampening and only when failure is L3 specific").String,
				Optional:            true,
			},
			"dampening_bundle_member_initial_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Initial delay before bringing up session").AddIntegerRangeDescription(1, 518400000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 518400000),
				},
			},
			"dampening_bundle_member_secondary_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Secondary delay before bringing up session").AddIntegerRangeDescription(1, 518400000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 518400000),
				},
			},
			"dampening_bundle_member_maximum_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Maximum delay before bringing up session").AddIntegerRangeDescription(1, 518400000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 518400000),
				},
			},
			"bundle_coexistence_bob_blb_inherit": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use inheritence mechanism").String,
				Optional:            true,
			},
			"bundle_coexistence_bob_blb_logical": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use BFD logical Bundle natively").String,
				Optional:            true,
			},
			"interfaces": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure BFD on an interface").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"interface_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure BFD on an interface").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
							},
						},
						"echo_disable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Disable BFD echo mode for this interface").String,
							Optional:            true,
						},
						"echo_ipv4_source": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("BFD echo source IP address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"ipv6_checksum_disable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Disable BFD ipv6 checksum mode for this interface").String,
							Optional:            true,
						},
						"disable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Disable BFD for this interface").String,
							Optional:            true,
						},
						"local_address": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Local address to be used by BFD for this interface").String,
							Optional:            true,
						},
						"tx_interval": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("BFD TX Interval for this interface in microseconds").AddIntegerRangeDescription(3000, 30000000).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(3000, 30000000),
							},
						},
						"rx_interval": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("BFD RX Interval for this interface in microseconds").AddIntegerRangeDescription(3000, 30000000).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(3000, 30000000),
							},
						},
						"multiplier": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("BFD multiplier for this interface").AddIntegerRangeDescription(2, 50).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(2, 50),
							},
						},
					},
				},
			},
			"ipv6_checksum_disable": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Disable BFD checksum").String,
				Optional:            true,
			},
		},
	}
}

func (r *BFDResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*client.Client)
}

func (r *BFDResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan BFD

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var ops []client.SetOperation

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	// Create object
	body := plan.toBody(ctx)
	ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	_, diags = r.client.Set(ctx, plan.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Id = types.StringValue(plan.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *BFDResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state BFD

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	import_ := false
	if state.Id.ValueString() == "" {
		import_ = true
		state.Id = types.StringValue(state.getPath())
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.ValueString()))

	getResp, diags := r.client.Get(ctx, state.Device.ValueString(), state.Id.ValueString())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	respBody := getResp.Notification[0].Update[0].Val.GetJsonIetfVal()
	if import_ {
		state.fromBody(ctx, respBody)
	} else {
		state.updateFromBody(ctx, respBody)
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *BFDResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state BFD

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var ops []client.SetOperation

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	// Update object
	body := plan.toBody(ctx)
	ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

	deletedListItems := plan.getDeletedItems(ctx, state)
	tflog.Debug(ctx, fmt.Sprintf("Removed items to delete: %+v", deletedListItems))

	for _, i := range deletedListItems {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	_, diags = r.client.Set(ctx, plan.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *BFDResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state BFD

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.ValueString()))
	var ops []client.SetOperation
	deleteMode := "all"
	if state.DeleteMode.ValueString() == "all" {
		deleteMode = "all"
	} else if state.DeleteMode.ValueString() == "attributes" {
		deleteMode = "attributes"
	}

	if deleteMode == "all" {
		ops = append(ops, client.SetOperation{Path: state.Id.ValueString(), Body: "", Operation: client.Delete})
	} else {
		deletePaths := state.getDeletePaths(ctx)
		tflog.Debug(ctx, fmt.Sprintf("Paths to delete: %+v", deletePaths))

		for _, i := range deletePaths {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}
	}

	_, diags = r.client.Set(ctx, state.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

func (r *BFDResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), "")...)
}
