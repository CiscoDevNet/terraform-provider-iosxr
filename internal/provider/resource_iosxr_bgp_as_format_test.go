// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrBGPASFormat(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_bgp_as_format.test", "asdot", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_bgp_as_format.test", "asplain", "true"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrBGPASFormatConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrBGPASFormatConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:  "iosxr_bgp_as_format.test",
		ImportState:   true,
		ImportStateId: "Cisco-IOS-XR-um-router-bgp-cfg:/as-format",
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

func testAccIosxrBGPASFormatConfig_minimum() string {
	config := `resource "iosxr_bgp_as_format" "test" {` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrBGPASFormatConfig_all() string {
	config := `resource "iosxr_bgp_as_format" "test" {` + "\n"
	config += `	asdot = false` + "\n"
	config += `	asplain = true` + "\n"
	config += `}` + "\n"
	return config
}
