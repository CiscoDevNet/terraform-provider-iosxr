// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxrDomain(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "domains.0.domain_name", "DOMAIN1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "domains.0.order", "0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "lookup_disable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "lookup_source_interface", "Loopback214"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "name", "DOMAIN"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "ipv4_hosts.0.host_name", "HOST_NAME"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "ipv4_hosts.0.ip_address.0", "10.0.0.0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "name_servers.0.address", "10.0.0.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "name_servers.0.order", "345"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "ipv6_hosts.0.host_name", "HOST_NAME_IPV6"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "ipv6_hosts.0.ipv6_address.0", "10::10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "multicast", "DOMAIN1_ACC"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_domain.test", "default_flows_disable", "true"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrDomainConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrDomainConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:      "iosxr_domain.test",
		ImportState:       true,
		ImportStateIdFunc: iosxrDomainImportStateIdFunc("iosxr_domain.test"),
		Check:             resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxrDomainImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {

		return fmt.Sprintf(""), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxrDomainConfig_minimum() string {
	config := `resource "iosxr_domain" "test" {` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxrDomainConfig_all() string {
	config := `resource "iosxr_domain" "test" {` + "\n"
	config += `	domains = [{` + "\n"
	config += `		domain_name = "DOMAIN1"` + "\n"
	config += `		order = 0` + "\n"
	config += `		}]` + "\n"
	config += `	lookup_disable = true` + "\n"
	config += `	lookup_source_interface = "Loopback214"` + "\n"
	config += `	name = "DOMAIN"` + "\n"
	config += `	ipv4_hosts = [{` + "\n"
	config += `		host_name = "HOST_NAME"` + "\n"
	config += `		ip_address = ["10.0.0.0"]` + "\n"
	config += `		}]` + "\n"
	config += `	name_servers = [{` + "\n"
	config += `		address = "10.0.0.1"` + "\n"
	config += `		order = 345` + "\n"
	config += `		}]` + "\n"
	config += `	ipv6_hosts = [{` + "\n"
	config += `		host_name = "HOST_NAME_IPV6"` + "\n"
	config += `		ipv6_address = ["10::10"]` + "\n"
	config += `		}]` + "\n"
	config += `	multicast = "DOMAIN1_ACC"` + "\n"
	config += `	default_flows_disable = true` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
