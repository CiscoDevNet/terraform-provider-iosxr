// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin model

func NewErrorDisableRecoveryResource() resource.Resource {
	return &ErrorDisableRecoveryResource{}
}

type ErrorDisableRecoveryResource struct {
	data *IosxrProviderData
}

func (r *ErrorDisableRecoveryResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_error_disable_recovery"
}

func (r *ErrorDisableRecoveryResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the Error Disable Recovery configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the object.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"delete_mode": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is. Default value is `all`.").AddStringEnumDescription("all", "attributes").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("all", "attributes"),
				},
			},
			"link_oam_session_down_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"link_oam_discovery_timeout_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"link_oam_capabilities_conflict_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"link_oam_miswired_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"link_oam_link_fault_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"link_oam_dying_gasp_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"link_oam_critical_event_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"link_oam_threshold_breached_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"stp_bpdu_guard_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"stp_legacy_bpdu_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"cluster_udld_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"cluster_minlinks_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"udld_unidirectional_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"udld_neighbor_mismatch_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"udld_timeout_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"udld_loopback_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"pvrst_pvid_mismatch_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"l2vpn_bport_mac_move_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"ot_track_state_change_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
			"link_oam_dampening_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure an interval for the auto-recovery period").AddIntegerRangeDescription(30, 1000000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(30, 1000000),
				},
			},
		},
	}
}

func (r *ErrorDisableRecoveryResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.data = req.ProviderData.(*IosxrProviderData)
}

// End of section. //template:end model

// Section below is generated&owned by "gen/generator.go". //template:begin create

func (r *ErrorDisableRecoveryResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan ErrorDisableRecovery

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := r.data.Devices[plan.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", plan.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	if device.Managed {
		var ops []client.SetOperation

		// Create object
		body := plan.toBody(ctx)
		ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

		emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
		tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

		for _, i := range emptyLeafsDelete {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}

		_, err := r.data.Client.Set(ctx, plan.Device.ValueString(), ops...)
		if err != nil {
			resp.Diagnostics.AddError("Unable to apply gNMI Set operation", err.Error())
			return
		}
	}

	plan.Id = types.StringValue(plan.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)

	helpers.SetFlagImporting(ctx, false, resp.Private, &resp.Diagnostics)
}

// End of section. //template:end create

// Section below is generated&owned by "gen/generator.go". //template:begin read

func (r *ErrorDisableRecoveryResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state ErrorDisableRecovery

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := r.data.Devices[state.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", state.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.ValueString()))

	if device.Managed {
		getResp, err := r.data.Client.Get(ctx, state.Device.ValueString(), state.Id.ValueString())
		if err != nil {
			if strings.Contains(err.Error(), "Requested element(s) not found") {
				resp.State.RemoveResource(ctx)
				return
			} else {
				resp.Diagnostics.AddError("Unable to apply gNMI Get operation", err.Error())
				return
			}
		}

		imp, diags := helpers.IsFlagImporting(ctx, req)
		if resp.Diagnostics.Append(diags...); resp.Diagnostics.HasError() {
			return
		}

		// After `terraform import` we switch to a full read.
		respBody := getResp.Notification[0].Update[0].Val.GetJsonIetfVal()
		if imp {
			state.fromBody(ctx, respBody)
		} else {
			state.updateFromBody(ctx, respBody)
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)

	helpers.SetFlagImporting(ctx, false, resp.Private, &resp.Diagnostics)
}

// End of section. //template:end read

// Section below is generated&owned by "gen/generator.go". //template:begin update

func (r *ErrorDisableRecoveryResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state ErrorDisableRecovery

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := r.data.Devices[plan.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", plan.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	if device.Managed {
		var ops []client.SetOperation

		// Update object
		body := plan.toBody(ctx)
		ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

		deletedListItems := plan.getDeletedItems(ctx, state)
		tflog.Debug(ctx, fmt.Sprintf("Removed items to delete: %+v", deletedListItems))

		for _, i := range deletedListItems {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}

		emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
		tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

		for _, i := range emptyLeafsDelete {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}

		_, err := r.data.Client.Set(ctx, plan.Device.ValueString(), ops...)
		if err != nil {
			resp.Diagnostics.AddError("Unable to apply gNMI Set operation", err.Error())
			return
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

// End of section. //template:end update

// Section below is generated&owned by "gen/generator.go". //template:begin delete

func (r *ErrorDisableRecoveryResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state ErrorDisableRecovery

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := r.data.Devices[state.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", state.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.ValueString()))

	if device.Managed {
		var ops []client.SetOperation
		deleteMode := "all"
		if state.DeleteMode.ValueString() == "all" {
			deleteMode = "all"
		} else if state.DeleteMode.ValueString() == "attributes" {
			deleteMode = "attributes"
		}

		if deleteMode == "all" {
			ops = append(ops, client.SetOperation{Path: state.Id.ValueString(), Body: "", Operation: client.Delete})
		} else {
			deletePaths := state.getDeletePaths(ctx)
			tflog.Debug(ctx, fmt.Sprintf("Paths to delete: %+v", deletePaths))

			for _, i := range deletePaths {
				ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
			}
		}

		_, err := r.data.Client.Set(ctx, state.Device.ValueString(), ops...)
		if err != nil {
			resp.Diagnostics.AddError("Unable to apply gNMI Set operation", err.Error())
			return
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

// End of section. //template:end delete

// Section below is generated&owned by "gen/generator.go". //template:begin import

func (r *ErrorDisableRecoveryResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idParts := strings.Split(req.ID, ",")
	idParts = helpers.RemoveEmptyStrings(idParts)

	if len(idParts) != 0 && len(idParts) != 1 {
		expectedIdentifier := "Expected import identifier with format: ''"
		expectedIdentifier += " or '<device>'"
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("%s. Got: %q", expectedIdentifier, req.ID),
		)
		return
	}
	if len(idParts) == 1 {
		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("device"), idParts[len(idParts)-1])...)
	}

	// construct path for 'id' attribute
	var state ErrorDisableRecovery
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), state.getPath())...)

	helpers.SetFlagImporting(ctx, true, resp.Private, &resp.Diagnostics)
}

// End of section. //template:end import
