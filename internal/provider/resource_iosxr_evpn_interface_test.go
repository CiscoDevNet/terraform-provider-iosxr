// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrEVPNInterface(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "interface_name", "Bundle-Ether12"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "core_isolation_group", "11"))
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_identifier_type_zero_bytes_1", "01"))
	}
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_identifier_type_zero_bytes_23", "0100"))
	}
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_identifier_type_zero_bytes_45", "0100"))
	}
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_identifier_type_zero_bytes_67", "0100"))
	}
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_identifier_type_zero_bytes_89", "0100"))
	}
	if os.Getenv("IOSXR_VERSION_7_9_1") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_identifier_type_zero_esi", "01.00.01.01.00.00.00.01.1"))
	}
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_load_balancing_mode_all_active", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_load_balancing_mode_port_active", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_load_balancing_mode_single_active", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_evpn_interface.test", "ethernet_segment_load_balancing_mode_single_flow_active", "false"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrEVPNInterfaceConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrEVPNInterfaceConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:  "iosxr_evpn_interface.test",
		ImportState:   true,
		ImportStateId: "Bundle-Ether12",
		Check:         resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

func testAccIosxrEVPNInterfaceConfig_minimum() string {
	config := `resource "iosxr_evpn_interface" "test" {` + "\n"
	config += `	interface_name = "Bundle-Ether12"` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrEVPNInterfaceConfig_all() string {
	config := `resource "iosxr_evpn_interface" "test" {` + "\n"
	config += `	interface_name = "Bundle-Ether12"` + "\n"
	config += `	core_isolation_group = 11` + "\n"
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		config += `	ethernet_segment_identifier_type_zero_bytes_1 = "01"` + "\n"
	}
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		config += `	ethernet_segment_identifier_type_zero_bytes_23 = "0100"` + "\n"
	}
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		config += `	ethernet_segment_identifier_type_zero_bytes_45 = "0100"` + "\n"
	}
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		config += `	ethernet_segment_identifier_type_zero_bytes_67 = "0100"` + "\n"
	}
	if os.Getenv("IOSXR_VERSION_7_6_1") != "" {
		config += `	ethernet_segment_identifier_type_zero_bytes_89 = "0100"` + "\n"
	}
	if os.Getenv("IOSXR_VERSION_7_9_1") != "" {
		config += `	ethernet_segment_identifier_type_zero_esi = "01.00.01.01.00.00.00.01.1"` + "\n"
	}
	config += `	ethernet_segment_load_balancing_mode_all_active = false` + "\n"
	config += `	ethernet_segment_load_balancing_mode_port_active = false` + "\n"
	config += `	ethernet_segment_load_balancing_mode_single_active = true` + "\n"
	config += `	ethernet_segment_load_balancing_mode_single_flow_active = false` + "\n"
	config += `}` + "\n"
	return config
}
