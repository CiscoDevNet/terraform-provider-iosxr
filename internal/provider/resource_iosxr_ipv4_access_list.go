// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"regexp"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

func NewIPv4AccessListResource() resource.Resource {
	return &IPv4AccessListResource{}
}

type IPv4AccessListResource struct {
	client *client.Client
}

func (r *IPv4AccessListResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipv4_access_list"
}

func (r *IPv4AccessListResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the IPv4 Access List configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the object.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"access_list_name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Access list name - maximum 64 characters").String,
				Required:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 64),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"sequences": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("access list entry").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"sequence_number": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Sequence number for this entry").AddIntegerRangeDescription(1, 2147483643).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 2147483643),
							},
						},
						"remark": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Comment for access list").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(0, 255),
							},
						},
						"permit_protocol": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("An IPv4 Protocol").String,
							Optional:            true,
						},
						"permit_eq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with exact protocol numbers").String,
							Optional:            true,
						},
						"permit_igmp_type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match on IGMP message").String,
							Optional:            true,
						},
						"permit_precedence": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match packets with given precedence").String,
							Optional:            true,
						},
						"permit_fragment_type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Fragment type for a packet").AddStringEnumDescription("dont-fragment", "dont-fragment first-fragment", "dont-fragment is-fragment", "dont-fragment last-fragment", "first-fragment", "is-fragment", "last-fragment").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("dont-fragment", "dont-fragment first-fragment", "dont-fragment is-fragment", "dont-fragment last-fragment", "first-fragment", "is-fragment", "last-fragment"),
							},
						},
						"permit_fragments": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Check non-initial fragments").String,
							Optional:            true,
						},
						"permit_counter": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("counter for this ACE").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"permit_default": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use specified default nexthop on match against this entry").String,
							Optional:            true,
						},
						"permit_capture": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Capture matched packet").String,
							Optional:            true,
						},
						"permit_range_start_protocol": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("An IPv4 Protocol").String,
							Optional:            true,
						},
						"permit_range_end_protocol": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("An IPv4 Protocol").String,
							Optional:            true,
						},
						"permit_source_address": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Source IP address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"permit_source_wildcard_mask": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Source IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"permit_source_prefix_length": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Source IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.").AddIntegerRangeDescription(0, 32).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 32),
							},
						},
						"permit_source_any": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Any source host").String,
							Optional:            true,
						},
						"permit_source_host": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("A single source host").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"permit_source_net_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("IPv4 source network object group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"permit_source_port_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("source port object group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"permit_source_port_eq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets on a given port number").String,
							Optional:            true,
						},
						"permit_source_port_gt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater port number").String,
							Optional:            true,
						},
						"permit_source_port_lt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower port number").String,
							Optional:            true,
						},
						"permit_source_port_neq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given port").String,
							Optional:            true,
						},
						"permit_source_port_range_start": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Port number").String,
							Optional:            true,
						},
						"permit_source_port_range_end": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Port number").String,
							Optional:            true,
						},
						"permit_destination_address": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Destination IP address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"permit_destination_wildcard_mask": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Destination IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"permit_destination_prefix_length": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Destination IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.").AddIntegerRangeDescription(0, 32).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 32),
							},
						},
						"permit_destination_any": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Any destination host").String,
							Optional:            true,
						},
						"permit_destination_host": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("A single destination host").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"permit_destination_net_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("IPv4 destination network object group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"permit_destination_port_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("destination port object group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"permit_destination_port_eq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets on a given port number").String,
							Optional:            true,
						},
						"permit_destination_port_gt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater port number").String,
							Optional:            true,
						},
						"permit_destination_port_lt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower port number").String,
							Optional:            true,
						},
						"permit_destination_port_neq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given port").String,
							Optional:            true,
						},
						"permit_destination_port_range_start": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Port number").String,
							Optional:            true,
						},
						"permit_destination_port_range_end": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Port number").String,
							Optional:            true,
						},
						"permit_icmp_message_type_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("ICMP message type").AddStringEnumDescription("AdministrativelyProhibited", "AlternateAddress", "ConversionError", "DODHostProhibited", "DODNetProhibited", "Echo", "EchoReply", "GeneralParameterProblem", "HostIsolated", "HostPrecedenceUnreachable", "HostRedirect", "HostTOSRedirect", "HostTOSUnreachable", "HostUnknown", "HostUnreachable", "InformationReply", "InformationRequest", "MaskReply", "MaskRequest", "MobileRedirect", "NetTOSRedirect", "NetTOSUnreachable", "NetworkRedirect", "NetworkUnknown", "NetworkUnreachable", "NoRoomForOption", "OptionMissing", "PacketTooBig", "ParameterProblem", "PortUnreachable", "PrecedenceUnreachable", "ProtocolUnreachable", "ReassemblyTimeout", "Redirect", "RouterAdvertisement", "RouterSolicitation", "SourceQuench", "SourceRouteFailed", "TTLExceeded", "TimeExceeded", "TimestampReply", "TimestampRequest", "Traceroute", "Unreachable").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("AdministrativelyProhibited", "AlternateAddress", "ConversionError", "DODHostProhibited", "DODNetProhibited", "Echo", "EchoReply", "GeneralParameterProblem", "HostIsolated", "HostPrecedenceUnreachable", "HostRedirect", "HostTOSRedirect", "HostTOSUnreachable", "HostUnknown", "HostUnreachable", "InformationReply", "InformationRequest", "MaskReply", "MaskRequest", "MobileRedirect", "NetTOSRedirect", "NetTOSUnreachable", "NetworkRedirect", "NetworkUnknown", "NetworkUnreachable", "NoRoomForOption", "OptionMissing", "PacketTooBig", "ParameterProblem", "PortUnreachable", "PrecedenceUnreachable", "ProtocolUnreachable", "ReassemblyTimeout", "Redirect", "RouterAdvertisement", "RouterSolicitation", "SourceQuench", "SourceRouteFailed", "TTLExceeded", "TimeExceeded", "TimestampReply", "TimestampRequest", "Traceroute", "Unreachable"),
							},
						},
						"permit_icmp_message_type": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ICMP message type").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"permit_icmp_message_code": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ICMP message code").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"permit_dscp": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("").String,
							Optional:            true,
						},
						"permit_dscp_eq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets on a given DSCP value").String,
							Optional:            true,
						},
						"permit_dscp_gt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater DSCP value").String,
							Optional:            true,
						},
						"permit_dscp_lt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower DSCP value").String,
							Optional:            true,
						},
						"permit_dscp_neq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given DSCP value").String,
							Optional:            true,
						},
						"permit_dscp_range_start": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("DSCP value").String,
							Optional:            true,
						},
						"permit_dscp_range_end": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("DSCP value").String,
							Optional:            true,
						},
						"permit_packet_length_eq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a given value").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"permit_packet_length_gt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater value").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"permit_packet_length_lt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower value").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"permit_packet_length_neq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given value").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"permit_packet_length_range_start": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Packet length start").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"permit_packet_length_range_end": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Packet length end").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"permit_ttl_eq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a given value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"permit_ttl_gt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"permit_ttl_lt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"permit_ttl_neq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"permit_ttl_range_start": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ttl range lower value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"permit_ttl_range_end": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ttl range higher value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"permit_fragment_offset_eq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a given value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"permit_fragment_offset_gt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"permit_fragment_offset_lt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"permit_fragment_offset_neq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"permit_fragment_offset_range_start": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("fragment-offset value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"permit_fragment_offset_range_end": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("fragment-offset value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"permit_police_value": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Police value").AddIntegerRangeDescription(0, 4294967295).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 4294967295),
							},
						},
						"permit_police_unit": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Unit for police value. Currently only pps (packets per second) is supported").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`pps|bps|kbps|mbps|gbps`), ""),
							},
						},
						"permit_police_peak_rate": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Police peak-rate value on this entry").AddIntegerRangeDescription(0, 4294967295).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 4294967295),
							},
						},
						"permit_police_peak_unit": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Unit for peak-rate value. Currently only pps (packets per second) is supported").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`pps|bps|kbps|mbps|gbps`), ""),
							},
						},
						"permit_police_priority": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Set Priority option on this entry").AddStringEnumDescription("critical", "high", "low", "medium").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("critical", "high", "low", "medium"),
							},
						},
						"permit_nexthop1_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("nexthop1 ipv4 address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"permit_nexthop1_track": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specific TRACK Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"permit_nexthop1_vrf": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specific VRF Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"permit_nexthop2_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("nexthop2 ipv4 address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"permit_nexthop2_track": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specific TRACK Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"permit_nexthop2_vrf": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specific VRF Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"permit_nexthop3_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("nexthop3 ipv4 address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"permit_nexthop3_track": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specific TRACK Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"permit_nexthop3_vrf": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specific VRF Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"permit_log": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Log matches against this entry").String,
							Optional:            true,
						},
						"permit_log_input": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Log matches against this entry, including input interface").String,
							Optional:            true,
						},
						"permit_set_qos_group": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("qos-group number").AddIntegerRangeDescription(0, 512).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 512),
							},
						},
						"permit_set_ttl": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Set ttl value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_eq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with exact protocol numbers").String,
							Optional:            true,
						},
						"deny_protocol": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("An IPv4 Protocol").String,
							Optional:            true,
						},
						"deny_source_address": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Source IP address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"deny_source_wildcard_mask": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Source IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"deny_source_prefix_length": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Source IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.").AddIntegerRangeDescription(0, 32).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 32),
							},
						},
						"deny_source_any": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Any source host").String,
							Optional:            true,
						},
						"deny_source_host": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("A single source host").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"deny_source_net_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("IPv4 source network object group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"deny_source_port_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("source port object group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"deny_source_port_eq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets on a given port number").String,
							Optional:            true,
						},
						"deny_source_port_gt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater port number").String,
							Optional:            true,
						},
						"deny_source_port_lt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower port number").String,
							Optional:            true,
						},
						"deny_source_port_neq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given port").String,
							Optional:            true,
						},
						"deny_source_port_range_start": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Port number").String,
							Optional:            true,
						},
						"deny_source_port_range_end": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Port number").String,
							Optional:            true,
						},
						"deny_destination_address": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Destination IP address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"deny_destination_wildcard_mask": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Destination IP address wildcard mask. Either wildcard-mask or prefix-length can be used along with address.").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"deny_destination_prefix_length": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Destination IP address prefix length. Either wildcard-mask or prefix-length can be used along with address.").AddIntegerRangeDescription(0, 32).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 32),
							},
						},
						"deny_destination_any": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Any destination host").String,
							Optional:            true,
						},
						"deny_destination_host": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("A single destination host").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"deny_destination_net_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("IPv4 destination network object group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"deny_destination_port_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("destination port object group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"deny_destination_port_eq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets on a given port number").String,
							Optional:            true,
						},
						"deny_destination_port_gt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater port number").String,
							Optional:            true,
						},
						"deny_destination_port_lt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower port number").String,
							Optional:            true,
						},
						"deny_destination_port_neq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given port").String,
							Optional:            true,
						},
						"deny_destination_port_range_start": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Port number").String,
							Optional:            true,
						},
						"deny_destination_port_range_end": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Port number").String,
							Optional:            true,
						},
						"deny_igmp_type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match on IGMP message").String,
							Optional:            true,
						},
						"deny_precedence": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match packets with given precedence").String,
							Optional:            true,
						},
						"deny_fragment_type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Fragment type for a packet").AddStringEnumDescription("dont-fragment", "dont-fragment first-fragment", "dont-fragment is-fragment", "dont-fragment last-fragment", "first-fragment", "is-fragment", "last-fragment").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("dont-fragment", "dont-fragment first-fragment", "dont-fragment is-fragment", "dont-fragment last-fragment", "first-fragment", "is-fragment", "last-fragment"),
							},
						},
						"deny_fragments": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Check non-initial fragments").String,
							Optional:            true,
						},
						"deny_counter": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("counter for this ACE").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
						},
						"deny_default": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use specified default nexthop on match against this entry").String,
							Optional:            true,
						},
						"deny_capture": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Capture matched packet").String,
							Optional:            true,
						},
						"deny_icmp_off": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Do not generate the ICMP message").String,
							Optional:            true,
						},
						"deny_icmp_on": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Generate the ICMP message").String,
							Optional:            true,
						},
						"deny_range_start_protocol": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("An IPv4 Protocol").String,
							Optional:            true,
						},
						"deny_range_end_protocol": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("An IPv4 Protocol").String,
							Optional:            true,
						},
						"deny_icmp_message_type_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("ICMP message type").AddStringEnumDescription("AdministrativelyProhibited", "AlternateAddress", "ConversionError", "DODHostProhibited", "DODNetProhibited", "Echo", "EchoReply", "GeneralParameterProblem", "HostIsolated", "HostPrecedenceUnreachable", "HostRedirect", "HostTOSRedirect", "HostTOSUnreachable", "HostUnknown", "HostUnreachable", "InformationReply", "InformationRequest", "MaskReply", "MaskRequest", "MobileRedirect", "NetTOSRedirect", "NetTOSUnreachable", "NetworkRedirect", "NetworkUnknown", "NetworkUnreachable", "NoRoomForOption", "OptionMissing", "PacketTooBig", "ParameterProblem", "PortUnreachable", "PrecedenceUnreachable", "ProtocolUnreachable", "ReassemblyTimeout", "Redirect", "RouterAdvertisement", "RouterSolicitation", "SourceQuench", "SourceRouteFailed", "TTLExceeded", "TimeExceeded", "TimestampReply", "TimestampRequest", "Traceroute", "Unreachable").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("AdministrativelyProhibited", "AlternateAddress", "ConversionError", "DODHostProhibited", "DODNetProhibited", "Echo", "EchoReply", "GeneralParameterProblem", "HostIsolated", "HostPrecedenceUnreachable", "HostRedirect", "HostTOSRedirect", "HostTOSUnreachable", "HostUnknown", "HostUnreachable", "InformationReply", "InformationRequest", "MaskReply", "MaskRequest", "MobileRedirect", "NetTOSRedirect", "NetTOSUnreachable", "NetworkRedirect", "NetworkUnknown", "NetworkUnreachable", "NoRoomForOption", "OptionMissing", "PacketTooBig", "ParameterProblem", "PortUnreachable", "PrecedenceUnreachable", "ProtocolUnreachable", "ReassemblyTimeout", "Redirect", "RouterAdvertisement", "RouterSolicitation", "SourceQuench", "SourceRouteFailed", "TTLExceeded", "TimeExceeded", "TimestampReply", "TimestampRequest", "Traceroute", "Unreachable"),
							},
						},
						"deny_icmp_message_type": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ICMP message type").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_icmp_message_code": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ICMP message code").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_dscp": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("").String,
							Optional:            true,
						},
						"deny_dscp_eq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets on a given DSCP value").String,
							Optional:            true,
						},
						"deny_dscp_gt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater DSCP value").String,
							Optional:            true,
						},
						"deny_dscp_lt": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower DSCP value").String,
							Optional:            true,
						},
						"deny_dscp_neq": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given DSCP value").String,
							Optional:            true,
						},
						"deny_dscp_range_start": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("DSCP value").String,
							Optional:            true,
						},
						"deny_dscp_range_end": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("DSCP value").String,
							Optional:            true,
						},
						"deny_packet_length_eq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a given value").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"deny_packet_length_gt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater value").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"deny_packet_length_lt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower value").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"deny_packet_length_neq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given value").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"deny_packet_length_range_start": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Packet length start").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"deny_packet_length_range_end": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Packet length end").AddIntegerRangeDescription(0, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 65535),
							},
						},
						"deny_ttl_eq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a given value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_ttl_gt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_ttl_lt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_ttl_neq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_ttl_range_start": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ttl range lower value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_ttl_range_end": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("ttl range higher value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
						"deny_fragment_offset_eq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a given value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"deny_fragment_offset_gt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packet with a greater value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"deny_fragment_offset_lt": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets with a lower value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"deny_fragment_offset_neq": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Match only packets not on a given value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"deny_fragment_offset_range_start": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("fragment-offset value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"deny_fragment_offset_range_end": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("fragment-offset value").AddIntegerRangeDescription(0, 8191).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 8191),
							},
						},
						"deny_police_value": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Police value").AddIntegerRangeDescription(0, 4294967295).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 4294967295),
							},
						},
						"deny_police_unit": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Unit for police value. Currently only pps (packets per second) is supported").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`pps|bps|kbps|mbps|gbps`), ""),
							},
						},
						"deny_police_peak_rate": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Police peak-rate value on this entry").AddIntegerRangeDescription(0, 4294967295).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 4294967295),
							},
						},
						"deny_police_peak_unit": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Unit for peak-rate value. Currently only pps (packets per second) is supported").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`pps|bps|kbps|mbps|gbps`), ""),
							},
						},
						"deny_police_priority": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Set Priority option on this entry").AddStringEnumDescription("critical", "high", "low", "medium").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("critical", "high", "low", "medium"),
							},
						},
						"deny_nexthop1_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("nexthop1 ipv4 address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"deny_nexthop1_track": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specific TRACK Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"deny_nexthop1_vrf": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specific VRF Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"deny_nexthop2_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("nexthop2 ipv4 address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"deny_nexthop2_track": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specific TRACK Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"deny_nexthop2_vrf": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specific VRF Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"deny_nexthop3_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("nexthop3 ipv4 address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
							},
						},
						"deny_nexthop3_track": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specific TRACK Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"deny_nexthop3_vrf": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specific VRF Name for this nexthop").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"deny_log": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Log matches against this entry").String,
							Optional:            true,
						},
						"deny_log_input": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Log matches against this entry, including input interface").String,
							Optional:            true,
						},
						"deny_set_qos_group": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("qos-group number").AddIntegerRangeDescription(0, 512).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 512),
							},
						},
						"deny_set_ttl": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Set ttl value").AddIntegerRangeDescription(0, 255).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
					},
				},
			},
		},
	}
}

func (r *IPv4AccessListResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*client.Client)
}

func (r *IPv4AccessListResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan IPv4AccessList

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var ops []client.SetOperation

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	// Create object
	body := plan.toBody(ctx)
	ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	_, diags = r.client.Set(ctx, plan.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Id = types.StringValue(plan.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *IPv4AccessListResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state IPv4AccessList

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	import_ := false
	if state.Id.ValueString() == "" {
		import_ = true
		state.Id = types.StringValue(state.getPath())
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.ValueString()))

	getResp, diags := r.client.Get(ctx, state.Device.ValueString(), state.Id.ValueString())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	respBody := getResp.Notification[0].Update[0].Val.GetJsonIetfVal()
	if import_ {
		state.fromBody(ctx, respBody)
	} else {
		state.updateFromBody(ctx, respBody)
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *IPv4AccessListResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state IPv4AccessList

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var ops []client.SetOperation

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	// Update object
	body := plan.toBody(ctx)
	ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

	deletedListItems := plan.getDeletedItems(ctx, state)
	tflog.Debug(ctx, fmt.Sprintf("Removed items to delete: %+v", deletedListItems))

	for _, i := range deletedListItems {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	_, diags = r.client.Set(ctx, plan.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *IPv4AccessListResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state IPv4AccessList

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.ValueString()))
	var ops []client.SetOperation
	deleteMode := "all"

	if deleteMode == "all" {
		ops = append(ops, client.SetOperation{Path: state.Id.ValueString(), Body: "", Operation: client.Delete})
	} else {
		deletePaths := state.getDeletePaths(ctx)
		tflog.Debug(ctx, fmt.Sprintf("Paths to delete: %+v", deletePaths))

		for _, i := range deletePaths {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}
	}

	_, diags = r.client.Set(ctx, state.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

func (r *IPv4AccessListResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idParts := strings.Split(req.ID, ",")

	if len(idParts) != 1 {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("Expected import identifier with format: <access_list_name>. Got: %q", req.ID),
		)
		return
	}
	value0 := idParts[0]
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("access_list_name"), value0)...)
}
