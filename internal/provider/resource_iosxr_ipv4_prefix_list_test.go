// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrIPv4PrefixList(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "prefix_list_name", "LIST1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "sequences.0.sequence_number", "4096"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "sequences.0.remark", "REMARK"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "sequences.0.permission", "deny"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "sequences.0.prefix", "10.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "sequences.0.mask", "255.255.0.0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "sequences.0.match_prefix_length_eq", "12"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "sequences.0.match_prefix_length_ge", "22"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ipv4_prefix_list.test", "sequences.0.match_prefix_length_le", "32"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrIPv4PrefixListConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrIPv4PrefixListConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:  "iosxr_ipv4_prefix_list.test",
		ImportState:   true,
		ImportStateId: "LIST1",
		Check:         resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

func testAccIosxrIPv4PrefixListConfig_minimum() string {
	config := `resource "iosxr_ipv4_prefix_list" "test" {` + "\n"
	config += `	prefix_list_name = "LIST1"` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrIPv4PrefixListConfig_all() string {
	config := `resource "iosxr_ipv4_prefix_list" "test" {` + "\n"
	config += `	prefix_list_name = "LIST1"` + "\n"
	config += `	sequences = [{` + "\n"
	config += `		sequence_number = 4096` + "\n"
	config += `		remark = "REMARK"` + "\n"
	config += `		permission = "deny"` + "\n"
	config += `		prefix = "10.1.1.1"` + "\n"
	config += `		mask = "255.255.0.0"` + "\n"
	config += `		match_prefix_length_eq = 12` + "\n"
	config += `		match_prefix_length_ge = 22` + "\n"
	config += `		match_prefix_length_le = 32` + "\n"
	config += `		}]` + "\n"
	config += `}` + "\n"
	return config
}
