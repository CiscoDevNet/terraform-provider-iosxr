// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxrL2VPNPWClass(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "name", "PWC1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls_transport_mode_ethernet", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls_transport_mode_vlan", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls_transport_mode_passthrough", "false"))
	if os.Getenv("NCS") != "" || os.Getenv("XRV9K") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls_load_balancing_pw_label", "true"))
	}
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls_load_balancing_flow_label_both", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls_load_balancing_flow_label_both_static", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls_load_balancing_flow_label_code_one7", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_pw_class.test", "encapsulation_mpls_load_balancing_flow_label_code_one7_disable", "true"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrL2VPNPWClassPrerequisitesConfig + testAccIosxrL2VPNPWClassConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrL2VPNPWClassPrerequisitesConfig + testAccIosxrL2VPNPWClassConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:      "iosxr_l2vpn_pw_class.test",
		ImportState:       true,
		ImportStateIdFunc: iosxrL2VPNPWClassImportStateIdFunc("iosxr_l2vpn_pw_class.test"),
		Check:             resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxrL2VPNPWClassImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {
		primary := s.RootModule().Resources[resourceName].Primary
		Name := primary.Attributes["name"]

		return fmt.Sprintf("%s", Name), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccIosxrL2VPNPWClassPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-l2vpn-cfg:/l2vpn"
	attributes = {
	}
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxrL2VPNPWClassConfig_minimum() string {
	config := `resource "iosxr_l2vpn_pw_class" "test" {` + "\n"
	config += `	name = "PWC1"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxrL2VPNPWClassConfig_all() string {
	config := `resource "iosxr_l2vpn_pw_class" "test" {` + "\n"
	config += `	name = "PWC1"` + "\n"
	config += `	encapsulation_mpls = true` + "\n"
	config += `	encapsulation_mpls_transport_mode_ethernet = true` + "\n"
	config += `	encapsulation_mpls_transport_mode_vlan = false` + "\n"
	config += `	encapsulation_mpls_transport_mode_passthrough = false` + "\n"
	if os.Getenv("NCS") != "" || os.Getenv("XRV9K") != "" {
		config += `	encapsulation_mpls_load_balancing_pw_label = true` + "\n"
	}
	config += `	encapsulation_mpls_load_balancing_flow_label_both = true` + "\n"
	config += `	encapsulation_mpls_load_balancing_flow_label_both_static = true` + "\n"
	config += `	encapsulation_mpls_load_balancing_flow_label_code_one7 = true` + "\n"
	config += `	encapsulation_mpls_load_balancing_flow_label_code_one7_disable = true` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
