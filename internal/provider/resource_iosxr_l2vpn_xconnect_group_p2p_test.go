// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxrL2VPNXconnectGroupP2P(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_xconnect_group_p2p.test", "p2p_xconnect_name", "XC"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_xconnect_group_p2p.test", "description", "My P2P Description"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_xconnect_group_p2p.test", "interfaces.0.interface_name", "GigabitEthernet0/0/0/2"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_xconnect_group_p2p.test", "neighbor_evpn_evi_segment_routing_services.0.vpn_id", "4600"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_xconnect_group_p2p.test", "neighbor_evpn_evi_segment_routing_services.0.service_id", "600"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_l2vpn_xconnect_group_p2p.test", "neighbor_evpn_evi_segment_routing_services.0.segment_routing_srv6_locator", "LOC11"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrL2VPNXconnectGroupP2PPrerequisitesConfig + testAccIosxrL2VPNXconnectGroupP2PConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrL2VPNXconnectGroupP2PPrerequisitesConfig + testAccIosxrL2VPNXconnectGroupP2PConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:  "iosxr_l2vpn_xconnect_group_p2p.test",
		ImportState:   true,
		ImportStateId: "P2P,XC",
		Check:         resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccIosxrL2VPNXconnectGroupP2PPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-l2vpn-cfg:/l2vpn"
	attributes = {
	}
}

resource "iosxr_gnmi" "PreReq1" {
	path = "Cisco-IOS-XR-um-l2vpn-cfg:/l2vpn/xconnect/groups/group[group-name=P2P]"
	attributes = {
		"group-name" = "P2P"
	}
	depends_on = [iosxr_gnmi.PreReq0, ]
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxrL2VPNXconnectGroupP2PConfig_minimum() string {
	config := `resource "iosxr_l2vpn_xconnect_group_p2p" "test" {` + "\n"
	config += `	group_name = "P2P"` + "\n"
	config += `	p2p_xconnect_name = "XC"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxrL2VPNXconnectGroupP2PConfig_all() string {
	config := `resource "iosxr_l2vpn_xconnect_group_p2p" "test" {` + "\n"
	config += `	group_name = "P2P"` + "\n"
	config += `	p2p_xconnect_name = "XC"` + "\n"
	config += `	description = "My P2P Description"` + "\n"
	config += `	interfaces = [{` + "\n"
	config += `		interface_name = "GigabitEthernet0/0/0/2"` + "\n"
	config += `		}]` + "\n"
	config += `	neighbor_evpn_evi_segment_routing_services = [{` + "\n"
	config += `		vpn_id = 4600` + "\n"
	config += `		service_id = 600` + "\n"
	config += `		segment_routing_srv6_locator = "LOC11"` + "\n"
	config += `		}]` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
