// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"regexp"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

func NewNTPResource() resource.Resource {
	return &NTPResource{}
}

type NTPResource struct {
	client *client.Client
}

func (r *NTPResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ntp"
}

func (r *NTPResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the NTP configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the object.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"delete_mode": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is. Default value is `all`.").AddStringEnumDescription("all", "attributes").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("all", "attributes"),
				},
			},
			"ipv4_dscp": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Set IP DSCP (DiffServ CodePoint)").String,
				Optional:            true,
			},
			"ipv4_precedence": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Set precedence").AddStringEnumDescription("critical", "flash", "flash-override", "immediate", "internet", "network", "priority", "routine").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("critical", "flash", "flash-override", "immediate", "internet", "network", "priority", "routine"),
				},
			},
			"ipv6_dscp": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Set IP DSCP (DiffServ CodePoint)").String,
				Optional:            true,
			},
			"ipv6_precedence": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Set precedence").AddStringEnumDescription("critical", "flash", "flash-override", "immediate", "internet", "network", "priority", "routine").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("critical", "flash", "flash-override", "immediate", "internet", "network", "priority", "routine"),
				},
			},
			"access_group_ipv6_peer": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Provide full access").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 800),
					stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
				},
			},
			"access_group_ipv6_query_only": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Allow only control queries").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 800),
					stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
				},
			},
			"access_group_ipv6_serve": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Provide server and query access").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 800),
					stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
				},
			},
			"access_group_ipv6_serve_only": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Provide only server access").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 800),
					stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
				},
			},
			"access_group_ipv4_peer": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Provide full access").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 800),
					stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
				},
			},
			"access_group_ipv4_query_only": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Allow only control queries").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 800),
					stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
				},
			},
			"access_group_ipv4_serve": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Provide server and query access").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 800),
					stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
				},
			},
			"access_group_ipv4_serve_only": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Provide only server access").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 800),
					stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
				},
			},
			"access_group_vrfs": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Specify non-default VRF").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"vrf_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify non-default VRF").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 800),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv6_peer": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Provide full access").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv6_query_only": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Allow only control queries").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv6_serve": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Provide server and query access").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv6_serve_only": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Provide only server access").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv4_peer": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Provide full access").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv4_query_only": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Allow only control queries").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv4_serve": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Provide server and query access").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv4_serve_only": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Provide only server access").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
					},
				},
			},
			"authenticate": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Authenticate time sources").String,
				Optional:            true,
			},
			"authentication_keys": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Authentication key for trusted time sources").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key_number": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Authentication key for trusted time sources").AddIntegerRangeDescription(1, 65535).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
						"md5_encrypted": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify an encrypted key").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(!.+)|([^!].+)`), ""),
							},
						},
					},
				},
			},
			"broadcastdelay": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Estimated round-trip delay").AddIntegerRangeDescription(1, 999999).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 999999),
				},
			},
			"max_associations": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Set maximum number of associations").AddIntegerRangeDescription(0, 4294967295).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(0, 4294967295),
				},
			},
			"trusted_keys": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Key numbers for trusted time sources").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key_number": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Key numbers for trusted time sources").AddIntegerRangeDescription(1, 65535).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
					},
				},
			},
			"update_calendar": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Periodically update calendar with NTP time").String,
				Optional:            true,
			},
			"log_internal_sync": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Logs internal synchronization changes").String,
				Optional:            true,
			},
			"source_interface_name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("default interface").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
				},
			},
			"source_vrfs": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Specify non-default VRF").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"vrf_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify non-default VRF").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"interface_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("default interface for the VRF").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
							},
						},
					},
				},
			},
			"passive": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable the passive associations").String,
				Optional:            true,
			},
			"cmac_authentication_keys": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("CMAC Authentication key for trusted time sources").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key_number": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Authentication key for trusted time sources").AddIntegerRangeDescription(1, 65535).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
						"cmac_encrypted": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify an encrypted key").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(!.+)|([^!].+)`), ""),
							},
						},
					},
				},
			},
			"hmac_sha1_authentication_keys": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("HMA-SHA1 Authentication key for trusted time sources").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key_number": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Authentication key for trusted time sources").AddIntegerRangeDescription(1, 65535).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
						"hmac_sha1_encrypted": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify an encrypted key").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(!.+)|([^!].+)`), ""),
							},
						},
					},
				},
			},
			"hmac_sha2_authentication_keys": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("HMA-SHA2 Authentication key for trusted time sources").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key_number": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Authentication key for trusted time sources").AddIntegerRangeDescription(1, 65535).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
						"hmac_sha2_encrypted": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify an encrypted key").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(!.+)|([^!].+)`), ""),
							},
						},
					},
				},
			},
			"interfaces": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure NTP on an interface").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"interface_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure NTP on an interface").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
							},
						},
						"broadcast_destination": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure broadcast destination address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"broadcast_key": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure broadcast authentication key").AddIntegerRangeDescription(1, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
						"broadcast_version": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure NTP version").AddIntegerRangeDescription(2, 4).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(2, 4),
							},
						},
						"disable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Disable NTP").String,
							Optional:            true,
						},
					},
				},
			},
			"interface_vrfs": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Specify non-default VRF").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"vrf_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify non-default VRF").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 800),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"interfaces": schema.ListNestedAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure NTP on an interface").String,
							Optional:            true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"interface_name": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure NTP on an interface").String,
										Required:            true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
										},
									},
									"broadcast_client": schema.BoolAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Listen to NTP broadcasts").String,
										Optional:            true,
									},
									"broadcast_destination": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure broadcast destination address").String,
										Optional:            true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
											stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
										},
									},
									"broadcast_key": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure broadcast authentication key").AddIntegerRangeDescription(1, 65535).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(1, 65535),
										},
									},
									"broadcast_version": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure NTP version").AddIntegerRangeDescription(2, 4).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(2, 4),
										},
									},
									"disable": schema.BoolAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Disable NTP").String,
										Optional:            true,
									},
								},
							},
						},
					},
				},
			},
			"primary_stratum_number": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use NTP as clock source with stratum number <n>").AddIntegerRangeDescription(1, 15).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 15),
				},
			},
			"primary_reference_clock": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use a primary reference clock as clock source").String,
				Optional:            true,
			},
			"ipv4_peers_servers": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Specify IPv4 address").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Peer/server address").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
							},
						},
						"type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify peer/server").AddStringEnumDescription("peer", "server").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("peer", "server"),
							},
						},
						"version": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure NTP version").AddIntegerRangeDescription(2, 4).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(2, 4),
							},
						},
						"key": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure peer authentication key").AddIntegerRangeDescription(1, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
						"minpoll": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure minimum polling rate").AddIntegerRangeDescription(4, 5).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(4, 5),
							},
						},
						"maxpoll": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure maximum polling rate").AddIntegerRangeDescription(4, 9).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(4, 9),
							},
						},
						"prefer": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Prefer this peer when possible").String,
							Optional:            true,
						},
						"burst": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use burst mode").String,
							Optional:            true,
						},
						"iburst": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use initial burst mode").String,
							Optional:            true,
						},
						"source": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Interface for source address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
							},
						},
					},
				},
			},
			"ipv6_peers_servers": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Specify IPv6 address").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Peer/server address").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9a-fA-F:\.]*`), ""),
							},
						},
						"type": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify peer/server").AddStringEnumDescription("peer", "server").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("peer", "server"),
							},
						},
						"version": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure NTP version").AddIntegerRangeDescription(2, 4).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(2, 4),
							},
						},
						"key": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure peer authentication key").AddIntegerRangeDescription(1, 65535).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
						"minpoll": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure minimum polling rate").AddIntegerRangeDescription(4, 5).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(4, 5),
							},
						},
						"maxpoll": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Configure maximum polling rate").AddIntegerRangeDescription(4, 9).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(4, 9),
							},
						},
						"prefer": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Prefer this peer when possible").String,
							Optional:            true,
						},
						"burst": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use burst mode").String,
							Optional:            true,
						},
						"iburst": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use initial burst mode").String,
							Optional:            true,
						},
						"source": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Interface for source address").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
							},
						},
						"ipv6_address": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("IPv6 address (must be same as key node 'address')").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?`), ""),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9a-fA-F:\.]*`), ""),
							},
						},
					},
				},
			},
			"peers_servers_vrfs": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Specify non-default VRF").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"vrf_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify non-default VRF").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"ipv4_peers_servers": schema.ListNestedAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify IPv4 address").String,
							Optional:            true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"address": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Peer/server address").String,
										Required:            true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
											stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
										},
									},
									"type": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Specify peer/server").AddStringEnumDescription("peer", "server").String,
										Required:            true,
										Validators: []validator.String{
											stringvalidator.OneOf("peer", "server"),
										},
									},
									"version": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure NTP version").AddIntegerRangeDescription(2, 4).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(2, 4),
										},
									},
									"key": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure peer authentication key").AddIntegerRangeDescription(1, 65535).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(1, 65535),
										},
									},
									"minpoll": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure minimum polling rate").AddIntegerRangeDescription(4, 5).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(4, 5),
										},
									},
									"maxpoll": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure maximum polling rate").AddIntegerRangeDescription(4, 9).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(4, 9),
										},
									},
									"prefer": schema.BoolAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Prefer this peer when possible").String,
										Optional:            true,
									},
									"burst": schema.BoolAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Use burst mode").String,
										Optional:            true,
									},
									"iburst": schema.BoolAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Use initial burst mode").String,
										Optional:            true,
									},
									"source": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Interface for source address").String,
										Optional:            true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
										},
									},
								},
							},
						},
						"ipv6_peers_servers": schema.ListNestedAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify IPv6 address").String,
							Optional:            true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"address": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Peer/server address").String,
										Required:            true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexp.MustCompile(`((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?`), ""),
											stringvalidator.RegexMatches(regexp.MustCompile(`(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?`), ""),
											stringvalidator.RegexMatches(regexp.MustCompile(`[0-9a-fA-F:\.]*`), ""),
										},
									},
									"type": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Specify peer/server").AddStringEnumDescription("peer", "server").String,
										Required:            true,
										Validators: []validator.String{
											stringvalidator.OneOf("peer", "server"),
										},
									},
									"version": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure NTP version").AddIntegerRangeDescription(2, 4).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(2, 4),
										},
									},
									"key": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure peer authentication key").AddIntegerRangeDescription(1, 65535).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(1, 65535),
										},
									},
									"minpoll": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure minimum polling rate").AddIntegerRangeDescription(4, 5).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(4, 5),
										},
									},
									"maxpoll": schema.Int64Attribute{
										MarkdownDescription: helpers.NewAttributeDescription("Configure maximum polling rate").AddIntegerRangeDescription(4, 9).String,
										Optional:            true,
										Validators: []validator.Int64{
											int64validator.Between(4, 9),
										},
									},
									"prefer": schema.BoolAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Prefer this peer when possible").String,
										Optional:            true,
									},
									"burst": schema.BoolAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Use burst mode").String,
										Optional:            true,
									},
									"iburst": schema.BoolAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Use initial burst mode").String,
										Optional:            true,
									},
									"source": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("Interface for source address").String,
										Optional:            true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
										},
									},
									"ipv6_address": schema.StringAttribute{
										MarkdownDescription: helpers.NewAttributeDescription("IPv6 address (must be same as key node 'address')").String,
										Required:            true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexp.MustCompile(`((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?`), ""),
											stringvalidator.RegexMatches(regexp.MustCompile(`(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?`), ""),
											stringvalidator.RegexMatches(regexp.MustCompile(`[0-9a-fA-F:\.]*`), ""),
										},
									},
								},
							},
						},
					},
				},
			},
			"admin_plane_version": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure NTP version").AddIntegerRangeDescription(1, 4).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 4),
				},
			},
			"admin_plane_key": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure peer authentication key").AddIntegerRangeDescription(1, 65535).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 65535),
				},
			},
			"admin_plane_minpoll": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure minimum polling rate").AddIntegerRangeDescription(4, 17).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(4, 17),
				},
			},
			"admin_plane_maxpoll": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure maximum polling rate").AddIntegerRangeDescription(4, 17).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(4, 17),
				},
			},
			"admin_plane_prefer": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Prefer this peer when possible").String,
				Optional:            true,
			},
			"admin_plane_burst": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use burst mode").String,
				Optional:            true,
			},
			"admin_plane_iburst": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use initial burst mode").String,
				Optional:            true,
			},
		},
	}
}

func (r *NTPResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*client.Client)
}

func (r *NTPResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan NTP

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var ops []client.SetOperation

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	// Create object
	body := plan.toBody(ctx)
	ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	_, diags = r.client.Set(ctx, plan.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Id = types.StringValue(plan.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *NTPResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state NTP

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	import_ := false
	if state.Id.ValueString() == "" {
		import_ = true
		state.Id = types.StringValue(state.getPath())
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.ValueString()))

	getResp, diags := r.client.Get(ctx, state.Device.ValueString(), state.Id.ValueString())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	respBody := getResp.Notification[0].Update[0].Val.GetJsonIetfVal()
	if import_ {
		state.fromBody(ctx, respBody)
	} else {
		state.updateFromBody(ctx, respBody)
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *NTPResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state NTP

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var ops []client.SetOperation

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	// Update object
	body := plan.toBody(ctx)
	ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

	deletedListItems := plan.getDeletedItems(ctx, state)
	tflog.Debug(ctx, fmt.Sprintf("Removed items to delete: %+v", deletedListItems))

	for _, i := range deletedListItems {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	_, diags = r.client.Set(ctx, plan.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *NTPResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state NTP

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.ValueString()))
	var ops []client.SetOperation
	deleteMode := "all"
	if state.DeleteMode.ValueString() == "all" {
		deleteMode = "all"
	} else if state.DeleteMode.ValueString() == "attributes" {
		deleteMode = "attributes"
	}

	if deleteMode == "all" {
		ops = append(ops, client.SetOperation{Path: state.Id.ValueString(), Body: "", Operation: client.Delete})
	} else {
		deletePaths := state.getDeletePaths(ctx)
		tflog.Debug(ctx, fmt.Sprintf("Paths to delete: %+v", deletePaths))

		for _, i := range deletePaths {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}
	}

	_, diags = r.client.Set(ctx, state.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

func (r *NTPResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), "")...)
}
