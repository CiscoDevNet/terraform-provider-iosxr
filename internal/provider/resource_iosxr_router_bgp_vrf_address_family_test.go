// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrRouterBGPVRFAddressFamily(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "af_name", "ipv4-unicast"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "additional_paths_send", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "additional_paths_send_disable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "additional_paths_receive", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "additional_paths_receive_disable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "additional_paths_selection_route_policy", "ADDITIONAL_PATHS_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "allocate_label_all", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "allocate_label_all_unlabeled_path", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "advertise_best_external", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "segment_routing_srv6_locator", "LocAlgo11"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "aggregate_addresses.0.address", "10.0.0.0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "aggregate_addresses.0.prefix", "8"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "aggregate_addresses.0.as_set", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "aggregate_addresses.0.as_confed_set", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "aggregate_addresses.0.summary_only", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "aggregate_addresses.0.description", "Aggregate route description"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "aggregate_addresses.0.set_tag", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "networks.0.address", "10.1.0.0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "networks.0.prefix", "16"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "networks.0.route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_ospf.0.router_tag", "OSPF1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_ospf.0.metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_ospf.0.multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_ospf.0.route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_eigrp.0.instance_name", "EIGRP1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_eigrp.0.match_internal", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_eigrp.0.match_internal_external", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_eigrp.0.metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_eigrp.0.multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_eigrp.0.route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_isis.0.instance_name", "ISIS1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_isis.0.level_1_level_2_level_1_inter_area", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_isis.0.metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_isis.0.multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_isis.0.route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_connected", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_connected_metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_connected_multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_connected_route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_static", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_static_metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_static_multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_static_route_policy", "REDISTRIBUTE_POLICY"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_rip", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_rip_metric", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_rip_multipath", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_address_family.test", "redistribute_rip_route_policy", "REDISTRIBUTE_POLICY"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrRouterBGPVRFAddressFamilyPrerequisitesConfig + testAccIosxrRouterBGPVRFAddressFamilyConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrRouterBGPVRFAddressFamilyPrerequisitesConfig + testAccIosxrRouterBGPVRFAddressFamilyConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:  "iosxr_router_bgp_vrf_address_family.test",
		ImportState:   true,
		ImportStateId: "65001,VRF1,ipv4-unicast",
		Check:         resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

const testAccIosxrRouterBGPVRFAddressFamilyPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies"
	attributes = {
	}
	lists = [
		{
			name = "route-policy"
			key = "route-policy-name"
			items = [
				{
					"route-policy-name" = "ROUTE_POLICY_1"
					"rpl-route-policy" = "route-policy ROUTE_POLICY_1\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "ADDITIONAL_PATHS_POLICY"
					"rpl-route-policy" = "route-policy ADDITIONAL_PATHS_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "ALLOCATE_LABEL_POLICY"
					"rpl-route-policy" = "route-policy ALLOCATE_LABEL_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "MULTIPATH_POLICY"
					"rpl-route-policy" = "route-policy MULTIPATH_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "REDISTRIBUTE_POLICY"
					"rpl-route-policy" = "route-policy REDISTRIBUTE_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "LABEL_MODE_POLICY"
					"rpl-route-policy" = "route-policy LABEL_MODE_POLICY\n  pass\nend-policy\n"
				},
				{
					"route-policy-name" = "SRv6_ALLOC_POLICY"
					"rpl-route-policy" = "route-policy SRv6_ALLOC_POLICY\n  pass\nend-policy\n"
				},
			]
		},
	]
}

resource "iosxr_gnmi" "PreReq1" {
	path = "Cisco-IOS-XR-um-vrf-cfg:/vrfs/vrf[vrf-name=VRF1]/Cisco-IOS-XR-um-router-bgp-cfg:rd/Cisco-IOS-XR-um-router-bgp-cfg:two-byte-as"
	attributes = {
		"two-byte-as-number" = "1"
		"asn2-index" = "1"
	}
}

resource "iosxr_gnmi" "PreReq2" {
	path = "Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=65001]"
	attributes = {
		"as-number" = "65001"
	}
	lists = [
		{
			name = "address-families/address-family"
			key = "af-name"
			items = [
				{
					"af-name" = "vpnv4-unicast"
				},
			]
		},
	]
}

`

func testAccIosxrRouterBGPVRFAddressFamilyConfig_minimum() string {
	config := `resource "iosxr_router_bgp_vrf_address_family" "test" {` + "\n"
	config += `	as_number = "65001"` + "\n"
	config += `	vrf_name = "VRF1"` + "\n"
	config += `	af_name = "ipv4-unicast"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, iosxr_gnmi.PreReq2, ]` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrRouterBGPVRFAddressFamilyConfig_all() string {
	config := `resource "iosxr_router_bgp_vrf_address_family" "test" {` + "\n"
	config += `	as_number = "65001"` + "\n"
	config += `	vrf_name = "VRF1"` + "\n"
	config += `	af_name = "ipv4-unicast"` + "\n"
	config += `	additional_paths_send = true` + "\n"
	config += `	additional_paths_send_disable = true` + "\n"
	config += `	additional_paths_receive = true` + "\n"
	config += `	additional_paths_receive_disable = true` + "\n"
	config += `	additional_paths_selection_route_policy = "ADDITIONAL_PATHS_POLICY"` + "\n"
	config += `	allocate_label_all = true` + "\n"
	config += `	allocate_label_all_unlabeled_path = true` + "\n"
	config += `	advertise_best_external = true` + "\n"
	config += `	segment_routing_srv6_locator = "LocAlgo11"` + "\n"
	config += `	aggregate_addresses = [{` + "\n"
	config += `		address = "10.0.0.0"` + "\n"
	config += `		prefix = 8` + "\n"
	config += `		as_set = true` + "\n"
	config += `		as_confed_set = false` + "\n"
	config += `		summary_only = true` + "\n"
	config += `		description = "Aggregate route description"` + "\n"
	config += `		set_tag = 100` + "\n"
	config += `		}]` + "\n"
	config += `	networks = [{` + "\n"
	config += `		address = "10.1.0.0"` + "\n"
	config += `		prefix = 16` + "\n"
	config += `		route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `		}]` + "\n"
	config += `	redistribute_ospf = [{` + "\n"
	config += `		router_tag = "OSPF1"` + "\n"
	config += `		metric = 100` + "\n"
	config += `		multipath = true` + "\n"
	config += `		route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `		}]` + "\n"
	config += `	redistribute_eigrp = [{` + "\n"
	config += `		instance_name = "EIGRP1"` + "\n"
	config += `		match_internal = true` + "\n"
	config += `		match_internal_external = true` + "\n"
	config += `		metric = 100` + "\n"
	config += `		multipath = true` + "\n"
	config += `		route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `		}]` + "\n"
	config += `	redistribute_isis = [{` + "\n"
	config += `		instance_name = "ISIS1"` + "\n"
	config += `		level_1_level_2_level_1_inter_area = true` + "\n"
	config += `		metric = 100` + "\n"
	config += `		multipath = true` + "\n"
	config += `		route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `		}]` + "\n"
	config += `	redistribute_connected = true` + "\n"
	config += `	redistribute_connected_metric = 100` + "\n"
	config += `	redistribute_connected_multipath = true` + "\n"
	config += `	redistribute_connected_route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	redistribute_static = true` + "\n"
	config += `	redistribute_static_metric = 100` + "\n"
	config += `	redistribute_static_multipath = true` + "\n"
	config += `	redistribute_static_route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	redistribute_rip = true` + "\n"
	config += `	redistribute_rip_metric = 100` + "\n"
	config += `	redistribute_rip_multipath = true` + "\n"
	config += `	redistribute_rip_route_policy = "REDISTRIBUTE_POLICY"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, iosxr_gnmi.PreReq2, ]` + "\n"
	config += `}` + "\n"
	return config
}
