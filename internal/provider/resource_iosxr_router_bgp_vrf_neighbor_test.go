// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccIosxrRouterBGPVRFNeighbor(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxrRouterBGPVRFNeighborConfig_all(),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "neighbor_address", "10.1.1.2"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "remote_as", "65002"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "description", "My Neighbor Description"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "ignore_connected_check", "true"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "ebgp_multihop_maximum_hop_count", "10"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "bfd_minimum_interval", "10"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "bfd_multiplier", "4"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "local_as", "65003"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "local_as_no_prepend", "true"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "local_as_replace_as", "true"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "local_as_dual_as", "true"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "password", "12341C2713181F13253920"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "shutdown", "false"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "timers_keepalive_interval", "5"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "timers_holdtime", "20"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "update_source", "GigabitEthernet0/0/0/1"),
					resource.TestCheckResourceAttr("iosxr_router_bgp_vrf_neighbor.test", "ttl_security", "false"),
				),
			},
			{
				ResourceName:  "iosxr_router_bgp_vrf_neighbor.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XR-um-router-bgp-cfg:/router/bgp/as[as-number=65001]/vrfs/vrf[vrf-name=VRF1]/neighbors/neighbor[neighbor-address=10.1.1.2]",
			},
		},
	})
}

func testAccIosxrRouterBGPVRFNeighborConfig_minimum() string {
	return `
	resource "iosxr_router_bgp_vrf_neighbor" "test" {
		as_number = "65001"
		vrf_name = "VRF1"
		neighbor_address = "10.1.1.2"
		ebgp_multihop_maximum_hop_count = 10
		timers_keepalive_interval = 5
		timers_holdtime = "20"
	}
	`
}

func testAccIosxrRouterBGPVRFNeighborConfig_all() string {
	return `
	resource "iosxr_router_bgp_vrf_neighbor" "test" {
		as_number = "65001"
		vrf_name = "VRF1"
		neighbor_address = "10.1.1.2"
		remote_as = "65002"
		description = "My Neighbor Description"
		ignore_connected_check = true
		ebgp_multihop_maximum_hop_count = 10
		bfd_minimum_interval = 10
		bfd_multiplier = 4
		local_as = "65003"
		local_as_no_prepend = true
		local_as_replace_as = true
		local_as_dual_as = true
		password = "12341C2713181F13253920"
		shutdown = false
		timers_keepalive_interval = 5
		timers_holdtime = "20"
		update_source = "GigabitEthernet0/0/0/1"
		ttl_security = false
	}
	`
}
