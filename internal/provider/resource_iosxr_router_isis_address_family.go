// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"regexp"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

func NewRouterISISAddressFamilyResource() resource.Resource {
	return &RouterISISAddressFamilyResource{}
}

type RouterISISAddressFamilyResource struct {
	client *client.Client
}

func (r *RouterISISAddressFamilyResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_router_isis_address_family"
}

func (r *RouterISISAddressFamilyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the Router ISIS Address Family configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the object.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"delete_mode": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is. Default value is `all`.").AddStringEnumDescription("all", "attributes").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("all", "attributes"),
				},
			},
			"process_id": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Process ID").String,
				Required:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 36),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"af_name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Address family name").AddStringEnumDescription("ipv4", "ipv6").String,
				Required:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("ipv4", "ipv6"),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"saf_name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Sub address family name").AddStringEnumDescription("multicast", "unicast").String,
				Required:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("multicast", "unicast"),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"metric_style_narrow": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use old style of TLVs with narrow metric").String,
				Optional:            true,
			},
			"metric_style_wide": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use new style of TLVs to carry wider metric").String,
				Optional:            true,
			},
			"metric_style_transition": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Send and accept both styles of TLVs during transition").String,
				Optional:            true,
			},
			"metric_style_levels": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Set metric-style for one level only").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"level_id": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Set metric-style for one level only").AddIntegerRangeDescription(1, 2).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 2),
							},
						},
						"narrow": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use old style of TLVs with narrow metric").String,
							Optional:            true,
						},
						"wide": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use new style of TLVs to carry wider metric").String,
							Optional:            true,
						},
						"transition": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Send and accept both styles of TLVs during transition").String,
							Optional:            true,
						},
					},
				},
			},
			"router_id_interface_name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Router ID Interface").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
				},
			},
			"router_id_ip_address": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Router ID address").String,
				Optional:            true,
			},
			"default_information_originate": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Distribute a default route").String,
				Optional:            true,
			},
			"fast_reroute_delay_interval": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Delay before running FRR computation").AddIntegerRangeDescription(100, 60000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(100, 60000),
				},
			},
			"fast_reroute_per_link_priority_limit_critical": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Compute for critical priority prefixes only").String,
				Optional:            true,
			},
			"fast_reroute_per_link_priority_limit_high": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Compute for critical & high priority prefixes").String,
				Optional:            true,
			},
			"fast_reroute_per_link_priority_limit_medium": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Compute for critical, high & medium priority prefixes").String,
				Optional:            true,
			},
			"fast_reroute_per_prefix_priority_limit_critical": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Compute for critical priority prefixes only").String,
				Optional:            true,
			},
			"fast_reroute_per_prefix_priority_limit_high": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Compute for critical & high priority prefixes").String,
				Optional:            true,
			},
			"fast_reroute_per_prefix_priority_limit_medium": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Compute for critical, high & medium priority prefixes").String,
				Optional:            true,
			},
			"microloop_avoidance_protected": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable microloop avoidance for only protected prefixes").String,
				Optional:            true,
			},
			"microloop_avoidance_segment_routing": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable segment routing microloop avoidance ").String,
				Optional:            true,
			},
			"advertise_passive_only": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Advertise prefixes of passive interfaces only").String,
				Optional:            true,
			},
			"advertise_link_attributes": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Advertise additional link attributes").String,
				Optional:            true,
			},
			"mpls_ldp_auto_config": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable LDP IGP interface auto-configuration").String,
				Optional:            true,
			},
			"mpls_traffic_eng_router_id_ip_address": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("configure this node").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?`), ""),
					stringvalidator.RegexMatches(regexp.MustCompile(`[0-9\.]*`), ""),
				},
			},
			"mpls_traffic_eng_router_id_interface": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
				},
			},
			"mpls_traffic_eng_level_1_2": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable mpls traffic-eng at both level 1 and 2").String,
				Optional:            true,
			},
			"mpls_traffic_eng_level_1": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable mpls traffic-eng at level 1").String,
				Optional:            true,
			},
			"mpls_traffic_eng_level_2_only": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable mpls traffic-eng at level 2").String,
				Optional:            true,
			},
			"spf_interval_maximum_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Maximum delay before running a route calculation").AddIntegerRangeDescription(0, 120000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(0, 120000),
				},
			},
			"spf_interval_initial_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Initial delay before running a route calculation").AddIntegerRangeDescription(0, 120000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(0, 120000),
				},
			},
			"spf_interval_secondary_wait": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Secondary delay before running a route calculation").AddIntegerRangeDescription(0, 120000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(0, 120000),
				},
			},
			"spf_prefix_priorities": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure a prefix priority list").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"priority": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("prefix priority").AddStringEnumDescription("critical", "high", "medium").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.OneOf("critical", "high", "medium"),
							},
						},
						"tag": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specify a tag to indicate priority").AddIntegerRangeDescription(1, 4294967295).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 4294967295),
							},
						},
						"access_list_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Access-list name").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
							},
						},
					},
				},
			},
			"segment_routing_mpls_sr_prefer": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Prefer segment routing labels over LDP labels").String,
				Optional:            true,
			},
			"maximum_redistributed_prefixes": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Maximum number of redistributed prefixes").AddIntegerRangeDescription(1, 28000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 28000),
				},
			},
			"maximum_redistributed_prefixes_levels": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Set maximum redistributed prefixes for one level only").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"level_id": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Set maximum redistributed prefixes for one level only").AddIntegerRangeDescription(1, 2).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 2),
							},
						},
						"maximum_prefixes": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Maximum number of redistributed prefixes").AddIntegerRangeDescription(1, 28000).String,
							Required:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 28000),
							},
						},
					},
				},
			},
			"redistribute_isis": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("IS-IS").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_id": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("IS-IS").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
							},
						},
						"route_policy": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Route policy reference").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 255),
							},
						},
					},
				},
			},
			"segment_routing_srv6_locators": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enter SRv6 Locator submode").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"locator_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Enter SRv6 Locator submode").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 59),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\|;]+`), ""),
							},
						},
						"level": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Advertise the locator only in the specified level").AddIntegerRangeDescription(1, 2).String,
							Optional:            true,
							Validators: []validator.Int64{
								int64validator.Between(1, 2),
							},
						},
					},
				},
			},
		},
	}
}

func (r *RouterISISAddressFamilyResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*client.Client)
}

func (r *RouterISISAddressFamilyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan RouterISISAddressFamily

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var ops []client.SetOperation

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	// Create object
	body := plan.toBody(ctx)
	ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	_, diags = r.client.Set(ctx, plan.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Id = types.StringValue(plan.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *RouterISISAddressFamilyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state RouterISISAddressFamily

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	import_ := false
	if state.Id.ValueString() == "" {
		import_ = true
		state.Id = types.StringValue(state.getPath())
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.ValueString()))

	getResp, diags := r.client.Get(ctx, state.Device.ValueString(), state.Id.ValueString())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	respBody := getResp.Notification[0].Update[0].Val.GetJsonIetfVal()
	if import_ {
		state.fromBody(ctx, respBody)
	} else {
		state.updateFromBody(ctx, respBody)
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *RouterISISAddressFamilyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state RouterISISAddressFamily

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var ops []client.SetOperation

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	// Update object
	body := plan.toBody(ctx)
	ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

	deletedListItems := plan.getDeletedItems(ctx, state)
	tflog.Debug(ctx, fmt.Sprintf("Removed items to delete: %+v", deletedListItems))

	for _, i := range deletedListItems {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
	}

	_, diags = r.client.Set(ctx, plan.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *RouterISISAddressFamilyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state RouterISISAddressFamily

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.ValueString()))
	var ops []client.SetOperation
	deleteMode := "all"
	if state.DeleteMode.ValueString() == "all" {
		deleteMode = "all"
	} else if state.DeleteMode.ValueString() == "attributes" {
		deleteMode = "attributes"
	}

	if deleteMode == "all" {
		ops = append(ops, client.SetOperation{Path: state.Id.ValueString(), Body: "", Operation: client.Delete})
	} else {
		deletePaths := state.getDeletePaths(ctx)
		tflog.Debug(ctx, fmt.Sprintf("Paths to delete: %+v", deletePaths))

		for _, i := range deletePaths {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}
	}

	_, diags = r.client.Set(ctx, state.Device.ValueString(), ops...)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

func (r *RouterISISAddressFamilyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idParts := strings.Split(req.ID, ",")

	if len(idParts) != 3 {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("Expected import identifier with format: <process_id>,<af_name>,<saf_name>. Got: %q", req.ID),
		)
		return
	}
	value0 := idParts[0]
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("process_id"), value0)...)
	value1 := idParts[1]
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("af_name"), value1)...)
	value2 := idParts[2]
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("saf_name"), value2)...)
}
