// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxrRouterISISAddressFamily(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "af_name", "ipv4"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "saf_name", "unicast"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "metric_style_wide_transition", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "router_id_ip_address", "192.168.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "default_information_originate", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_delay_interval", "300"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_priority_limit", "critical"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_priority_limit_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_priority_limit_levels.0.priority_limit", "critical"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_use_candidate_only", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_srlg_protection_weighted_global", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_srlg_protection_weighted_global_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_load_sharing_disable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_load_sharing_disable_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_tiebreaker_downstream_index", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_tiebreaker_lc_disjoint_index", "20"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_tiebreaker_lowest_backup_metric_index", "30"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_tiebreaker_node_protecting_index", "40"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_tiebreaker_primary_path_index", "50"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_prefix_tiebreaker_srlg_disjoint_index", "70"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_link_priority_limit_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_link_priority_limit_levels.0.priority_limit", "critical"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "fast_reroute_per_link_use_candidate_only", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "microloop_avoidance_protected", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "microloop_avoidance_rib_update_delay", "5000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "advertise_passive_only", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "advertise_link_attributes", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "mpls_ldp_auto_config", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "mpls_traffic_eng_router_id_ipv4_address", "1.2.3.4"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "mpls_traffic_eng_level_1_2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_interval_maximum_wait", "5000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_interval_initial_wait", "50"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_interval_secondary_wait", "200"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_interval_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_interval_levels.0.maximum_wait", "5000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_interval_levels.0.initial_wait", "50"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_interval_levels.0.secondary_wait", "200"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_critical_tag", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_high_tag", "200"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_medium_tag", "300"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_critical_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_critical_levels.0.tag", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_high_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_high_levels.0.tag", "200"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_medium_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "spf_prefix_priority_medium_levels.0.tag", "300"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "segment_routing_mpls_sr_prefer", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "maximum_redistributed_prefixes", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "maximum_redistributed_prefixes_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "maximum_redistributed_prefixes_levels.0.maximum_redistributed_prefixes", "1000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "redistribute_isis.0.instance_id", "CORE"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "redistribute_isis.0.level", "level-2"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "redistribute_isis.0.metric", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "redistribute_isis.0.route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "redistribute_isis.0.metric_type", "internal"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_address_family.test", "redistribute_isis.0.down_flag_clear", "true"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrRouterISISAddressFamilyPrerequisitesConfig + testAccIosxrRouterISISAddressFamilyConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrRouterISISAddressFamilyPrerequisitesConfig + testAccIosxrRouterISISAddressFamilyConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:      "iosxr_router_isis_address_family.test",
		ImportState:       true,
		ImportStateIdFunc: iosxrRouterISISAddressFamilyImportStateIdFunc("iosxr_router_isis_address_family.test"),
		Check:             resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxrRouterISISAddressFamilyImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {
		primary := s.RootModule().Resources[resourceName].Primary
		ProcessId := primary.Attributes["process_id"]
		AfName := primary.Attributes["af_name"]
		SafName := primary.Attributes["saf_name"]

		return fmt.Sprintf("%s,%s,%s", ProcessId, AfName, SafName), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccIosxrRouterISISAddressFamilyPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies/route-policy[route-policy-name=ROUTE_POLICY_1]"
	attributes = {
		"route-policy-name" = "ROUTE_POLICY_1"
		"rpl-route-policy" = "route-policy ROUTE_POLICY_1\n  pass\nend-policy\n"
	}
}

resource "iosxr_gnmi" "PreReq1" {
	path = "Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=P1]"
	attributes = {
		"process-id" = "P1"
	}
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxrRouterISISAddressFamilyConfig_minimum() string {
	config := `resource "iosxr_router_isis_address_family" "test" {` + "\n"
	config += `	process_id = "P1"` + "\n"
	config += `	af_name = "ipv4"` + "\n"
	config += `	saf_name = "unicast"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxrRouterISISAddressFamilyConfig_all() string {
	config := `resource "iosxr_router_isis_address_family" "test" {` + "\n"
	config += `	process_id = "P1"` + "\n"
	config += `	af_name = "ipv4"` + "\n"
	config += `	saf_name = "unicast"` + "\n"
	config += `	metric_style_wide_transition = true` + "\n"
	config += `	router_id_ip_address = "192.168.1.1"` + "\n"
	config += `	default_information_originate = true` + "\n"
	config += `	fast_reroute_delay_interval = 300` + "\n"
	config += `	fast_reroute_per_prefix_priority_limit = "critical"` + "\n"
	config += `	fast_reroute_per_prefix_priority_limit_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		priority_limit = "critical"` + "\n"
	config += `		}]` + "\n"
	config += `	fast_reroute_per_prefix_use_candidate_only = true` + "\n"
	config += `	fast_reroute_per_prefix_srlg_protection_weighted_global = true` + "\n"
	config += `	fast_reroute_per_prefix_srlg_protection_weighted_global_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		}]` + "\n"
	config += `	fast_reroute_per_prefix_load_sharing_disable = true` + "\n"
	config += `	fast_reroute_per_prefix_load_sharing_disable_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		}]` + "\n"
	config += `	fast_reroute_per_prefix_tiebreaker_downstream_index = 10` + "\n"
	config += `	fast_reroute_per_prefix_tiebreaker_lc_disjoint_index = 20` + "\n"
	config += `	fast_reroute_per_prefix_tiebreaker_lowest_backup_metric_index = 30` + "\n"
	config += `	fast_reroute_per_prefix_tiebreaker_node_protecting_index = 40` + "\n"
	config += `	fast_reroute_per_prefix_tiebreaker_primary_path_index = 50` + "\n"
	config += `	fast_reroute_per_prefix_tiebreaker_srlg_disjoint_index = 70` + "\n"
	config += `	fast_reroute_per_link_priority_limit_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		priority_limit = "critical"` + "\n"
	config += `		}]` + "\n"
	config += `	fast_reroute_per_link_use_candidate_only = true` + "\n"
	config += `	microloop_avoidance_protected = true` + "\n"
	config += `	microloop_avoidance_rib_update_delay = 5000` + "\n"
	config += `	advertise_passive_only = true` + "\n"
	config += `	advertise_link_attributes = true` + "\n"
	config += `	mpls_ldp_auto_config = false` + "\n"
	config += `	mpls_traffic_eng_router_id_ipv4_address = "1.2.3.4"` + "\n"
	config += `	mpls_traffic_eng_level_1_2 = true` + "\n"
	config += `	spf_interval_maximum_wait = 5000` + "\n"
	config += `	spf_interval_initial_wait = 50` + "\n"
	config += `	spf_interval_secondary_wait = 200` + "\n"
	config += `	spf_interval_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		maximum_wait = 5000` + "\n"
	config += `		initial_wait = 50` + "\n"
	config += `		secondary_wait = 200` + "\n"
	config += `		}]` + "\n"
	config += `	spf_prefix_priority_critical_tag = 100` + "\n"
	config += `	spf_prefix_priority_high_tag = 200` + "\n"
	config += `	spf_prefix_priority_medium_tag = 300` + "\n"
	config += `	spf_prefix_priority_critical_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		tag = 100` + "\n"
	config += `		}]` + "\n"
	config += `	spf_prefix_priority_high_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		tag = 200` + "\n"
	config += `		}]` + "\n"
	config += `	spf_prefix_priority_medium_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		tag = 300` + "\n"
	config += `		}]` + "\n"
	config += `	segment_routing_mpls_sr_prefer = true` + "\n"
	config += `	maximum_redistributed_prefixes = 100` + "\n"
	config += `	maximum_redistributed_prefixes_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		maximum_redistributed_prefixes = 1000` + "\n"
	config += `		}]` + "\n"
	config += `	redistribute_isis = [{` + "\n"
	config += `		instance_id = "CORE"` + "\n"
	config += `		level = "level-2"` + "\n"
	config += `		metric = 10` + "\n"
	config += `		route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `		metric_type = "internal"` + "\n"
	config += `		down_flag_clear = true` + "\n"
	config += `		}]` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
