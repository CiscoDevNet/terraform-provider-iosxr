// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxrRouterISISInterfaceAddressFamily(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "af_name", "ipv4"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "saf_name", "unicast"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "fast_reroute_per_prefix", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "fast_reroute_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "fast_reroute_levels.0.per_prefix", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "tag", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "advertise_prefix_route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "advertise_prefix_route_policy_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "advertise_prefix_route_policy_levels.0.route_policy", "ROUTE_POLICY_2"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface_address_family.test", "metric_default", "500"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrRouterISISInterfaceAddressFamilyPrerequisitesConfig + testAccIosxrRouterISISInterfaceAddressFamilyConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrRouterISISInterfaceAddressFamilyPrerequisitesConfig + testAccIosxrRouterISISInterfaceAddressFamilyConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:      "iosxr_router_isis_interface_address_family.test",
		ImportState:       true,
		ImportStateIdFunc: iosxrRouterISISInterfaceAddressFamilyImportStateIdFunc("iosxr_router_isis_interface_address_family.test"),
		Check:             resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxrRouterISISInterfaceAddressFamilyImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {
		primary := s.RootModule().Resources[resourceName].Primary
		ProcessId := primary.Attributes["process_id"]
		InterfaceName := primary.Attributes["interface_name"]
		AfName := primary.Attributes["af_name"]
		SafName := primary.Attributes["saf_name"]

		return fmt.Sprintf("%s,%s,%s,%s", ProcessId, InterfaceName, AfName, SafName), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccIosxrRouterISISInterfaceAddressFamilyPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies/route-policy[route-policy-name=ROUTE_POLICY_1]"
	attributes = {
		"route-policy-name" = "ROUTE_POLICY_1"
		"rpl-route-policy" = "route-policy ROUTE_POLICY_1\n  pass\nend-policy\n"
	}
}

resource "iosxr_gnmi" "PreReq1" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies/route-policy[route-policy-name=ROUTE_POLICY_2]"
	attributes = {
		"route-policy-name" = "ROUTE_POLICY_2"
		"rpl-route-policy" = "route-policy ROUTE_POLICY_2\n  pass\nend-policy\n"
	}
}

resource "iosxr_gnmi" "PreReq2" {
	path = "Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=P1]"
	attributes = {
		"process-id" = "P1"
	}
}

resource "iosxr_gnmi" "PreReq3" {
	path = "Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=P1]/interfaces/interface[interface-name=GigabitEthernet0/0/0/1]"
	attributes = {
		"interface-name" = "GigabitEthernet0/0/0/1"
	}
	depends_on = [iosxr_gnmi.PreReq2, ]
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxrRouterISISInterfaceAddressFamilyConfig_minimum() string {
	config := `resource "iosxr_router_isis_interface_address_family" "test" {` + "\n"
	config += `	process_id = "P1"` + "\n"
	config += `	interface_name = "GigabitEthernet0/0/0/1"` + "\n"
	config += `	af_name = "ipv4"` + "\n"
	config += `	saf_name = "unicast"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, iosxr_gnmi.PreReq2, iosxr_gnmi.PreReq3, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxrRouterISISInterfaceAddressFamilyConfig_all() string {
	config := `resource "iosxr_router_isis_interface_address_family" "test" {` + "\n"
	config += `	process_id = "P1"` + "\n"
	config += `	interface_name = "GigabitEthernet0/0/0/1"` + "\n"
	config += `	af_name = "ipv4"` + "\n"
	config += `	saf_name = "unicast"` + "\n"
	config += `	fast_reroute_per_prefix = true` + "\n"
	config += `	fast_reroute_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		per_prefix = true` + "\n"
	config += `		}]` + "\n"
	config += `	tag = 100` + "\n"
	config += `	advertise_prefix_route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `	advertise_prefix_route_policy_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		route_policy = "ROUTE_POLICY_2"` + "\n"
	config += `		}]` + "\n"
	config += `	metric_default = 500` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, iosxr_gnmi.PreReq2, iosxr_gnmi.PreReq3, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
