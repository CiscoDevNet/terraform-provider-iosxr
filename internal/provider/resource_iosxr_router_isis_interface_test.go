// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxrRouterISISInterface(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "interface_name", "GigabitEthernet0/0/0/1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "circuit_type", "level-1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "hello_padding", "disable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "hello_padding_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "hello_padding_levels.0.hello_padding", "always"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "priority", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "priority_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "priority_levels.0.priority", "64"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "point_to_point", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "state", "passive"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "hello_password_text_encrypted", "060506324F41584B564B0F49584B"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "hello_password_levels.0.level_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "hello_password_levels.0.text_encrypted", "060506324F41584B564B0F49584B"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "bfd_fast_detect_ipv4", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "bfd_fast_detect_ipv6", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "bfd_minimum_interval", "50"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_router_isis_interface.test", "bfd_multiplier", "3"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrRouterISISInterfacePrerequisitesConfig + testAccIosxrRouterISISInterfaceConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrRouterISISInterfacePrerequisitesConfig + testAccIosxrRouterISISInterfaceConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:      "iosxr_router_isis_interface.test",
		ImportState:       true,
		ImportStateIdFunc: iosxrRouterISISInterfaceImportStateIdFunc("iosxr_router_isis_interface.test"),
		Check:             resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxrRouterISISInterfaceImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {
		primary := s.RootModule().Resources[resourceName].Primary
		ProcessId := primary.Attributes["process_id"]
		InterfaceName := primary.Attributes["interface_name"]

		return fmt.Sprintf("%s,%s", ProcessId, InterfaceName), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccIosxrRouterISISInterfacePrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-router-isis-cfg:/router/isis/processes/process[process-id=P1]"
	attributes = {
		"process-id" = "P1"
	}
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxrRouterISISInterfaceConfig_minimum() string {
	config := `resource "iosxr_router_isis_interface" "test" {` + "\n"
	config += `	process_id = "P1"` + "\n"
	config += `	interface_name = "GigabitEthernet0/0/0/1"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxrRouterISISInterfaceConfig_all() string {
	config := `resource "iosxr_router_isis_interface" "test" {` + "\n"
	config += `	process_id = "P1"` + "\n"
	config += `	interface_name = "GigabitEthernet0/0/0/1"` + "\n"
	config += `	circuit_type = "level-1"` + "\n"
	config += `	hello_padding = "disable"` + "\n"
	config += `	hello_padding_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		hello_padding = "always"` + "\n"
	config += `		}]` + "\n"
	config += `	priority = 10` + "\n"
	config += `	priority_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		priority = 64` + "\n"
	config += `		}]` + "\n"
	config += `	point_to_point = false` + "\n"
	config += `	state = "passive"` + "\n"
	config += `	hello_password_text_encrypted = "060506324F41584B564B0F49584B"` + "\n"
	config += `	hello_password_levels = [{` + "\n"
	config += `		level_number = 1` + "\n"
	config += `		text_encrypted = "060506324F41584B564B0F49584B"` + "\n"
	config += `		}]` + "\n"
	config += `	bfd_fast_detect_ipv4 = true` + "\n"
	config += `	bfd_fast_detect_ipv6 = true` + "\n"
	config += `	bfd_minimum_interval = 50` + "\n"
	config += `	bfd_multiplier = 3` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
