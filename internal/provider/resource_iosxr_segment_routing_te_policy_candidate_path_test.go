// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrSegmentRoutingTEPolicyCandidatePath(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_segment_routing_te_policy_candidate_path.test", "path_index", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_segment_routing_te_policy_candidate_path.test", "path_infos.0.type", "dynamic"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_segment_routing_te_policy_candidate_path.test", "path_infos.0.pcep", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_segment_routing_te_policy_candidate_path.test", "path_infos.0.metric_type", "igp"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_segment_routing_te_policy_candidate_path.test", "path_infos.0.hop_type", "mpls"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_segment_routing_te_policy_candidate_path.test", "path_infos.0.segment_list_name", "dynamic"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxrSegmentRoutingTEPolicyCandidatePathConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:  "iosxr_segment_routing_te_policy_candidate_path.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XR-segment-routing-ms-cfg:/sr/Cisco-IOS-XR-infra-xtc-agent-cfg:traffic-engineering/Cisco-IOS-XR-infra-xtc-agent-cfg:policies/Cisco-IOS-XR-infra-xtc-agent-cfg:policy[policy-name=POLICY1]/Cisco-IOS-XR-infra-xtc-agent-cfg:candidate-paths/Cisco-IOS-XR-infra-xtc-agent-cfg:preferences/Cisco-IOS-XR-infra-xtc-agent-cfg:preference[path-index=%!d(string=100)]",
			},
		},
	})
}

func testAccIosxrSegmentRoutingTEPolicyCandidatePathConfig_minimum() string {
	config := `resource "iosxr_segment_routing_te_policy_candidate_path" "test" {` + "\n"
	config += `	policy_name = "POLICY1"` + "\n"
	config += `	path_index = 100` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrSegmentRoutingTEPolicyCandidatePathConfig_all() string {
	config := `resource "iosxe_segment_routing_te_policy_candidate_path" "test" {` + "\n"
	config += `	policy_name = "POLICY1"` + "\n"
	config += `	path_index = 100` + "\n"
	config += `	path_infos = [{` + "\n"
	config += `		type = "dynamic"` + "\n"
	config += `		pcep = true` + "\n"
	config += `		metric_type = "igp"` + "\n"
	config += `		hop_type = "mpls"` + "\n"
	config += `		segment_list_name = "dynamic"` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"
	return config
}
