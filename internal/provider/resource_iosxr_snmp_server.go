// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"regexp"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/client"
	"github.com/CiscoDevNet/terraform-provider-iosxr/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin model

func NewSNMPServerResource() resource.Resource {
	return &SNMPServerResource{}
}

type SNMPServerResource struct {
	data *IosxrProviderData
}

func (r *SNMPServerResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_snmp_server"
}

func (r *SNMPServerResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the SNMP Server configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the object.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"delete_mode": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is. Default value is `all`.").AddStringEnumDescription("all", "attributes").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("all", "attributes"),
				},
			},
			"location": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Text for mib Object sysLocation").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 255),
				},
			},
			"contact": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Text for mib Object sysContact").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 255),
				},
			},
			"traps_rf": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP RF-MIB traps").String,
				Optional:            true,
			},
			"traps_bfd": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable BFD traps").String,
				Optional:            true,
			},
			"traps_ntp": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP Cisco Ntp traps").String,
				Optional:            true,
			},
			"traps_ethernet_oam_events": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable all OAM event traps").String,
				Optional:            true,
			},
			"traps_copy_complete": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable CISCO-CONFIG-COPY-MIB ccCopyCompletion traps").String,
				Optional:            true,
			},
			"traps_snmp_linkup": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMPv2-MIB linkUp traps").String,
				Optional:            true,
			},
			"traps_snmp_linkdown": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMPv2-MIB linDownp traps").String,
				Optional:            true,
			},
			"traps_power": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP entity power traps").String,
				Optional:            true,
			},
			"traps_config": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP config traps").String,
				Optional:            true,
			},
			"traps_entity": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP entity traps").String,
				Optional:            true,
			},
			"traps_system": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP SYSTEMMIB-MIB traps").String,
				Optional:            true,
			},
			"traps_bridgemib": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP Trap for Bridge MIB").String,
				Optional:            true,
			},
			"traps_entity_state_operstatus": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable entity oper status enable notification").String,
				Optional:            true,
			},
			"traps_entity_redundancy_all": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable all CISCO-ENTITY-REDUNDANCY-MIB traps").String,
				Optional:            true,
			},
			"trap_source_both": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Assign an interface for the source address of all traps").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`[a-zA-Z0-9.:_/-]+`), ""),
				},
			},
			"traps_l2vpn_all": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable all L2VPN traps").String,
				Optional:            true,
			},
			"traps_l2vpn_vc_up": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable VC up traps").String,
				Optional:            true,
			},
			"traps_l2vpn_vc_down": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable VC down traps").String,
				Optional:            true,
			},
			"traps_sensor": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP entity sensor traps").String,
				Optional:            true,
			},
			"traps_fru_ctrl": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP entity FRU control traps").String,
				Optional:            true,
			},
			"traps_isis_all": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable all IS-IS traps").String,
				Optional:            true,
			},
			"traps_isis_database_overload": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisDatabaseOverload").String,
				Optional:            true,
			},
			"traps_isis_manual_address_drops": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisManualAddressDrops").String,
				Optional:            true,
			},
			"traps_isis_corrupted_lsp_detected": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisCorruptedLSPDetected").String,
				Optional:            true,
			},
			"traps_isis_attempt_to_exceed_max_sequence": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisAttemptToExceedMaxSequence").String,
				Optional:            true,
			},
			"traps_isis_id_len_mismatch": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisIDLenMismatch").String,
				Optional:            true,
			},
			"traps_isis_max_area_addresses_mismatch": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisMaxAreaAddressesMismatch").String,
				Optional:            true,
			},
			"traps_isis_own_lsp_purge": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisOwnLSPPurge").String,
				Optional:            true,
			},
			"traps_isis_sequence_number_skip": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisSequenceNumberSkip").String,
				Optional:            true,
			},
			"traps_isis_authentication_type_failure": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisAuthenticationTypeFailure").String,
				Optional:            true,
			},
			"traps_isis_authentication_failure": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisAuthenticationFailure").String,
				Optional:            true,
			},
			"traps_isis_version_skew": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisVersionSkew").String,
				Optional:            true,
			},
			"traps_isis_area_mismatch": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisAreaMismatch").String,
				Optional:            true,
			},
			"traps_isis_rejected_adjacency": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisRejectedAdjacency").String,
				Optional:            true,
			},
			"traps_isis_lsp_too_large_to_propagate": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisLSPTooLargeToPropagate").String,
				Optional:            true,
			},
			"traps_isis_orig_lsp_buff_size_mismatch": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisOrigLSPBuffSizeMismatch").String,
				Optional:            true,
			},
			"traps_isis_protocols_supported_mismatch": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisProtocolsSupportedMismatch").String,
				Optional:            true,
			},
			"traps_isis_adjacency_change": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisAdjacencyChange").String,
				Optional:            true,
			},
			"traps_isis_lsp_error_detected": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("isisLSPErrorDetected").String,
				Optional:            true,
			},
			"traps_bgp_cbgp_two_enable": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable CISCO-BGP4-MIB v2 traps").String,
				Optional:            true,
			},
			"traps_bgp_cbgp_two_updown": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable CISCO-BGP4-MIB v2 up/down traps").String,
				Optional:            true,
			},
			"traps_bgp_enable_updown": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable BGP4-MIB and CISCO-BGP4-MIB traps").String,
				Optional:            true,
			},
			"traps_bgp_enable_cisco_bgp4_mib": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable CISCO-BGP4-MIB v2 up/down traps").String,
				Optional:            true,
			},
			"users": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Name of the user").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"user_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Name of the user").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"group_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Group to which the user belongs").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"v3_auth_md5_encryption_aes": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specifies an aes-128 ENCRYPTED authentication password").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9a-zA-Z]+`), ""),
							},
						},
						"v3_auth_md5_encryption_default": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specifies an default ENCRYPTED authentication password").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(!.+)|([^!].+)`), ""),
							},
						},
						"v3_auth_sha_encryption_aes": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specifies an aes-128 ENCRYPTED authentication password").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9a-zA-Z]+`), ""),
							},
						},
						"v3_auth_sha_encryption_default": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specifies an default ENCRYPTED authentication password").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(!.+)|([^!].+)`), ""),
							},
						},
						"v3_priv_aes_aes_128_encryption_default": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specifies an default ENCRYPTED authentication password").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`(!.+)|([^!].+)`), ""),
							},
						},
						"v3_priv_aes_aes_128_encryption_aes": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Specifies an aes-128 ENCRYPTED authentication password").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9a-zA-Z]+`), ""),
							},
						},
						"v3_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Type of Access-list").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"v3_systemowner": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("System Owner permissions for MIB objects").String,
							Optional:            true,
						},
					},
				},
			},
			"groups": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Name of the group").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"group_name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Name of the group").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 128),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"v3_priv": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("group using authPriv Security Level").String,
							Optional:            true,
						},
						"v3_read": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specify a read view for this group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"v3_write": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specify a write view for this group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"v3_context": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Attach a SNMP context").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"v3_notify": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("specify a notify view for the group").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"v3_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Type of Access-list").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"v3_ipv6": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Type of Access-list").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
					},
				},
			},
			"communities": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("The UNENCRYPTED (cleartext) community string").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"community": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("The UNENCRYPTED (cleartext) community string").String,
							Required:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
							},
						},
						"view": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Restrict this community to a named view").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"ro": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Read-only community").String,
							Optional:            true,
						},
						"rw": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Read-write community").String,
							Optional:            true,
						},
						"sdrowner": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("SDR Owner permissions for MIB Objects").String,
							Optional:            true,
						},
						"systemowner": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("System Owner permissions for MIB objects").String,
							Optional:            true,
						},
						"ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Type of Access-list").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
						"ipv6": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Type of Access-list").String,
							Optional:            true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 32),
								stringvalidator.RegexMatches(regexp.MustCompile(`[\w\-\.:,_@#%$\+=\| ;]+`), ""),
							},
						},
					},
				},
			},
		},
	}
}

func (r *SNMPServerResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.data = req.ProviderData.(*IosxrProviderData)
}

// End of section. //template:end model

// Section below is generated&owned by "gen/generator.go". //template:begin create

func (r *SNMPServerResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan SNMPServer

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := r.data.Devices[plan.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", plan.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	if device.Managed {
		var ops []client.SetOperation

		// Create object
		body := plan.toBody(ctx)
		ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

		emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
		tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

		for _, i := range emptyLeafsDelete {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}

		_, err := r.data.Client.Set(ctx, plan.Device.ValueString(), ops...)
		if err != nil {
			resp.Diagnostics.AddError("Unable to apply gNMI Set operation", err.Error())
			return
		}
	}

	plan.Id = types.StringValue(plan.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

// End of section. //template:end create

// Section below is generated&owned by "gen/generator.go". //template:begin read

func (r *SNMPServerResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state SNMPServer

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	import_ := false
	if state.Id.ValueString() == "" {
		import_ = true
		state.Id = types.StringValue(state.getPath())
	}

	device, ok := r.data.Devices[state.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", state.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.ValueString()))

	if device.Managed {
		getResp, err := r.data.Client.Get(ctx, state.Device.ValueString(), state.Id.ValueString())
		if err != nil {
			if strings.Contains(err.Error(), "Requested element(s) not found") {
				resp.State.RemoveResource(ctx)
				return
			} else {
				resp.Diagnostics.AddError("Unable to apply gNMI Get operation", err.Error())
				return
			}
		}

		respBody := getResp.Notification[0].Update[0].Val.GetJsonIetfVal()
		if import_ {
			state.fromBody(ctx, respBody)
		} else {
			state.updateFromBody(ctx, respBody)
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

// End of section. //template:end read

// Section below is generated&owned by "gen/generator.go". //template:begin update

func (r *SNMPServerResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state SNMPServer

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := r.data.Devices[plan.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", plan.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	if device.Managed {
		var ops []client.SetOperation

		// Update object
		body := plan.toBody(ctx)
		ops = append(ops, client.SetOperation{Path: plan.getPath(), Body: body, Operation: client.Update})

		deletedListItems := plan.getDeletedItems(ctx, state)
		tflog.Debug(ctx, fmt.Sprintf("Removed items to delete: %+v", deletedListItems))

		for _, i := range deletedListItems {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}

		emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
		tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

		for _, i := range emptyLeafsDelete {
			ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
		}

		_, err := r.data.Client.Set(ctx, plan.Device.ValueString(), ops...)
		if err != nil {
			resp.Diagnostics.AddError("Unable to apply gNMI Set operation", err.Error())
			return
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

// End of section. //template:end update

// Section below is generated&owned by "gen/generator.go". //template:begin delete

func (r *SNMPServerResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state SNMPServer

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	device, ok := r.data.Devices[state.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", state.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.ValueString()))

	if device.Managed {
		var ops []client.SetOperation
		deleteMode := "all"
		if state.DeleteMode.ValueString() == "all" {
			deleteMode = "all"
		} else if state.DeleteMode.ValueString() == "attributes" {
			deleteMode = "attributes"
		}

		if deleteMode == "all" {
			ops = append(ops, client.SetOperation{Path: state.Id.ValueString(), Body: "", Operation: client.Delete})
		} else {
			deletePaths := state.getDeletePaths(ctx)
			tflog.Debug(ctx, fmt.Sprintf("Paths to delete: %+v", deletePaths))

			for _, i := range deletePaths {
				ops = append(ops, client.SetOperation{Path: i, Body: "", Operation: client.Delete})
			}
		}

		_, err := r.data.Client.Set(ctx, state.Device.ValueString(), ops...)
		if err != nil {
			resp.Diagnostics.AddError("Unable to apply gNMI Set operation", err.Error())
			return
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

// End of section. //template:end delete

// Section below is generated&owned by "gen/generator.go". //template:begin import

func (r *SNMPServerResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idParts := strings.Split(req.ID, ",")
	idParts = helpers.RemoveEmptyStrings(idParts)

	if len(idParts) != 0 && len(idParts) != 1 {
		expectedIdentifier := "Expected import identifier with format: ''"
		expectedIdentifier += " or '<device>'"
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("%s. Got: %q", expectedIdentifier, req.ID),
		)
		return
	}
	if len(idParts) == 1 {
		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("device"), idParts[len(idParts)-1])...)
	}

	// construct path for 'id' attribute
	var state SNMPServer
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), state.getPath())...)
}

// End of section. //template:end import
