// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccIosxrSNMPServer(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxrSNMPServerConfig_all(),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_rf", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_bfd", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_ntp", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_ethernet_oam_events", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_copy_complete", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_snmp_linkup", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_snmp_linkdown", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_power", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_config", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_entity", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_system", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_bridgemib", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_entity_state_operstatus", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_entity_redundancy_all", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "trap_source_both", "Loopback10"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_l2vpn_all", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_l2vpn_vc_up", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_l2vpn_vc_down", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_sensor", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_fru_ctrl", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_isis_authentication_failure", "enable"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_bgp_cbgp2_updown", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_bgp_bgp4_mib_updown", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_user.0.user_name", "USER1"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_user.0.group_name", "GROUP1"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_user.0.v3_auth_md5_encryption_aes", "073C05626E2A4841141D"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_group.0.group_name", "GROUP12"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_group.0.v3_priv", "true"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_group.0.v3_read", "READ-STRING"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_group.0.v3_write", "WRITE-STRING"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_group.0.v3_context", "CONTEXT-STRING"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_group.0.v3_notify", "NOTIFY-STRING"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_group.0.v3_ipv4", "IPV4-STRING"),
					resource.TestCheckResourceAttr("iosxr_snmp_server.test", "snmp_server_group.0.v3_ipv6", "IPV6-STRING"),
				),
			},
			{
				ResourceName:  "iosxr_snmp_server.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XR-um-snmp-server-cfg:snmp-server",
			},
		},
	})
}

func testAccIosxrSNMPServerConfig_minimum() string {
	return `
	resource "iosxr_snmp_server" "test" {
		traps_isis_authentication_failure = "enable"
	}
	`
}

func testAccIosxrSNMPServerConfig_all() string {
	return `
	resource "iosxr_snmp_server" "test" {
		traps_rf = true
		traps_bfd = true
		traps_ntp = true
		traps_ethernet_oam_events = true
		traps_copy_complete = true
		traps_snmp_linkup = true
		traps_snmp_linkdown = true
		traps_power = true
		traps_config = true
		traps_entity = true
		traps_system = true
		traps_bridgemib = true
		traps_entity_state_operstatus = true
		traps_entity_redundancy_all = true
		trap_source_both = "Loopback10"
		traps_l2vpn_all = true
		traps_l2vpn_vc_up = true
		traps_l2vpn_vc_down = true
		traps_sensor = true
		traps_fru_ctrl = true
		traps_isis_authentication_failure = "enable"
		traps_bgp_cbgp2_updown = true
		traps_bgp_bgp4_mib_updown = true
		snmp_server_user = [{
			user_name = "USER1"
			group_name = "GROUP1"
			v3_auth_md5_encryption_aes = "073C05626E2A4841141D"
		}]
		snmp_server_group = [{
			group_name = "GROUP12"
			v3_priv = true
			v3_read = "READ-STRING"
			v3_write = "WRITE-STRING"
			v3_context = "CONTEXT-STRING"
			v3_notify = "NOTIFY-STRING"
			v3_ipv4 = "IPV4-STRING"
			v3_ipv6 = "IPV6-STRING"
		}]
	}
	`
}
