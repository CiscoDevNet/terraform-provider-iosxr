// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrSNMPServer(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "rf", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "bfd", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "ntp", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "ethernet_oam_events", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "copy_complete", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_snmp_linkup", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "traps_snmp_linkdown", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "power", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "config", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "entity", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "system", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "bridgemib", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "entity_state_operstatus", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "entity_redundancy_all", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "trap_source_both", "Loopback10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "l2vpn_all", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "l2vpn_vc_up", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "l2vpn_vc_down", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "sensor", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "fru_ctrl", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "isis_authentication_failure", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "bgp_cbgp2_updown", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "bgp_bgp4_mib_updown", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "users.0.user_name", "USER1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "users.0.group_name", "GROUP1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "users.0.v3_auth_md5_encryption_aes", "073C05626E2A4841141D"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "groups.0.group_name", "GROUP12"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "groups.0.v3_priv", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "groups.0.v3_read", "VIEW1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "groups.0.v3_write", "VIEW2"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "groups.0.v3_context", "CONTEXT1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "groups.0.v3_notify", "VIEW3"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "groups.0.v3_ipv4", "ACL1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server.test", "groups.0.v3_ipv6", "ACL2"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxrSNMPServerConfig_minimum(),
			},
			{
				Config: testAccIosxrSNMPServerConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:  "iosxr_snmp_server.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XR-um-snmp-server-cfg:/snmp-server",
			},
		},
	})
}

func testAccIosxrSNMPServerConfig_minimum() string {
	config := `resource "iosxr_snmp_server" "test" {` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrSNMPServerConfig_all() string {
	config := `resource "iosxr_snmp_server" "test" {` + "\n"
	config += `	rf = true` + "\n"
	config += `	bfd = true` + "\n"
	config += `	ntp = true` + "\n"
	config += `	ethernet_oam_events = true` + "\n"
	config += `	copy_complete = true` + "\n"
	config += `	traps_snmp_linkup = true` + "\n"
	config += `	traps_snmp_linkdown = true` + "\n"
	config += `	power = true` + "\n"
	config += `	config = true` + "\n"
	config += `	entity = true` + "\n"
	config += `	system = true` + "\n"
	config += `	bridgemib = true` + "\n"
	config += `	entity_state_operstatus = true` + "\n"
	config += `	entity_redundancy_all = true` + "\n"
	config += `	trap_source_both = "Loopback10"` + "\n"
	config += `	l2vpn_all = true` + "\n"
	config += `	l2vpn_vc_up = true` + "\n"
	config += `	l2vpn_vc_down = true` + "\n"
	config += `	sensor = true` + "\n"
	config += `	fru_ctrl = true` + "\n"
	config += `	isis_authentication_failure = "enable"` + "\n"
	config += `	bgp_cbgp2_updown = true` + "\n"
	config += `	bgp_bgp4_mib_updown = true` + "\n"
	config += `	users = [{` + "\n"
	config += `		user_name = "USER1"` + "\n"
	config += `		group_name = "GROUP1"` + "\n"
	config += `		v3_auth_md5_encryption_aes = "073C05626E2A4841141D"` + "\n"
	config += `	}]` + "\n"
	config += `	groups = [{` + "\n"
	config += `		group_name = "GROUP12"` + "\n"
	config += `		v3_priv = true` + "\n"
	config += `		v3_read = "VIEW1"` + "\n"
	config += `		v3_write = "VIEW2"` + "\n"
	config += `		v3_context = "CONTEXT1"` + "\n"
	config += `		v3_notify = "VIEW3"` + "\n"
	config += `		v3_ipv4 = "ACL1"` + "\n"
	config += `		v3_ipv6 = "ACL2"` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"
	return config
}
