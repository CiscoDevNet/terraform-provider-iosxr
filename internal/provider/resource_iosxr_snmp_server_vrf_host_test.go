// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrSNMPServerVRFHost(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server_vrf_host.test", "address", "11.11.11.11"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server_vrf_host.test", "unencrypted_strings.0.community_string", "COMMUNITY1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_snmp_server_vrf_host.test", "unencrypted_strings.0.version_v3_security_level", "auth"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxrSNMPServerVRFHostConfig_minimum(),
			},
			{
				Config: testAccIosxrSNMPServerVRFHostConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:  "iosxr_snmp_server_vrf_host.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XR-um-snmp-server-cfg:/snmp-server/vrfs/vrf[vrf-name=VRF1]/hosts/host[address=11.11.11.11]",
			},
		},
	})
}

func testAccIosxrSNMPServerVRFHostConfig_minimum() string {
	config := `resource "iosxr_snmp_server_vrf_host" "test" {` + "\n"
	config += `	vrf_name = "VRF1"` + "\n"
	config += `	address = "11.11.11.11"` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrSNMPServerVRFHostConfig_all() string {
	config := `resource "iosxr_snmp_server_vrf_host" "test" {` + "\n"
	config += `	vrf_name = "VRF1"` + "\n"
	config += `	address = "11.11.11.11"` + "\n"
	config += `	unencrypted_strings = [{` + "\n"
	config += `		community_string = "COMMUNITY1"` + "\n"
	config += `		version_v3_security_level = "auth"` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"
	return config
}
