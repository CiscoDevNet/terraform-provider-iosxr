// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrSSH(t *testing.T) {
	if os.Getenv("SSH") == "" {
		t.Skip("skipping test, set environment variable SSH")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ssh.test", "server_dscp", "48"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ssh.test", "server_logging", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ssh.test", "server_rate_limit", "60"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ssh.test", "server_session_limit", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ssh.test", "server_v2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ssh.test", "server_vrfs.0.vrf_name", "VRF1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ssh.test", "server_vrfs.0.ipv4_access_list", "ACL1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_ssh.test", "server_vrfs.0.ipv6_access_list", "ACL2"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrSSHConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrSSHConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:  "iosxr_ssh.test",
		ImportState:   true,
		ImportStateId: "",
		Check:         resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

func testAccIosxrSSHConfig_minimum() string {
	config := `resource "iosxr_ssh" "test" {` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrSSHConfig_all() string {
	config := `resource "iosxr_ssh" "test" {` + "\n"
	config += `	server_dscp = 48` + "\n"
	config += `	server_logging = true` + "\n"
	config += `	server_rate_limit = 60` + "\n"
	config += `	server_session_limit = 10` + "\n"
	config += `	server_v2 = true` + "\n"
	config += `	server_vrfs = [{` + "\n"
	config += `		vrf_name = "VRF1"` + "\n"
	config += `		ipv4_access_list = "ACL1"` + "\n"
	config += `		ipv6_access_list = "ACL2"` + "\n"
	config += `		}]` + "\n"
	config += `}` + "\n"
	return config
}
