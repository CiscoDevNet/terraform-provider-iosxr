// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxrTelnet(t *testing.T) {
	if os.Getenv("NCS") == "" && os.Getenv("XRV9K") == "" && os.Getenv("C8000") == "" {
		t.Skip("skipping test, set environment variable NCS or XRV9K or C8000")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "ipv4_client_source_interface", "GigabitEthernet0/0/0/1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "ipv6_client_source_interface", "GigabitEthernet0/0/0/1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "vrfs.0.vrf_name", "ROI"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "vrfs.0.ipv4_server_max_servers", "32"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "vrfs.0.ipv4_server_access_list", "ACCESS1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "vrfs.0.ipv6_server_max_servers", "34"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "vrfs.0.ipv6_server_access_list", "ACCESS11"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "vrfs_dscp.0.vrf_name", "TOI"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_telnet.test", "vrfs_dscp.0.ipv4_dscp", "55"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrTelnetConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrTelnetConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:      "iosxr_telnet.test",
		ImportState:       true,
		ImportStateIdFunc: iosxrTelnetImportStateIdFunc("iosxr_telnet.test"),
		Check:             resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxrTelnetImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {

		return fmt.Sprintf(""), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxrTelnetConfig_minimum() string {
	config := `resource "iosxr_telnet" "test" {` + "\n"
	config += `	ipv4_client_source_interface = "GigabitEthernet0/0/0/1"` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxrTelnetConfig_all() string {
	config := `resource "iosxr_telnet" "test" {` + "\n"
	config += `	ipv4_client_source_interface = "GigabitEthernet0/0/0/1"` + "\n"
	config += `	ipv6_client_source_interface = "GigabitEthernet0/0/0/1"` + "\n"
	config += `	vrfs = [{` + "\n"
	config += `		vrf_name = "ROI"` + "\n"
	config += `		ipv4_server_max_servers = 32` + "\n"
	config += `		ipv4_server_access_list = "ACCESS1"` + "\n"
	config += `		ipv6_server_max_servers = 34` + "\n"
	config += `		ipv6_server_access_list = "ACCESS11"` + "\n"
	config += `		}]` + "\n"
	config += `	vrfs_dscp = [{` + "\n"
	config += `		vrf_name = "TOI"` + "\n"
	config += `		ipv4_dscp = 55` + "\n"
	config += `		}]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
