// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxrVRF(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "vrf_name", "VRF4"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "description", "My VRF Description"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "vpn_id", "1000:1000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_policy", "VRF_IMPORT_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_policy", "VRF_EXPORT_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_multicast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_flowspec", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_policy", "VRF_IMPORT_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_policy", "VRF_EXPORT_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_multicast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_flowspec", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "rd_two_byte_as_number", "65001"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "rd_two_byte_as_index", "123"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_two_byte_as_format.0.two_byte_as_number", "65001"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_two_byte_as_format.0.asn2_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_two_byte_as_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_four_byte_as_format.0.four_byte_as_number", "100000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_four_byte_as_format.0.asn4_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_four_byte_as_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_ip_address_format.0.ipv4_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_ip_address_format.0.ipv4_address_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_import_route_target_ip_address_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_two_byte_as_format.0.two_byte_as_number", "65001"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_two_byte_as_format.0.asn2_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_two_byte_as_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_four_byte_as_format.0.four_byte_as_number", "100000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_four_byte_as_format.0.asn4_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_four_byte_as_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_ip_address_format.0.ipv4_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_ip_address_format.0.ipv4_address_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv4_unicast_export_route_target_ip_address_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_two_byte_as_format.0.two_byte_as_number", "65001"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_two_byte_as_format.0.asn2_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_two_byte_as_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_four_byte_as_format.0.four_byte_as_number", "100000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_four_byte_as_format.0.asn4_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_four_byte_as_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_ip_address_format.0.ipv4_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_ip_address_format.0.ipv4_address_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_import_route_target_ip_address_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_two_byte_as_format.0.two_byte_as_number", "65001"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_two_byte_as_format.0.asn2_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_two_byte_as_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_four_byte_as_format.0.four_byte_as_number", "100000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_four_byte_as_format.0.asn4_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_four_byte_as_format.0.stitching", "enable"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_ip_address_format.0.ipv4_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_ip_address_format.0.ipv4_address_index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "ipv6_unicast_export_route_target_ip_address_format.0.stitching", "enable"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrVRFPrerequisitesConfig + testAccIosxrVRFConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrVRFPrerequisitesConfig + testAccIosxrVRFConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:      "iosxr_vrf.test",
		ImportState:       true,
		ImportStateIdFunc: iosxrVRFImportStateIdFunc("iosxr_vrf.test"),
		Check:             resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxrVRFImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {
		primary := s.RootModule().Resources[resourceName].Primary
		VrfName := primary.Attributes["vrf_name"]

		return fmt.Sprintf("%s", VrfName), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccIosxrVRFPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies/route-policy[route-policy-name=VRF_IMPORT_POLICY_1]"
	attributes = {
		"route-policy-name" = "VRF_IMPORT_POLICY_1"
		"rpl-route-policy" = "route-policy VRF_IMPORT_POLICY_1\n  pass\nend-policy\n"
	}
}

resource "iosxr_gnmi" "PreReq1" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies/route-policy[route-policy-name=VRF_EXPORT_POLICY_1]"
	attributes = {
		"route-policy-name" = "VRF_EXPORT_POLICY_1"
		"rpl-route-policy" = "route-policy VRF_EXPORT_POLICY_1\n  pass\nend-policy\n"
	}
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxrVRFConfig_minimum() string {
	config := `resource "iosxr_vrf" "test" {` + "\n"
	config += `	vrf_name = "VRF4"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxrVRFConfig_all() string {
	config := `resource "iosxr_vrf" "test" {` + "\n"
	config += `	vrf_name = "VRF4"` + "\n"
	config += `	description = "My VRF Description"` + "\n"
	config += `	vpn_id = "1000:1000"` + "\n"
	config += `	ipv4_unicast = true` + "\n"
	config += `	ipv4_unicast_import_route_policy = "VRF_IMPORT_POLICY_1"` + "\n"
	config += `	ipv4_unicast_export_route_policy = "VRF_EXPORT_POLICY_1"` + "\n"
	config += `	ipv4_multicast = true` + "\n"
	config += `	ipv4_flowspec = true` + "\n"
	config += `	ipv6_unicast = true` + "\n"
	config += `	ipv6_unicast_import_route_policy = "VRF_IMPORT_POLICY_1"` + "\n"
	config += `	ipv6_unicast_export_route_policy = "VRF_EXPORT_POLICY_1"` + "\n"
	config += `	ipv6_multicast = true` + "\n"
	config += `	ipv6_flowspec = true` + "\n"
	config += `	rd_two_byte_as_number = "65001"` + "\n"
	config += `	rd_two_byte_as_index = 123` + "\n"
	config += `	ipv4_unicast_import_route_target_two_byte_as_format = [{` + "\n"
	config += `		two_byte_as_number = 65001` + "\n"
	config += `		asn2_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv4_unicast_import_route_target_four_byte_as_format = [{` + "\n"
	config += `		four_byte_as_number = 100000` + "\n"
	config += `		asn4_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv4_unicast_import_route_target_ip_address_format = [{` + "\n"
	config += `		ipv4_address = "1.1.1.1"` + "\n"
	config += `		ipv4_address_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv4_unicast_export_route_target_two_byte_as_format = [{` + "\n"
	config += `		two_byte_as_number = 65001` + "\n"
	config += `		asn2_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv4_unicast_export_route_target_four_byte_as_format = [{` + "\n"
	config += `		four_byte_as_number = 100000` + "\n"
	config += `		asn4_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv4_unicast_export_route_target_ip_address_format = [{` + "\n"
	config += `		ipv4_address = "1.1.1.1"` + "\n"
	config += `		ipv4_address_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv6_unicast_import_route_target_two_byte_as_format = [{` + "\n"
	config += `		two_byte_as_number = 65001` + "\n"
	config += `		asn2_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv6_unicast_import_route_target_four_byte_as_format = [{` + "\n"
	config += `		four_byte_as_number = 100000` + "\n"
	config += `		asn4_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv6_unicast_import_route_target_ip_address_format = [{` + "\n"
	config += `		ipv4_address = "1.1.1.1"` + "\n"
	config += `		ipv4_address_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv6_unicast_export_route_target_two_byte_as_format = [{` + "\n"
	config += `		two_byte_as_number = 65001` + "\n"
	config += `		asn2_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv6_unicast_export_route_target_four_byte_as_format = [{` + "\n"
	config += `		four_byte_as_number = 100000` + "\n"
	config += `		asn4_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	ipv6_unicast_export_route_target_ip_address_format = [{` + "\n"
	config += `		ipv4_address = "1.1.1.1"` + "\n"
	config += `		ipv4_address_index = 1` + "\n"
	config += `		stitching = "enable"` + "\n"
	config += `		}]` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, iosxr_gnmi.PreReq1, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
