// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxrVRF(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "vrf_name", "VRF3"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "description", "My VRF Description"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "vpn_id", "1000:1000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_multicast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_flowspec", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_policy", "ROUTE_POLICY_1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_multicast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_flowspec", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "rd_two_byte_as_as_number", "123"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "rd_two_byte_as_index", "123"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_two_byte_as_format.0.as_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_two_byte_as_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_two_byte_as_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_four_byte_as_format.0.as_number", "100000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_four_byte_as_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_four_byte_as_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_ip_address_format.0.ip_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_ip_address_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_import_route_target_ip_address_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_two_byte_as_format.0.as_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_two_byte_as_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_two_byte_as_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_four_byte_as_format.0.as_number", "100000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_four_byte_as_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_four_byte_as_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_ip_address_format.0.ip_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_ip_address_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv4_unicast_export_route_target_ip_address_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_two_byte_as_format.0.as_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_two_byte_as_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_two_byte_as_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_four_byte_as_format.0.as_number", "100000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_four_byte_as_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_four_byte_as_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_ip_address_format.0.ip_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_ip_address_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_import_route_target_ip_address_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_two_byte_as_format.0.as_number", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_two_byte_as_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_two_byte_as_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_four_byte_as_format.0.as_number", "100000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_four_byte_as_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_four_byte_as_format.0.stitching", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_ip_address_format.0.ip_address", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_ip_address_format.0.index", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxr_vrf.test", "address_family_ipv6_unicast_export_route_target_ip_address_format.0.stitching", "true"))
	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIosxrVRFPrerequisitesConfig + testAccIosxrVRFConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIosxrVRFPrerequisitesConfig + testAccIosxrVRFConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName:  "iosxr_vrf.test",
		ImportState:   true,
		ImportStateId: "VRF3",
		Check:         resource.ComposeTestCheckFunc(checks...),
	})
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

const testAccIosxrVRFPrerequisitesConfig = `
resource "iosxr_gnmi" "PreReq0" {
	path = "Cisco-IOS-XR-um-route-policy-cfg:/routing-policy/route-policies/route-policy[route-policy-name=ROUTE_POLICY_1]"
	attributes = {
		"route-policy-name" = "ROUTE_POLICY_1"
		"rpl-route-policy" = "route-policy ROUTE_POLICY_1\n  pass\nend-policy\n"
	}
}

`

func testAccIosxrVRFConfig_minimum() string {
	config := `resource "iosxr_vrf" "test" {` + "\n"
	config += `	vrf_name = "VRF3"` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxrVRFConfig_all() string {
	config := `resource "iosxr_vrf" "test" {` + "\n"
	config += `	vrf_name = "VRF3"` + "\n"
	config += `	description = "My VRF Description"` + "\n"
	config += `	vpn_id = "1000:1000"` + "\n"
	config += `	address_family_ipv4_unicast = true` + "\n"
	config += `	address_family_ipv4_unicast_import_route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `	address_family_ipv4_unicast_export_route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `	address_family_ipv4_multicast = true` + "\n"
	config += `	address_family_ipv4_flowspec = true` + "\n"
	config += `	address_family_ipv6_unicast = true` + "\n"
	config += `	address_family_ipv6_unicast_import_route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `	address_family_ipv6_unicast_export_route_policy = "ROUTE_POLICY_1"` + "\n"
	config += `	address_family_ipv6_multicast = true` + "\n"
	config += `	address_family_ipv6_flowspec = true` + "\n"
	config += `	rd_two_byte_as_as_number = "123"` + "\n"
	config += `	rd_two_byte_as_index = 123` + "\n"
	config += `	address_family_ipv4_unicast_import_route_target_two_byte_as_format = [{` + "\n"
	config += `		as_number = 1` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv4_unicast_import_route_target_four_byte_as_format = [{` + "\n"
	config += `		as_number = 100000` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv4_unicast_import_route_target_ip_address_format = [{` + "\n"
	config += `		ip_address = "1.1.1.1"` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv4_unicast_export_route_target_two_byte_as_format = [{` + "\n"
	config += `		as_number = 1` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv4_unicast_export_route_target_four_byte_as_format = [{` + "\n"
	config += `		as_number = 100000` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv4_unicast_export_route_target_ip_address_format = [{` + "\n"
	config += `		ip_address = "1.1.1.1"` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv6_unicast_import_route_target_two_byte_as_format = [{` + "\n"
	config += `		as_number = 1` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv6_unicast_import_route_target_four_byte_as_format = [{` + "\n"
	config += `		as_number = 100000` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv6_unicast_import_route_target_ip_address_format = [{` + "\n"
	config += `		ip_address = "1.1.1.1"` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv6_unicast_export_route_target_two_byte_as_format = [{` + "\n"
	config += `		as_number = 1` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv6_unicast_export_route_target_four_byte_as_format = [{` + "\n"
	config += `		as_number = 100000` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	address_family_ipv6_unicast_export_route_target_ip_address_format = [{` + "\n"
	config += `		ip_address = "1.1.1.1"` + "\n"
	config += `		index = 1` + "\n"
	config += `		stitching = true` + "\n"
	config += `		}]` + "\n"
	config += `	depends_on = [iosxr_gnmi.PreReq0, ]` + "\n"
	config += `}` + "\n"
	return config
}
